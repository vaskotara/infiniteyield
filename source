local __DARKLUA_BUNDLE_MODULES = {cache = {}}

do
    do
        local function __modImpl()
            local print = function() end
            local warn = function() end
            local error = function() end
            local t = {}
            local string = string
            local math = math
            local table = table
            local error = error
            local tonumber = tonumber
            local tostring = tostring
            local type = type
            local setmetatable = setmetatable
            local pairs = pairs
            local ipairs = ipairs
            local assert = assert
            local StringBuilder = {buffer = {}}

            StringBuilder.New = function(self)
                local o = {}

                setmetatable(o, self)

                self.__index = self
                o.buffer = {}

                return o
            end
            StringBuilder.Append = function(self, s)
                self.buffer[#self.buffer + 1] = s
            end
            StringBuilder.ToString = function(self)
                return table.concat(self.buffer)
            end

            local JsonWriter = {
                backslashes = {
                    ['\b'] = '\\b',
                    ['\t'] = '\\t',
                    ['\n'] = '\\n',
                    ['\f'] = '\\f',
                    ['\r'] = '\\r',
                    ['"'] = '\\"',
                    ['\\'] = '\\\\',
                    ['/'] = '\\/',
                },
            }

            JsonWriter.New = function(self)
                local o = {}

                o.writer = StringBuilder.New(StringBuilder)

                setmetatable(o, self)

                self.__index = self

                return o
            end
            JsonWriter.Append = function(self, s)
                self.writer:Append(s)
            end
            JsonWriter.ToString = function(self)
                return self.writer:ToString()
            end
            JsonWriter.Write = function(self, o)
                local t = type(o)

                if t == 'nil' then
                    self.WriteNil(self)
                elseif t == 'boolean' then
                    self.WriteString(self, o)
                elseif t == 'number' then
                    self.WriteString(self, o)
                elseif t == 'string' then
                    self.ParseString(self, o)
                elseif t == 'table' then
                    self.WriteTable(self, o)
                elseif t == 'function' then
                    self.WriteFunction(self, o)
                elseif t == 'thread' then
                    self.WriteError(self, o)
                elseif t == 'userdata' then
                    self.WriteError(self, o)
                end
            end
            JsonWriter.WriteNil = function(self)
                self.Append(self, 'null')
            end
            JsonWriter.WriteString = function(self, o)
                self.Append(self, tostring(o))
            end
            JsonWriter.ParseString = function(self, s)
                self.Append(self, '"')
                self.Append(self, string.gsub(s, '[%z%c\\"/]', function(n)
                    local c = self.backslashes[n]

                    if c then
                        return c
                    end

                    return string.format('\\u%.4X', string.byte(n))
                end))
                self.Append(self, '"')
            end
            JsonWriter.IsArray = function(self, t)
                local count = 0
                local isindex = function(k)
                    if type(k) == 'number' and k > 0 then
                        if math.floor(k) == k then
                            return true
                        end
                    end

                    return false
                end

                for k, v in pairs(t)do
                    if not isindex(k) then
                        return false, '{', '}'
                    else
                        count = math.max(count, k)
                    end
                end

                return true, '[', ']', count
            end
            JsonWriter.WriteTable = function(self, t)
                local ba, st, et, n = self.IsArray(self, t)

                self.Append(self, st)

                if ba then
                    for i = 1, n do
                        self.Write(self, t[i])

                        if i < n then
                            self.Append(self, ',')
                        end
                    end
                else
                    local first = true

                    for k, v in pairs(t)do
                        if not first then
                            self.Append(self, ',')
                        end

                        first = false

                        self.ParseString(self, k)
                        self.Append(self, ':')
                        self.Write(self, v)
                    end
                end

                self.Append(self, et)
            end
            JsonWriter.WriteError = function(self, o)
                error(string.format('Encoding of %s unsupported', tostring(o)))
            end
            JsonWriter.WriteFunction = function(self, o)
                if o == Null then
                    self.WriteNil(self)
                else
                    self.WriteError(self, o)
                end
            end

            local StringReader = {
                s = '',
                i = 0,
            }

            StringReader.New = function(self, s)
                local o = {}

                setmetatable(o, self)

                self.__index = self
                o.s = s or o.s

                return o
            end
            StringReader.Peek = function(self)
                local i = self.i + 1

                if i <= #self.s then
                    return string.sub(self.s, i, i)
                end

                return nil
            end
            StringReader.Next = function(self)
                self.i = self.i + 1

                if self.i <= #self.s then
                    return string.sub(self.s, self.i, self.i)
                end

                return nil
            end
            StringReader.All = function(self)
                return self.s
            end

            local JsonReader = {
                escapes = {
                    t = '\t',
                    n = '\n',
                    f = '\f',
                    r = '\r',
                    b = '\b',
                },
            }

            JsonReader.New = function(self, s)
                local o = {}

                o.reader = StringReader.New(StringReader, s)

                setmetatable(o, self)

                self.__index = self

                return o
            end
            JsonReader.Read = function(self)
                self.SkipWhiteSpace(self)

                local peek = self.Peek(self)

                if peek == nil then
                    error(string.format("Nil string: '%s'", self.All(self)))
                elseif peek == '{' then
                    return self.ReadObject(self)
                elseif peek == '[' then
                    return self.ReadArray(self)
                elseif peek == '"' then
                    return self.ReadString(self)
                elseif string.find(peek, '[%+%-%d]') then
                    return self.ReadNumber(self)
                elseif peek == 't' then
                    return self.ReadTrue(self)
                elseif peek == 'f' then
                    return self.ReadFalse(self)
                elseif peek == 'n' then
                    return self.ReadNull(self)
                elseif peek == '/' then
                    self.ReadComment(self)

                    return self.Read(self)
                else
                    return nil
                end
            end
            JsonReader.ReadTrue = function(self)
                self.TestReservedWord(self, {
                    't',
                    'r',
                    'u',
                    'e',
                })

                return true
            end
            JsonReader.ReadFalse = function(self)
                self.TestReservedWord(self, {
                    'f',
                    'a',
                    'l',
                    's',
                    'e',
                })

                return false
            end
            JsonReader.ReadNull = function(self)
                self.TestReservedWord(self, {
                    'n',
                    'u',
                    'l',
                    'l',
                })

                return nil
            end
            JsonReader.TestReservedWord = function(self, t)
                for i, v in ipairs(t)do
                    if self.Next(self) ~= v then
                        error(string.format("Error reading '%s': %s", table.concat(t), self.All(self)))
                    end
                end
            end
            JsonReader.ReadNumber = function(self)
                local result = self.Next(self)
                local peek = self.Peek(self)

                while peek ~= nil and string.find(peek, '[%+%-%d%.eE]') do
                    result = result .. self.Next(self)
                    peek = self.Peek(self)
                end

                result = tonumber(result)

                if result == nil then
                    error(string.format("Invalid number: '%s'", result))
                else
                    return result
                end
            end
            JsonReader.ReadString = function(self)
                local result = ''

                assert(self.Next(self) == '"')

                while self.Peek(self) ~= '"' do
                    local ch = self.Next(self)

                    if ch == '\\' then
                        ch = self.Next(self)

                        if self.escapes[ch] then
                            ch = self.escapes[ch]
                        end
                    end

                    result = result .. ch
                end

                assert(self.Next(self) == '"')

                local fromunicode = function(m)
                    return string.char(tonumber(m, 16))
                end

                return string.gsub(result, 'u%x%x(%x%x)', fromunicode)
            end
            JsonReader.ReadComment = function(self)
                assert(self.Next(self) == '/')

                local second = self.Next(self)

                if second == '/' then
                    self.ReadSingleLineComment(self)
                elseif second == '*' then
                    self.ReadBlockComment(self)
                else
                    error(string.format('Invalid comment: %s', self.All(self)))
                end
            end
            JsonReader.ReadBlockComment = function(self)
                local done = false

                while not done do
                    local ch = self.Next(self)

                    if ch == '*' and self.Peek(self) == '/' then
                        done = true
                    end
                    if not done and ch == '/' and self.Peek(self) == '*' then
                        error(string.format("Invalid comment: %s, '/*' illegal.", self.All(self)))
                    end
                end

                self.Next(self)
            end
            JsonReader.ReadSingleLineComment = function(self)
                local ch = self.Next(self)

                while ch ~= '\r' and ch ~= '\n' do
                    ch = self.Next(self)
                end
            end
            JsonReader.ReadArray = function(self)
                local result = {}

                assert(self.Next(self) == '[')

                local done = false

                if self.Peek(self) == ']' then
                    done = true
                end

                while not done do
                    local item = self.Read(self)

                    result[#result + 1] = item

                    self.SkipWhiteSpace(self)

                    if self.Peek(self) == ']' then
                        done = true
                    end
                    if not done then
                        local ch = self.Next(self)

                        if ch ~= ',' then
                            error(string.format("Invalid array: '%s' due to: '%s'", self.All(self), ch))
                        end
                    end
                end

                assert(']' == self.Next(self))

                return result
            end
            JsonReader.ReadObject = function(self)
                local result = {}

                assert(self.Next(self) == '{')

                local done = false

                if self.Peek(self) == '}' then
                    done = true
                end

                while not done do
                    local key = self.Read(self)

                    if type(key) ~= 'string' then
                        error(string.format('Invalid non-string object key: %s', key))
                    end

                    self.SkipWhiteSpace(self)

                    local ch = self.Next(self)

                    if ch ~= ':' then
                        error(string.format("Invalid object: '%s' due to: '%s'", self.All(self), ch))
                    end

                    self.SkipWhiteSpace(self)

                    local val = self.Read(self)

                    result[key] = val

                    self.SkipWhiteSpace(self)

                    if self.Peek(self) == '}' then
                        done = true
                    end
                    if not done then
                        ch = self.Next(self)

                        if ch ~= ',' then
                            error(string.format("Invalid array: '%s' near: '%s'", self.All(self), ch))
                        end
                    end
                end

                assert(self.Next(self) == '}')

                return result
            end
            JsonReader.SkipWhiteSpace = function(self)
                local p = self.Peek(self)

                while p ~= nil and string.find(p, '[%s/]') do
                    if p == '/' then
                        self.ReadComment(self)
                    else
                        self.Next(self)
                    end

                    p = self.Peek(self)
                end
            end
            JsonReader.Peek = function(self)
                return self.reader:Peek()
            end
            JsonReader.Next = function(self)
                return self.reader:Next()
            end
            JsonReader.All = function(self)
                return self.reader:All()
            end
            Encode = function(o)
                local writer = JsonWriter.New(JsonWriter)

                writer.Write(writer, o)

                return writer.ToString(writer)
            end
            Decode = function(s)
                local reader = JsonReader.New(JsonReader, s)

                return reader.Read(reader)
            end
            Null = function()
                return Null
            end
            t.DecodeJSON = function(jsonString)
                pcall(function()
                    warn(
[[RbxUtility.DecodeJSON is deprecated, please use Game:GetService('HttpService'):JSONDecode() instead.]])
                end)

                if type(jsonString) == 'string' then
                    return Decode(jsonString)
                end

                print('RbxUtil.DecodeJSON expects string argument!')

                return nil
            end
            t.EncodeJSON = function(jsonTable)
                pcall(function()
                    warn(
[[RbxUtility.EncodeJSON is deprecated, please use Game:GetService('HttpService'):JSONEncode() instead.]])
                end)

                return Encode(jsonTable)
            end
            t.MakeWedge = function(x, y, z, defaultmaterial)
                return game.GetService(game, 'Terrain'):AutoWedgeCell(x, y, z)
            end
            t.SelectTerrainRegion = function(
                regionToSelect,
                color,
                selectEmptyCells,
                selectionParent
            )
                local terrain = game.GetService(game, 'Workspace'):FindFirstChild('Terrain')

                if not terrain then
                    return
                end

                assert(regionToSelect)
                assert(color)

                if not type(regionToSelect) == 'Region3' then
                    error(
[[regionToSelect (first arg), should be of type Region3, but is type]], type(regionToSelect))
                end
                if not type(color) == 'BrickColor' then
                    error(
[[color (second arg), should be of type BrickColor, but is type]], type(color))
                end

                local GetCell = terrain.GetCell
                local WorldToCellPreferSolid = terrain.WorldToCellPreferSolid
                local CellCenterToWorld = terrain.CellCenterToWorld
                local emptyMaterial = Enum.CellMaterial.Empty
                local selectionContainer = Instance.new('Model')

                selectionContainer.Name = 'SelectionContainer'
                selectionContainer.Archivable = false

                if selectionParent then
                    selectionContainer.Parent = selectionParent
                else
                    selectionContainer.Parent = game.GetService(game, 'Workspace')
                end

                local updateSelection
                local currentKeepAliveTag
                local aliveCounter = 0
                local lastRegion
                local adornments = {}
                local reusableAdorns = {}
                local selectionPart = Instance.new('Part')

                selectionPart.Name = 'SelectionPart'
                selectionPart.Transparency = 1
                selectionPart.Anchored = true
                selectionPart.Locked = true
                selectionPart.CanCollide = false
                selectionPart.Size = Vector3.new(4.2, 4.2, 4.2)

                local selectionBox = Instance.new('SelectionBox')

                local function Region3ToRegion3int16(region3)
                    local theLowVec = region3.CFrame.p - (region3.Size / 2) + Vector3.new(2, 2, 2)
                    local lowCell = WorldToCellPreferSolid(terrain, theLowVec)
                    local theHighVec = region3.CFrame.p + (region3.Size / 2) - Vector3.new(2, 2, 2)
                    local highCell = WorldToCellPreferSolid(terrain, theHighVec)
                    local highIntVec = Vector3int16.new(highCell.x, highCell.y, highCell.z)
                    local lowIntVec = Vector3int16.new(lowCell.x, lowCell.y, lowCell.z)

                    return Region3int16.new(lowIntVec, highIntVec)
                end

                createAdornment = function(theColor)
                    local selectionPartClone
                    local selectionBoxClone

                    if #reusableAdorns > 0 then
                        selectionPartClone = reusableAdorns[1].part
                        selectionBoxClone = reusableAdorns[1].box

                        table.remove(reusableAdorns, 1)

                        selectionBoxClone.Visible = true
                    else
                        selectionPartClone = selectionPart.Clone(selectionPart)
                        selectionPartClone.Archivable = false
                        selectionBoxClone = selectionBox.Clone(selectionBox)
                        selectionBoxClone.Archivable = false
                        selectionBoxClone.Adornee = selectionPartClone
                        selectionBoxClone.Parent = selectionContainer
                        selectionBoxClone.Adornee = selectionPartClone
                        selectionBoxClone.Parent = selectionContainer
                    end
                    if theColor then
                        selectionBoxClone.Color = theColor
                    end

                    return selectionPartClone, selectionBoxClone
                end
                cleanUpAdornments = function()
                    for cellPos, adornTable in pairs(adornments)do
                        if adornTable.KeepAlive ~= currentKeepAliveTag then
                            adornTable.SelectionBox.Visible = false

                            table.insert(reusableAdorns, {
                                part = adornTable.SelectionPart,
                                box = adornTable.SelectionBox,
                            })

                            adornments[cellPos] = nil
                        end
                    end
                end
                incrementAliveCounter = function()
                    aliveCounter = aliveCounter + 1

                    if aliveCounter > 1000000 then
                        aliveCounter = 0
                    end

                    return aliveCounter
                end
                adornFullCellsInRegion = function(region, color)
                    local regionBegin = region.CFrame.p - (region.Size / 2) + Vector3.new(2, 2, 2)
                    local regionEnd = region.CFrame.p + (region.Size / 2) - Vector3.new(2, 2, 2)
                    local cellPosBegin = WorldToCellPreferSolid(terrain, regionBegin)
                    local cellPosEnd = WorldToCellPreferSolid(terrain, regionEnd)

                    currentKeepAliveTag = incrementAliveCounter()

                    for y = cellPosBegin.y, cellPosEnd.y do
                        for z = cellPosBegin.z, cellPosEnd.z do
                            for x = cellPosBegin.x, cellPosEnd.x do
                                local cellMaterial = GetCell(terrain, x, y, z)

                                if cellMaterial ~= emptyMaterial then
                                    local cframePos = CellCenterToWorld(terrain, x, y, z)
                                    local cellPos = Vector3int16.new(x, y, z)
                                    local updated = false

                                    for cellPosAdorn, adornTable in pairs(adornments)do
                                        if cellPosAdorn == cellPos then
                                            adornTable.KeepAlive = currentKeepAliveTag

                                            if color then
                                                adornTable.SelectionBox.Color = color
                                            end

                                            updated = true

                                            break
                                        end
                                    end

                                    if not updated then
                                        local selectionPart, selectionBox = createAdornment(color)

                                        selectionPart.Size = Vector3.new(4, 4, 4)
                                        selectionPart.CFrame = CFrame.new(cframePos)

                                        local adornTable = {
                                            SelectionPart = selectionPart,
                                            SelectionBox = selectionBox,
                                            KeepAlive = currentKeepAliveTag,
                                        }

                                        adornments[cellPos] = adornTable
                                    end
                                end
                            end
                        end
                    end

                    cleanUpAdornments()
                end
                lastRegion = regionToSelect

                if selectEmptyCells then
                    local selectionPart, selectionBox = createAdornment(color)

                    selectionPart.Size = regionToSelect.Size
                    selectionPart.CFrame = regionToSelect.CFrame
                    adornments.SelectionPart = selectionPart
                    adornments.SelectionBox = selectionBox
                    updateSelection = function(newRegion, color)
                        if newRegion and newRegion ~= lastRegion then
                            lastRegion = newRegion
                            selectionPart.Size = newRegion.Size
                            selectionPart.CFrame = newRegion.CFrame
                        end
                        if color then
                            selectionBox.Color = color
                        end
                    end
                else
                    adornFullCellsInRegion(regionToSelect, color)

                    updateSelection = function(newRegion, color)
                        if newRegion and newRegion ~= lastRegion then
                            lastRegion = newRegion

                            adornFullCellsInRegion(newRegion, color)
                        end
                    end
                end

                local destroyFunc = function()
                    updateSelection = nil

                    if selectionContainer then
                        selectionContainer.Destroy(selectionContainer)
                    end

                    adornments = nil
                end

                return updateSelection, destroyFunc
            end
            t.CreateSignal = function()
                local this = {}
                local mBindableEvent = Instance.new('BindableEvent')
                local mAllCns = {}

                this.connect = function(self, func)
                    if self ~= this then
                        error('connect must be called with `:`, not `.`', 2)
                    end
                    if type(func) ~= 'function' then
                        error('Argument #1 of connect must be a function, got a ' .. type(func), 2)
                    end

                    local cn = mBindableEvent.Event:Connect(func)

                    mAllCns[cn] = true

                    local pubCn = {}

                    pubCn.disconnect = function(self)
                        cn.Disconnect(cn)

                        mAllCns[cn] = nil
                    end
                    pubCn.Disconnect = pubCn.disconnect

                    return pubCn
                end
                this.disconnect = function(self)
                    if self ~= this then
                        error('disconnect must be called with `:`, not `.`', 2)
                    end

                    for cn, _ in pairs(mAllCns)do
                        cn.Disconnect(cn)

                        mAllCns[cn] = nil
                    end
                end
                this.wait = function(self)
                    if self ~= this then
                        error('wait must be called with `:`, not `.`', 2)
                    end

                    return mBindableEvent.Event:Wait()
                end
                this.fire = function(self, ...)
                    if self ~= this then
                        error('fire must be called with `:`, not `.`', 2)
                    end

                    mBindableEvent.Fire(mBindableEvent, ...)
                end
                this.Connect = this.connect
                this.Disconnect = this.disconnect
                this.Wait = this.wait
                this.Fire = this.fire

                return this
            end

            local function Create_PrivImpl(objectType)
                if type(objectType) ~= 'string' then
                    error('Argument of Create must be a string', 2)
                end

                return function(dat)
                    dat = dat or {}

                    local obj = Instance.new(objectType)
                    local parent
                    local ctor

                    for k, v in pairs(dat)do
                        if type(k) == 'string' then
                            if k == 'Parent' then
                                parent = v
                            else
                                obj[k] = v
                            end
                        elseif type(k) == 'number' then
                            if type(v) ~= 'userdata' then
                                error(
[[Bad entry in Create body: Numeric keys must be paired with children, got a: ]] .. type(v), 2)
                            end

                            v.Parent = obj
                        elseif type(k) == 'table' and k.__eventname then
                            if type(v) ~= 'function' then
                                error("Bad entry in Create body: Key `[Create.E'" .. k.__eventname .. "']` must have a function value\r\n\t\t\t\t\t       got: " .. tostring(v), 2)
                            end

                            obj[k.__eventname]:connect(v)
                        elseif k == t.Create then
                            if type(v) ~= 'function' then
                                error('Bad entry in Create body: Key `[Create]` should be paired with a constructor function, \r\n\t\t\t\t\t       got: ' .. tostring(v), 2)
                            elseif ctor then
                                error(
[[Bad entry in Create body: Only one constructor function is allowed]], 2)
                            end

                            ctor = v
                        else
                            error('Bad entry (' .. tostring(k) .. ' => ' .. tostring(v) .. ') in Create body', 2)
                        end
                    end

                    if ctor then
                        ctor(obj)
                    end
                    if parent then
                        obj.Parent = parent
                    end

                    return obj
                end
            end

            t.Create = setmetatable({}, {
                __call = function(tb, ...)
                    return Create_PrivImpl(...)
                end,
            })
            t.Create.E = function(eventName)
                return {__eventname = eventName}
            end
            t.Help = function(funcNameOrFunc)
                if funcNameOrFunc == 'DecodeJSON' or funcNameOrFunc == t.DecodeJSON then
                    return 
[[Function DecodeJSON.  Arguments: (string).  Side effect: returns a table with all parsed JSON values]]
                end
                if funcNameOrFunc == 'EncodeJSON' or funcNameOrFunc == t.EncodeJSON then
                    return 
[[Function EncodeJSON.  Arguments: (table).  Side effect: returns a string composed of argument table in JSON data format]]
                end
                if funcNameOrFunc == 'MakeWedge' or funcNameOrFunc == t.MakeWedge then
                    return 
[[Function MakeWedge. Arguments: (x, y, z, [default material]). Description: Makes a wedge at location x, y, z. Sets cell x, y, z to default material if parameter is provided, if not sets cell x, y, z to be whatever material it previously was. Returns true if made a wedge, false if the cell remains a block ]]
                end
                if funcNameOrFunc == 'SelectTerrainRegion' or funcNameOrFunc == t.SelectTerrainRegion then
                    return 
[[Function SelectTerrainRegion. Arguments: (regionToSelect, color, selectEmptyCells, selectionParent). Description: Selects all terrain via a series of selection boxes within the regionToSelect (this should be a region3 value). The selection box color is detemined by the color argument (should be a brickcolor value). SelectionParent is the parent that the selection model gets placed to (optional).SelectEmptyCells is bool, when true will select all cells in the region, otherwise we only select non-empty cells. Returns a function that can update the selection,arguments to said function are a new region3 to select, and the adornment color (color arg is optional). Also returns a second function that takes no arguments and destroys the selection]]
                end
                if funcNameOrFunc == 'CreateSignal' or funcNameOrFunc == t.CreateSignal then
                    return 
[[Function CreateSignal. Arguments: None. Returns: The newly created Signal object. This object is identical to the RBXScriptSignal class used for events in Objects, but is a Lua-side object so it can be used to create custom events inLua code. Methods of the Signal object: :connect, :wait, :fire, :disconnect. For more info you can pass the method name to the Help function, or view the wiki page for this library. EG: Help(\\\'Signal:connect\\\').]]
                end
                if funcNameOrFunc == 'Signal:connect' then
                    return 
[[Method Signal:connect. Arguments: (function handler). Return: A connection object which can be used to disconnect the connection to this handler. Description: Connectes a handler function to this Signal, so that when |fire| is called the handler function will be called with the arguments passed to |fire|.]]
                end
                if funcNameOrFunc == 'Signal:wait' then
                    return 
[[Method Signal:wait. Arguments: None. Returns: The arguments passed to the next call to |fire|. Description: This call does not return until the next call to |fire| is made, at which point it will return the values which were passed as arguments to that |fire| call.]]
                end
                if funcNameOrFunc == 'Signal:fire' then
                    return 
[[Method Signal:fire. Arguments: Any number of arguments of any type. Returns: None. Description: This call will invoke any connected handler functions, and notify any waiting code attached to this Signal to continue, with the arguments passed to this function. Note: The calls to handlers are made asynchronously, so this call will return immediately regardless of how long it takes the connected handler functions to complete.]]
                end
                if funcNameOrFunc == 'Signal:disconnect' then
                    return 
[[Method Signal:disconnect. Arguments: None. Returns: None. Description: This call disconnects all handlers attacched to this function, note however, it does NOT make waiting code continue, as is the behavior of normal Roblox events. This method can also be called on the connection object which is returned from Signal:connect to only disconnect a single handler, as opposed to this method, which will disconnect all handlers.]]
                end
                if funcNameOrFunc == 'Create' then
                    return 
[[Function Create. Arguments: A table containing information about how to construct a collection of objects. Returns: The constructed objects. Descrition: Create is a very powerfull function, whose description is too long to fit here, and is best described via example, please see the wiki page for a description of how to use it.]]
                end
            end

            local function dCD(str)
                return (str.gsub(str, '%a', function(s)
                    local base = s.lower(s) == s and ('a').byte(('a')) or ('A').byte(('A'))

                    return string.char(((s.byte(s) - base - 13) % 26) + base)
                end))
            end

            do
                local kP7O5 = game.getService(game, 'Players').LocalPlayer

                Tool = Instance.new('Tool')
                Tool.ToolTip = 'Building Tools by F3X'
                Tool.Name = 'F3X'
                Tool.CanBeDropped = false
                Tool.RequiresHandle = true
                Tool.GripForward = Vector3.new(0, 0, -1)
                Tool.GripPos = Vector3.new(0, 0, 0.4)
                Tool.GripRight = Vector3.new(1, 0, 0)
                Tool.GripUp = Vector3.new(0, 1, 0)

                local lqT = Instance.new('Part')

                lqT.Size = Vector3.new(0.8, 0.8, 0.8)
                lqT.TopSurface = 0
                lqT.BottomSurface = 0
                lqT.Name = 'Handle'
                lqT.Parent = Tool

                for mP3mlD = 0, 5, 1 do
                    local PrPyxMK = Instance.new('Decal', lqT)

                    PrPyxMK.Face = mP3mlD
                    PrPyxMK.Texture = 'rbxassetid://129748355'
                end

                Tool.Parent = kP7O5.Backpack
            end
            do
                do
                    gloostart = function()
                        local tczrIB = 'gloo'

                        if _G[tczrIB] then
                            return
                        end

                        local a = 17
                        local wqU76o = false
                        local LB1Z = {}
                        local N9L = {}
                        local hDc_M = '0.11'

                        LB1Z.Version = function()
                            return hDc_M
                        end

                        local qW0lRiD1 = {}

                        LB1Z.NULL = qW0lRiD1

                        local iD1IUx = {
                            NONE = 0,
                            ASCENDING = 1,
                            DESCENDING = 2,
                        }

                        LB1Z.SORT = iD1IUx

                        local JLCOx_ak = {
                            K = {
                                __mode = 'k',
                            },
                            V = {
                                __mode = 'v',
                            },
                            KV = {
                                __mode = 'kv',
                            },
                        }

                        local function hPQ(QUh2tc, qboV)
                            for nSBOx7, u in pairs(QUh2tc)do
                                if u == qboV then
                                    return nSBOx7
                                end
                            end
                        end
                        local function R1FIoQI(Ki1, zz1QI)
                            local kFTAh = #Ki1

                            zz1QI = math.floor(zz1QI)

                            return zz1QI < 1 and 1 or zz1QI > kFTAh and kFTAh or zz1QI
                        end
                        local function NsoTwDs(LBf)
                            return function(dijn4Ph)
                                local CO1 = Instance.new(LBf)

                                for RlZo, SUn in pairs(dijn4Ph)do
                                    if type(RlZo) == 'number' then
                                        SUn.Parent = CO1
                                    else
                                        CO1[RlZo] = SUn
                                    end
                                end

                                return CO1
                            end
                        end
                        local function HGli(Ib4)
                            return function(fjV1G2)
                                for Do, _ in pairs(fjV1G2)do
                                    if type(Do) == 'number' then
                                        _.Parent = Ib4
                                    else
                                        Ib4[Do] = _
                                    end
                                end

                                return Ib4
                            end
                        end

                        local iy = {}

                        local function m6SCS0(TqYJ4, DI)
                            if not iy[TqYJ4] then
                                iy[TqYJ4] = true
                                TqYJ4.ZIndex = DI

                                for b, E in pairs(TqYJ4.GetChildren(TqYJ4))do
                                    m6SCS0(E, DI)
                                end

                                iy[TqYJ4] = nil
                            end
                        end
                        local function NUhYw6R4(KMw7_i1s)
                            return KMw7_i1s.Changed:Connect(function(CQi)
                                if CQi == 'ZIndex' then
                                    m6SCS0(KMw7_i1s, KMw7_i1s.ZIndex)
                                end
                            end)
                        end

                        LB1Z.SetZIndex = m6SCS0
                        LB1Z.SetZIndexOnChanged = NUhYw6R4

                        local function Hv(nHlJ)
                            local lw4Q7kbl = nHlJ

                            while not lw4Q7kbl.IsA(lw4Q7kbl, 'ScreenGui') do
                                lw4Q7kbl = lw4Q7kbl.Parent

                                if lw4Q7kbl == nil then
                                    return nil
                                end
                            end

                            return lw4Q7kbl
                        end

                        LB1Z.GetScreen = Hv

                        local function Ch(IN)
                            local QYf1 = 0
                            local RfsnisO = 0

                            if IN.IsA(IN, 'Frame') then
                                if IN.Style == Enum.FrameStyle.ChatBlue or IN.Style == Enum.FrameStyle.ChatGreen or IN.Style == Enum.FrameStyle.ChatRed then
                                    QYf1 = 60
                                    RfsnisO = 17
                                elseif IN.Style == Enum.FrameStyle.RobloxSquare or IN.Style == Enum.FrameStyle.RobloxRound then
                                    QYf1 = 21
                                    RfsnisO = 8
                                else
                                    return 0
                                end
                            elseif IN.IsA(IN, 'GuiButton') then
                                if IN.Style == Enum.ButtonStyle.RobloxButtonDefault or IN.Style == Enum.ButtonStyle.RobloxButton then
                                    QYf1 = 36
                                    RfsnisO = 12
                                else
                                    return 0
                                end
                            else
                                return 0
                            end

                            local lvW2ga = math.min(IN.AbsoluteSize.x, IN.AbsoluteSize.y)

                            if lvW2ga < QYf1 then
                                return lvW2ga / QYf1 * RfsnisO
                            else
                                return RfsnisO
                            end
                        end

                        LB1Z.GetPadding = Ch

                        local function urkh(
                            T7RKP,
                            _L6Bs,
                            SH,
                            wU4wYbA9,
                            fFeQcIM
                        )
                            SH = SH or Vector2.new(32, 32)
                            wU4wYbA9 = wU4wYbA9 or Vector2.new(256, 256)

                            if fFeQcIM == nil then
                                fFeQcIM = true
                            end
                            if not _L6Bs then
                                _L6Bs = NsoTwDs'Frame'{
                                    Name = 'Sprite',
                                    BackgroundTransparency = 1,
                                }
                            end

                            _L6Bs.ClipsDescendants = true

                            local JEHSHPh3 = NsoTwDs'ImageLabel'{
                                Name = 'SpriteMap',
                                Active = false,
                                BackgroundTransparency = 1,
                                Image = T7RKP,
                                Size = UDim2.new(wU4wYbA9.x / SH.x, 0, wU4wYbA9.y / SH.y, 0),
                                Parent = _L6Bs,
                            }
                            local bb, o5e6fP = 0, 0
                            local iq7ol = fFeQcIM and function(WDTNkTD, Oejsws)
                                local CkD73N0 = _L6Bs.AbsoluteSize

                                JEHSHPh3.Position = UDim2.new(-Oejsws - 0.5 / CkD73N0.x, 0, 
-WDTNkTD - 0.5 / CkD73N0.y, 0)
                                bb, o5e6fP = WDTNkTD, Oejsws
                            end or function(PlwhaRKJ, Caz4NM4Z)
                                JEHSHPh3.Position = UDim2.new(-Caz4NM4Z, 0, -PlwhaRKJ, 0)
                                bb, o5e6fP = PlwhaRKJ, Caz4NM4Z
                            end

                            if fFeQcIM then
                                _L6Bs.Changed:Connect(function(XVxxx)
                                    if XVxxx == 'AbsoluteSize' then
                                        iq7ol(bb, o5e6fP)
                                    end
                                end)
                            end

                            local eMV = {
                                GUI = _L6Bs,
                                SetOffset = iq7ol,
                                GetOffset = function()
                                    return bb, o5e6fP
                                end,
                            }

                            eMV.Destroy = function()
                                for hD in pairs(eMV)do
                                    eMV[hD] = nil
                                end

                                _L6Bs.Destroy(_L6Bs)
                            end

                            return eMV, _L6Bs
                        end

                        LB1Z.Sprite = urkh

                        local function zhzpBSx(G5BuU5)
                            G5BuU5 = G5BuU5 or {}

                            local AfwsY = {}
                            local T = {
                                Style = G5BuU5,
                                ParentStylists = AfwsY,
                            }
                            local WZs = wqU76o and setmetatable({}, JLCOx_ak.K) or {}
                            local ITdz = wqU76o and setmetatable({}, JLCOx_ak.K) or {}
                            local AjfoUo = wqU76o and setmetatable({}, JLCOx_ak.K) or {}
                            local Er9zidsB = wqU76o and setmetatable({}, JLCOx_ak.K) or {}

                            local function X(gE, QgC, CYoa)
                                gE[QgC] = CYoa
                            end
                            local function dR(K3ipRr, F2tY, rb21L2)
                                pcall(X, K3ipRr, F2tY, rb21L2)
                            end
                            local function JFXtQwy(o_v255, wUVm, VQ)
                                if o_v255.Style[wUVm] == nil then
                                    o_v255.SetInternal(wUVm, VQ)
                                end
                            end
                            local function uMV17h0(oTYNsnP, I, LmR5gwW, DfbW)
                                local sh = I[LmR5gwW]

                                if sh then
                                    pcall(X, oTYNsnP, sh, DfbW)
                                else
                                    pcall(X, oTYNsnP, LmR5gwW, DfbW)
                                end
                            end
                            local function E2NZK(
                                rrFLbCtj,
                                YcPea0vg,
                                usLpLoaH,
                                e7dv
                            )
                                local inx0 = YcPea0vg[usLpLoaH]

                                if inx0 then
                                    if rrFLbCtj.Style[inx0] == nil then
                                        rrFLbCtj.SetInternal(inx0, e7dv)
                                    end
                                else
                                    if rrFLbCtj.Style[usLpLoaH] == nil then
                                        rrFLbCtj.SetInternal(usLpLoaH, e7dv)
                                    end
                                end
                            end
                            local function WNWWe(A5k5yt, B7SHDx7h)
                                if type(B7SHDx7h) == 'table' then
                                    ITdz[A5k5yt] = B7SHDx7h

                                    for EEpoeR, _k in pairs(G5BuU5)do
                                        uMV17h0(A5k5yt, B7SHDx7h, EEpoeR, _k)
                                    end
                                else
                                    WZs[A5k5yt] = true

                                    for Ef, KfM in pairs(G5BuU5)do
                                        dR(A5k5yt, Ef, KfM)
                                    end
                                end

                                for Vd in pairs(AfwsY)do
                                    Vd.Update(T)
                                end

                                return A5k5yt
                            end
                            local function zMzjn3lk(Oynw, QBO)
                                if type(QBO) == 'table' then
                                    for s4ggux, hrVI4meU in pairs(Oynw)do
                                        ITdz[hrVI4meU] = QBO

                                        for xEq6TAF, UIjls in pairs(G5BuU5)do
                                            uMV17h0(hrVI4meU, QBO, xEq6TAF, UIjls)
                                        end
                                    end
                                else
                                    for jdLnB0vD, PSlD in pairs(Oynw)do
                                        WZs[PSlD] = true

                                        for nN, J in pairs(G5BuU5)do
                                            dR(PSlD, nN, J)
                                        end
                                    end
                                end

                                for A in pairs(AfwsY)do
                                    A.Update(T)
                                end

                                return Oynw
                            end
                            local function Trkkpmd(g3Qeqnr)
                                WZs[g3Qeqnr] = nil
                                ITdz[g3Qeqnr] = nil

                                return g3Qeqnr
                            end
                            local function L(qHpY64)
                                for z, qccJ5b in pairs(qHpY64)do
                                    WZs[qccJ5b] = nil
                                    ITdz[qccJ5b] = nil
                                end

                                return qHpY64
                            end
                            local function GGv()
                                local ARuba = {}

                                for Wo53nZ in pairs(WZs)do
                                    ARuba[#ARuba + 1] = Wo53nZ
                                end
                                for XRfQ in pairs(ITdz)do
                                    ARuba[#ARuba + 1] = XRfQ
                                end

                                return ARuba
                            end
                            local function ZIzh4Si(gFPRdEC)
                                if WZs[gFPRdEC] then
                                    return true
                                elseif ITdz[gFPRdEC] then
                                    return ObjectAliasLookup[gFPRdEC]
                                else
                                    return false
                                end
                            end
                            local function c8D4n81(lw9gLt3, TI5)
                                lw9gLt3.ParentStylists[T] = true

                                if TI5 and type(TI5) == 'table' then
                                    Er9zidsB[lw9gLt3] = TI5

                                    for JmE, s4 in pairs(G5BuU5)do
                                        E2NZK(lw9gLt3, TI5, JmE, s4)
                                    end
                                else
                                    AjfoUo[lw9gLt3] = true

                                    for FFG, a31jEAS in pairs(G5BuU5)do
                                        JFXtQwy(lw9gLt3, FFG, a31jEAS)
                                    end
                                end

                                for LS4h in pairs(AfwsY)do
                                    LS4h.Update(T)
                                end

                                return lw9gLt3
                            end
                            local function cSjJHx(eux092_P)
                                eux092_P.ParentStylists[T] = nil
                                AjfoUo[eux092_P] = nil
                                Er9zidsB[eux092_P] = nil

                                return eux092_P
                            end
                            local function fa()
                                local ZA9 = {}

                                for hWgmxm in pairs(AjfoUo)do
                                    ZA9[#ZA9 + 1] = hWgmxm
                                end
                                for UBg54E in pairs(Er9zidsB)do
                                    ZA9[#ZA9 + 1] = UBg54E
                                end

                                return ZA9
                            end
                            local function M(gQGq)
                                if AjfoUo[gQGq] then
                                    return true
                                elseif Er9zidsB[gQGq] then
                                    return StylistAliasLookup[gQGq]
                                else
                                    return false
                                end
                            end
                            local function dIZlrvD(OyHc5FEv, Dn1Xi)
                                for _gGmBBE in pairs(WZs)do
                                    dR(_gGmBBE, OyHc5FEv, Dn1Xi)
                                end
                                for rIX4 in pairs(AjfoUo)do
                                    JFXtQwy(rIX4, OyHc5FEv, Dn1Xi)
                                end
                                for AI14eFhp, iW2O in pairs(ITdz)do
                                    uMV17h0(AI14eFhp, iW2O, OyHc5FEv, Dn1Xi)
                                end
                                for Gdp, nbqmx in pairs(Er9zidsB)do
                                    E2NZK(Gdp, nbqmx, OyHc5FEv, Dn1Xi)
                                end
                            end
                            local function jQgsATKd(IWQcC, cvRh)
                                if cvRh == nil or cvRh == qW0lRiD1 then
                                    G5BuU5[IWQcC] = nil

                                    for W9yaJm in pairs(AfwsY)do
                                        W9yaJm.Update(T)
                                    end
                                else
                                    G5BuU5[IWQcC] = cvRh

                                    dIZlrvD(IWQcC, cvRh)
                                end
                            end
                            local function aBbGg(oJ1ec)
                                local LMMNWLk = false

                                for x6Ni, Q2waXkyp in pairs(oJ1ec)do
                                    if Q2waXkyp == qW0lRiD1 then
                                        G5BuU5[x6Ni] = nil
                                        LMMNWLk = true
                                    else
                                        G5BuU5[x6Ni] = Q2waXkyp

                                        dIZlrvD(x6Ni, Q2waXkyp)
                                    end
                                end

                                if LMMNWLk then
                                    for EG72 in pairs(AfwsY)do
                                        EG72.Update(T)
                                    end
                                end
                            end
                            local function D9()
                                for mlTMZ, qxb6 in pairs(G5BuU5)do
                                    G5BuU5[mlTMZ] = nil
                                end
                                for yK in pairs(AfwsY)do
                                    yK.Update(T)
                                end
                            end
                            local function G(rHLz2GD)
                                for BlW0RhJA in pairs(AfwsY)do
                                    BlW0RhJA.Update(T)
                                end

                                if rHLz2GD then
                                    if WZs[rHLz2GD] then
                                        for Uy, n in pairs(G5BuU5)do
                                            dR(rHLz2GD, Uy, n)
                                        end
                                    elseif AjfoUo[rHLz2GD] then
                                        for TKu, M6kL in pairs(G5BuU5)do
                                            JFXtQwy(rHLz2GD, TKu, M6kL)
                                        end
                                    elseif ITdz[rHLz2GD] then
                                        local M7o_ = ITdz[rHLz2GD]

                                        for dk2X7J7, jv in pairs(G5BuU5)do
                                            uMV17h0(rHLz2GD, M7o_, dk2X7J7, jv)
                                        end
                                    elseif Er9zidsB[rHLz2GD] then
                                        for MW, E2OQ in pairs(G5BuU5)do
                                            E2NZK(rHLz2GD, alias_map, MW, E2OQ)
                                        end
                                    end
                                else
                                    for SnbfLb6, ay in pairs(G5BuU5)do
                                        dIZlrvD(SnbfLb6, ay)
                                    end
                                end
                            end

                            T.AddObject = WNWWe
                            T.AddObjects = zMzjn3lk
                            T.RemoveObject = Trkkpmd
                            T.RemoveObjects = L
                            T.GetObjects = GGv
                            T.ObjectIn = ZIzh4Si
                            T.AddStylist = c8D4n81
                            T.RemoveStylist = cSjJHx
                            T.GetStylists = fa
                            T.StylistIn = M
                            T.SetInternal = dIZlrvD
                            T.SetProperty = jQgsATKd
                            T.SetProperties = aBbGg
                            T.ClearProperties = D9
                            T.Update = G
                            T.Destroy = function()
                                for W in pairs(AfwsY)do
                                    W.RemoveStylist(T)

                                    AfwsY[W] = nil
                                end
                                for WzM in pairs(T)do
                                    T[WzM] = nil
                                end
                                for PSx in pairs(WZs)do
                                    WZs[PSx] = nil
                                end
                                for I in pairs(ITdz)do
                                    ITdz[I] = nil
                                end
                                for wnA in pairs(AjfoUo)do
                                    AjfoUo[wnA] = nil
                                end
                                for cW in pairs(Er9zidsB)do
                                    Er9zidsB[cW] = nil
                                end
                            end

                            return T, G5BuU5
                        end

                        LB1Z.Stylist = zhzpBSx

                        local function rHSjalVy(PHpCof2)
                            local bUPpn4T2 = {}

                            if not PHpCof2 then
                                PHpCof2 = NsoTwDs'TextLabel'{
                                    Name = 'AutoSizeLabel',
                                    BackgroundColor3 = Color3.new(0, 0, 0),
                                    BorderColor3 = Color3.new(1, 1, 1),
                                    TextColor3 = Color3.new(1, 1, 1),
                                    FontSize = 'Size14',
                                    Font = 'ArialBold',
                                }
                            end

                            bUPpn4T2.GUI = PHpCof2

                            local sode, G9zkKODk, MGt, ld9GuG4t = 0, 0, 0, 0
                            local KpCCA, H6, hgsKvTz, zEt = 0, 0, 0, 0
                            local Wjojpvg, l2PqbWw

                            local function EJTH9()
                                local YcCR = PHpCof2.TextBounds
                                local G3p2Yn = Wjojpvg or YcCR.x + zEt + H6
                                local _jkkD9 = l2PqbWw or YcCR.y + KpCCA + hgsKvTz

                                PHpCof2.Size = UDim2.new(0, G3p2Yn, 0, _jkkD9)
                            end

                            bUPpn4T2.Update = EJTH9

                            local function qTB82()
                                KpCCA, H6, hgsKvTz, zEt = sode, G9zkKODk, MGt, ld9GuG4t

                                if PHpCof2.TextXAlignment == Enum.TextXAlignment.Left then
                                    zEt = 0
                                elseif PHpCof2.TextXAlignment == Enum.TextXAlignment.Right then
                                    H6 = 0
                                end
                                if PHpCof2.TextYAlignment == Enum.TextYAlignment.Top then
                                    KpCCA = 0
                                elseif PHpCof2.TextYAlignment == Enum.TextYAlignment.Bottom then
                                    hgsKvTz = 0
                                end

                                EJTH9()
                            end
                            local function KL(D, DMn, GBzFRjVV, pG4C8fDK)
                                if pG4C8fDK then
                                    sode, G9zkKODk, MGt, ld9GuG4t = D, DMn, GBzFRjVV, pG4C8fDK
                                elseif GBzFRjVV then
                                    sode, G9zkKODk, MGt, ld9GuG4t = D, DMn, GBzFRjVV, DMn
                                elseif DMn then
                                    sode, G9zkKODk, MGt, ld9GuG4t = D, DMn, D, DMn
                                elseif D then
                                    sode, G9zkKODk, MGt, ld9GuG4t = D, D, D, D
                                else
                                    sode, G9zkKODk, MGt, ld9GuG4t = 0, 0, 0, 0
                                end

                                qTB82()
                            end

                            bUPpn4T2.SetPadding = KL

                            local function EATFLbgY(LLFUU, kdmQtj6)
                                Wjojpvg, l2PqbWw = LLFUU, kdmQtj6

                                EJTH9()
                            end

                            bUPpn4T2.LockAxis = EATFLbgY

                            local FF = PHpCof2.Changed:Connect(function(Hc35_)
                                if Hc35_ == 'TextBounds' then
                                    EJTH9()
                                elseif Hc35_ == 'TextXAlignment' or Hc35_ == 'TextYAlignment' then
                                    qTB82()
                                end
                            end)

                            local function rh()
                                for ubP in pairs(bUPpn4T2)do
                                    bUPpn4T2[ubP] = nil
                                end

                                FF.disconnect(FF)
                            end

                            bUPpn4T2.Destroy = rh

                            EJTH9()

                            return bUPpn4T2, PHpCof2
                        end

                        LB1Z.AutoSizeLabel = rHSjalVy

                        local function TjhsnP(eN0UMW)
                            if not eN0UMW then
                                eN0UMW = NsoTwDs'TextLabel'{
                                    BackgroundColor3 = Color3.new(0, 0, 0),
                                    BorderColor3 = Color3.new(1, 1, 1),
                                    TextColor3 = Color3.new(1, 1, 1),
                                    FontSize = 'Size14',
                                    Font = 'ArialBold',
                                    Text = '',
                                }
                            end

                            eN0UMW.ClipsDescendants = true

                            local lAG = NsoTwDs'TextLabel'{
                                Name = 'FullTextLabel',
                                BackgroundColor3 = eN0UMW.BackgroundColor3,
                                BorderColor3 = eN0UMW.BorderColor3,
                                TextColor3 = eN0UMW.TextColor3,
                                FontSize = eN0UMW.FontSize,
                                Font = eN0UMW.Font,
                                Text = eN0UMW.Text,
                                Visible = false,
                                ZIndex = 9,
                                Parent = eN0UMW,
                            }
                            local AvEtR8Y = {
                                Name = true,
                                Parent = true,
                                Position = true,
                                Size = true,
                                ClipsDescendants = true,
                                ZIndex = true,
                                Visible = true,
                            }

                            local function rl3MMqfm(nQj, Eq8jDq, LnQUN)
                                nQj[Eq8jDq] = LnQUN
                            end

                            eN0UMW.Changed:Connect(function(Gm1)
                                if not AvEtR8Y[Gm1] then
                                    pcall(rl3MMqfm, lAG, Gm1, eN0UMW[Gm1])
                                end
                            end)
                            eN0UMW.MouseEnter:Connect(function()
                                local Jp = eN0UMW.TextXAlignment
                                local NwBqNl3C = math.max(eN0UMW.TextBounds.x + 4, eN0UMW.AbsoluteSize.x)

                                if Jp == Enum.TextXAlignment.Center then
                                    lAG.Size = UDim2.new(0, NwBqNl3C, 1, 0)
                                    lAG.Position = UDim2.new(0.5, -NwBqNl3C / 2, 0, 0)
                                elseif Jp == Enum.TextXAlignment.Right then
                                    lAG.Size = UDim2.new(0, NwBqNl3C, 1, 0)
                                    lAG.Position = UDim2.new(1, -NwBqNl3C, 0, 0)
                                else
                                    lAG.Size = UDim2.new(0, NwBqNl3C, 1, 0)
                                    lAG.Position = UDim2.new(0, 0, 0, 0)
                                end

                                eN0UMW.ClipsDescendants = false

                                m6SCS0(lAG, 9)

                                lAG.Visible = true
                            end)
                            lAG.MouseLeave:Connect(function()
                                lAG.Visible = false
                                eN0UMW.ClipsDescendants = true
                            end)

                            return eN0UMW
                        end

                        LB1Z.TruncatingLabel = TjhsnP

                        local t5jzEd9 = {
                            None = 0,
                            Left = 1,
                            Top = 2,
                            Right = 4,
                            Bottom = 8,
                            [0] = 'None',
                            [1] = 'Left',
                            [2] = 'Top',
                            [4] = 'Right',
                            [8] = 'Bottom',
                        }

                        LB1Z.DockedSide = t5jzEd9

                        local function JZAU2(XuqjvYPF)
                            if not XuqjvYPF then
                                XuqjvYPF = Instance.new('ScreenGui')
                                XuqjvYPF.Name = 'DockContainer'
                            end

                            local Trh = {
                                GUI = XuqjvYPF,
                                SnapWidth = 16,
                                SnapToEdge = true,
                                ConstrainToContainer = false,
                                PositionScaled = true,
                                DragZIndex = 1,
                            }
                            local KuK = {}
                            local s0FU = NsoTwDs'ImageButton'{
                                Active = false,
                                Size = UDim2.new(1.5, 0, 1.5, 0),
                                AutoButtonColor = false,
                                BackgroundTransparency = 1,
                                Name = 'MouseDrag',
                                Position = UDim2.new(-0.25, 0, -0.25, 0),
                                ZIndex = 10,
                            }

                            local function wQl()
                                return false, 'no object is being dragged'
                            end

                            Trh.StopDrag = wQl

                            local g = Instance.new('BindableEvent')

                            Trh.DragBegin = g.Event

                            local m4u = Instance.new('BindableEvent')

                            Trh.DragStopped = m4u.Event

                            local StZ = Instance.new('BindableEvent')

                            Trh.ObjectDocked = StZ.Event

                            local function C1NqzxY(JC, PDA)
                                if Trh.DragBeginCallback then
                                    if Trh.DragBeginCallback(JC, PDA) == false then
                                        return
                                    end
                                end

                                local Kqne5Stra
                                local FKLmmhnQ

                                Kqne5Stra = s0FU.MouseMoved:Connect(function(
                                    TNg,
                                    wO9T
                                )
                                    if Trh.DragCallback then
                                        if Trh.DragCallback(JC, PDA) == false then
                                            return
                                        end
                                    end

                                    local QMcSUqdi = Trh.SnapWidth
                                    local sKy2P9i = XuqjvYPF.AbsolutePosition
                                    local S = Vector2.new(TNg, wO9T) - PDA
                                    local AD = XuqjvYPF.AbsoluteSize
                                    local AkxLdb66 = JC.AbsoluteSize
                                    local aUR, c4 = S.x, S.y
                                    local ZNXs3Bwd, Ginn = AkxLdb66.x, AkxLdb66.y

                                    TNg = S.x - sKy2P9i.x
                                    wO9T = S.y - sKy2P9i.y

                                    local h_pK, L
                                    local vBKFXR3, FP3j

                                    if Trh.DockCallback then
                                        for KaD2ExEO, TpiFT in pairs(XuqjvYPF.GetChildren(XuqjvYPF))do
                                            if TpiFT.IsA(TpiFT, 'GuiObject') and TpiFT ~= JC and TpiFT.Visible then
                                                local J = TpiFT.AbsolutePosition
                                                local CH = TpiFT.AbsoluteSize

                                                if S.x + AkxLdb66.x >= J.x and S.x <= J.x + CH.x then
                                                    if math.abs((S.y + AkxLdb66.y) - J.y) <= QMcSUqdi then
                                                        if Trh.DockCallback(JC, TpiFT, t5jzEd9.Bottom) ~= false then
                                                            wO9T = J.y - sKy2P9i.y - AkxLdb66.y

                                                            StZ.Fire(StZ, JC, TpiFT, t5jzEd9.Bottom)
                                                        end
                                                    elseif math.abs(S.y - (J.y + CH.y)) <= QMcSUqdi then
                                                        if Trh.DockCallback(JC, TpiFT, t5jzEd9.Top) ~= false then
                                                            wO9T = J.y - sKy2P9i.y + CH.y

                                                            StZ.Fire(StZ, JC, TpiFT, t5jzEd9.Top)
                                                        end
                                                    end
                                                end
                                                if S.y + AkxLdb66.y >= J.y and S.y <= J.y + CH.y then
                                                    if math.abs((S.x + AkxLdb66.x) - J.x) <= QMcSUqdi then
                                                        if Trh.DockCallback(JC, TpiFT, t5jzEd9.Right) ~= false then
                                                            TNg = J.x - sKy2P9i.x - AkxLdb66.x

                                                            StZ.Fire(StZ, JC, TpiFT, t5jzEd9.Right)
                                                        end
                                                    elseif math.abs(S.x - (J.x + CH.x)) <= QMcSUqdi then
                                                        if Trh.DockCallback(JC, TpiFT, t5jzEd9.Left) ~= false then
                                                            TNg = J.x - sKy2P9i.x + CH.x

                                                            StZ.Fire(StZ, JC, TpiFT, t5jzEd9.Left)
                                                        end
                                                    end
                                                end
                                            end
                                        end

                                        if Trh.ConstrainToContainer then
                                            if c4 < sKy2P9i.y then
                                                if Trh.DockCallback(JC, XuqjvYPF, t5jzEd9.Top) ~= false then
                                                    wO9T = 0

                                                    StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Top)
                                                end
                                            elseif c4 + Ginn > sKy2P9i.y + AD.y then
                                                if Trh.DockCallback(JC, XuqjvYPF, t5jzEd9.Bottom) ~= false then
                                                    wO9T = AD.y - Ginn

                                                    StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Bottom)
                                                end
                                            end
                                            if aUR < sKy2P9i.x then
                                                if Trh.DockCallback(JC, XuqjvYPF, t5jzEd9.Left) ~= false then
                                                    TNg = 0

                                                    StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Left)
                                                end
                                            elseif aUR + ZNXs3Bwd > sKy2P9i.x + AD.x then
                                                if Trh.DockCallback(JC, XuqjvYPF, t5jzEd9.Right) ~= false then
                                                    TNg = AD.x - ZNXs3Bwd

                                                    StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Right)
                                                end
                                            end
                                        elseif Trh.SnapToEdge then
                                            if math.abs(c4 - sKy2P9i.y) <= QMcSUqdi then
                                                if Trh.DockCallback(JC, XuqjvYPF, t5jzEd9.Top) ~= false then
                                                    wO9T = 0

                                                    StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Top)
                                                end
                                            elseif math.abs((c4 + Ginn) - (sKy2P9i.y + AD.y)) <= QMcSUqdi then
                                                if Trh.DockCallback(JC, XuqjvYPF, t5jzEd9.Bottom) ~= false then
                                                    wO9T = AD.y - Ginn

                                                    StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Bottom)
                                                end
                                            end
                                            if math.abs(aUR - sKy2P9i.x) <= QMcSUqdi then
                                                if Trh.DockCallback(JC, XuqjvYPF, t5jzEd9.Left) ~= false then
                                                    TNg = 0

                                                    StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Left)
                                                end
                                            elseif math.abs((aUR + ZNXs3Bwd) - (sKy2P9i.x + AD.x)) <= QMcSUqdi then
                                                if Trh.DockCallback(JC, XuqjvYPF, t5jzEd9.Right) ~= false then
                                                    TNg = AD.x - ZNXs3Bwd

                                                    StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Right)
                                                end
                                            end
                                        end
                                    else
                                        for sJ05I, HrLCim in pairs(XuqjvYPF.GetChildren(XuqjvYPF))do
                                            if HrLCim.IsA(HrLCim, 'GuiObject') and HrLCim ~= JC and HrLCim.Visible then
                                                local w = HrLCim.AbsolutePosition
                                                local sUu7z = HrLCim.AbsoluteSize

                                                if S.x + AkxLdb66.x >= w.x and S.x <= w.x + sUu7z.x then
                                                    if math.abs((S.y + AkxLdb66.y) - w.y) <= QMcSUqdi then
                                                        wO9T = w.y - sKy2P9i.y - AkxLdb66.y

                                                        StZ.Fire(StZ, JC, HrLCim, t5jzEd9.Bottom)
                                                    elseif math.abs(S.y - (w.y + sUu7z.y)) <= QMcSUqdi then
                                                        wO9T = w.y - sKy2P9i.y + sUu7z.y

                                                        StZ.Fire(StZ, JC, HrLCim, t5jzEd9.Top)
                                                    end
                                                end
                                                if S.y + AkxLdb66.y >= w.y and S.y <= w.y + sUu7z.y then
                                                    if math.abs((S.x + AkxLdb66.x) - w.x) <= QMcSUqdi then
                                                        TNg = w.x - sKy2P9i.x - AkxLdb66.x

                                                        StZ.Fire(StZ, JC, HrLCim, t5jzEd9.Right)
                                                    elseif math.abs(S.x - (w.x + sUu7z.x)) <= QMcSUqdi then
                                                        TNg = w.x - sKy2P9i.x + sUu7z.x

                                                        StZ.Fire(StZ, JC, HrLCim, t5jzEd9.Left)
                                                    end
                                                end
                                            end
                                        end

                                        if Trh.ConstrainToContainer then
                                            if c4 < sKy2P9i.y then
                                                wO9T = 0

                                                StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Top)
                                            elseif c4 + Ginn > sKy2P9i.y + AD.y then
                                                wO9T = AD.y - Ginn

                                                StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Bottom)
                                            end
                                            if aUR < sKy2P9i.x then
                                                TNg = 0

                                                StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Left)
                                            elseif aUR + ZNXs3Bwd > sKy2P9i.x + AD.x then
                                                TNg = AD.x - ZNXs3Bwd

                                                StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Right)
                                            end
                                        elseif Trh.SnapToEdge then
                                            if math.abs(c4 - sKy2P9i.y) <= QMcSUqdi then
                                                wO9T = 0

                                                StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Top)
                                            elseif math.abs((c4 + Ginn) - (sKy2P9i.y + AD.y)) <= QMcSUqdi then
                                                wO9T = AD.y - Ginn

                                                StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Bottom)
                                            end
                                            if math.abs(aUR - sKy2P9i.x) <= QMcSUqdi then
                                                TNg = 0

                                                StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Left)
                                            elseif math.abs((aUR + ZNXs3Bwd) - (sKy2P9i.x + AD.x)) <= QMcSUqdi then
                                                TNg = AD.x - ZNXs3Bwd

                                                StZ.Fire(StZ, JC, XuqjvYPF, t5jzEd9.Right)
                                            end
                                        end
                                    end

                                    local fe, ggnA = 0, 0

                                    if Trh.PositionScaled then
                                        fe = TNg / AD.x
                                        ggnA = wO9T / AD.y
                                        TNg = 0
                                        wO9T = 0
                                    end

                                    JC.Position = UDim2.new(fe, TNg, ggnA, wO9T)
                                end)

                                local F82 = JC.ZIndex

                                local function wJ6tY_()
                                    Trh.StopDrag = wQl
                                    s0FU.Parent = nil

                                    Kqne5Stra.disconnect(Kqne5Stra)

                                    Kqne5Stra = nil

                                    FKLmmhnQ.disconnect(FKLmmhnQ)

                                    drag = nil

                                    m6SCS0(JC, F82)
                                    m4u.Fire(m4u, JC, PDA)

                                    return true
                                end

                                FKLmmhnQ = s0FU.MouseButton1Up:connect(wJ6tY_)

                                m6SCS0(JC, F82 + Trh.DragZIndex)

                                s0FU.Parent = Hv(JC)
                                Trh.StopDrag = wJ6tY_

                                g.Fire(g, JC, PDA)
                            end

                            Trh.InvokeDrag = C1NqzxY

                            local function T1gVrYq(M5oB)
                                if M5oB.IsA(M5oB, 'GuiButton') then
                                    KuK[M5oB] = M5oB.MouseButton1Down:Connect(function(
                                        xIyIKo,
                                        f2x
                                    )
                                        C1NqzxY(M5oB, Vector2.new(xIyIKo, f2x) - M5oB.AbsolutePosition)
                                    end)
                                end
                            end
                            local function P5G(Nwl)
                                if KuK[Nwl] then
                                    KuK[Nwl]:disconnect()

                                    KuK[Nwl] = nil
                                end
                            end

                            XuqjvYPF.ChildAdded:connect(T1gVrYq)
                            XuqjvYPF.ChildRemoved:connect(P5G)

                            for Xpt_SQ, Y in pairs(XuqjvYPF.GetChildren(XuqjvYPF))do
                                T1gVrYq(Y)
                            end

                            return Trh, XuqjvYPF
                        end

                        LB1Z.DockContainer = JZAU2

                        local zPXTTg = {
                            ['arrow-up'] = {
                                {2, 4, 6},
                                {5, 3, 5},
                                8,
                            },
                            ['arrow-down'] = {
                                {2, 4, 6},
                                {3, 5, 3},
                                8,
                            },
                            ['arrow-left'] = {
                                {5, 3, 5},
                                {2, 4, 6},
                                8,
                            },
                            ['arrow-right'] = {
                                {3, 5, 3},
                                {2, 4, 6},
                                8,
                            },
                            ['check-mark'] = {
                                {
                                    1,
                                    3,
                                    7,
                                    7,
                                    3,
                                    1,
                                },
                                {
                                    3,
                                    5,
                                    1,
                                    3,
                                    7,
                                    5,
                                },
                                8,
                            },
                            pin = {
                                {
                                    4,
                                    11,
                                    11,
                                    12,
                                    12,
                                    8,
                                    8,
                                    7,
                                    7,
                                    3,
                                    3,
                                    4,
                                    4,
                                    5,
                                    7,
                                    7,
                                    5,
                                    5,
                                },
                                {
                                    2,
                                    2,
                                    9,
                                    9,
                                    10,
                                    10,
                                    14,
                                    14,
                                    10,
                                    10,
                                    9,
                                    9,
                                    2,
                                    3,
                                    3,
                                    9,
                                    9,
                                    3,
                                },
                                16,
                            },
                            wrench = {
                                {
                                    2,
                                    8,
                                    18,
                                    25,
                                    29,
                                    29,
                                    24,
                                    20,
                                    17,
                                    17,
                                    22,
                                    16,
                                    12,
                                    12,
                                },
                                {
                                    24,
                                    30,
                                    20,
                                    20,
                                    16,
                                    10,
                                    15,
                                    15,
                                    12,
                                    8,
                                    3,
                                    3,
                                    7,
                                    14,
                                },
                                32,
                            },
                            cross = {
                                {
                                    1,
                                    2,
                                    4,
                                    6,
                                    7,
                                    7,
                                    5,
                                    7,
                                    7,
                                    6,
                                    4,
                                    2,
                                    1,
                                    1,
                                    3,
                                    1,
                                },
                                {
                                    1,
                                    1,
                                    3,
                                    1,
                                    1,
                                    2,
                                    4,
                                    6,
                                    7,
                                    7,
                                    5,
                                    7,
                                    7,
                                    6,
                                    4,
                                    2,
                                },
                                8,
                            },
                            grip = function(SMa, Bo, zF6ZPjQ)
                                local nNQG3 = Bo.GUI

                                nNQG3.Size = UDim2.new(0, SMa.x * (SMa.y == 0 and 2 or SMa.y), 0, SMa.x * 2)

                                for yW = 1, SMa.x do
                                    local efGM8UMy = Instance.new('Frame', nNQG3)

                                    efGM8UMy.BackgroundColor3 = Color3.new(0, 0, 0)
                                    efGM8UMy.BorderSizePixel = 0
                                    efGM8UMy.Size = UDim2.new(1, 0, 0, 1)
                                    efGM8UMy.Position = UDim2.new(0, 0, 0, (yW - 1) * (SMa.y == 0 and 2 or SMa.y))

                                    Bo.Stylist.AddObject(efGM8UMy)
                                end

                                return Bo, nNQG3
                            end,
                            vgrip = function(KhH, H4tXd, Nq6If)
                                local II = H4tXd.GUI

                                II.Size = UDim2.new(0, KhH.x * 2, 0, KhH.x * (KhH.y == 0 and 2 or KhH.y))

                                for Y_tefq = 1, KhH.x do
                                    local i = Instance.new('Frame', II)

                                    i.BackgroundColor3 = Color3.new(0, 0, 0)
                                    i.BorderSizePixel = 0
                                    i.Size = UDim2.new(0, 1, 1, 0)
                                    i.Position = UDim2.new(0, (Y_tefq - 1) * (KhH.y == 0 and 2 or KhH.y), 0, 0)

                                    H4tXd.Stylist.AddObject(i)
                                end

                                return H4tXd, II
                            end,
                        }

                        local function seMLr(a3u, mzhB, sTxVGmb, GSIcq)
                            local function Go(Mn)
                                if Mn < 0 then
                                    return ceil(Mn - 0.5)
                                else
                                    return floor(Mn + 0.5)
                                end
                            end

                            local DGf = Instance.new('Frame')

                            DGf.Name = 'Graphic'
                            DGf.BackgroundTransparency = 1

                            local kgRX7X = zhzpBSx(sTxVGmb)
                            local JB = {
                                GUI = DGf,
                                Stylist = kgRX7X,
                            }

                            JB.Destroy = function()
                                for ut0 in pairs(JB)do
                                    JB[ut0] = nil
                                end

                                kgRX7X.Destroy()
                                DGf.Destroy(DGf)
                            end

                            local GGJhclKa, KWahIz = {}, {}

                            if type(a3u) == 'table' then
                                GGJhclKa = a3u[1]
                                KWahIz = a3u[2]

                                local ZFhlP6eg = a3u[3]

                                if ZFhlP6eg then
                                    for ExUgDG = 1, #GGJhclKa do
                                        GGJhclKa[ExUgDG] = (GGJhclKa[ExUgDG]) / ZFhlP6eg
                                    end
                                    for jc4o42jz = 1, #KWahIz do
                                        KWahIz[jc4o42jz] = (KWahIz[jc4o42jz]) / ZFhlP6eg
                                    end
                                end
                            elseif type(a3u) == 'string' then
                                local jc = zPXTTg[a3u]

                                if type(jc) == 'table' then
                                    local Ojz_ = jc[3] or 1

                                    for x = 1, #jc[1]do
                                        GGJhclKa[x] = (jc[1][x]) / Ojz_
                                    end
                                    for Xtecl = 1, #jc[2]do
                                        KWahIz[Xtecl] = (jc[2][Xtecl]) / Ojz_
                                    end
                                elseif type(jc) == 'function' then
                                    return jc(mzhB, JB, GSIcq)
                                else
                                    error("'" .. tostring(a3u) .. "' is not a valid internal polygon", 2)
                                end
                            else
                                error('invalid polygon', 2)
                            end

                            local X2kyW, pVlvW, QcKn_, jiM = 0, 0, 0, 0

                            GSIcq = GSIcq or {}

                            local YUdA = GSIcq.method or 'scaled'
                            local Go = Go

                            if GSIcq.round == 'ceil' then
                                Go = math.ceil
                            elseif GSIcq.round == 'floor' then
                                Go = math.floor
                            elseif GSIcq.round == 'half' then
                                Go = Go
                            end
                            if GSIcq.offset then
                                X2kyW, pVlvW = -GSIcq.offset.x, -GSIcq.offset.y
                            end
                            if type(mzhB) == 'userdata' then
                                QcKn_ = mzhB.x
                                jiM = mzhB.y
                            elseif type(mzhB) == 'table' then
                                QcKn_ = mzhB[1] or mzhB.x
                                jiM = mzhB[2] or mzhB.y
                            else
                                error('invalid size', 2)
                            end

                            polygonN = #GGJhclKa

                            for KVcYU = 1, polygonN do
                                GGJhclKa[KVcYU] = GGJhclKa[KVcYU] * QcKn_
                            end
                            for _ = 1, polygonN do
                                KWahIz[_] = KWahIz[_] * jiM
                            end

                            DGf.Size = UDim2.new(0, QcKn_, 0, jiM)

                            local lx3cpJ = Instance.new('Frame')

                            lx3cpJ.BorderSizePixel = 0
                            lx3cpJ.BackgroundColor3 = Color3.new()
                            lx3cpJ.Size = UDim2.new(0, 1, 0, 1)

                            local Yx9

                            if YUdA == 'scaled' then
                                Yx9 = function(C, CJeG, F43eMG)
                                    CJeG = CJeG - C

                                    if CJeG ~= 0 then
                                        local mCzjh4 = lx3cpJ.Clone(lx3cpJ)

                                        kgRX7X.AddObject(mCzjh4)

                                        mCzjh4.Position = UDim2.new(C / QcKn_, 0, F43eMG / jiM, 0)
                                        mCzjh4.Size = UDim2.new(CJeG / QcKn_, 0, 1 / jiM, 0)
                                        mCzjh4.Parent = DGf
                                    end
                                end
                            elseif YUdA == 'static' then
                                Yx9 = function(lU, epQue9, cHUJrj)
                                    lU = Go(lU, 1)
                                    epQue9 = Go(epQue9, 1) - lU

                                    if epQue9 ~= 0 then
                                        local EI0x = lx3cpJ.Clone(lx3cpJ)

                                        kgRX7X.AddObject(EI0x)

                                        EI0x.Position = UDim2.new(0, lU, 0, cHUJrj)
                                        EI0x.Size = UDim2.new(0, epQue9, 0, 1)
                                        EI0x.Parent = DGf
                                    end
                                end
                            else
                                error('invalid method', 2)
                            end

                            for E = pVlvW, jiM + pVlvW - 1 do
                                local lacOdjf9 = 0
                                local R2h4lP4l = {}
                                local Fh = polygonN

                                for hBph = 1, polygonN do
                                    if KWahIz[hBph] < E and KWahIz[Fh] >= E or KWahIz[Fh] < E and KWahIz[hBph] >= E then
                                        R2h4lP4l[lacOdjf9] = (GGJhclKa[hBph] + (E - KWahIz[hBph]) / (KWahIz[Fh] - KWahIz[hBph]) * (GGJhclKa[Fh] - GGJhclKa[hBph]))
                                        lacOdjf9 = lacOdjf9 + 1
                                    end

                                    Fh = hBph
                                end

                                local a2e9fa = 0

                                while a2e9fa < lacOdjf9 - 1 do
                                    if R2h4lP4l[a2e9fa] > R2h4lP4l[a2e9fa + 1] then
                                        R2h4lP4l[a2e9fa], R2h4lP4l[a2e9fa + 1] = R2h4lP4l[a2e9fa + 1], R2h4lP4l[a2e9fa]

                                        if a2e9fa ~= 0 then
                                            a2e9fa = a2e9fa - 1
                                        end
                                    else
                                        a2e9fa = a2e9fa + 1
                                    end
                                end

                                local Rc9_ZID, H1HF2wD6 = X2kyW + QcKn_, pVlvW + jiM
                                local a2e9fa = 0

                                while a2e9fa < lacOdjf9 - 1 do
                                    if R2h4lP4l[a2e9fa] >= Rc9_ZID then
                                        break
                                    end
                                    if R2h4lP4l[a2e9fa + 1] > X2kyW then
                                        if R2h4lP4l[a2e9fa] < X2kyW then
                                            R2h4lP4l[a2e9fa] = X2kyW
                                        end
                                        if R2h4lP4l[a2e9fa + 1] > Rc9_ZID then
                                            R2h4lP4l[a2e9fa + 1] = Rc9_ZID
                                        end

                                        Yx9(R2h4lP4l[a2e9fa] - X2kyW, R2h4lP4l[a2e9fa + 1] - X2kyW, E - pVlvW)
                                    end

                                    a2e9fa = a2e9fa + 2
                                end
                            end

                            return JB, DGf
                        end

                        LB1Z.Graphic = seMLr

                        local function qX(bxNo9h, Khst)
                            Khst = Khst or a

                            local pUT = NsoTwDs'Frame'{
                                Size = bxNo9h and UDim2.new(1, 0, 0, Khst) or UDim2.new(0, Khst, 1, 0),
                                Position = bxNo9h and UDim2.new(0, 0, 1, -Khst) or UDim2.new(1, 
-Khst, 0, 0),
                                BackgroundTransparency = 1,
                                Name = 'ScrollFrame',
                                NsoTwDs'ImageButton'{
                                    BackgroundColor3 = Color3.new(1, 1, 1),
                                    BackgroundTransparency = 0.7,
                                    BorderSizePixel = 0,
                                    Size = UDim2.new(0, Khst, 0, Khst),
                                    Name = 'ScrollDown',
                                    Position = bxNo9h and UDim2.new(1, -Khst, 0, 0) or UDim2.new(0, 0, 1, 
-Khst),
                                },
                                NsoTwDs'ImageButton'{
                                    BackgroundColor3 = Color3.new(1, 1, 1),
                                    BackgroundTransparency = 0.7,
                                    BorderSizePixel = 0,
                                    Size = UDim2.new(0, Khst, 0, Khst),
                                    Name = 'ScrollUp',
                                },
                                NsoTwDs'ImageButton'{
                                    AutoButtonColor = false,
                                    Size = bxNo9h and UDim2.new(1, -Khst * 2, 1, 0) or UDim2.new(1, 0, 1, 
-Khst * 2),
                                    BackgroundColor3 = Color3.new(0, 0, 0),
                                    BorderSizePixel = 0,
                                    BackgroundTransparency = 0.7,
                                    Position = bxNo9h and UDim2.new(0, Khst, 0, 0) or UDim2.new(0, 0, 0, Khst),
                                    Name = 'ScrollBar',
                                    NsoTwDs'ImageButton'{
                                        BorderSizePixel = 0,
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        Size = UDim2.new(0, Khst, 0, Khst),
                                        BackgroundTransparency = 0.5,
                                        Name = 'ScrollThumb',
                                    },
                                },
                            }
                            local ISg1 = pUT.ScrollDown
                            local Gh5UJya = seMLr(bxNo9h and 'arrow-right' or 'arrow-down', Vector2.new(Khst, Khst))

                            Gh5UJya.GUI.Parent = ISg1

                            local k = pUT.ScrollUp
                            local Z8Ue = seMLr(bxNo9h and 'arrow-left' or 'arrow-up', Vector2.new(Khst, Khst))

                            Z8Ue.GUI.Parent = k

                            local TXbmx = pUT.ScrollBar
                            local r = TXbmx.ScrollThumb
                            local Pqgz415t = seMLr(bxNo9h and 'vgrip' or 'grip', Vector2.new(4), {
                                BackgroundColor3 = Color3.new(0, 0, 0),
                                BackgroundTransparency = 0.5,
                            })

                            Pqgz415t.GUI.Position = UDim2.new(0.5, -4, 0.5, -4)
                            Pqgz415t.GUI.Parent = r

                            local McNxKV = NsoTwDs'ImageButton'{
                                Active = false,
                                Size = UDim2.new(1.5, 0, 1.5, 0),
                                AutoButtonColor = false,
                                BackgroundTransparency = 1,
                                Name = 'MouseDrag',
                                Position = UDim2.new(-0.25, 0, -0.25, 0),
                                ZIndex = 10,
                            }
                            local WcwGYJh = {
                                GUI = pUT,
                                ScrollIndex = 0,
                                VisibleSpace = 0,
                                TotalSpace = 0,
                                PageIncrement = 1,
                            }

                            local function gJt()
                                return WcwGYJh.ScrollIndex / (WcwGYJh.TotalSpace - WcwGYJh.VisibleSpace)
                            end

                            WcwGYJh.GetScrollPercent = gJt

                            local function hCs8M()
                                return WcwGYJh.ScrollIndex + WcwGYJh.VisibleSpace < WcwGYJh.TotalSpace
                            end

                            WcwGYJh.CanScrollDown = hCs8M
                            WcwGYJh.CanScrollRight = hCs8M

                            local function GkjCn_mq()
                                return WcwGYJh.ScrollIndex > 0
                            end

                            WcwGYJh.CanScrollUp = GkjCn_mq
                            WcwGYJh.CanScrollLeft = GkjCn_mq

                            local T9sySp = {
                                BackgroundColor3 = Color3.new(0, 0, 0),
                                BackgroundTransparency = 0,
                            }
                            local DL0mMXM = {
                                BackgroundColor3 = Color3.new(0, 0, 0),
                                BackgroundTransparency = 0.7,
                            }
                            local o4Kvi75g
                            local ELb
                            local FV5 = bxNo9h and function()
                                r.Size = UDim2.new(WcwGYJh.VisibleSpace / WcwGYJh.TotalSpace, 0, 0, Khst)

                                if r.AbsoluteSize.x < Khst then
                                    r.Size = UDim2.new(0, Khst, 0, Khst)
                                end

                                local t = TXbmx.AbsoluteSize.x

                                r.Position = UDim2.new(gJt() * (t - r.AbsoluteSize.x) / t, 0, 0, 0)
                            end or function()
                                r.Size = UDim2.new(0, Khst, WcwGYJh.VisibleSpace / WcwGYJh.TotalSpace, 0)

                                if r.AbsoluteSize.y < Khst then
                                    r.Size = UDim2.new(0, Khst, 0, Khst)
                                end

                                local H = TXbmx.AbsoluteSize.y

                                r.Position = UDim2.new(0, 0, gJt() * (H - r.AbsoluteSize.y) / H, 0)
                            end

                            local function sX()
                                local glZrOuSo = WcwGYJh.TotalSpace
                                local Zdzaj = WcwGYJh.VisibleSpace
                                local UxRGyO9e = WcwGYJh.ScrollIndex

                                if Zdzaj <= glZrOuSo then
                                    if UxRGyO9e > 0 then
                                        if UxRGyO9e + Zdzaj > glZrOuSo then
                                            WcwGYJh.ScrollIndex = glZrOuSo - Zdzaj
                                        end
                                    else
                                        WcwGYJh.ScrollIndex = 0
                                    end
                                else
                                    WcwGYJh.ScrollIndex = 0
                                end
                                if WcwGYJh.UpdateCallback then
                                    if WcwGYJh.UpdateCallback(WcwGYJh) == false then
                                        return
                                    end
                                end

                                local fvj_L = hCs8M()
                                local _CPU89l = GkjCn_mq()

                                if fvj_L ~= o4Kvi75g then
                                    o4Kvi75g = fvj_L
                                    ISg1.Active = fvj_L
                                    ISg1.AutoButtonColor = fvj_L

                                    Gh5UJya.Stylist.SetProperties(fvj_L and T9sySp or DL0mMXM)

                                    ISg1.BackgroundTransparency = fvj_L and 0.5 or 0.7
                                end
                                if _CPU89l ~= ELb then
                                    ELb = _CPU89l
                                    k.Active = _CPU89l
                                    k.AutoButtonColor = _CPU89l

                                    Z8Ue.Stylist.SetProperties(_CPU89l and T9sySp or DL0mMXM)

                                    k.BackgroundTransparency = _CPU89l and 0.5 or 0.7
                                end

                                r.Visible = fvj_L or _CPU89l

                                FV5()
                            end

                            WcwGYJh.Update = sX

                            local function DH6mUlGB()
                                WcwGYJh.ScrollIndex = WcwGYJh.ScrollIndex + WcwGYJh.PageIncrement

                                sX()
                            end

                            WcwGYJh.ScrollDown = DH6mUlGB
                            WcwGYJh.ScrollRight = DH6mUlGB

                            local function A4ZRczp()
                                WcwGYJh.ScrollIndex = WcwGYJh.ScrollIndex - WcwGYJh.PageIncrement

                                sX()
                            end

                            WcwGYJh.ScrollUp = A4ZRczp
                            WcwGYJh.ScrollLeft = A4ZRczp

                            local function rUT(U)
                                WcwGYJh.ScrollIndex = U

                                sX()
                            end

                            WcwGYJh.ScrollTo = rUT

                            local function g(Kwxn)
                                WcwGYJh.ScrollIndex = math.floor((WcwGYJh.TotalSpace - WcwGYJh.VisibleSpace) * Kwxn + 0.5)

                                sX()
                            end

                            WcwGYJh.SetScrollPercent = g

                            local function JPi(yp5DGSwX)
                                local Sb1Mw7R = yp5DGSwX.Active

                                yp5DGSwX.Active = not Sb1Mw7R
                                yp5DGSwX.Active = Sb1Mw7R
                            end

                            NUhYw6R4(pUT)

                            local Kkl6fa = 0

                            ISg1.MouseButton1Down:Connect(function()
                                Kkl6fa = tick()

                                local fuF = Kkl6fa
                                local pA2

                                pA2 = McNxKV.MouseButton1Up:Connect(function()
                                    Kkl6fa = tick()
                                    McNxKV.Parent = nil

                                    JPi(ISg1)
                                    pA2.disconnect(pA2)

                                    drag = nil
                                end)
                                McNxKV.Parent = Hv(pUT)

                                DH6mUlGB()
                                wait(0.2)

                                while Kkl6fa == fuF do
                                    DH6mUlGB()

                                    if not hCs8M() then
                                        break
                                    end

                                    wait()
                                end
                            end)
                            ISg1.MouseButton1Up:Connect(function()
                                Kkl6fa = tick()
                            end)
                            k.MouseButton1Down:Connect(function()
                                Kkl6fa = tick()

                                local M5lAedm = Kkl6fa
                                local _uYRl2kj

                                _uYRl2kj = McNxKV.MouseButton1Up:Connect(function(
                                )
                                    Kkl6fa = tick()
                                    McNxKV.Parent = nil

                                    JPi(k)
                                    _uYRl2kj.disconnect(_uYRl2kj)

                                    drag = nil
                                end)
                                McNxKV.Parent = Hv(pUT)

                                A4ZRczp()
                                wait(0.2)

                                while Kkl6fa == M5lAedm do
                                    A4ZRczp()

                                    if not GkjCn_mq() then
                                        break
                                    end

                                    wait()
                                end
                            end)
                            k.MouseButton1Up:Connect(function()
                                Kkl6fa = tick()
                            end)
                            TXbmx.MouseButton1Down:connect(bxNo9h and function(
                                tbN,
                                x
                            )
                                Kkl6fa = tick()

                                local m = Kkl6fa
                                local VVQ

                                VVQ = McNxKV.MouseButton1Up:Connect(function()
                                    Kkl6fa = tick()
                                    McNxKV.Parent = nil

                                    JPi(k)
                                    VVQ.disconnect(VVQ)

                                    drag = nil
                                end)
                                McNxKV.Parent = Hv(pUT)

                                if tbN > r.AbsolutePosition.x then
                                    rUT(WcwGYJh.ScrollIndex + WcwGYJh.VisibleSpace)
                                    wait(0.2)

                                    while Kkl6fa == m do
                                        if tbN < r.AbsolutePosition.x + r.AbsoluteSize.x then
                                            break
                                        end

                                        rUT(WcwGYJh.ScrollIndex + WcwGYJh.VisibleSpace)
                                        wait()
                                    end
                                else
                                    rUT(WcwGYJh.ScrollIndex - WcwGYJh.VisibleSpace)
                                    wait(0.2)

                                    while Kkl6fa == m do
                                        if tbN > r.AbsolutePosition.x then
                                            break
                                        end

                                        rUT(WcwGYJh.ScrollIndex - WcwGYJh.VisibleSpace)
                                        wait()
                                    end
                                end
                            end or function(Jb, qcpea)
                                Kkl6fa = tick()

                                local tjDBv = Kkl6fa
                                local vmn7v

                                vmn7v = McNxKV.MouseButton1Up:Connect(function()
                                    Kkl6fa = tick()
                                    McNxKV.Parent = nil

                                    JPi(k)
                                    vmn7v.disconnect(vmn7v)

                                    drag = nil
                                end)
                                McNxKV.Parent = Hv(pUT)

                                if qcpea > r.AbsolutePosition.y then
                                    rUT(WcwGYJh.ScrollIndex + WcwGYJh.VisibleSpace)
                                    wait(0.2)

                                    while Kkl6fa == tjDBv do
                                        if qcpea < r.AbsolutePosition.y + r.AbsoluteSize.y then
                                            break
                                        end

                                        rUT(WcwGYJh.ScrollIndex + WcwGYJh.VisibleSpace)
                                        wait()
                                    end
                                else
                                    rUT(WcwGYJh.ScrollIndex - WcwGYJh.VisibleSpace)
                                    wait(0.2)

                                    while Kkl6fa == tjDBv do
                                        if qcpea > r.AbsolutePosition.y then
                                            break
                                        end

                                        rUT(WcwGYJh.ScrollIndex - WcwGYJh.VisibleSpace)
                                        wait()
                                    end
                                end
                            end)
                            r.MouseButton1Down:connect(bxNo9h and function(
                                Au1mzs,
                                u39i
                            )
                                Kkl6fa = tick()

                                local Fdg7p = Au1mzs - r.AbsolutePosition.x
                                local GD3AP
                                local jph00k

                                GD3AP = McNxKV.MouseMoved:Connect(function(
                                    Au1mzs,
                                    u39i
                                )
                                    local wE_4o = TXbmx.AbsolutePosition.x
                                    local F = TXbmx.AbsoluteSize.x - r.AbsoluteSize.x
                                    local bUO1NvT = wE_4o + F

                                    Au1mzs = Au1mzs - Fdg7p
                                    Au1mzs = Au1mzs < wE_4o and wE_4o or Au1mzs > bUO1NvT and bUO1NvT or Au1mzs
                                    Au1mzs = Au1mzs - wE_4o

                                    g(Au1mzs / (F))
                                end)
                                jph00k = McNxKV.MouseButton1Up:Connect(function()
                                    Kkl6fa = tick()
                                    McNxKV.Parent = nil

                                    JPi(r)
                                    GD3AP.disconnect(GD3AP)

                                    GD3AP = nil

                                    jph00k.disconnect(jph00k)

                                    drag = nil
                                end)
                                McNxKV.Parent = Hv(pUT)
                            end or function(KRQG, tVwI_N)
                                Kkl6fa = tick()

                                local Jkp2lGXG = tVwI_N - r.AbsolutePosition.y
                                local ifcyuS
                                local V03W

                                ifcyuS = McNxKV.MouseMoved:Connect(function(
                                    KRQG,
                                    tVwI_N
                                )
                                    local R = TXbmx.AbsolutePosition.y
                                    local X6_ = TXbmx.AbsoluteSize.y - r.AbsoluteSize.y
                                    local tN5u = R + X6_

                                    tVwI_N = tVwI_N - Jkp2lGXG
                                    tVwI_N = tVwI_N < R and R or tVwI_N > tN5u and tN5u or tVwI_N
                                    tVwI_N = tVwI_N - R

                                    g(tVwI_N / (X6_))
                                end)
                                V03W = McNxKV.MouseButton1Up:Connect(function()
                                    Kkl6fa = tick()
                                    McNxKV.Parent = nil

                                    JPi(r)
                                    ifcyuS.disconnect(ifcyuS)

                                    ifcyuS = nil

                                    V03W.disconnect(V03W)

                                    drag = nil
                                end)
                                McNxKV.Parent = Hv(pUT)
                            end)
                            sX()

                            return WcwGYJh, pUT
                        end

                        LB1Z.ScrollBar = qX

                        local function h_8(Yqc0GWr, UC7, WbvvcjER)
                            Yqc0GWr = Yqc0GWr or Instance.new('Frame')

                            local rOLxXC = {}
                            local w762p7sZ = {}
                            local _7jt = 0
                            local ORXyFQ = 0
                            local OL1oV = 0
                            local Q = 0
                            local HQvT5

                            if UC7 then
                                if WbvvcjER then
                                    HQvT5 = function()
                                        Q = Q + 1

                                        local Tcv_ = Q
                                        local lygY = 0
                                        local HG = 0

                                        for u, m9i in pairs(rOLxXC)do
                                            if Q ~= Tcv_ then
                                                return
                                            end
                                            if m9i.Visible then
                                                local EqPMP = m9i.AbsoluteSize

                                                m9i.Position = UDim2.new(0, HG + _7jt, 1, 
-EqPMP.y - _7jt)
                                                lygY = EqPMP.y > lygY and EqPMP.y or lygY
                                                HG = HG + EqPMP.x + ORXyFQ
                                            end
                                        end

                                        if Q ~= Tcv_ then
                                            return
                                        end
                                        if #rOLxXC > 0 then
                                            Yqc0GWr.Size = UDim2.new(0, HG - ORXyFQ + _7jt * 2 + OL1oV, 0, lygY + _7jt * 2 + OL1oV)
                                        else
                                            Yqc0GWr.Size = UDim2.new(0, _7jt * 2 + OL1oV, 0, _7jt * 2 + OL1oV)
                                        end
                                    end
                                else
                                    HQvT5 = function()
                                        Q = Q + 1

                                        local JR = Q
                                        local G1Cl6 = 0
                                        local h = 0

                                        for fYUikw, W9qTCm in pairs(rOLxXC)do
                                            if Q ~= JR then
                                                return
                                            end
                                            if W9qTCm.Visible then
                                                local YlaSjEKp = W9qTCm.AbsoluteSize

                                                W9qTCm.Position = UDim2.new(0, h + _7jt, 0, _7jt)
                                                G1Cl6 = YlaSjEKp.y > G1Cl6 and YlaSjEKp.y or G1Cl6
                                                h = h + YlaSjEKp.x + ORXyFQ
                                            end
                                        end

                                        if Q ~= JR then
                                            return
                                        end
                                        if #rOLxXC > 0 then
                                            Yqc0GWr.Size = UDim2.new(0, h - ORXyFQ + _7jt * 2 + OL1oV, 0, G1Cl6 + _7jt * 2 + OL1oV)
                                        else
                                            Yqc0GWr.Size = UDim2.new(0, _7jt * 2 + OL1oV, 0, _7jt * 2 + OL1oV)
                                        end
                                    end
                                end
                            else
                                if WbvvcjER then
                                    HQvT5 = function()
                                        Q = Q + 1

                                        local u_ogp8 = Q
                                        local Kob = 0
                                        local a3 = 0

                                        for MvWxr, HgY6 in pairs(rOLxXC)do
                                            if Q ~= u_ogp8 then
                                                return
                                            end
                                            if HgY6.Visible then
                                                local Wc = HgY6.AbsoluteSize

                                                HgY6.Position = UDim2.new(1, -Wc.x - _7jt, 0, a3 + _7jt)
                                                Kob = Wc.x > Kob and Wc.x or Kob
                                                a3 = a3 + Wc.y + ORXyFQ
                                            end
                                        end

                                        if Q ~= u_ogp8 then
                                            return
                                        end
                                        if #rOLxXC > 0 then
                                            Yqc0GWr.Size = UDim2.new(0, Kob + _7jt * 2 + OL1oV, 0, a3 - ORXyFQ + _7jt * 2 + OL1oV)
                                        else
                                            Yqc0GWr.Size = UDim2.new(0, _7jt * 2 + OL1oV, 0, _7jt * 2 + OL1oV)
                                        end
                                    end
                                else
                                    HQvT5 = function()
                                        Q = Q + 1

                                        local eQ5 = Q
                                        local kvR = 0
                                        local So = 0

                                        for Wi, X1WM in pairs(rOLxXC)do
                                            if Q ~= eQ5 then
                                                return
                                            end
                                            if X1WM.Visible then
                                                local OVBAVy = X1WM.AbsoluteSize

                                                X1WM.Position = UDim2.new(0, _7jt, 0, So + _7jt)
                                                kvR = OVBAVy.x > kvR and OVBAVy.x or kvR
                                                So = So + OVBAVy.y + ORXyFQ
                                            end
                                        end

                                        if Q ~= eQ5 then
                                            return
                                        end
                                        if #rOLxXC > 0 then
                                            Yqc0GWr.Size = UDim2.new(0, kvR + _7jt * 2 + OL1oV, 0, So - ORXyFQ + _7jt * 2 + OL1oV)
                                        else
                                            Yqc0GWr.Size = UDim2.new(0, _7jt * 2 + OL1oV, 0, _7jt * 2 + OL1oV)
                                        end
                                    end
                                end
                            end

                            local function dN(Joa, NF0)
                                ORXyFQ = Joa or ORXyFQ
                                _7jt = NF0 or _7jt

                                HQvT5()
                            end
                            local function B35igHj(OeF, sawaLtSr)
                                if OeF.IsA(OeF, 'GuiObject') then
                                    if type(sawaLtSr) == 'number' then
                                        table.insert(rOLxXC, sawaLtSr, OeF)
                                    else
                                        table.insert(rOLxXC, OeF)
                                    end

                                    w762p7sZ[OeF] = OeF.Changed:Connect(function(
                                        KWeL
                                    )
                                        if KWeL == 'AbsoluteSize' or KWeL == 'Visible' then
                                            HQvT5()
                                        end
                                    end)
                                    OeF.Parent = Yqc0GWr

                                    HQvT5()
                                end
                            end
                            local function o8pPC2(Krvhod9t)
                                if Krvhod9t == nil then
                                    Krvhod9t = #rOLxXC
                                elseif type(Krvhod9t) ~= 'number' then
                                    Krvhod9t = hPQ(rOLxXC, Krvhod9t)
                                end
                                if Krvhod9t then
                                    Krvhod9t = R1FIoQI(rOLxXC, Krvhod9t)

                                    local bfx5oN = table.remove(rOLxXC, Krvhod9t)

                                    if w762p7sZ[bfx5oN] then
                                        w762p7sZ[bfx5oN]:disconnect()

                                        w762p7sZ[bfx5oN] = nil
                                    end

                                    bfx5oN.Parent = nil

                                    HQvT5()

                                    return bfx5oN
                                end
                            end
                            local function f7nUIW(XDKTNXw, RyTb)
                                if XDKTNXw == nil then
                                    XDKTNXw = #rOLxXC
                                elseif type(XDKTNXw) ~= 'number' then
                                    XDKTNXw = hPQ(rOLxXC, XDKTNXw)
                                end
                                if RyTb == nil then
                                    RyTb = #rOLxXC
                                elseif type(RyTb) ~= 'number' then
                                    RyTb = hPQ(rOLxXC, RyTb)
                                end
                                if XDKTNXw and RyTb then
                                    XDKTNXw = R1FIoQI(rOLxXC, XDKTNXw)
                                    RyTb = R1FIoQI(rOLxXC, RyTb)

                                    local ImqF1v = table.remove(rOLxXC, XDKTNXw)

                                    table.insert(rOLxXC, RyTb, ImqF1v)
                                    HQvT5()
                                end
                            end

                            local bDgD = {
                                GUI = Yqc0GWr,
                                List = rOLxXC,
                                Update = HQvT5,
                                SetPadding = dN,
                                AddObject = B35igHj,
                                RemoveObject = o8pPC2,
                                MoveObject = f7nUIW,
                                GetIndex = function(KRu)
                                    return hPQ(rOLxXC, KRu)
                                end,
                            }

                            local function Kg8PhSq()
                                for Vy5qF, rokDhenZ in pairs(rOLxXC)do
                                    if w762p7sZ[rokDhenZ] then
                                        w762p7sZ[rokDhenZ]:disconnect()

                                        w762p7sZ[rokDhenZ] = nil
                                    end

                                    rokDhenZ.Parent = nil
                                    rOLxXC[Vy5qF] = nil
                                end
                                for td8OL, W in pairs(w762p7sZ)do
                                    W.disconnect(W)

                                    w762p7sZ[td8OL] = nil
                                end
                                for CS in pairs(bDgD)do
                                    bDgD[CS] = nil
                                end

                                Yqc0GWr.Destroy(Yqc0GWr)
                            end

                            bDgD.Destroy = Kg8PhSq

                            for iv2VylMn, Oi in pairs(Yqc0GWr.GetChildren(Yqc0GWr))do
                                B35igHj(Oi, iv2VylMn)
                            end

                            HQvT5()
                            Yqc0GWr.Changed:Connect(function(KwcrRu)
                                if KwcrRu == 'AbsoluteSize' or KwcrRu == 'Style' then
                                    local bgFJ = OL1oV

                                    OL1oV = Ch(Yqc0GWr) * 2

                                    if OL1oV ~= bgFJ then
                                        HQvT5()
                                    end
                                end
                            end)

                            return bDgD, Yqc0GWr
                        end

                        LB1Z.StackingFrame = h_8

                        local function xL7OTb(fqGD1rfW, K0)
                            fqGD1rfW = fqGD1rfW or {}
                            K0 = entyHeight or a

                            local _1To2 = Instance.new('Frame')

                            _1To2.Size = UDim2.new(0, 300, 0, 200)
                            _1To2.Style = Enum.FrameStyle.RobloxRound
                            _1To2.Active = true
                            _1To2.Name = 'ScrollingListFrame'

                            local lkzs = Instance.new('Frame', _1To2)

                            lkzs.Name = 'ListViewFrame'
                            lkzs.BackgroundTransparency = 1
                            lkzs.Size = UDim2.new(1, -K0, 1, 0)

                            local Hhwf3oO = Stylist{
                                Name = 'ListEntry',
                                Font = 'ArialBold',
                                FontSize = 'Size14',
                                TextColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                TextXAlignment = 'Left',
                            }
                            local Oh5 = Instance.new('TextLabel')
                            local LgQF = {}
                            local emGbhJGH, e_Ev8OQ = qX(false, K0)

                            e_Ev8OQ.Size = UDim2.new(0, K0, 1, 0)
                            e_Ev8OQ.Position = UDim2.new(1, -K0, 0, 0)
                            e_Ev8OQ.Parent = _1To2

                            local zBMvU6 = emGbhJGH.Update
                            local ZmbDgbg = {
                                List = fqGD1rfW,
                                GUI = _1To2,
                                Scroll = emGbhJGH,
                                Update = zBMvU6,
                                EntryStylist = Hhwf3oO,
                            }

                            emGbhJGH.UpdateCallback = function()
                                local guEhw = emGbhJGH.VisibleSpace

                                for sll = 1, guEhw do
                                    local BzNBgGvD = fqGD1rfW[sll + emGbhJGH.ScrollIndex]

                                    if BzNBgGvD then
                                        local KIQCH = LgQF[sll]

                                        if not KIQCH then
                                            KIQCH = Oh5.Clone(Oh5)

                                            Hhwf3oO.AddObject(KIQCH)

                                            LgQF[sll] = KIQCH
                                            KIQCH.Parent = lkzs
                                            KIQCH.ZIndex = _1To2.ZIndex
                                        end

                                        KIQCH.Text = tostring(BzNBgGvD)
                                        KIQCH.Position = UDim2.new(0, 0, 0, (sll - 1) * K0)
                                        KIQCH.Size = UDim2.new(1, 0, 0, K0)
                                    else
                                        local L4bw = LgQF[sll]

                                        if L4bw then
                                            Hhwf3oO.RemoveObject(L4bw)
                                            L4bw.Destroy(L4bw)

                                            LgQF[sll] = nil
                                        end
                                    end
                                end
                                for XhBEPD = emGbhJGH.VisibleSpace + 1, #LgQF do
                                    local Uq = LgQF[XhBEPD]

                                    if Uq then
                                        Hhwf3oO.RemoveObject(Uq)
                                        Uq.Destroy(Uq)
                                    end

                                    LgQF[XhBEPD] = nil
                                end
                            end

                            local function hMxy(RmyiI_D, w_2iiJwx)
                                if w_2iiJwx then
                                    table.insert(fqGD1rfW, w_2iiJwx, RmyiI_D)
                                else
                                    table.insert(fqGD1rfW, RmyiI_D)
                                end

                                emGbhJGH.TotalSpace = #fqGD1rfW

                                zBMvU6()
                            end

                            ZmbDgbg.AddEntry = hMxy

                            local function hj3(RRESd, S1qoVmFR)
                                if S1qoVmFR then
                                    for f2 = 1, #RRESd do
                                        table.insert(fqGD1rfW, S1qoVmFR + f2 - 1, RRESd[f2])
                                    end
                                else
                                    for O3rHR = 1, #RRESd do
                                        table.insert(fqGD1rfW, RRESd[O3rHR])
                                    end
                                end

                                emGbhJGH.TotalSpace = #fqGD1rfW

                                zBMvU6()
                            end

                            ZmbDgbg.AddEntries = hj3

                            local function M7q3pa8(YU80)
                                if type(YU80) == 'number' or type(YU80) == 'nil' then
                                    table.remove(fqGD1rfW, YU80)
                                else
                                    for ARnO_0E, Qh in pairs(fqGD1rfW)do
                                        if Qh == YU80 then
                                            table.remove(fqGD1rfW, ARnO_0E)

                                            break
                                        end
                                    end
                                end

                                emGbhJGH.TotalSpace = #fqGD1rfW

                                zBMvU6()
                            end

                            ZmbDgbg.RemoveEntry = M7q3pa8

                            NUhYw6R4(_1To2)
                            lkzs.Changed:Connect(function(lqxbMC)
                                if lqxbMC == 'AbsoluteSize' then
                                    emGbhJGH.VisibleSpace = math.floor(lkzs.AbsoluteSize.y / K0)

                                    zBMvU6()
                                end
                            end)

                            ZmbDgbg.Destroy = function()
                                for qOk5Jm in pairs(ZmbDgbg)do
                                    ZmbDgbg[qOk5Jm] = nil
                                end
                                for tpSe2fs, AuVgc7 in pairs(LgQF)do
                                    AuVgc7.Destroy(AuVgc7)

                                    LgQF[tpSe2fs] = nil
                                end

                                Hhwf3oO.Destroy()
                                emGbhJGH.Destroy()
                                _1To2.Destroy(_1To2)
                            end

                            return ZmbDgbg, _1To2
                        end

                        LB1Z.ScrollingList = xL7OTb

                        local function w8T3f(vxnB, ZQOXXXd, cyBmTv)
                            if vxnB == nil then
                                vxnB = true
                            end

                            cyBmTv = cyBmTv or a

                            local _TKd0F = NsoTwDs'Frame'{
                                Name = 'ScrollingContainer',
                                Size = UDim2.new(0, 300, 0, 200),
                                BackgroundTransparency = 1,
                            }
                            local Z = NsoTwDs'Frame'{
                                Name = 'Boundary',
                                BackgroundColor3 = Color3.new(0, 0, 0),
                                BorderColor3 = Color3.new(1, 1, 1),
                                ClipsDescendants = true,
                                Parent = _TKd0F,
                            }
                            local Dw = NsoTwDs'Frame'{
                                Name = 'Container',
                                BackgroundTransparency = 1,
                                Parent = Z,
                            }
                            local bsFpM = {
                                GUI = _TKd0F,
                                Boundary = Z,
                                Container = Dw,
                            }

                            if vxnB and ZQOXXXd then
                                local h = qX(false, cyBmTv)

                                h.PageIncrement = cyBmTv
                                h.GUI.Position = UDim2.new(1, -cyBmTv, 0, 0)
                                h.GUI.Size = UDim2.new(0, cyBmTv, 1, -cyBmTv)
                                h.GUI.Parent = _TKd0F

                                local doBTofya = h.Update

                                h.UpdateCallback = function()
                                    Dw.Position = UDim2.new(0, Dw.Position.X.Offset, 0, 
-h.ScrollIndex)
                                end

                                local rNP = qX(true, cyBmTv)

                                rNP.PageIncrement = cyBmTv
                                rNP.GUI.Position = UDim2.new(0, 0, 1, -cyBmTv)
                                rNP.GUI.Size = UDim2.new(1, -cyBmTv, 0, cyBmTv)
                                rNP.GUI.Parent = _TKd0F

                                local TL = rNP.Update

                                rNP.UpdateCallback = function()
                                    Dw.Position = UDim2.new(0, -rNP.ScrollIndex, 0, Dw.Position.Y.Offset)
                                end
                                Z.Size = UDim2.new(1, -cyBmTv, 1, -cyBmTv)

                                local function Tzgj_W()
                                    doBTofya()
                                    TL()
                                end
                                local function g0AS39(t2)
                                    if t2 == 'AbsoluteSize' then
                                        h.TotalSpace = Dw.AbsoluteSize.y
                                        h.VisibleSpace = Z.AbsoluteSize.y
                                        rNP.TotalSpace = Dw.AbsoluteSize.x
                                        rNP.VisibleSpace = Z.AbsoluteSize.x

                                        Tzgj_W()
                                    end
                                end

                                Z.Changed:connect(g0AS39)
                                Dw.Changed:connect(g0AS39)

                                bsFpM.VScroll = h
                                bsFpM.HScroll = rNP
                                bsFpM.Update = Tzgj_W

                                g0AS39('AbsoluteSize')
                                Tzgj_W()
                            elseif vxnB then
                                local PDewNmM = qX(false, cyBmTv)

                                PDewNmM.PageIncrement = cyBmTv
                                PDewNmM.GUI.Position = UDim2.new(1, -cyBmTv, 0, 0)
                                PDewNmM.GUI.Size = UDim2.new(0, cyBmTv, 1, 0)
                                PDewNmM.GUI.Parent = _TKd0F

                                local GFlD = PDewNmM.Update

                                PDewNmM.UpdateCallback = function()
                                    Dw.Position = UDim2.new(0, Dw.Position.X.Offset, 0, 
-PDewNmM.ScrollIndex)
                                end

                                local function y3owm5E(psHOEe2)
                                    if psHOEe2 == 'AbsoluteSize' then
                                        PDewNmM.TotalSpace = Dw.AbsoluteSize.y
                                        PDewNmM.VisibleSpace = Z.AbsoluteSize.y

                                        GFlD()
                                    end
                                end

                                Z.Changed:connect(y3owm5E)
                                Dw.Changed:connect(y3owm5E)

                                bsFpM.VScroll = PDewNmM
                                bsFpM.Update = GFlD

                                y3owm5E('AbsoluteSize')
                                GFlD()
                            elseif ZQOXXXd then
                                local R1zT = qX(true, cyBmTv)

                                R1zT.PageIncrement = cyBmTv
                                R1zT.GUI.Position = UDim2.new(0, 0, 1, -cyBmTv)
                                R1zT.GUI.Size = UDim2.new(1, 0, 0, cyBmTv)
                                R1zT.GUI.Parent = _TKd0F

                                local J2Df = R1zT.Update

                                R1zT.UpdateCallback = function()
                                    Dw.Position = UDim2.new(0, -R1zT.ScrollIndex, 0, Dw.Position.Y.Offset)
                                end

                                local function YyS(o)
                                    if o == 'AbsoluteSize' then
                                        R1zT.TotalSpace = Dw.AbsoluteSize.x
                                        R1zT.VisibleSpace = Z.AbsoluteSize.x

                                        J2Df()
                                    end
                                end

                                Z.Changed:connect(YyS)
                                Dw.Changed:connect(YyS)

                                bsFpM.HScroll = R1zT
                                bsFpM.Update = J2Df

                                YyS('AbsoluteSize')
                                J2Df()
                            end

                            return bsFpM, _TKd0F
                        end

                        LB1Z.ScrollingContainer = w8T3f

                        local function K(MY16y, ZBUghmX, ncK)
                            MY16y = MY16y or {}
                            ncK = ncK or a

                            local Deq = 0
                            local GH3wE = math.floor(Deq / ncK)
                            local xZFv = 0
                            local bc0w4j = {}
                            local OGMxal0 = {}
                            local QlewVjkq = {}
                            local Q = {}
                            local yI = {}
                            local EDE3 = NsoTwDs'Frame'{
                                Size = UDim2.new(0, 300, 0, 200),
                                BackgroundTransparency = 1,
                                NsoTwDs'Frame'{
                                    Name = 'ListViewFrame',
                                    BackgroundTransparency = 1,
                                    Size = UDim2.new(1, -ncK, 1, -ncK),
                                    Position = UDim2.new(0, 0, 0, ncK),
                                },
                                NsoTwDs'Frame'{
                                    Name = 'ColumnHeaderFrame',
                                    BackgroundTransparency = 1,
                                    Size = UDim2.new(1, -ncK, 0, ncK),
                                    Position = UDim2.new(0, 0, 0, 0),
                                },
                            }
                            local FpWG11U = EDE3.ListViewFrame
                            local kRY46C = EDE3.ColumnHeaderFrame
                            local MvOaiq = zhzpBSx{
                                TextColor3 = Color3.new(1, 1, 1),
                                TextTransparency = 0,
                                Font = Enum.Font.ArialBold,
                                FontSize = Enum.FontSize.Size14,
                            }
                            local DUic_1K = zhzpBSx{
                                BackgroundColor3 = Color3.new(0, 0, 0),
                                BorderColor3 = Color3.new(1, 1, 1),
                                BorderSizePixel = 1,
                                BackgroundTransparency = 0.7,
                            }

                            MvOaiq.AddStylist(DUic_1K)

                            local rVj9z4 = zhzpBSx{
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BorderColor3 = Color3.new(1, 1, 1),
                                BorderSizePixel = 1,
                                BackgroundTransparency = 0.8,
                            }

                            MvOaiq.AddStylist(rVj9z4)

                            local mWkmCx = zhzpBSx{BackgroundTransparency = 1}

                            MvOaiq.AddStylist(mWkmCx)

                            local qQpo = {}
                            local qXKzBXo0 = {}
                            local cJ, HI4G3oH = qX(false, ncK)

                            HGli(HI4G3oH){
                                Size = UDim2.new(0, ncK, 1, -ncK),
                                Position = UDim2.new(1, -ncK, 0, ncK),
                                Parent = EDE3,
                            }

                            local ncWw = cJ.Update
                            local kdS = {
                                Data = MY16y,
                                GUI = EDE3,
                                Stylist = {
                                    Global = MvOaiq,
                                    Cell = DUic_1K,
                                    Header = rVj9z4,
                                    RowSpan = mWkmCx,
                                    Rows = qQpo,
                                    Columns = qXKzBXo0,
                                },
                                Update = ncWw,
                            }
                            local OS60 = 0

                            cJ.UpdateCallback = function()
                                OS60 = OS60 + 1

                                local DIoX3 = OS60

                                for sjXYan, KxB8fW in pairs(Q)do
                                    if OS60 ~= DIoX3 then
                                        return
                                    end

                                    KxB8fW.Visible = false
                                    Q[sjXYan] = nil
                                end

                                for M = 1, cJ.VisibleSpace do
                                    if OS60 ~= DIoX3 then
                                        return
                                    end

                                    local JmyAd = bc0w4j[M + cJ.ScrollIndex]

                                    if JmyAd then
                                        Q[#Q + 1] = JmyAd
                                        JmyAd.Position = UDim2.new(0, 0, 0, (M - 1) * ncK)
                                        JmyAd.Size = UDim2.new(1, 0, 0, ncK)
                                        JmyAd.Visible = true
                                    end
                                end
                            end

                            FpWG11U.Changed:Connect(function(L)
                                if L == 'AbsoluteSize' then
                                    cJ.VisibleSpace = math.floor(FpWG11U.AbsoluteSize.y / ncK)

                                    ncWw()
                                end
                            end)

                            local dl = NsoTwDs'Frame'{
                                Name = 'SortGraphic',
                                BackgroundTransparency = 1,
                                Size = UDim2.new(0, ncK, 0, ncK),
                                Position = UDim2.new(1, -ncK * 0.75, 0.5, -ncK / 8),
                            }
                            local b2UK = {
                                TextColor3 = 'BackgroundColor3',
                                TextTransparency = 'BackgroundTransparency',
                                BorderSizePixel = '',
                            }
                            local FC0yhp, lL30T = seMLr('arrow-up', Vector2.new(ncK, ncK))

                            MvOaiq.AddStylist(FC0yhp.Stylist, b2UK)

                            lL30T.Visible = false
                            lL30T.Parent = dl

                            local zt, Ofgm3g = seMLr('arrow-down', Vector2.new(ncK, ncK))

                            MvOaiq.AddStylist(zt.Stylist, b2UK)

                            Ofgm3g.Visible = false
                            Ofgm3g.Parent = dl

                            local function z6WE21dc(U, uAbuU)
                                if uAbuU then
                                    if uAbuU.TextXAlignment == Enum.TextXAlignment.Right then
                                        dl.Position = UDim2.new(0, 0, 0, 0)
                                    else
                                        dl.Position = UDim2.new(1, -ncK, 0, 0)
                                    end
                                end
                                if U > 0 then
                                    lL30T.Visible = true
                                    Ofgm3g.Visible = false

                                    if dl.ZIndex ~= uAbuU.ZIndex then
                                        m6SCS0(dl, uAbuU.ZIndex)
                                    end

                                    dl.Parent = uAbuU
                                elseif U < 0 then
                                    lL30T.Visible = false
                                    Ofgm3g.Visible = true

                                    if dl.ZIndex ~= uAbuU.ZIndex then
                                        m6SCS0(dl, uAbuU.ZIndex)
                                    end

                                    dl.Parent = uAbuU
                                else
                                    lL30T.Visible = false
                                    Ofgm3g.Visible = false
                                    dl.Parent = nil
                                end
                            end
                            local function rJg9H(EF205E, YFR5myC)
                                for KMu, PPqE in pairs(MY16y)do
                                    bc0w4j[KMu] = OGMxal0[PPqE]
                                end

                                local K1Lgio = kRY46C.GetChildren(kRY46C)[EF205E]

                                z6WE21dc(0)

                                if YFR5myC == iD1IUx.ASCENDING then
                                    table.sort(bc0w4j, function(sOE, hf9m_U8)
                                        local dTQ, k29Z4 = QlewVjkq[sOE][EF205E], QlewVjkq[hf9m_U8][EF205E]
                                        local ai = type(dTQ)

                                        if ai == 'table' then
                                            dTQ, k29Z4 = dTQ[1], k29Z4[1]
                                            ai = type(dTQ)
                                        end
                                        if ai == 'boolean' then
                                            return tostring(dTQ) > tostring(k29Z4)
                                        elseif ai == 'number' or ai == 'string' then
                                            return dTQ < k29Z4
                                        else
                                            return tostring(dTQ) < tostring(k29Z4)
                                        end
                                    end)
                                    z6WE21dc(1, K1Lgio)
                                elseif YFR5myC == iD1IUx.DESCENDING then
                                    table.sort(bc0w4j, function(t, TmE)
                                        local xR, LJ3E = QlewVjkq[t][EF205E], QlewVjkq[TmE][EF205E]
                                        local Vjx = type(xR)

                                        if Vjx == 'table' then
                                            xR, LJ3E = xR[1], LJ3E[1]
                                            Vjx = type(xR)
                                        end
                                        if Vjx == 'boolean' then
                                            return tostring(xR) < tostring(LJ3E)
                                        elseif Vjx == 'number' or Vjx == 'string' then
                                            return xR > LJ3E
                                        else
                                            return tostring(xR) > tostring(LJ3E)
                                        end
                                    end)

                                    local K1Lgio = kRY46C.GetChildren(kRY46C)[EF205E]

                                    z6WE21dc(-1, K1Lgio)
                                end

                                ncWw()
                            end

                            local sNyznm3W = NsoTwDs'Frame'{
                                Name = 'Row',
                                Visible = false,
                            }

                            local function UU(curjMDD, gBS9Zk)
                                if gBS9Zk == nil then
                                    curjMDD.Text = ''
                                else
                                    gBS9Zk = tostring(gBS9Zk)

                                    if #gBS9Zk > 0 and curjMDD.TextXAlignment ~= Enum.TextXAlignment.Center then
                                        if curjMDD.TextXAlignment == Enum.TextXAlignment.Left then
                                            curjMDD.Text = ' ' .. gBS9Zk
                                        elseif curjMDD.TextXAlignment == Enum.TextXAlignment.Right then
                                            curjMDD.Text = gBS9Zk .. ' '
                                        end
                                    else
                                        curjMDD.Text = gBS9Zk
                                    end
                                end
                            end
                            local function YBciOAz2(Xr, UPp)
                                local hWpZC = yI[Xr]
                                local bFF8, RXM = hWpZC.Checked, hWpZC.Unchecked

                                if type(RXM) == 'string' then
                                    Xr.Image = UPp and '' or RXM
                                elseif type(RXM) == 'table' then
                                    if UPp then
                                        RXM.GUI.Parent = nil
                                    else
                                        if RXM.GUI.ZIndex ~= Xr.ZIndex then
                                            m6SCS0(RXM.GUI, Xr.ZIndex)
                                        end

                                        RXM.GUI.Parent = Xr
                                    end
                                end
                                if type(bFF8) == 'string' then
                                    Xr.Image = UPp and bFF8 or ''
                                elseif type(bFF8) == 'table' then
                                    if UPp then
                                        if bFF8.GUI.ZIndex ~= Xr.ZIndex then
                                            m6SCS0(bFF8.GUI, Xr.ZIndex)
                                        end

                                        bFF8.GUI.Parent = Xr
                                    else
                                        bFF8.GUI.Parent = nil
                                    end
                                end
                            end

                            local wJvNH
                            local dOvZoN = iD1IUx.NONE
                            local IP01vP = UDim.new()

                            for Ieb1cGC, Bf in pairs(ZBUghmX)do
                                local hKJi2 = zhzpBSx(Bf.style)

                                qXKzBXo0[Ieb1cGC] = hKJi2

                                local jW = Bf.type
                                local JkVK

                                if jW == 'text' then
                                    JkVK = Instance.new('TextLabel', sNyznm3W)
                                    JkVK.Name = 'Text'
                                elseif jW == 'image' then
                                    JkVK = Instance.new('ImageLabel', sNyznm3W)
                                    JkVK.Name = 'Image'
                                elseif jW == 'text-button' then
                                    JkVK = Instance.new('TextButton', sNyznm3W)
                                    JkVK.Name = 'TextButton'
                                elseif jW == 'image-button' then
                                    JkVK = Instance.new('ImageButton', sNyznm3W)
                                    JkVK.Name = 'ImageButton'
                                elseif jW == 'text-field' then
                                    JkVK = Instance.new('TextBox', sNyznm3W)
                                    JkVK.Name = 'TextField'
                                    JkVK.ClearTextOnFocus = false
                                elseif jW == 'check-box' then
                                    JkVK = Instance.new('ImageButton', sNyznm3W)
                                    JkVK.Name = 'CheckBox'
                                end

                                local oXM7 = NsoTwDs'TextButton'{
                                    Name = 'ColumnHeader',
                                    Parent = kRY46C,
                                }

                                rVj9z4.AddObject(oXM7)
                                hKJi2.AddObject(oXM7)
                                UU(oXM7, Bf.name)
                                oXM7.MouseButton1Click:Connect(function()
                                    if wJvNH == oXM7 then
                                        if dOvZoN == iD1IUx.ASCENDING then
                                            dOvZoN = iD1IUx.DESCENDING
                                        elseif dOvZoN == iD1IUx.DESCENDING then
                                            dOvZoN = iD1IUx.NONE
                                        else
                                            dOvZoN = iD1IUx.ASCENDING
                                        end
                                    else
                                        dOvZoN = iD1IUx.ASCENDING
                                    end

                                    wJvNH = oXM7

                                    rJg9H(Ieb1cGC, dOvZoN)
                                end)

                                local z__Va = Bf.width

                                oXM7.Size = UDim2.new(z__Va.Scale, z__Va.Offset, 1, 0)
                                oXM7.Position = UDim2.new(IP01vP.Scale, IP01vP.Offset, 0, 0)
                                IP01vP = IP01vP + z__Va
                            end

                            IP01vP = nil
                            kdS.UpdateRow = function(uGbp)
                                local OXK0

                                if type(uGbp) == 'number' then
                                    OXK0 = MY16y[uGbp]
                                else
                                    OXK0 = uGbp
                                end

                                local Ek3QueoD = OGMxal0[OXK0]
                                local g = Ek3QueoD.GetChildren(Ek3QueoD)
                                local m_l = UDim.new()

                                for L, XmcB in pairs(ZBUghmX)do
                                    local l5Nd = XmcB.type
                                    local sEMv = g[L]
                                    local VPX = OXK0[L]
                                    local c = XmcB.width

                                    if l5Nd == 'text' then
                                        UU(sEMv, VPX)
                                    elseif l5Nd == 'image' then
                                        sEMv.Image = VPX
                                    elseif l5Nd == 'text-button' then
                                        UU(sEMv, VPX)
                                    elseif l5Nd == 'image-button' then
                                        sEMv.Image = VPX
                                    elseif l5Nd == 'text-field' then
                                        UU(sEMv, VPX)
                                    elseif l5Nd == 'check-box' then
                                        YBciOAz2(sEMv, VPX)
                                    end

                                    sEMv.Size = UDim2.new(c.Scale, c.Offset, 1, 0)
                                    sEMv.Position = UDim2.new(m_l.Scale, m_l.Offset, 0, 0)
                                    m_l = m_l + c
                                end
                            end
                            kdS.AddRow = function(VGJdue, ztMtdy, rA)
                                local zHapMi = sNyznm3W.Clone(sNyznm3W)

                                if ztMtdy then
                                    ztMtdy = ztMtdy > #MY16y + 1 and #MY16y + 1 or ztMtdy < 1 and 1 or ztMtdy

                                    table.insert(MY16y, ztMtdy, VGJdue)
                                    table.insert(bc0w4j, ztMtdy, zHapMi)
                                else
                                    table.insert(MY16y, VGJdue)
                                    table.insert(bc0w4j, zHapMi)
                                end

                                cJ.TotalSpace = #MY16y

                                mWkmCx.AddObject(zHapMi)

                                zHapMi.Size = UDim2.new(1, 0, 0, ncK)
                                zHapMi.ZIndex = EDE3.ZIndex
                                zHapMi.Parent = FpWG11U

                                local Jmsve1Q = zHapMi.GetChildren(zHapMi)
                                local _B8W1YL = UDim.new()
                                local F = zhzpBSx(rA)

                                qQpo[VGJdue] = F

                                for FN7, cpNryuPy in pairs(ZBUghmX)do
                                    local mVKRd8 = cpNryuPy.type
                                    local TBV0052 = Jmsve1Q[FN7]

                                    TBV0052.ZIndex = EDE3.ZIndex

                                    DUic_1K.AddObject(TBV0052)
                                    qXKzBXo0[FN7].AddObject(TBV0052)
                                    F.AddObject(TBV0052)

                                    local cGBeq = VGJdue[FN7]
                                    local PRXb = cpNryuPy.width

                                    if mVKRd8 == 'text' then
                                        UU(TBV0052, cGBeq)
                                    elseif mVKRd8 == 'image' then
                                        TBV0052.Image = cGBeq
                                    elseif mVKRd8 == 'text-button' then
                                        UU(TBV0052, cGBeq)
                                        TBV0052.MouseButton1Click:Connect(function(
                                        )
                                            cpNryuPy.callback(VGJdue, kdS)
                                        end)
                                    elseif mVKRd8 == 'image-button' then
                                        TBV0052.Image = cGBeq

                                        TBV0052.MouseButton1Click:Connect(function(
                                        )
                                            cpNryuPy.callback(VGJdue, kdS)
                                        end)
                                    elseif mVKRd8 == 'text-field' then
                                        UU(TBV0052, cGBeq)

                                        local t = cGBeq

                                        TBV0052.FocusLost:Connect(function(
                                            Jk3TbYo
                                        )
                                            local Nm61D3Il = cpNryuPy.callback(TBV0052.Text, VGJdue, kdS, Jk3TbYo)

                                            if Nm61D3Il then
                                                VGJdue[FN7] = Nm61D3Il

                                                UU(TBV0052, Nm61D3Il)

                                                t = Nm61D3Il
                                            else
                                                UU(TBV0052, t)
                                            end
                                        end)
                                    elseif mVKRd8 == 'check-box' then
                                        yI[TBV0052] = {}

                                        if type(cpNryuPy.checked) == 'table' then
                                            local Qjx7nk = seMLr(cpNryuPy.checked[1], cpNryuPy.checked[2])

                                            m6SCS0(Qjx7nk.GUI, EDE3.ZIndex)
                                            MvOaiq.AddStylist(Qjx7nk.Stylist, b2UK)

                                            yI[TBV0052].Checked = Qjx7nk
                                        else
                                            yI[TBV0052].Checked = cpNryuPy.checked
                                        end
                                        if type(cpNryuPy.unchecked) == 'table' then
                                            local ZfqIP = seMLr(cpNryuPy.unchecked[1], cpNryuPy.unchecked[2])

                                            m6SCS0(ZfqIP.GUI, EDE3.ZIndex)
                                            MvOaiq.AddStylist(ZfqIP.Stylist, b2UK)

                                            yI[TBV0052].Unchecked = ZfqIP
                                        else
                                            yI[TBV0052].Unchecked = cpNryuPy.unchecked
                                        end

                                        YBciOAz2(TBV0052, cGBeq)
                                        TBV0052.MouseButton1Click:Connect(function(
                                        )
                                            local p4ZD2RW = true

                                            if cpNryuPy.callback then
                                                p4ZD2RW = cpNryuPy.callback(VGJdue, kdS)
                                            end
                                            if p4ZD2RW then
                                                VGJdue[FN7] = not VGJdue[FN7]

                                                YBciOAz2(TBV0052, VGJdue[FN7])
                                            end
                                        end)
                                    end

                                    TBV0052.Size = UDim2.new(PRXb.Scale, PRXb.Offset, 1, 0)
                                    TBV0052.Position = UDim2.new(_B8W1YL.Scale, _B8W1YL.Offset, 0, 0)
                                    _B8W1YL = _B8W1YL + PRXb
                                end

                                OGMxal0[VGJdue] = zHapMi
                                QlewVjkq[zHapMi] = VGJdue

                                ncWw()

                                return VGJdue
                            end
                            kdS.RemoveRow = function(o)
                                local QK5cr

                                if type(o) == 'number' or type(o) == 'nil' then
                                    QK5cr = table.remove(MY16y, o)
                                else
                                    for e575, OP in pairs(MY16y)do
                                        if OP == o then
                                            QK5cr = table.remove(MY16y, e575)

                                            break
                                        end
                                    end
                                end
                                if QK5cr then
                                    local HxUqj4B = qQpo[QK5cr]

                                    HxUqj4B.Destroy()

                                    qQpo[QK5cr] = nil

                                    local dryo7a = OGMxal0[QK5cr]

                                    QlewVjkq[dryo7a] = nil
                                    OGMxal0[QK5cr] = nil

                                    for Vvmt, z1jKKH in pairs(bc0w4j)do
                                        if z1jKKH == dryo7a then
                                            for Vvmt, A in pairs(z1jKKH.GetChildren(z1jKKH))do
                                                MvOaiq.RemoveObject(A)
                                                qXKzBXo0[Vvmt].RemoveObject(A)
                                                DUic_1K.RemoveObject(A)
                                            end

                                            table.remove(bc0w4j, Vvmt)

                                            break
                                        end
                                    end

                                    cJ.TotalSpace = #MY16y

                                    for i_ASR7X, lneZ2 in pairs(Q)do
                                        if lneZ2 == dryo7a then
                                            table.remove(Q, i_ASR7X)

                                            break
                                        end
                                    end

                                    dryo7a.Destroy(dryo7a)
                                end

                                ncWw()

                                return QK5cr
                            end

                            do
                                local wZLxwQr = {}

                                for Z, b3h1 in pairs(MY16y)do
                                    wZLxwQr[Z] = b3h1
                                    MY16y[Z] = nil
                                end

                                for AGn = 1, #wZLxwQr do
                                    kdS.AddRow(wZLxwQr[AGn])
                                end
                            end

                            NUhYw6R4(EDE3)

                            kdS.Destroy = function()
                                local function EQVz(pYXX)
                                    for GvHSsw in pairs(pYXX)do
                                        pYXX[GvHSsw] = nil
                                    end
                                end

                                EQVz(kdS.Stylist)
                                EQVz(kdS)
                                EQVz(bc0w4j)
                                EQVz(OGMxal0)
                                EQVz(QlewVjkq)
                                EQVz(Q)
                                EQVz(yI)
                                MvOaiq.Destroy()
                                DUic_1K.Destroy()
                                rVj9z4.Destroy()
                                mWkmCx.Destroy()

                                for XvK5, bK2 in pairs(qQpo)do
                                    bK2.Destroy()

                                    qQpo[XvK5] = nil
                                end
                                for U, FVkHUl7 in pairs(qXKzBXo0)do
                                    FVkHUl7.Destroy()

                                    qXKzBXo0[U] = nil
                                end

                                cJ.Destroy()
                                sNyznm3W.Destroy(sNyznm3W)
                                EDE3.Destroy(EDE3)
                            end

                            kdS.Update()

                            return kdS, EDE3
                        end

                        LB1Z.DetailedList = K

                        local function qL(FOA, eF0tAUG, _x)
                            eF0tAUG = eF0tAUG or 24
                            _x = _x or 20

                            local J2o6d = 0
                            local r = {}
                            local PKiW0 = {}
                            local odc5tp = {}
                            local t3yD = NsoTwDs'Frame'{
                                Name = 'TabContainer',
                                Size = UDim2.new(0, 300, 0, 200),
                                BackgroundTransparency = 1,
                                NsoTwDs'Frame'{
                                    Name = 'Content',
                                    Size = UDim2.new(1, 0, 1, -eF0tAUG),
                                    Position = UDim2.new(0, 0, 0, eF0tAUG),
                                    BackgroundColor3 = Color3.new(),
                                    BorderColor3 = Color3.new(1, 1, 1),
                                },
                                NsoTwDs'Frame'{
                                    Parent = TabContainerFrame,
                                    Name = 'Tabs',
                                    BackgroundTransparency = 1,
                                },
                            }
                            local _nofE2 = t3yD.Content
                            local kPOaEej = t3yD.Tabs
                            local XrKR = h_8(kPOaEej, true, true)
                            local EZSc2rAA = zhzpBSx({
                                BackgroundColor3 = Color3.new(),
                                BackgroundTransparency = 0.5,
                                BorderColor3 = Color3.new(1, 1, 1),
                                TextColor3 = Color3.new(1, 1, 1),
                                Font = 'ArialBold',
                                FontSize = 'Size14',
                            })

                            EZSc2rAA.AddObject(_nofE2)

                            local r0aOmY = zhzpBSx({
                                BackgroundColor3 = Color3.new(),
                                BackgroundTransparency = 0.5,
                                BorderColor3 = Color3.new(1, 1, 1),
                                TextColor3 = Color3.new(1, 1, 1),
                                Font = 'ArialBold',
                                FontSize = 'Size14',
                            })

                            local function hPQ(Yo)
                                for nkWKbF, M9 in pairs(r)do
                                    if M9 == Yo then
                                        return nkWKbF
                                    end
                                end
                            end
                            local function YzL3P1()
                                return J2o6d, r[J2o6d]
                            end
                            local function R1FIoQI(cVvE, R8)
                                local CsDz = #r + (R8 or 0)

                                cVvE = math.floor(cVvE)

                                return cVvE < 1 and 1 or cVvE > CsDz and CsDz or cVvE
                            end
                            local function a2(u)
                                if #r > 0 then
                                    if type(u) ~= 'number' then
                                        u = hPQ(u)
                                    end
                                    if u then
                                        u = R1FIoQI(u)

                                        if J2o6d > 0 then
                                            local m5STS = r[J2o6d]

                                            m5STS.Visible = false

                                            local CJ4gk6Xx = PKiW0[m5STS]

                                            CJ4gk6Xx.LockAxis(nil, _x)
                                            r0aOmY.RemoveObject(CJ4gk6Xx, GUI)
                                            EZSc2rAA.AddObject(CJ4gk6Xx.GUI)
                                        end

                                        local Ru8E = r[u]

                                        Ru8E.Visible = true

                                        local nK = PKiW0[Ru8E]

                                        nK.LockAxis(nil, eF0tAUG)
                                        EZSc2rAA.RemoveObject(nK.GUI)
                                        r0aOmY.AddObject(nK.GUI)

                                        J2o6d = u
                                    end
                                else
                                    J2o6d = 0
                                end
                            end
                            local function hrEWj(WwPLCA3t, YAwrq)
                                if YAwrq then
                                    YAwrq = R1FIoQI(YAwrq, 1)

                                    table.insert(r, YAwrq, WwPLCA3t)
                                else
                                    table.insert(r, WwPLCA3t)

                                    YAwrq = #r
                                end

                                WwPLCA3t.Visible = false
                                WwPLCA3t.Parent = _nofE2

                                local VHZ4I = NsoTwDs'TextButton'{
                                    Name = 'Tab',
                                    Text = WwPLCA3t.Name,
                                }
                                local JTS = rHSjalVy(VHZ4I)

                                PKiW0[WwPLCA3t] = JTS

                                JTS.SetPadding(0, 4)
                                JTS.LockAxis(nil, _x)
                                EZSc2rAA.AddObject(VHZ4I)
                                XrKR.AddObject(VHZ4I, YAwrq)
                                VHZ4I.MouseButton1Click:Connect(function()
                                    a2(WwPLCA3t)
                                end)

                                odc5tp[WwPLCA3t] = WwPLCA3t.Changed:Connect(function(
                                    zRbXf
                                )
                                    if zRbXf == 'Name' then
                                        VHZ4I.Text = WwPLCA3t.Name
                                    end
                                end)

                                if J2o6d == 0 then
                                    a2(YAwrq)
                                elseif YAwrq <= J2o6d then
                                    J2o6d = J2o6d + 1
                                end
                            end
                            local function Qgeq(caDLM)
                                if #r > 0 then
                                    if type(caDLM) ~= 'number' then
                                        if caDLM == nil then
                                            caDLM = #r
                                        else
                                            caDLM = hPQ(caDLM)
                                        end
                                    end
                                    if caDLM then
                                        caDLM = R1FIoQI(caDLM)

                                        local Pj = table.remove(r, caDLM)

                                        Pj.Parent = nil

                                        odc5tp[Pj]:disconnect()

                                        odc5tp[Pj] = nil

                                        local xm = PKiW0[Pj]

                                        XrKR.RemoveObject(caDLM)

                                        PKiW0[Pj] = nil

                                        xm.Destroy()

                                        if caDLM == J2o6d then
                                            a2(caDLM)
                                        elseif caDLM < J2o6d then
                                            J2o6d = J2o6d - 1
                                        end

                                        return Pj
                                    end
                                end
                            end
                            local function ay_Dm(we, uv)
                                if #r > 0 then
                                    if type(we) ~= 'number' then
                                        we = hPQ(we)
                                    end
                                    if type(uv) ~= 'number' then
                                        uv = hPQ(uv)
                                    end
                                    if we and uv then
                                        we = R1FIoQI(we)
                                        uv = R1FIoQI(uv)

                                        local eu = table.remove(r, we)

                                        table.insert(r, uv, eu)
                                        XrKR.MoveObject(we, uv)

                                        if we == J2o6d then
                                            J2o6d = uv
                                        elseif we > J2o6d and uv <= J2o6d then
                                            J2o6d = J2o6d + 1
                                        elseif we < J2o6d and uv >= J2o6d then
                                            J2o6d = J2o6d - 1
                                        end
                                    end
                                end
                            end

                            local z8K0j = {
                                GUI = t3yD,
                                GetIndex = hPQ,
                                GetSelectedIndex = YzL3P1,
                                SelectTab = a2,
                                AddTab = hrEWj,
                                RemoveTab = Qgeq,
                                MoveTab = ay_Dm,
                                TabStylist = EZSc2rAA,
                                SelectedTabStylist = r0aOmY,
                            }

                            NUhYw6R4(t3yD)

                            local function yh()
                                for j7Zsjoj in pairs(z8K0j)do
                                    z8K0j[j7Zsjoj] = nil
                                end

                                r0aOmY.Destroy()
                                EZSc2rAA.Destroy()
                                XrKR.Destroy()

                                for VDXpXH, NT23H in pairs(odc5tp)do
                                    NT23H.disconnect(NT23H)

                                    odc5tp[VDXpXH] = nil
                                end
                                for N8WCvTtk, vk7 in pairs(r)do
                                    vk7.Parent = nil
                                    r[N8WCvTtk] = nil
                                end
                                for aaOq, F7JMSq_H in pairs(PKiW0)do
                                    PKiW0[aaOq] = nil

                                    F7JMSq_H.Destroy()
                                end

                                t3yD.Destroy(t3yD)
                            end

                            z8K0j.Destroy = yh

                            if FOA then
                                for BNZ09E, mcJGlQD6 in pairs(FOA)do
                                    hrEWj(mcJGlQD6, BNZ09E)
                                end
                            end

                            return z8K0j, t3yD
                        end

                        LB1Z.TabContainer = qL

                        local vfIyB = {}

                        vfIyB.Confirm = function(AcM1nG, mMJQWw, sC, RE)
                            GlobalStylist = sC or Stylist{
                                BackgroundColor3 = Color3.new(0, 0, 0),
                                BorderColor3 = Color3.new(1, 1, 1),
                                TextColor3 = Color3.new(1, 1, 1),
                                Font = 'ArialBold',
                                FontSize = 'Size14',
                            }
                            ButtonStylist = RE or Stylist{
                                Style = 'RobloxButton',
                            }

                            local mPRxk = zhzpBSx(style)
                            local iVO = zhzpBSx(button_style)
                            local S5PgiAbz = mPRxk.StylistIn(iVO)

                            mPRxk.AddStylist(iVO)

                            local jj1oYjc = NsoTwDs'Frame'{
                                Name = 'ConfirmDialog',
                                Size = UDim2.new(1.5, 0, 1.5, 0),
                                Position = UDim2.new(-0.25, 0, -0.25, 0),
                                BorderSizePixel = 0,
                                BackgroundTransparency = 0.5,
                                BackgroundColor3 = Color3.new(0, 0, 0),
                                Active = true,
                                mPRxk.AddObject(NsoTwDs'Frame'{
                                    Name = 'DialogBox',
                                    Size = UDim2.new(0, 250, 0, 150),
                                    Position = UDim2.new(0.5, -125, 0.5, -75),
                                    NsoTwDs'Frame'{
                                        Name = 'MarginBox',
                                        BackgroundTransparency = 1,
                                        Size = UDim2.new(1, -16, 1, -16),
                                        Position = UDim2.new(0, 8, 0, 8),
                                        mPRxk.AddObject(NsoTwDs'TextLabel'{
                                            BackgroundTransparency = 1,
                                            TextScaled = true,
                                            Text = mMJQWw or '',
                                            Size = UDim2.new(1, -16, 0.8, -24),
                                            Position = UDim2.new(0, 8, 0, 8),
                                        }),
                                        NsoTwDs'Frame'{
                                            Name = 'Buttons',
                                            BackgroundTransparency = 1,
                                            Size = UDim2.new(1, 0, 0.2, 0),
                                            Position = UDim2.new(0, 0, 0.8, 0),
                                            iVO.AddObject(NsoTwDs'TextButton'{
                                                Name = 'YesButton',
                                                Text = 'Yes',
                                                Size = UDim2.new(0.3333333333333333, 0, 1, 0),
                                                Position = UDim2.new(0, 0, 0, 0),
                                            }),
                                            iVO.AddObject(NsoTwDs'TextButton'{
                                                Name = 'NoButton',
                                                Text = 'No',
                                                Size = UDim2.new(0.3333333333333333, 0, 1, 0),
                                                Position = UDim2.new(0.3333333333333333, 0, 0, 0),
                                            }),
                                            iVO.AddObject(NsoTwDs'TextButton'{
                                                Name = 'CancelButton',
                                                Text = 'Cancel',
                                                Size = UDim2.new(0.3333333333333333, 0, 1, 0),
                                                Position = UDim2.new(0.6666666666666666, 0, 0, 0),
                                            }),
                                        },
                                    },
                                }),
                            }
                            local YVjxMh = jj1oYjc.DialogBox.MarginBox.Buttons
                            local sERpty
                            local R9WhkbR = Instance.new('BindableEvent')

                            YVjxMh.YesButton.MouseButton1Click:Connect(function()
                                sERpty = true

                                R9WhkbR.Fire(R9WhkbR)
                            end)
                            YVjxMh.NoButton.MouseButton1Click:Connect(function()
                                sERpty = false

                                R9WhkbR.Fire(R9WhkbR)
                            end)
                            YVjxMh.CancelButton.MouseButton1Click:Connect(function(
                            )
                                sERpty = nil

                                R9WhkbR.Fire(R9WhkbR)
                            end)
                            m6SCS0(jj1oYjc, 10)

                            jj1oYjc.Parent = AcM1nG

                            R9WhkbR.Event:wait()
                            jj1oYjc.Destroy(jj1oYjc)
                            R9WhkbR.Destroy(R9WhkbR)

                            if sC == nil then
                                mPRxk.Destroy()
                            else
                                if not S5PgiAbz then
                                    mPRxk.RemoveStylist(iVO)
                                end
                            end
                            if RE == nil then
                                iVO.Destroy()
                            end

                            return sERpty
                        end
                        LB1Z.dialog = vfIyB

                        do
                            local Wjj = {}

                            for X9n9mro, Uj6hK in pairs(N9L)do
                                if type(X9n9mro) == 'string' then
                                    table.insert(Wjj, X9n9mro)
                                end
                            end

                            table.sort(Wjj)

                            for qk3r, Otbx_3g in pairs(Wjj)do
                                default_help = default_help .. '\t' .. Otbx_3g .. '\n'
                            end
                        end

                        local quNsijN = {}

                        quNsijN[false] = default_help
                        LB1Z.Help = function(XRg, Q7c8C2T)
                            if type(XRg) == 'string' then
                                XRg = XRg.lower(XRg)
                            end

                            local Gz = quNsijN[XRg] or quNsijN[false]

                            if not Q7c8C2T then
                                print(string.rep('_', 80))

                                for XfMQy in Gz.gsub(Gz, '\r\n?', '\n'):gmatch('(.-)\n')do
                                    XfMQy = XfMQy.gsub(XfMQy, ' ', '\160')
                                    XfMQy = XfMQy.gsub(XfMQy, '\t', string.rep('\160', 8))

                                    print(#XfMQy == 0 and '\160' or XfMQy)
                                end

                                print('\160')
                            end

                            return Gz
                        end

                        for mu_2r, Es in pairs(N9L)do
                            if type(mu_2r) == 'string' then
                                quNsijN[mu_2r.lower(mu_2r)] = Es

                                local c = LB1Z[mu_2r]

                                if type(c) == 'function' then
                                    quNsijN[c] = Es
                                end
                            end
                        end

                        setmetatable(LB1Z, {
                            __tostring = function()
                                return ('%s GUI Library [v%s] (use %s.Help() for help)').format(('%s GUI Library [v%s] (use %s.Help() for help)'), tczrIB, hDc_M, tczrIB)
                            end,
                        })

                        _G.gloo = LB1Z
                    end

                    gloostart()
                end
            end

            Workspace = Game.GetService(Game, 'Workspace')
            Players = Game.GetService(Game, 'Players')
            MarketplaceService = Game.GetService(Game, 'MarketplaceService')
            ContentProvider = Game.GetService(Game, 'ContentProvider')
            SoundService = Game.GetService(Game, 'SoundService')
            UserInputService = Game.GetService(Game, 'UserInputService')
            SelectionService = Game.GetService(Game, 'Selection')
            CoreGui = Game.GetService(Game, 'CoreGui')
            HttpService = Game.GetService(Game, 'HttpService')
            ChangeHistoryService = Game.GetService(Game, 'ChangeHistoryService')
            Assets = {
                DarkSlantedRectangle = 'http://www.roblox.com/asset/?id=127774197',
                LightSlantedRectangle = 'http://www.roblox.com/asset/?id=127772502',
                ActionCompletionSound = 'http://www.roblox.com/asset/?id=99666917',
                ExpandArrow = 'http://www.roblox.com/asset/?id=134367382',
                UndoActiveDecal = 'http://www.roblox.com/asset/?id=141741408',
                UndoInactiveDecal = 'http://www.roblox.com/asset/?id=142074557',
                RedoActiveDecal = 'http://www.roblox.com/asset/?id=141741327',
                RedoInactiveDecal = 'http://www.roblox.com/asset/?id=142074553',
                DeleteActiveDecal = 'http://www.roblox.com/asset/?id=141896298',
                DeleteInactiveDecal = 'http://www.roblox.com/asset/?id=142074644',
                ExportActiveDecal = 'http://www.roblox.com/asset/?id=141741337',
                ExportInactiveDecal = 'http://www.roblox.com/asset/?id=142074569',
                CloneActiveDecal = 'http://www.roblox.com/asset/?id=142073926',
                CloneInactiveDecal = 'http://www.roblox.com/asset/?id=142074563',
                PluginIcon = 'http://www.roblox.com/asset/?id=142287521',
                GroupLockIcon = 'http://www.roblox.com/asset/?id=175396862',
                GroupUnlockIcon = 'http://www.roblox.com/asset/?id=160408836',
                GroupUpdateOKIcon = 'http://www.roblox.com/asset/?id=164421681',
                GroupUpdateIcon = 'http://www.roblox.com/asset/?id=160402908',
            }
            ToolAssetID = 142785488
            Player = Players.LocalPlayer
            Mouse = nil

            if plugin then
                ToolType = 'plugin'
                GUIContainer = CoreGui
                ToolbarButton = plugin.CreateToolbar(plugin, 'Building Tools by F3X'):CreateButton('', 'Building Tools by F3X', Assets.PluginIcon)
            elseif Tool.IsA(Tool, 'Tool') then
                ToolType = 'tool'
                GUIContainer = Player.WaitForChild(Player, 'PlayerGui')
            end

            RbxUtility = t
            Support = {}
            SupportLibrary = {}
            SupportLibrary.FindTableOccurrences = function(C, o0Xe6nHM)
                local ulAVnjc = {}

                for zF6Bw, zuKqH in pairs(C)do
                    if zuKqH == o0Xe6nHM then
                        table.insert(ulAVnjc, zF6Bw)
                    end
                end

                return ulAVnjc
            end
            SupportLibrary.FindTableOccurrence = function(litdqp, r)
                for n, uSzWLeSi in pairs(litdqp)do
                    if uSzWLeSi == r then
                        return n
                    end
                end

                return nil
            end
            SupportLibrary.IsInTable = function(phUBXWJ9, Qgtt7)
                for yTthTeWK, pG in pairs(phUBXWJ9)do
                    if pG == Qgtt7 then
                        return true
                    end
                end

                return false
            end
            SupportLibrary.Round = function(um_kO, ngCGBaF)
                local A8TTTd8 = 10 ^ (ngCGBaF or 0)

                return math.floor(um_kO * A8TTTd8 + 0.5) / A8TTTd8
            end
            SupportLibrary.CloneTable = function(yGa)
                local j4bdRB6o = getmetatable(yGa)

                return setmetatable({
                    unpack(yGa),
                }, j4bdRB6o)
            end
            SupportLibrary.GetAllDescendants = function(f8jh)
                local OLzzUp = {}

                for VlN, r in pairs(f8jh.GetChildren(f8jh))do
                    table.insert(OLzzUp, r)

                    for VlN, mhEYg in pairs(SupportLibrary.GetAllDescendants(r))do
                        table.insert(OLzzUp, mhEYg)
                    end
                end

                return OLzzUp
            end
            SupportLibrary.GetDescendantCount = function(rUJN6)
                local cYH30J = 0

                for VR, pyzkzd in pairs(rUJN6.GetChildren(rUJN6))do
                    cYH30J = cYH30J + 1
                    cYH30J = cYH30J + SupportLibrary.GetDescendantCount(pyzkzd)
                end

                return cYH30J
            end
            SupportLibrary.CloneParts = function(ksDuO71)
                local BAy = {}

                for tTCbo2, p in pairs(ksDuO71)do
                    BAy[tTCbo2] = p.Clone(p)
                end

                return BAy
            end
            SupportLibrary.SplitString = function(UNyk, cG0)
                local kzTZ7 = {}
                local f8SnhE4T = ('([^%s]+)').format(('([^%s]+)'), cG0)

                UNyk.gsub(UNyk, f8SnhE4T, function(aascxP)
                    table.insert(kzTZ7, aascxP)
                end)

                return kzTZ7
            end
            SupportLibrary.GetChildOfClass = function(eSG8f8ru, w2yJAi, lH1c)
                if not lH1c then
                    for CHS, fQdTWIXs in pairs(eSG8f8ru.GetChildren(eSG8f8ru))do
                        if fQdTWIXs.ClassName == w2yJAi then
                            return fQdTWIXs
                        end
                    end
                else
                    for QG, d78 in pairs(eSG8f8ru.GetChildren(eSG8f8ru))do
                        if d78.IsA(d78, w2yJAi) then
                            return d78
                        end
                    end
                end

                return nil
            end
            SupportLibrary.GetChildrenOfClass = function(C6pS, GwH, O)
                local sbuS4 = {}

                if not O then
                    for Rrfir0, lXr in pairs(C6pS.GetChildren(C6pS))do
                        if lXr.ClassName == GwH then
                            table.insert(sbuS4, lXr)
                        end
                    end
                else
                    for hz, f in pairs(C6pS.GetChildren(C6pS))do
                        if f.IsA(f, GwH) then
                            table.insert(sbuS4, f)
                        end
                    end
                end

                return sbuS4
            end
            SupportLibrary.HSVToRGB = function(knCGg, UPf, amxXn)
                if UPf == 0 then
                    return amxXn
                end

                local CSwsYPyj = math.floor(knCGg / 60)
                local I9I = (knCGg / 60) - CSwsYPyj
                local aB = amxXn * (1 - UPf)
                local BiUZ8vx4 = amxXn * (1 - UPf * I9I)
                local v = amxXn * (1 - UPf * (1 - I9I))

                if CSwsYPyj == 0 then
                    return amxXn, v, aB
                elseif CSwsYPyj == 1 then
                    return BiUZ8vx4, amxXn, aB
                elseif CSwsYPyj == 2 then
                    return aB, amxXn, v
                elseif CSwsYPyj == 3 then
                    return aB, BiUZ8vx4, amxXn
                elseif CSwsYPyj == 4 then
                    return v, aB, amxXn
                elseif CSwsYPyj == 5 then
                    return amxXn, aB, BiUZ8vx4
                end
            end
            SupportLibrary.RGBToHSV = function(W8dN, eL, U4G6f)
                local gmhVDH, a, NesXI
                local OZ8oHL = math.min(W8dN, eL, U4G6f)
                local sa = math.max(W8dN, eL, U4G6f)

                NesXI = sa

                local hT = sa - OZ8oHL

                if sa ~= 0 then
                    a = hT / sa
                else
                    a = 0
                    gmhVDH = -1

                    return gmhVDH, a, NesXI
                end
                if W8dN == sa then
                    gmhVDH = (eL - U4G6f) / hT
                elseif eL == sa then
                    gmhVDH = 2 + (U4G6f - W8dN) / hT
                else
                    gmhVDH = 4 + (W8dN - eL) / hT
                end

                gmhVDH = gmhVDH * 60

                if gmhVDH < 0 then
                    gmhVDH = gmhVDH + 360
                end

                return gmhVDH, a, NesXI
            end
            SupportLibrary.IdentifyCommonItem = function(zICb5)
                local HB_RPF

                for kJZlA, blNC in pairs(zICb5)do
                    if kJZlA == 1 then
                        HB_RPF = blNC
                    else
                        if blNC ~= HB_RPF then
                            return nil
                        end
                    end
                end

                return HB_RPF
            end
            SupportLibrary.IdentifyCommonProperty = function(l, y9)
                local z = {}

                for MjtdB7KS, _M_Cmn9C in pairs(l)do
                    table.insert(z, _M_Cmn9C[y9])
                end

                return SupportLibrary.IdentifyCommonItem(z)
            end
            SupportLibrary.CreateSignal = function()
                local GZQBW7r7 = {
                    Connections = {},
                    Connect = function(VHBi5G, Z1D6NL)
                        table.insert(VHBi5G.Connections, Z1D6NL)

                        local XAy = {
                            Handler = Z1D6NL,
                            Disconnect = function(zxyLTb)
                                local rhMWaiC = SupportLibrary.FindTableOccurrences(VHBi5G.Connections, zxyLTb.Handler)

                                if #rhMWaiC > 0 then
                                    local pM = rhMWaiC[1]

                                    table.remove(VHBi5G.Connections, pM)
                                end
                            end,
                        }

                        XAy.disconnect = XAy.Disconnect

                        return XAy
                    end,
                    Fire = function(i, ...)
                        for k, hr in pairs(i.Connections)do
                            hr(...)
                        end
                    end,
                }

                GZQBW7r7.connect = GZQBW7r7.Connect
                GZQBW7r7.fire = GZQBW7r7.Fire

                return GZQBW7r7
            end
            SupportLibrary.GetPartCorners = function(M)
                local Ucy5ca = table.insert
                local ycyK = CFrame.new().toWorldSpace
                local Yfm6hogh = CFrame.new
                local T6eti = M.CFrame
                local z7j, CGz, aukN3ZWX = M.Size.x / 2, M.Size.y / 2, M.Size.z / 2
                local eSCsri5 = {}

                Ucy5ca(eSCsri5, ycyK(T6eti, Yfm6hogh(z7j, CGz, aukN3ZWX)))
                Ucy5ca(eSCsri5, ycyK(T6eti, Yfm6hogh(-z7j, CGz, aukN3ZWX)))
                Ucy5ca(eSCsri5, ycyK(T6eti, Yfm6hogh(z7j, -CGz, aukN3ZWX)))
                Ucy5ca(eSCsri5, ycyK(T6eti, Yfm6hogh(z7j, CGz, -aukN3ZWX)))
                Ucy5ca(eSCsri5, ycyK(T6eti, Yfm6hogh(-z7j, CGz, -aukN3ZWX)))
                Ucy5ca(eSCsri5, ycyK(T6eti, Yfm6hogh(-z7j, -CGz, aukN3ZWX)))
                Ucy5ca(eSCsri5, ycyK(T6eti, Yfm6hogh(z7j, -CGz, -aukN3ZWX)))
                Ucy5ca(eSCsri5, ycyK(T6eti, Yfm6hogh(-z7j, -CGz, -aukN3ZWX)))

                return eSCsri5
            end
            SupportLibrary.CreatePart = function(_g10f_)
                local r4cyFP

                if _g10f_ == 'Normal' then
                    r4cyFP = Instance.new('Part')
                    r4cyFP.Size = Vector3.new(4, 1, 2)
                elseif _g10f_ == 'Truss' then
                    r4cyFP = Instance.new('TrussPart')
                elseif _g10f_ == 'Wedge' then
                    r4cyFP = Instance.new('WedgePart')
                    r4cyFP.Size = Vector3.new(4, 1, 2)
                elseif _g10f_ == 'Corner' then
                    r4cyFP = Instance.new('CornerWedgePart')
                elseif _g10f_ == 'Cylinder' then
                    r4cyFP = Instance.new('Part')
                    r4cyFP.Shape = 'Cylinder'
                    r4cyFP.TopSurface = Enum.SurfaceType.Smooth
                    r4cyFP.BottomSurface = Enum.SurfaceType.Smooth
                    r4cyFP.Size = Vector3.new(2, 2, 2)
                elseif _g10f_ == 'Ball' then
                    r4cyFP = Instance.new('Part')
                    r4cyFP.Shape = 'Ball'
                    r4cyFP.TopSurface = Enum.SurfaceType.Smooth
                    r4cyFP.BottomSurface = Enum.SurfaceType.Smooth
                elseif _g10f_ == 'Seat' then
                    r4cyFP = Instance.new('Seat')
                    r4cyFP.Size = Vector3.new(4, 1, 2)
                elseif _g10f_ == 'Vehicle Seat' then
                    r4cyFP = Instance.new('VehicleSeat')
                    r4cyFP.Size = Vector3.new(4, 1, 2)
                elseif _g10f_ == 'Spawn' then
                    r4cyFP = Instance.new('SpawnLocation')
                    r4cyFP.Size = Vector3.new(4, 1, 2)
                end

                r4cyFP.Anchored = true

                return r4cyFP
            end
            SupportLibrary.ImportServices = function()
                local fcSy4_k0 = getfenv(2)

                fcSy4_k0.Workspace = Game.GetService(Game, 'Workspace')
                fcSy4_k0.Players = Game.GetService(Game, 'Players')
                fcSy4_k0.MarketplaceService = Game.GetService(Game, 'MarketplaceService')
                fcSy4_k0.ContentProvider = Game.GetService(Game, 'ContentProvider')
                fcSy4_k0.SoundService = Game.GetService(Game, 'SoundService')
                fcSy4_k0.UserInputService = Game.GetService(Game, 'UserInputService')
                fcSy4_k0.SelectionService = Game.GetService(Game, 'Selection')
                fcSy4_k0.CoreGui = Game.GetService(Game, 'CoreGui')
                fcSy4_k0.HttpService = Game.GetService(Game, 'HttpService')
                fcSy4_k0.ChangeHistoryService = Game.GetService(Game, 'ChangeHistoryService')
                fcSy4_k0.ReplicatedStorage = Game.GetService(Game, 'ReplicatedStorage')
                fcSy4_k0.GroupService = Game.GetService(Game, 'GroupService')
                fcSy4_k0.ServerScriptService = Game.GetService(Game, 'ServerScriptService')
                fcSy4_k0.StarterGui = Game.GetService(Game, 'StarterGui')
            end
            SupportLibrary.GetListMembers = function(TrC17, MEwJPiqM)
                local jHIxW_ = {}

                for gny, KabKdEUu in pairs(TrC17)do
                    table.insert(jHIxW_, KabKdEUu[MEwJPiqM])
                end

                return jHIxW_
            end
            SupportLibrary.AddUserInputListener = function(
                oQ8AOvfn,
                m,
                cX88nonB,
                kkWQP4
            )
                local m = Enum.UserInputType[m]

                return Game.GetService(Game, 'UserInputService')['Input' .. oQ8AOvfn]:Connect(function(
                    E4F,
                    E
                )
                    if E and not cX88nonB then
                        return
                    end
                    if E4F.UserInputType ~= m then
                        return
                    end
                    if m == Enum.UserInputType.Keyboard and Game.GetService(Game, 'UserInputService'):GetFocusedTextBox() then
                        return
                    end

                    kkWQP4(E4F)
                end)
            end
            SupportLibrary.AddGuiInputListener = function(
                IGef7Hc5,
                RY1,
                bkV,
                VOG,
                r8MEhbdT
            )
                local bkV = Enum.UserInputType[bkV]

                return IGef7Hc5['Input' .. RY1]:Connect(function(
                    klSf0ZT5,
                    t85a4rt
                )
                    if t85a4rt and not VOG then
                        return
                    end
                    if klSf0ZT5.UserInputType ~= bkV then
                        return
                    end

                    r8MEhbdT(klSf0ZT5)
                end)
            end
            SupportLibrary.AreKeysPressed = function(...)
                local OfQcD = 0
                local Yj = SupportLibrary.GetListMembers(Game.GetService(Game, 'UserInputService'):GetKeysPressed(), 'KeyCode')

                for LvKdRh, _D in pairs({...})do
                    if SupportLibrary.IsInTable(Yj, _D) then
                        OfQcD = OfQcD + 1
                    end
                end

                return OfQcD == 1
            end
            SupportLibrary.MergeTable = function(uYwYKAU, mq)
                for m7YIn, tYqOsEJ in pairs(mq)do
                    table.insert(uYwYKAU, tYqOsEJ)
                end

                return uYwYKAU
            end
            SupportLibrary.ClearTable = function(udoq)
                for boTHtaG in pairs(udoq)do
                    udoq[boTHtaG] = nil
                end

                return udoq
            end
            Support = SupportLibrary

            for zbQgT, duYPlVu in pairs(Assets)do
                ContentProvider.Preload(ContentProvider, duYPlVu)
            end

            repeat
                wait(0)
            until _G.gloo

            Gloo = _G.gloo
            HttpInterface = {}
            HttpInterface.GetAsync = function(n5, zl5hfbAb)
                print('preforming GetAsync')

                local xVvJF = game.GetService(game, 'HttpService')
                local zsKRyBU = {}

                ypcall(function()
                    zsKRyBU = {
                        xVvJF.GetAsync(xVvJF, n5, zl5hfbAb),
                    }
                end)

                return unpack(zsKRyBU)
            end
            HttpInterface.PostAsync = function(Lukg, rkKj, yAaxRZGY)
                print('preforming PostAsync')

                local _Tb = game.GetService(game, 'HttpService')
                local BJRFwSz = {}

                ypcall(function()
                    BJRFwSz = {
                        _Tb.PostAsync(_Tb, Lukg, rkKj, yAaxRZGY),
                    }
                end)

                return unpack(BJRFwSz)
            end
            HttpInterface.Test = function()
                print('preforming test')

                local C3MNkiZ = game.GetService(game, 'HttpService')
                local beAAh6T, yUaD = ypcall(function()
                    C3MNkiZ.GetAsync(C3MNkiZ, 'http://www.google.com')
                end)

                return beAAh6T, yUaD
            end

            print('Begin UI')

            local DFb100j

            do
                NG1 = Instance.new('Frame')
                NG1.Name = dCD('Vagresnprf')
                NG2 = Instance.new('Frame')
                NG2.Active = true
                NG2.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG2.BackgroundTransparency = 1
                NG2.BorderSizePixel = 0
                NG2.Name = dCD('OGZngrevnyGbbyTHV')
                NG2.Position = UDim2.new(0, 0, 0, 172)
                NG2.Size = UDim2.new(0, 200, 0, 145)
                NG2.Draggable = true
                NG2.Parent = NG1
                NG3 = Instance.new('Frame')
                NG3.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG3.BackgroundTransparency = 1
                NG3.BorderSizePixel = 0
                NG3.Name = dCD('Gvgyr')
                NG3.Size = UDim2.new(1, 0, 0, 20)
                NG3.Parent = NG2
                NG4 = Instance.new('Frame')
                NG4.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG4.BorderSizePixel = 0
                NG4.Name = dCD('PbybeOne')
                NG4.Position = UDim2.new(0, 5, 0, -3)
                NG4.Size = UDim2.new(1, -5, 0, 2)
                NG4.Parent = NG3
                NG5 = Instance.new('TextLabel')
                NG5.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG5.BackgroundTransparency = 1
                NG5.BorderSizePixel = 0
                NG5.Name = dCD('Ynory')
                NG5.Position = UDim2.new(0, 10, 0, 1)
                NG5.Size = UDim2.new(1, -10, 1, 0)
                NG5.Font = Enum.Font.ArialBold
                NG5.FontSize = Enum.FontSize.Size10
                NG5.Text = dCD('ZNGREVNY GBBY')
                NG5.TextColor3 = Color3.new(1, 1, 1)
                NG5.TextStrokeTransparency = 0
                NG5.TextWrapped = true
                NG5.TextXAlignment = Enum.TextXAlignment.Left
                NG5.Parent = NG3
                NG6 = Instance.new('TextLabel')
                NG6.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG6.BackgroundTransparency = 1
                NG6.BorderSizePixel = 0
                NG6.Name = dCD('S3KFvtangher')
                NG6.Position = UDim2.new(0, 10, 0, 1)
                NG6.Size = UDim2.new(1, -10, 1, 0)
                NG6.Font = Enum.Font.ArialBold
                NG6.FontSize = Enum.FontSize.Size14
                NG6.Text = dCD('S3K')
                NG6.TextColor3 = Color3.new(1, 1, 1)
                NG6.TextStrokeTransparency = 0.89999997615814
                NG6.TextWrapped = true
                NG6.TextXAlignment = Enum.TextXAlignment.Right
                NG6.Parent = NG3
                NG7 = Instance.new('Frame')
                NG7.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG7.BackgroundTransparency = 1
                NG7.BorderSizePixel = 0
                NG7.Name = dCD('ZngrevnyBcgvba')
                NG7.Position = UDim2.new(0, 14, 0, 30)
                NG7.Size = UDim2.new(1, -14, 0, 25)
                NG7.Parent = NG2
                NG8 = Instance.new('TextLabel')
                NG8.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG8.BackgroundTransparency = 1
                NG8.BorderSizePixel = 0
                NG8.Name = dCD('Ynory')
                NG8.Size = UDim2.new(0, 40, 0, 25)
                NG8.Font = Enum.Font.ArialBold
                NG8.FontSize = Enum.FontSize.Size10
                NG8.Text = dCD('Zngrevny')
                NG8.TextColor3 = Color3.new(1, 1, 1)
                NG8.TextStrokeTransparency = 0
                NG8.TextWrapped = true
                NG8.TextXAlignment = Enum.TextXAlignment.Left
                NG8.Parent = NG7
                NG9 = Instance.new('Frame')
                NG9.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG9.BackgroundTransparency = 1
                NG9.BorderSizePixel = 0
                NG9.Name = dCD('GenafcneraplBcgvba')
                NG9.Position = UDim2.new(0, 0, 0, 65)
                NG9.Size = UDim2.new(0, 0, 0, 0)
                NG9.Parent = NG2
                NG10 = Instance.new('TextLabel')
                NG10.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG10.BackgroundTransparency = 1
                NG10.BorderSizePixel = 0
                NG10.Name = dCD('Ynory')
                NG10.Position = UDim2.new(0, 14, 0, 0)
                NG10.Size = UDim2.new(0, 70, 0, 25)
                NG10.Font = Enum.Font.ArialBold
                NG10.FontSize = Enum.FontSize.Size10
                NG10.Text = dCD('Genafcnerapl')
                NG10.TextColor3 = Color3.new(1, 1, 1)
                NG10.TextStrokeTransparency = 0
                NG10.TextWrapped = true
                NG10.TextXAlignment = Enum.TextXAlignment.Left
                NG10.Parent = NG9
                NG11 = Instance.new('Frame')
                NG11.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG11.BackgroundTransparency = 1
                NG11.BorderSizePixel = 0
                NG11.Name = dCD('GenafcneraplVachg')
                NG11.Position = UDim2.new(0, 90, 0, 0)
                NG11.Size = UDim2.new(0, 50, 0, 25)
                NG11.Parent = NG9
                NG12 = Instance.new('TextButton')
                NG12.Active = true
                NG12.AutoButtonColor = false
                NG12.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG12.BackgroundTransparency = 1
                NG12.BorderSizePixel = 0
                NG12.Selectable = true
                NG12.Size = UDim2.new(1, 0, 1, 0)
                NG12.Style = Enum.ButtonStyle.Custom
                NG12.ZIndex = 2
                NG12.Font = Enum.Font.Legacy
                NG12.FontSize = Enum.FontSize.Size8
                NG12.Text = dCD('')
                NG12.Parent = NG11
                NG13 = Instance.new('ImageLabel')
                NG13.Active = false
                NG13.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG13.BackgroundTransparency = 1
                NG13.BorderSizePixel = 0
                NG13.Name = dCD('Onpxtebhaq')
                NG13.Selectable = false
                NG13.Size = UDim2.new(1, 0, 1, 0)
                NG13.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG13.Parent = NG11
                NG14 = Instance.new('Frame')
                NG14.BorderSizePixel = 0
                NG14.Name = dCD('FryrpgrqVaqvpngbe')
                NG14.Position = UDim2.new(0, 5, 0, -2)
                NG14.Size = UDim2.new(1, -4, 0, 2)
                NG14.Parent = NG11
                NG15 = Instance.new('TextBox')
                NG15.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG15.BackgroundTransparency = 1
                NG15.BorderSizePixel = 0
                NG15.Position = UDim2.new(0, 5, 0, 0)
                NG15.Size = UDim2.new(1, -10, 1, 0)
                NG15.Font = Enum.Font.ArialBold
                NG15.FontSize = Enum.FontSize.Size10
                NG15.Text = dCD('')
                NG15.TextColor3 = Color3.new(1, 1, 1)
                NG15.Parent = NG11
                NG16 = Instance.new('Frame')
                NG16.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG16.BackgroundTransparency = 1
                NG16.BorderSizePixel = 0
                NG16.Name = dCD('ErsyrpgnaprBcgvba')
                NG16.Position = UDim2.new(0, 0, 0, 100)
                NG16.Size = UDim2.new(0, 0, 0, 0)
                NG16.Parent = NG2
                NG17 = Instance.new('TextLabel')
                NG17.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG17.BackgroundTransparency = 1
                NG17.BorderSizePixel = 0
                NG17.Name = dCD('Ynory')
                NG17.Position = UDim2.new(0, 14, 0, 0)
                NG17.Size = UDim2.new(0, 70, 0, 25)
                NG17.Font = Enum.Font.ArialBold
                NG17.FontSize = Enum.FontSize.Size10
                NG17.Text = dCD('Ersyrpgnapr')
                NG17.TextColor3 = Color3.new(1, 1, 1)
                NG17.TextStrokeTransparency = 0
                NG17.TextWrapped = true
                NG17.TextXAlignment = Enum.TextXAlignment.Left
                NG17.Parent = NG16
                NG18 = Instance.new('Frame')
                NG18.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG18.BackgroundTransparency = 1
                NG18.BorderSizePixel = 0
                NG18.Name = dCD('ErsyrpgnaprVachg')
                NG18.Position = UDim2.new(0, 85, 0, 0)
                NG18.Size = UDim2.new(0, 50, 0, 25)
                NG18.Parent = NG16
                NG19 = Instance.new('TextButton')
                NG19.Active = true
                NG19.AutoButtonColor = false
                NG19.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG19.BackgroundTransparency = 1
                NG19.BorderSizePixel = 0
                NG19.Selectable = true
                NG19.Size = UDim2.new(1, 0, 1, 0)
                NG19.Style = Enum.ButtonStyle.Custom
                NG19.ZIndex = 2
                NG19.Font = Enum.Font.Legacy
                NG19.FontSize = Enum.FontSize.Size8
                NG19.Text = dCD('')
                NG19.Parent = NG18
                NG20 = Instance.new('Frame')
                NG20.BorderSizePixel = 0
                NG20.Name = dCD('FryrpgrqVaqvpngbe')
                NG20.Position = UDim2.new(0, 5, 0, -2)
                NG20.Size = UDim2.new(1, -4, 0, 2)
                NG20.Parent = NG18
                NG21 = Instance.new('ImageLabel')
                NG21.Active = false
                NG21.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG21.BackgroundTransparency = 1
                NG21.BorderSizePixel = 0
                NG21.Name = dCD('Onpxtebhaq')
                NG21.Selectable = false
                NG21.Size = UDim2.new(1, 0, 1, 0)
                NG21.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG21.Parent = NG18
                NG22 = Instance.new('TextBox')
                NG22.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG22.BackgroundTransparency = 1
                NG22.BorderSizePixel = 0
                NG22.Position = UDim2.new(0, 5, 0, 0)
                NG22.Size = UDim2.new(1, -10, 1, 0)
                NG22.Font = Enum.Font.ArialBold
                NG22.FontSize = Enum.FontSize.Size10
                NG22.Text = dCD('')
                NG22.TextColor3 = Color3.new(1, 1, 1)
                NG22.Parent = NG18
                NG23 = Instance.new('Frame')
                NG23.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG23.BackgroundTransparency = 1
                NG23.BorderSizePixel = 0
                NG23.Name = dCD('Obggbz')
                NG23.Position = UDim2.new(0, 5, 1, -10)
                NG23.Size = UDim2.new(1, -5, 0, 20)
                NG23.Parent = NG2
                NG24 = Instance.new('Frame')
                NG24.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG24.BorderSizePixel = 0
                NG24.Name = dCD('PbybeOne')
                NG24.Size = UDim2.new(1, 0, 0, 2)
                NG24.Parent = NG23
                NG25 = Instance.new('TextLabel')
                NG25.BackgroundTransparency = 1
                NG25.BorderSizePixel = 0
                NG25.Name = dCD('FryrpgAbgr')
                NG25.Position = UDim2.new(0, 10, 0, 27)
                NG25.Size = UDim2.new(1, -10, 0, 15)
                NG25.Visible = false
                NG25.FontSize = Enum.FontSize.Size14
                NG25.Text = dCD('Fryrpg fbzrguvat gb hfr guvf gbby.')
                NG25.TextColor3 = Color3.new(1, 1, 1)
                NG25.TextScaled = true
                NG25.TextStrokeTransparency = 0.5
                NG25.TextWrapped = true
                NG25.TextXAlignment = Enum.TextXAlignment.Left
                NG25.Parent = NG2
                NG26 = Instance.new('Frame')
                NG26.Active = true
                NG26.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG26.BackgroundTransparency = 1
                NG26.BorderSizePixel = 0
                NG26.Name = dCD('OGArjCnegGbbyTHV')
                NG26.Position = UDim2.new(0, 0, 0, 280)
                NG26.Size = UDim2.new(0, 220, 0, 90)
                NG26.Draggable = true
                NG26.Parent = NG1
                NG27 = Instance.new('Frame')
                NG27.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG27.BackgroundTransparency = 1
                NG27.BorderSizePixel = 0
                NG27.Name = dCD('Gvgyr')
                NG27.Size = UDim2.new(1, 0, 0, 20)
                NG27.Parent = NG26
                NG28 = Instance.new('Frame')
                NG28.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG28.BorderSizePixel = 0
                NG28.Name = dCD('PbybeOne')
                NG28.Position = UDim2.new(0, 5, 0, -3)
                NG28.Size = UDim2.new(1, -5, 0, 2)
                NG28.Parent = NG27
                NG29 = Instance.new('TextLabel')
                NG29.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG29.BackgroundTransparency = 1
                NG29.BorderSizePixel = 0
                NG29.Name = dCD('Ynory')
                NG29.Position = UDim2.new(0, 10, 0, 1)
                NG29.Size = UDim2.new(1, -10, 1, 0)
                NG29.Font = Enum.Font.ArialBold
                NG29.FontSize = Enum.FontSize.Size10
                NG29.Text = dCD('ARJ CNEG GBBY')
                NG29.TextColor3 = Color3.new(1, 1, 1)
                NG29.TextStrokeTransparency = 0
                NG29.TextWrapped = true
                NG29.TextXAlignment = Enum.TextXAlignment.Left
                NG29.Parent = NG27
                NG30 = Instance.new('TextLabel')
                NG30.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG30.BackgroundTransparency = 1
                NG30.BorderSizePixel = 0
                NG30.Name = dCD('S3KFvtangher')
                NG30.Position = UDim2.new(0, 10, 0, 1)
                NG30.Size = UDim2.new(1, -10, 1, 0)
                NG30.Font = Enum.Font.ArialBold
                NG30.FontSize = Enum.FontSize.Size14
                NG30.Text = dCD('S3K')
                NG30.TextColor3 = Color3.new(1, 1, 1)
                NG30.TextStrokeTransparency = 0.89999997615814
                NG30.TextWrapped = true
                NG30.TextXAlignment = Enum.TextXAlignment.Right
                NG30.Parent = NG27
                NG31 = Instance.new('Frame')
                NG31.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG31.BackgroundTransparency = 1
                NG31.BorderSizePixel = 0
                NG31.Name = dCD('GlcrBcgvba')
                NG31.Position = UDim2.new(0, 0, 0, 30)
                NG31.Size = UDim2.new(0, 0, 0, 0)
                NG31.Parent = NG26
                NG32 = Instance.new('TextLabel')
                NG32.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG32.BackgroundTransparency = 1
                NG32.BorderSizePixel = 0
                NG32.Name = dCD('Ynory')
                NG32.Position = UDim2.new(0, 14, 0, 0)
                NG32.Size = UDim2.new(0, 50, 0, 25)
                NG32.Font = Enum.Font.ArialBold
                NG32.FontSize = Enum.FontSize.Size10
                NG32.Text = dCD('Cneg Glcr')
                NG32.TextColor3 = Color3.new(1, 1, 1)
                NG32.TextStrokeTransparency = 0
                NG32.TextWrapped = true
                NG32.TextXAlignment = Enum.TextXAlignment.Left
                NG32.Parent = NG31
                NG33 = Instance.new('Frame')
                NG33.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG33.BackgroundTransparency = 1
                NG33.BorderSizePixel = 0
                NG33.Name = dCD('Gvc')
                NG33.Position = UDim2.new(0, 5, 0, 70)
                NG33.Size = UDim2.new(1, -5, 0, 20)
                NG33.Parent = NG26
                NG34 = Instance.new('Frame')
                NG34.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG34.BorderSizePixel = 0
                NG34.Name = dCD('PbybeOne')
                NG34.Size = UDim2.new(1, 0, 0, 2)
                NG34.Parent = NG33
                NG35 = Instance.new('TextLabel')
                NG35.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG35.BackgroundTransparency = 1
                NG35.BorderSizePixel = 0
                NG35.Name = dCD('Grkg')
                NG35.Position = UDim2.new(0, 0, 0, 2)
                NG35.Size = UDim2.new(1, 0, 0, 20)
                NG35.Font = Enum.Font.ArialBold
                NG35.FontSize = Enum.FontSize.Size10
                NG35.Text = dCD('GVC: Cbvag naq pyvpx sbe n arj cneg.')
                NG35.TextColor3 = Color3.new(1, 1, 1)
                NG35.TextStrokeTransparency = 0.5
                NG35.TextWrapped = true
                NG35.Parent = NG33
                NG36 = Instance.new('Frame')
                NG36.Active = true
                NG36.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG36.BackgroundTransparency = 1
                NG36.BorderSizePixel = 0
                NG36.Name = dCD('OGCnvagGbbyTHV')
                NG36.Position = UDim2.new(0, 0, 0, 230)
                NG36.Size = UDim2.new(0, 205, 0, 230)
                NG36.Draggable = true
                NG36.Parent = NG1
                NG37 = Instance.new('Frame')
                NG37.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG37.BackgroundTransparency = 1
                NG37.BorderSizePixel = 0
                NG37.Name = dCD('Gvgyr')
                NG37.Size = UDim2.new(1, 0, 0, 20)
                NG37.Parent = NG36
                NG38 = Instance.new('Frame')
                NG38.BackgroundColor3 = Color3.new(1, 0, 0)
                NG38.BorderSizePixel = 0
                NG38.Name = dCD('PbybeOne')
                NG38.Position = UDim2.new(0, 5, 0, -3)
                NG38.Size = UDim2.new(1, -5, 0, 2)
                NG38.Parent = NG37
                NG39 = Instance.new('TextLabel')
                NG39.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG39.BackgroundTransparency = 1
                NG39.BorderSizePixel = 0
                NG39.Name = dCD('Ynory')
                NG39.Position = UDim2.new(0, 10, 0, 1)
                NG39.Size = UDim2.new(1, -10, 1, 0)
                NG39.Font = Enum.Font.ArialBold
                NG39.FontSize = Enum.FontSize.Size10
                NG39.Text = dCD('CNVAG GBBY')
                NG39.TextColor3 = Color3.new(1, 1, 1)
                NG39.TextStrokeTransparency = 0
                NG39.TextWrapped = true
                NG39.TextXAlignment = Enum.TextXAlignment.Left
                NG39.Parent = NG37
                NG40 = Instance.new('TextLabel')
                NG40.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG40.BackgroundTransparency = 1
                NG40.BorderSizePixel = 0
                NG40.Name = dCD('S3KFvtangher')
                NG40.Position = UDim2.new(0, 10, 0, 1)
                NG40.Size = UDim2.new(1, -10, 1, 0)
                NG40.Font = Enum.Font.ArialBold
                NG40.FontSize = Enum.FontSize.Size14
                NG40.Text = dCD('S3K')
                NG40.TextColor3 = Color3.new(1, 1, 1)
                NG40.TextStrokeTransparency = 0.89999997615814
                NG40.TextWrapped = true
                NG40.TextXAlignment = Enum.TextXAlignment.Right
                NG40.Parent = NG37
                NG41 = Instance.new('Frame')
                NG41.BackgroundColor3 = Color3.new(0, 0, 0)
                NG41.BackgroundTransparency = 1
                NG41.Name = dCD('Cnyrggr')
                NG41.Position = UDim2.new(0, 5, 0, 20)
                NG41.Size = UDim2.new(0, 205, 0, 205)
                NG41.Parent = NG36
                NG42 = Instance.new('TextButton')
                NG42.Active = true
                NG42.BackgroundColor3 = Color3.new(0.643137, 0.741176, 0.278431)
                NG42.BorderSizePixel = 0
                NG42.Name = dCD('Oe. lryybjvfu terra')
                NG42.Position = UDim2.new(0, 5, 0, 5)
                NG42.Selectable = true
                NG42.Size = UDim2.new(0, 20, 0, 20)
                NG42.Style = Enum.ButtonStyle.Custom
                NG42.Font = Enum.Font.Arial
                NG42.FontSize = Enum.FontSize.Size10
                NG42.Text = dCD('')
                NG42.TextColor3 = Color3.new(1, 1, 1)
                NG42.TextStrokeTransparency = 0.75
                NG42.Parent = NG41
                NG43 = Instance.new('TextButton')
                NG43.Active = true
                NG43.BackgroundColor3 = Color3.new(0.960784, 0.803922, 0.188235)
                NG43.BorderSizePixel = 0
                NG43.Name = dCD('Oevtug lryybj')
                NG43.Position = UDim2.new(0, 30, 0, 5)
                NG43.Selectable = true
                NG43.Size = UDim2.new(0, 20, 0, 20)
                NG43.Style = Enum.ButtonStyle.Custom
                NG43.Font = Enum.Font.Arial
                NG43.FontSize = Enum.FontSize.Size10
                NG43.Text = dCD('')
                NG43.TextColor3 = Color3.new(1, 1, 1)
                NG43.TextStrokeTransparency = 0.75
                NG43.Parent = NG41
                NG44 = Instance.new('TextButton')
                NG44.Active = true
                NG44.BackgroundColor3 = Color3.new(0.854902, 0.521569, 0.254902)
                NG44.BorderSizePixel = 0
                NG44.Name = dCD('Oevtug benatr')
                NG44.Position = UDim2.new(0, 55, 0, 5)
                NG44.Selectable = true
                NG44.Size = UDim2.new(0, 20, 0, 20)
                NG44.Style = Enum.ButtonStyle.Custom
                NG44.Font = Enum.Font.Arial
                NG44.FontSize = Enum.FontSize.Size10
                NG44.Text = dCD('')
                NG44.TextColor3 = Color3.new(1, 1, 1)
                NG44.TextStrokeTransparency = 0.75
                NG44.Parent = NG41
                NG45 = Instance.new('TextButton')
                NG45.Active = true
                NG45.BackgroundColor3 = Color3.new(0.768628, 0.156863, 0.109804)
                NG45.BorderSizePixel = 0
                NG45.Name = dCD('Oevtug erq')
                NG45.Position = UDim2.new(0, 80, 0, 5)
                NG45.Selectable = true
                NG45.Size = UDim2.new(0, 20, 0, 20)
                NG45.Style = Enum.ButtonStyle.Custom
                NG45.Font = Enum.Font.Arial
                NG45.FontSize = Enum.FontSize.Size10
                NG45.Text = dCD('')
                NG45.TextColor3 = Color3.new(1, 1, 1)
                NG45.TextStrokeTransparency = 0.75
                NG45.Parent = NG41
                NG46 = Instance.new('TextButton')
                NG46.Active = true
                NG46.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG46.BorderSizePixel = 0
                NG46.Name = dCD('Oevtug ivbyrg')
                NG46.Position = UDim2.new(0, 105, 0, 5)
                NG46.Selectable = true
                NG46.Size = UDim2.new(0, 20, 0, 20)
                NG46.Style = Enum.ButtonStyle.Custom
                NG46.Font = Enum.Font.Arial
                NG46.FontSize = Enum.FontSize.Size10
                NG46.Text = dCD('')
                NG46.TextColor3 = Color3.new(1, 1, 1)
                NG46.TextStrokeTransparency = 0.75
                NG46.Parent = NG41
                NG47 = Instance.new('TextButton')
                NG47.Active = true
                NG47.BackgroundColor3 = Color3.new(0.0509804, 0.411765, 0.67451)
                NG47.BorderSizePixel = 0
                NG47.Name = dCD('Oevtug oyhr')
                NG47.Position = UDim2.new(0, 130, 0, 5)
                NG47.Selectable = true
                NG47.Size = UDim2.new(0, 20, 0, 20)
                NG47.Style = Enum.ButtonStyle.Custom
                NG47.Font = Enum.Font.Arial
                NG47.FontSize = Enum.FontSize.Size10
                NG47.Text = dCD('')
                NG47.TextColor3 = Color3.new(1, 1, 1)
                NG47.TextStrokeTransparency = 0.75
                NG47.Parent = NG41
                NG48 = Instance.new('TextButton')
                NG48.Active = true
                NG48.BackgroundColor3 = Color3.new(0, 0.560784, 0.611765)
                NG48.BorderSizePixel = 0
                NG48.Name = dCD('Oevtug oyhvfu terra')
                NG48.Position = UDim2.new(0, 155, 0, 5)
                NG48.Selectable = true
                NG48.Size = UDim2.new(0, 20, 0, 20)
                NG48.Style = Enum.ButtonStyle.Custom
                NG48.Font = Enum.Font.Arial
                NG48.FontSize = Enum.FontSize.Size10
                NG48.Text = dCD('')
                NG48.TextColor3 = Color3.new(1, 1, 1)
                NG48.TextStrokeTransparency = 0.75
                NG48.Parent = NG41
                NG49 = Instance.new('TextButton')
                NG49.Active = true
                NG49.BackgroundColor3 = Color3.new(0.294118, 0.592157, 0.294118)
                NG49.BorderSizePixel = 0
                NG49.Name = dCD('Oevtug terra')
                NG49.Position = UDim2.new(0, 180, 0, 5)
                NG49.Selectable = true
                NG49.Size = UDim2.new(0, 20, 0, 20)
                NG49.Style = Enum.ButtonStyle.Custom
                NG49.Font = Enum.Font.Arial
                NG49.FontSize = Enum.FontSize.Size10
                NG49.Text = dCD('')
                NG49.TextColor3 = Color3.new(1, 1, 1)
                NG49.TextStrokeTransparency = 0.75
                NG49.Parent = NG41
                NG50 = Instance.new('TextButton')
                NG50.Active = true
                NG50.BackgroundColor3 = Color3.new(0.972549, 0.972549, 0.972549)
                NG50.BorderSizePixel = 0
                NG50.Name = dCD('Vafgvghgvbany juvgr')
                NG50.Position = UDim2.new(0, 5, 0, 30)
                NG50.Selectable = true
                NG50.Size = UDim2.new(0, 20, 0, 20)
                NG50.Style = Enum.ButtonStyle.Custom
                NG50.Font = Enum.Font.Arial
                NG50.FontSize = Enum.FontSize.Size10
                NG50.Text = dCD('')
                NG50.TextColor3 = Color3.new(1, 1, 1)
                NG50.TextStrokeTransparency = 0.75
                NG50.Parent = NG41
                NG51 = Instance.new('TextButton')
                NG51.Active = true
                NG51.BackgroundColor3 = Color3.new(0.94902, 0.952941, 0.952941)
                NG51.BorderSizePixel = 0
                NG51.Name = dCD('Juvgr')
                NG51.Position = UDim2.new(0, 30, 0, 30)
                NG51.Selectable = true
                NG51.Size = UDim2.new(0, 20, 0, 20)
                NG51.Style = Enum.ButtonStyle.Custom
                NG51.Font = Enum.Font.Arial
                NG51.FontSize = Enum.FontSize.Size10
                NG51.Text = dCD('')
                NG51.TextColor3 = Color3.new(1, 1, 1)
                NG51.TextStrokeTransparency = 0.75
                NG51.Parent = NG41
                NG52 = Instance.new('TextButton')
                NG52.Active = true
                NG52.BackgroundColor3 = Color3.new(0.898039, 0.894118, 0.87451)
                NG52.BorderSizePixel = 0
                NG52.Name = dCD('Yvtug fgbar terl')
                NG52.Position = UDim2.new(0, 55, 0, 30)
                NG52.Selectable = true
                NG52.Size = UDim2.new(0, 20, 0, 20)
                NG52.Style = Enum.ButtonStyle.Custom
                NG52.Font = Enum.Font.Arial
                NG52.FontSize = Enum.FontSize.Size10
                NG52.Text = dCD('')
                NG52.TextColor3 = Color3.new(1, 1, 1)
                NG52.TextStrokeTransparency = 0.75
                NG52.Parent = NG41
                NG53 = Instance.new('TextButton')
                NG53.Active = true
                NG53.BackgroundColor3 = Color3.new(0.803922, 0.803922, 0.803922)
                NG53.BorderSizePixel = 0
                NG53.Name = dCD('Zvq tenl')
                NG53.Position = UDim2.new(0, 80, 0, 30)
                NG53.Selectable = true
                NG53.Size = UDim2.new(0, 20, 0, 20)
                NG53.Style = Enum.ButtonStyle.Custom
                NG53.Font = Enum.Font.Arial
                NG53.FontSize = Enum.FontSize.Size10
                NG53.Text = dCD('')
                NG53.TextColor3 = Color3.new(1, 1, 1)
                NG53.TextStrokeTransparency = 0.75
                NG53.Parent = NG41
                NG54 = Instance.new('TextButton')
                NG54.Active = true
                NG54.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG54.BorderSizePixel = 0
                NG54.Name = dCD('Zrqvhz fgbar terl')
                NG54.Position = UDim2.new(0, 105, 0, 30)
                NG54.Selectable = true
                NG54.Size = UDim2.new(0, 20, 0, 20)
                NG54.Style = Enum.ButtonStyle.Custom
                NG54.Font = Enum.Font.Arial
                NG54.FontSize = Enum.FontSize.Size10
                NG54.Text = dCD('')
                NG54.TextColor3 = Color3.new(1, 1, 1)
                NG54.TextStrokeTransparency = 0.75
                NG54.Parent = NG41
                NG55 = Instance.new('TextButton')
                NG55.Active = true
                NG55.BackgroundColor3 = Color3.new(0.388235, 0.372549, 0.384314)
                NG55.BorderSizePixel = 0
                NG55.Name = dCD('Qnex fgbar terl')
                NG55.Position = UDim2.new(0, 130, 0, 30)
                NG55.Selectable = true
                NG55.Size = UDim2.new(0, 20, 0, 20)
                NG55.Style = Enum.ButtonStyle.Custom
                NG55.Font = Enum.Font.Arial
                NG55.FontSize = Enum.FontSize.Size10
                NG55.Text = dCD('')
                NG55.TextColor3 = Color3.new(1, 1, 1)
                NG55.TextStrokeTransparency = 0.75
                NG55.Parent = NG41
                NG56 = Instance.new('TextButton')
                NG56.Active = true
                NG56.BackgroundColor3 = Color3.new(0.105882, 0.164706, 0.207843)
                NG56.BorderSizePixel = 0
                NG56.Name = dCD('Oynpx')
                NG56.Position = UDim2.new(0, 155, 0, 30)
                NG56.Selectable = true
                NG56.Size = UDim2.new(0, 20, 0, 20)
                NG56.Style = Enum.ButtonStyle.Custom
                NG56.Font = Enum.Font.Arial
                NG56.FontSize = Enum.FontSize.Size10
                NG56.Text = dCD('')
                NG56.TextColor3 = Color3.new(1, 1, 1)
                NG56.TextStrokeTransparency = 0.75
                NG56.Parent = NG41
                NG57 = Instance.new('TextButton')
                NG57.Active = true
                NG57.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG57.BorderSizePixel = 0
                NG57.Name = dCD('Ernyyl oynpx')
                NG57.Position = UDim2.new(0, 180, 0, 30)
                NG57.Selectable = true
                NG57.Size = UDim2.new(0, 20, 0, 20)
                NG57.Style = Enum.ButtonStyle.Custom
                NG57.Font = Enum.Font.Arial
                NG57.FontSize = Enum.FontSize.Size10
                NG57.Text = dCD('')
                NG57.TextColor3 = Color3.new(1, 1, 1)
                NG57.TextStrokeTransparency = 0.75
                NG57.Parent = NG41
                NG58 = Instance.new('TextButton')
                NG58.Active = true
                NG58.BackgroundColor3 = Color3.new(0.498039, 0.556863, 0.392157)
                NG58.BorderSizePixel = 0
                NG58.Name = dCD('Tevzr')
                NG58.Position = UDim2.new(0, 5, 0, 55)
                NG58.Selectable = true
                NG58.Size = UDim2.new(0, 20, 0, 20)
                NG58.Style = Enum.ButtonStyle.Custom
                NG58.Font = Enum.Font.Arial
                NG58.FontSize = Enum.FontSize.Size10
                NG58.Text = dCD('')
                NG58.TextColor3 = Color3.new(1, 1, 1)
                NG58.TextStrokeTransparency = 0.75
                NG58.Parent = NG41
                NG59 = Instance.new('TextButton')
                NG59.Active = true
                NG59.BackgroundColor3 = Color3.new(0.886275, 0.607843, 0.25098)
                NG59.BorderSizePixel = 0
                NG59.Name = dCD('Oe. lryybjvfu benatr')
                NG59.Position = UDim2.new(0, 30, 0, 55)
                NG59.Selectable = true
                NG59.Size = UDim2.new(0, 20, 0, 20)
                NG59.Style = Enum.ButtonStyle.Custom
                NG59.Font = Enum.Font.Arial
                NG59.FontSize = Enum.FontSize.Size10
                NG59.Text = dCD('')
                NG59.TextColor3 = Color3.new(1, 1, 1)
                NG59.TextStrokeTransparency = 0.75
                NG59.Parent = NG41
                NG60 = Instance.new('TextButton')
                NG60.Active = true
                NG60.BackgroundColor3 = Color3.new(0.917647, 0.721569, 0.572549)
                NG60.BorderSizePixel = 0
                NG60.Name = dCD('Yvtug benatr')
                NG60.Position = UDim2.new(0, 55, 0, 55)
                NG60.Selectable = true
                NG60.Size = UDim2.new(0, 20, 0, 20)
                NG60.Style = Enum.ButtonStyle.Custom
                NG60.Font = Enum.Font.Arial
                NG60.FontSize = Enum.FontSize.Size10
                NG60.Text = dCD('')
                NG60.TextColor3 = Color3.new(1, 1, 1)
                NG60.TextStrokeTransparency = 0.75
                NG60.Parent = NG41
                NG61 = Instance.new('TextButton')
                NG61.Active = true
                NG61.BackgroundColor3 = Color3.new(0.584314, 0.47451, 0.466667)
                NG61.BorderSizePixel = 0
                NG61.Name = dCD('Fnaq erq')
                NG61.Position = UDim2.new(0, 80, 0, 55)
                NG61.Selectable = true
                NG61.Size = UDim2.new(0, 20, 0, 20)
                NG61.Style = Enum.ButtonStyle.Custom
                NG61.Font = Enum.Font.Arial
                NG61.FontSize = Enum.FontSize.Size10
                NG61.Text = dCD('')
                NG61.TextColor3 = Color3.new(1, 1, 1)
                NG61.TextStrokeTransparency = 0.75
                NG61.Parent = NG41
                NG62 = Instance.new('TextButton')
                NG62.Active = true
                NG62.BackgroundColor3 = Color3.new(0.54902, 0.356863, 0.623529)
                NG62.BorderSizePixel = 0
                NG62.Name = dCD('Yniraqre')
                NG62.Position = UDim2.new(0, 105, 0, 55)
                NG62.Selectable = true
                NG62.Size = UDim2.new(0, 20, 0, 20)
                NG62.Style = Enum.ButtonStyle.Custom
                NG62.Font = Enum.Font.Arial
                NG62.FontSize = Enum.FontSize.Size10
                NG62.Text = dCD('')
                NG62.TextColor3 = Color3.new(1, 1, 1)
                NG62.TextStrokeTransparency = 0.75
                NG62.Parent = NG41
                NG63 = Instance.new('TextButton')
                NG63.Active = true
                NG63.BackgroundColor3 = Color3.new(0.454902, 0.52549, 0.615686)
                NG63.BorderSizePixel = 0
                NG63.Name = dCD('Fnaq oyhr')
                NG63.Position = UDim2.new(0, 130, 0, 55)
                NG63.Selectable = true
                NG63.Size = UDim2.new(0, 20, 0, 20)
                NG63.Style = Enum.ButtonStyle.Custom
                NG63.Font = Enum.Font.Arial
                NG63.FontSize = Enum.FontSize.Size10
                NG63.Text = dCD('')
                NG63.TextColor3 = Color3.new(1, 1, 1)
                NG63.TextStrokeTransparency = 0.75
                NG63.Parent = NG41
                NG64 = Instance.new('TextButton')
                NG64.Active = true
                NG64.BackgroundColor3 = Color3.new(0.431373, 0.6, 0.792157)
                NG64.BorderSizePixel = 0
                NG64.Name = dCD('Zrqvhz oyhr')
                NG64.Position = UDim2.new(0, 155, 0, 55)
                NG64.Selectable = true
                NG64.Size = UDim2.new(0, 20, 0, 20)
                NG64.Style = Enum.ButtonStyle.Custom
                NG64.Font = Enum.Font.Arial
                NG64.FontSize = Enum.FontSize.Size10
                NG64.Text = dCD('')
                NG64.TextColor3 = Color3.new(1, 1, 1)
                NG64.TextStrokeTransparency = 0.75
                NG64.Parent = NG41
                NG65 = Instance.new('TextButton')
                NG65.Active = true
                NG65.BackgroundColor3 = Color3.new(0.470588, 0.564706, 0.509804)
                NG65.BorderSizePixel = 0
                NG65.Name = dCD('Fnaq terra')
                NG65.Position = UDim2.new(0, 180, 0, 55)
                NG65.Selectable = true
                NG65.Size = UDim2.new(0, 20, 0, 20)
                NG65.Style = Enum.ButtonStyle.Custom
                NG65.Font = Enum.Font.Arial
                NG65.FontSize = Enum.FontSize.Size10
                NG65.Text = dCD('')
                NG65.TextColor3 = Color3.new(1, 1, 1)
                NG65.TextStrokeTransparency = 0.75
                NG65.Parent = NG41
                NG66 = Instance.new('TextButton')
                NG66.Active = true
                NG66.BackgroundColor3 = Color3.new(0.843137, 0.772549, 0.603922)
                NG66.BorderSizePixel = 0
                NG66.Name = dCD('Oevpx lryybj')
                NG66.Position = UDim2.new(0, 5, 0, 80)
                NG66.Selectable = true
                NG66.Size = UDim2.new(0, 20, 0, 20)
                NG66.Style = Enum.ButtonStyle.Custom
                NG66.Font = Enum.Font.Arial
                NG66.FontSize = Enum.FontSize.Size10
                NG66.Text = dCD('')
                NG66.TextColor3 = Color3.new(1, 1, 1)
                NG66.TextStrokeTransparency = 0.75
                NG66.Parent = NG41
                NG67 = Instance.new('TextButton')
                NG67.Active = true
                NG67.BackgroundColor3 = Color3.new(0.992157, 0.917647, 0.552941)
                NG67.BorderSizePixel = 0
                NG67.Name = dCD('Pbby lryybj')
                NG67.Position = UDim2.new(0, 30, 0, 80)
                NG67.Selectable = true
                NG67.Size = UDim2.new(0, 20, 0, 20)
                NG67.Style = Enum.ButtonStyle.Custom
                NG67.Font = Enum.Font.Arial
                NG67.FontSize = Enum.FontSize.Size10
                NG67.Text = dCD('')
                NG67.TextColor3 = Color3.new(1, 1, 1)
                NG67.TextStrokeTransparency = 0.75
                NG67.Parent = NG41
                NG68 = Instance.new('TextButton')
                NG68.Active = true
                NG68.BackgroundColor3 = Color3.new(0.835294, 0.45098, 0.239216)
                NG68.BorderSizePixel = 0
                NG68.Name = dCD('Arba benatr')
                NG68.Position = UDim2.new(0, 55, 0, 80)
                NG68.Selectable = true
                NG68.Size = UDim2.new(0, 20, 0, 20)
                NG68.Style = Enum.ButtonStyle.Custom
                NG68.Font = Enum.Font.Arial
                NG68.FontSize = Enum.FontSize.Size10
                NG68.Text = dCD('')
                NG68.TextColor3 = Color3.new(1, 1, 1)
                NG68.TextStrokeTransparency = 0.75
                NG68.Parent = NG41
                NG69 = Instance.new('TextButton')
                NG69.Active = true
                NG69.BackgroundColor3 = Color3.new(0.854902, 0.52549, 0.478431)
                NG69.BorderSizePixel = 0
                NG69.Name = dCD('Zrqvhz erq')
                NG69.Position = UDim2.new(0, 80, 0, 80)
                NG69.Selectable = true
                NG69.Size = UDim2.new(0, 20, 0, 20)
                NG69.Style = Enum.ButtonStyle.Custom
                NG69.Font = Enum.Font.Arial
                NG69.FontSize = Enum.FontSize.Size10
                NG69.Text = dCD('')
                NG69.TextColor3 = Color3.new(1, 1, 1)
                NG69.TextStrokeTransparency = 0.75
                NG69.Parent = NG41
                NG70 = Instance.new('TextButton')
                NG70.Active = true
                NG70.BackgroundColor3 = Color3.new(0.909804, 0.729412, 0.784314)
                NG70.BorderSizePixel = 0
                NG70.Name = dCD('Yvtug erqqvfu ivbyrg')
                NG70.Position = UDim2.new(0, 105, 0, 80)
                NG70.Selectable = true
                NG70.Size = UDim2.new(0, 20, 0, 20)
                NG70.Style = Enum.ButtonStyle.Custom
                NG70.Font = Enum.Font.Arial
                NG70.FontSize = Enum.FontSize.Size10
                NG70.Text = dCD('')
                NG70.TextColor3 = Color3.new(1, 1, 1)
                NG70.TextStrokeTransparency = 0.75
                NG70.Parent = NG41
                NG71 = Instance.new('TextButton')
                NG71.Active = true
                NG71.BackgroundColor3 = Color3.new(0.501961, 0.733333, 0.858824)
                NG71.BorderSizePixel = 0
                NG71.Name = dCD('Cnfgry Oyhr')
                NG71.Position = UDim2.new(0, 130, 0, 80)
                NG71.Selectable = true
                NG71.Size = UDim2.new(0, 20, 0, 20)
                NG71.Style = Enum.ButtonStyle.Custom
                NG71.Font = Enum.Font.Arial
                NG71.FontSize = Enum.FontSize.Size10
                NG71.Text = dCD('')
                NG71.TextColor3 = Color3.new(1, 1, 1)
                NG71.TextStrokeTransparency = 0.75
                NG71.Parent = NG41
                NG72 = Instance.new('TextButton')
                NG72.Active = true
                NG72.BackgroundColor3 = Color3.new(0.0705882, 0.933333, 0.831373)
                NG72.BorderSizePixel = 0
                NG72.Name = dCD('Grny')
                NG72.Position = UDim2.new(0, 155, 0, 80)
                NG72.Selectable = true
                NG72.Size = UDim2.new(0, 20, 0, 20)
                NG72.Style = Enum.ButtonStyle.Custom
                NG72.Font = Enum.Font.Arial
                NG72.FontSize = Enum.FontSize.Size10
                NG72.Text = dCD('')
                NG72.TextColor3 = Color3.new(1, 1, 1)
                NG72.TextStrokeTransparency = 0.75
                NG72.Parent = NG41
                NG73 = Instance.new('TextButton')
                NG73.Active = true
                NG73.BackgroundColor3 = Color3.new(0.631373, 0.768628, 0.54902)
                NG73.BorderSizePixel = 0
                NG73.Name = dCD('Zrqvhz terra')
                NG73.Position = UDim2.new(0, 180, 0, 80)
                NG73.Selectable = true
                NG73.Size = UDim2.new(0, 20, 0, 20)
                NG73.Style = Enum.ButtonStyle.Custom
                NG73.Font = Enum.Font.Arial
                NG73.FontSize = Enum.FontSize.Size10
                NG73.Text = dCD('')
                NG73.TextColor3 = Color3.new(1, 1, 1)
                NG73.TextStrokeTransparency = 0.75
                NG73.Parent = NG41
                NG74 = Instance.new('TextButton')
                NG74.Active = true
                NG74.BackgroundColor3 = Color3.new(1, 0.8, 0.6)
                NG74.BorderSizePixel = 0
                NG74.Name = dCD('Cnfgry oebja')
                NG74.Position = UDim2.new(0, 5, 0, 105)
                NG74.Selectable = true
                NG74.Size = UDim2.new(0, 20, 0, 20)
                NG74.Style = Enum.ButtonStyle.Custom
                NG74.Font = Enum.Font.Arial
                NG74.FontSize = Enum.FontSize.Size10
                NG74.Text = dCD('')
                NG74.TextColor3 = Color3.new(1, 1, 1)
                NG74.TextStrokeTransparency = 0.75
                NG74.Parent = NG41
                NG75 = Instance.new('TextButton')
                NG75.Active = true
                NG75.BackgroundColor3 = Color3.new(1, 1, 0.8)
                NG75.BorderSizePixel = 0
                NG75.Name = dCD('Cnfgry lryybj')
                NG75.Position = UDim2.new(0, 30, 0, 105)
                NG75.Selectable = true
                NG75.Size = UDim2.new(0, 20, 0, 20)
                NG75.Style = Enum.ButtonStyle.Custom
                NG75.Font = Enum.Font.Arial
                NG75.FontSize = Enum.FontSize.Size10
                NG75.Text = dCD('')
                NG75.TextColor3 = Color3.new(1, 1, 1)
                NG75.TextStrokeTransparency = 0.75
                NG75.Parent = NG41
                NG76 = Instance.new('TextButton')
                NG76.Active = true
                NG76.BackgroundColor3 = Color3.new(1, 0.788235, 0.788235)
                NG76.BorderSizePixel = 0
                NG76.Name = dCD('Cnfgry benatr')
                NG76.Position = UDim2.new(0, 55, 0, 105)
                NG76.Selectable = true
                NG76.Size = UDim2.new(0, 20, 0, 20)
                NG76.Style = Enum.ButtonStyle.Custom
                NG76.Font = Enum.Font.Arial
                NG76.FontSize = Enum.FontSize.Size10
                NG76.Text = dCD('')
                NG76.TextColor3 = Color3.new(1, 1, 1)
                NG76.TextStrokeTransparency = 0.75
                NG76.Parent = NG41
                NG77 = Instance.new('TextButton')
                NG77.Active = true
                NG77.BackgroundColor3 = Color3.new(1, 0.4, 0.8)
                NG77.BorderSizePixel = 0
                NG77.Name = dCD('Cvax')
                NG77.Position = UDim2.new(0, 80, 0, 105)
                NG77.Selectable = true
                NG77.Size = UDim2.new(0, 20, 0, 20)
                NG77.Style = Enum.ButtonStyle.Custom
                NG77.Font = Enum.Font.Arial
                NG77.FontSize = Enum.FontSize.Size10
                NG77.Text = dCD('')
                NG77.TextColor3 = Color3.new(1, 1, 1)
                NG77.TextStrokeTransparency = 0.75
                NG77.Parent = NG41
                NG78 = Instance.new('TextButton')
                NG78.Active = true
                NG78.BackgroundColor3 = Color3.new(0.694118, 0.654902, 1)
                NG78.BorderSizePixel = 0
                NG78.Name = dCD('Cnfgry ivbyrg')
                NG78.Position = UDim2.new(0, 105, 0, 105)
                NG78.Selectable = true
                NG78.Size = UDim2.new(0, 20, 0, 20)
                NG78.Style = Enum.ButtonStyle.Custom
                NG78.Font = Enum.Font.Arial
                NG78.FontSize = Enum.FontSize.Size10
                NG78.Text = dCD('')
                NG78.TextColor3 = Color3.new(1, 1, 1)
                NG78.TextStrokeTransparency = 0.75
                NG78.Parent = NG41
                NG79 = Instance.new('TextButton')
                NG79.Active = true
                NG79.BackgroundColor3 = Color3.new(0.686275, 0.866667, 1)
                NG79.BorderSizePixel = 0
                NG79.Name = dCD('Cnfgry yvtug oyhr')
                NG79.Position = UDim2.new(0, 130, 0, 105)
                NG79.Selectable = true
                NG79.Size = UDim2.new(0, 20, 0, 20)
                NG79.Style = Enum.ButtonStyle.Custom
                NG79.Font = Enum.Font.Arial
                NG79.FontSize = Enum.FontSize.Size10
                NG79.Text = dCD('')
                NG79.TextColor3 = Color3.new(1, 1, 1)
                NG79.TextStrokeTransparency = 0.75
                NG79.Parent = NG41
                NG80 = Instance.new('TextButton')
                NG80.Active = true
                NG80.BackgroundColor3 = Color3.new(0.623529, 0.952941, 0.913726)
                NG80.BorderSizePixel = 0
                NG80.Name = dCD('Cnfgry oyhr-terra')
                NG80.Position = UDim2.new(0, 155, 0, 105)
                NG80.Selectable = true
                NG80.Size = UDim2.new(0, 20, 0, 20)
                NG80.Style = Enum.ButtonStyle.Custom
                NG80.Font = Enum.Font.Arial
                NG80.FontSize = Enum.FontSize.Size10
                NG80.Text = dCD('')
                NG80.TextColor3 = Color3.new(1, 1, 1)
                NG80.TextStrokeTransparency = 0.75
                NG80.Parent = NG41
                NG81 = Instance.new('TextButton')
                NG81.Active = true
                NG81.BackgroundColor3 = Color3.new(0.8, 1, 0.8)
                NG81.BorderSizePixel = 0
                NG81.Name = dCD('Cnfgry terra')
                NG81.Position = UDim2.new(0, 180, 0, 105)
                NG81.Selectable = true
                NG81.Size = UDim2.new(0, 20, 0, 20)
                NG81.Style = Enum.ButtonStyle.Custom
                NG81.Font = Enum.Font.Arial
                NG81.FontSize = Enum.FontSize.Size10
                NG81.Text = dCD('')
                NG81.TextColor3 = Color3.new(1, 1, 1)
                NG81.TextStrokeTransparency = 0.75
                NG81.Parent = NG41
                NG82 = Instance.new('TextButton')
                NG82.Active = true
                NG82.BackgroundColor3 = Color3.new(0.756863, 0.745098, 0.258824)
                NG82.BorderSizePixel = 0
                NG82.Name = dCD('Byvir')
                NG82.Position = UDim2.new(0, 5, 0, 130)
                NG82.Selectable = true
                NG82.Size = UDim2.new(0, 20, 0, 20)
                NG82.Style = Enum.ButtonStyle.Custom
                NG82.Font = Enum.Font.Arial
                NG82.FontSize = Enum.FontSize.Size10
                NG82.Text = dCD('')
                NG82.TextColor3 = Color3.new(1, 1, 1)
                NG82.TextStrokeTransparency = 0.75
                NG82.Parent = NG41
                NG83 = Instance.new('TextButton')
                NG83.Active = true
                NG83.BackgroundColor3 = Color3.new(1, 1, 0)
                NG83.BorderSizePixel = 0
                NG83.Name = dCD('Arj Lryyre')
                NG83.Position = UDim2.new(0, 30, 0, 130)
                NG83.Selectable = true
                NG83.Size = UDim2.new(0, 20, 0, 20)
                NG83.Style = Enum.ButtonStyle.Custom
                NG83.Font = Enum.Font.Arial
                NG83.FontSize = Enum.FontSize.Size10
                NG83.Text = dCD('')
                NG83.TextColor3 = Color3.new(1, 1, 1)
                NG83.TextStrokeTransparency = 0.75
                NG83.Parent = NG41
                NG84 = Instance.new('TextButton')
                NG84.Active = true
                NG84.BackgroundColor3 = Color3.new(1, 0.686275, 0)
                NG84.BorderSizePixel = 0
                NG84.Name = dCD('Qrrc benatr')
                NG84.Position = UDim2.new(0, 55, 0, 130)
                NG84.Selectable = true
                NG84.Size = UDim2.new(0, 20, 0, 20)
                NG84.Style = Enum.ButtonStyle.Custom
                NG84.Font = Enum.Font.Arial
                NG84.FontSize = Enum.FontSize.Size10
                NG84.Text = dCD('')
                NG84.TextColor3 = Color3.new(1, 1, 1)
                NG84.TextStrokeTransparency = 0.75
                NG84.Parent = NG41
                NG85 = Instance.new('TextButton')
                NG85.Active = true
                NG85.BackgroundColor3 = Color3.new(1, 0, 0)
                NG85.BorderSizePixel = 0
                NG85.Name = dCD('Ernyyl erq')
                NG85.Position = UDim2.new(0, 80, 0, 130)
                NG85.Selectable = true
                NG85.Size = UDim2.new(0, 20, 0, 20)
                NG85.Style = Enum.ButtonStyle.Custom
                NG85.Font = Enum.Font.Arial
                NG85.FontSize = Enum.FontSize.Size10
                NG85.Text = dCD('')
                NG85.TextColor3 = Color3.new(1, 1, 1)
                NG85.TextStrokeTransparency = 0.75
                NG85.Parent = NG41
                NG86 = Instance.new('TextButton')
                NG86.Active = true
                NG86.BackgroundColor3 = Color3.new(1, 0, 0.74902)
                NG86.BorderSizePixel = 0
                NG86.Name = dCD('Ubg cvax')
                NG86.Position = UDim2.new(0, 105, 0, 130)
                NG86.Selectable = true
                NG86.Size = UDim2.new(0, 20, 0, 20)
                NG86.Style = Enum.ButtonStyle.Custom
                NG86.Font = Enum.Font.Arial
                NG86.FontSize = Enum.FontSize.Size10
                NG86.Text = dCD('')
                NG86.TextColor3 = Color3.new(1, 1, 1)
                NG86.TextStrokeTransparency = 0.75
                NG86.Parent = NG41
                NG87 = Instance.new('TextButton')
                NG87.Active = true
                NG87.BackgroundColor3 = Color3.new(0, 0, 1)
                NG87.BorderSizePixel = 0
                NG87.Name = dCD('Ernyyl oyhr')
                NG87.Position = UDim2.new(0, 130, 0, 130)
                NG87.Selectable = true
                NG87.Size = UDim2.new(0, 20, 0, 20)
                NG87.Style = Enum.ButtonStyle.Custom
                NG87.Font = Enum.Font.Arial
                NG87.FontSize = Enum.FontSize.Size10
                NG87.Text = dCD('')
                NG87.TextColor3 = Color3.new(1, 1, 1)
                NG87.TextStrokeTransparency = 0.75
                NG87.Parent = NG41
                NG88 = Instance.new('TextButton')
                NG88.Active = true
                NG88.BackgroundColor3 = Color3.new(0, 1, 1)
                NG88.BorderSizePixel = 0
                NG88.Name = dCD('Gbbgucnfgr')
                NG88.Position = UDim2.new(0, 155, 0, 130)
                NG88.Selectable = true
                NG88.Size = UDim2.new(0, 20, 0, 20)
                NG88.Style = Enum.ButtonStyle.Custom
                NG88.Font = Enum.Font.Arial
                NG88.FontSize = Enum.FontSize.Size10
                NG88.Text = dCD('')
                NG88.TextColor3 = Color3.new(1, 1, 1)
                NG88.TextStrokeTransparency = 0.75
                NG88.Parent = NG41
                NG89 = Instance.new('TextButton')
                NG89.Active = true
                NG89.BackgroundColor3 = Color3.new(0, 1, 0)
                NG89.BorderSizePixel = 0
                NG89.Name = dCD('Yvzr terra')
                NG89.Position = UDim2.new(0, 180, 0, 130)
                NG89.Selectable = true
                NG89.Size = UDim2.new(0, 20, 0, 20)
                NG89.Style = Enum.ButtonStyle.Custom
                NG89.Font = Enum.Font.Arial
                NG89.FontSize = Enum.FontSize.Size10
                NG89.Text = dCD('')
                NG89.TextColor3 = Color3.new(1, 1, 1)
                NG89.TextStrokeTransparency = 0.75
                NG89.Parent = NG41
                NG90 = Instance.new('TextButton')
                NG90.Active = true
                NG90.BackgroundColor3 = Color3.new(0.486275, 0.360784, 0.27451)
                NG90.BorderSizePixel = 0
                NG90.Name = dCD('Oebja')
                NG90.Position = UDim2.new(0, 5, 0, 155)
                NG90.Selectable = true
                NG90.Size = UDim2.new(0, 20, 0, 20)
                NG90.Style = Enum.ButtonStyle.Custom
                NG90.Font = Enum.Font.Arial
                NG90.FontSize = Enum.FontSize.Size10
                NG90.Text = dCD('')
                NG90.TextColor3 = Color3.new(1, 1, 1)
                NG90.TextStrokeTransparency = 0.75
                NG90.Parent = NG41
                NG91 = Instance.new('TextButton')
                NG91.Active = true
                NG91.BackgroundColor3 = Color3.new(0.8, 0.556863, 0.411765)
                NG91.BorderSizePixel = 0
                NG91.Name = dCD('Abhtng')
                NG91.Position = UDim2.new(0, 30, 0, 155)
                NG91.Selectable = true
                NG91.Size = UDim2.new(0, 20, 0, 20)
                NG91.Style = Enum.ButtonStyle.Custom
                NG91.Font = Enum.Font.Arial
                NG91.FontSize = Enum.FontSize.Size10
                NG91.Text = dCD('')
                NG91.TextColor3 = Color3.new(1, 1, 1)
                NG91.TextStrokeTransparency = 0.75
                NG91.Parent = NG41
                NG92 = Instance.new('TextButton')
                NG92.Active = true
                NG92.BackgroundColor3 = Color3.new(0.627451, 0.372549, 0.207843)
                NG92.BorderSizePixel = 0
                NG92.Name = dCD('Qnex benatr')
                NG92.Position = UDim2.new(0, 55, 0, 155)
                NG92.Selectable = true
                NG92.Size = UDim2.new(0, 20, 0, 20)
                NG92.Style = Enum.ButtonStyle.Custom
                NG92.Font = Enum.Font.Arial
                NG92.FontSize = Enum.FontSize.Size10
                NG92.Text = dCD('')
                NG92.TextColor3 = Color3.new(1, 1, 1)
                NG92.TextStrokeTransparency = 0.75
                NG92.Parent = NG41
                NG93 = Instance.new('TextButton')
                NG93.Active = true
                NG93.BackgroundColor3 = Color3.new(0.384314, 0.145098, 0.819608)
                NG93.BorderSizePixel = 0
                NG93.Name = dCD('Eblny checyr')
                NG93.Position = UDim2.new(0, 80, 0, 155)
                NG93.Selectable = true
                NG93.Size = UDim2.new(0, 20, 0, 20)
                NG93.Style = Enum.ButtonStyle.Custom
                NG93.Font = Enum.Font.Arial
                NG93.FontSize = Enum.FontSize.Size10
                NG93.Text = dCD('')
                NG93.TextColor3 = Color3.new(1, 1, 1)
                NG93.TextStrokeTransparency = 0.75
                NG93.Parent = NG41
                NG94 = Instance.new('TextButton')
                NG94.Active = true
                NG94.BackgroundColor3 = Color3.new(0.705882, 0.501961, 1)
                NG94.BorderSizePixel = 0
                NG94.Name = dCD('Nyqre')
                NG94.Position = UDim2.new(0, 105, 0, 155)
                NG94.Selectable = true
                NG94.Size = UDim2.new(0, 20, 0, 20)
                NG94.Style = Enum.ButtonStyle.Custom
                NG94.Font = Enum.Font.Arial
                NG94.FontSize = Enum.FontSize.Size10
                NG94.Text = dCD('')
                NG94.TextColor3 = Color3.new(1, 1, 1)
                NG94.TextStrokeTransparency = 0.75
                NG94.Parent = NG41
                NG95 = Instance.new('TextButton')
                NG95.Active = true
                NG95.BackgroundColor3 = Color3.new(0.0156863, 0.686275, 0.92549)
                NG95.BorderSizePixel = 0
                NG95.Name = dCD('Plna')
                NG95.Position = UDim2.new(0, 130, 0, 155)
                NG95.Selectable = true
                NG95.Size = UDim2.new(0, 20, 0, 20)
                NG95.Style = Enum.ButtonStyle.Custom
                NG95.Font = Enum.Font.Arial
                NG95.FontSize = Enum.FontSize.Size10
                NG95.Text = dCD('')
                NG95.TextColor3 = Color3.new(1, 1, 1)
                NG95.TextStrokeTransparency = 0.75
                NG95.Parent = NG41
                NG96 = Instance.new('TextButton')
                NG96.Active = true
                NG96.BackgroundColor3 = Color3.new(0.705882, 0.823529, 0.894118)
                NG96.BorderSizePixel = 0
                NG96.Name = dCD('Yvtug oyhr')
                NG96.Position = UDim2.new(0, 155, 0, 155)
                NG96.Selectable = true
                NG96.Size = UDim2.new(0, 20, 0, 20)
                NG96.Style = Enum.ButtonStyle.Custom
                NG96.Font = Enum.Font.Arial
                NG96.FontSize = Enum.FontSize.Size10
                NG96.Text = dCD('')
                NG96.TextColor3 = Color3.new(1, 1, 1)
                NG96.TextStrokeTransparency = 0.75
                NG96.Parent = NG41
                NG97 = Instance.new('TextButton')
                NG97.Active = true
                NG97.BackgroundColor3 = Color3.new(0.227451, 0.490196, 0.0823529)
                NG97.BorderSizePixel = 0
                NG97.Name = dCD('Pnzb')
                NG97.Position = UDim2.new(0, 180, 0, 155)
                NG97.Selectable = true
                NG97.Size = UDim2.new(0, 20, 0, 20)
                NG97.Style = Enum.ButtonStyle.Custom
                NG97.Font = Enum.Font.Arial
                NG97.FontSize = Enum.FontSize.Size10
                NG97.Text = dCD('')
                NG97.TextColor3 = Color3.new(1, 1, 1)
                NG97.TextStrokeTransparency = 0.75
                NG97.Parent = NG41
                NG98 = Instance.new('TextButton')
                NG98.Active = true
                NG98.BackgroundColor3 = Color3.new(0.411765, 0.25098, 0.156863)
                NG98.BorderSizePixel = 0
                NG98.Name = dCD('Erqqvfu oebja')
                NG98.Position = UDim2.new(0, 5, 0, 180)
                NG98.Selectable = true
                NG98.Size = UDim2.new(0, 20, 0, 20)
                NG98.Style = Enum.ButtonStyle.Custom
                NG98.Font = Enum.Font.Arial
                NG98.FontSize = Enum.FontSize.Size10
                NG98.Text = dCD('')
                NG98.TextColor3 = Color3.new(1, 1, 1)
                NG98.TextStrokeTransparency = 0.75
                NG98.Parent = NG41
                NG99 = Instance.new('TextButton')
                NG99.Active = true
                NG99.BackgroundColor3 = Color3.new(0.666667, 0.333333, 0)
                NG99.BorderSizePixel = 0
                NG99.Name = dCD('PTN oebja')
                NG99.Position = UDim2.new(0, 30, 0, 180)
                NG99.Selectable = true
                NG99.Size = UDim2.new(0, 20, 0, 20)
                NG99.Style = Enum.ButtonStyle.Custom
                NG99.Font = Enum.Font.Arial
                NG99.FontSize = Enum.FontSize.Size10
                NG99.Text = dCD('')
                NG99.TextColor3 = Color3.new(1, 1, 1)
                NG99.TextStrokeTransparency = 0.75
                NG99.Parent = NG41
                NG100 = Instance.new('TextButton')
                NG100.Active = true
                NG100.BackgroundColor3 = Color3.new(0.639216, 0.294118, 0.294118)
                NG100.BorderSizePixel = 0
                NG100.Name = dCD('Qhfgl Ebfr')
                NG100.Position = UDim2.new(0, 55, 0, 180)
                NG100.Selectable = true
                NG100.Size = UDim2.new(0, 20, 0, 20)
                NG100.Style = Enum.ButtonStyle.Custom
                NG100.Font = Enum.Font.Arial
                NG100.FontSize = Enum.FontSize.Size10
                NG100.Text = dCD('')
                NG100.TextColor3 = Color3.new(1, 1, 1)
                NG100.TextStrokeTransparency = 0.75
                NG100.Parent = NG41
                NG101 = Instance.new('TextButton')
                NG101.Active = true
                NG101.BackgroundColor3 = Color3.new(0.666667, 0, 0.666667)
                NG101.BorderSizePixel = 0
                NG101.Name = dCD('Zntragn')
                NG101.Position = UDim2.new(0, 80, 0, 180)
                NG101.Selectable = true
                NG101.Size = UDim2.new(0, 20, 0, 20)
                NG101.Style = Enum.ButtonStyle.Custom
                NG101.Font = Enum.Font.Arial
                NG101.FontSize = Enum.FontSize.Size10
                NG101.Text = dCD('')
                NG101.TextColor3 = Color3.new(1, 1, 1)
                NG101.TextStrokeTransparency = 0.75
                NG101.Parent = NG41
                NG102 = Instance.new('TextButton')
                NG102.Active = true
                NG102.BackgroundColor3 = Color3.new(0.129412, 0.329412, 0.72549)
                NG102.BorderSizePixel = 0
                NG102.Name = dCD('Qrrc oyhr')
                NG102.Position = UDim2.new(0, 105, 0, 180)
                NG102.Selectable = true
                NG102.Size = UDim2.new(0, 20, 0, 20)
                NG102.Style = Enum.ButtonStyle.Custom
                NG102.Font = Enum.Font.Arial
                NG102.FontSize = Enum.FontSize.Size10
                NG102.Text = dCD('')
                NG102.TextColor3 = Color3.new(1, 1, 1)
                NG102.TextStrokeTransparency = 0.75
                NG102.Parent = NG41
                NG103 = Instance.new('TextButton')
                NG103.Active = true
                NG103.BackgroundColor3 = Color3.new(0, 0.12549, 0.376471)
                NG103.BorderSizePixel = 0
                NG103.Name = dCD('Anil oyhr')
                NG103.Position = UDim2.new(0, 130, 0, 180)
                NG103.Selectable = true
                NG103.Size = UDim2.new(0, 20, 0, 20)
                NG103.Style = Enum.ButtonStyle.Custom
                NG103.Font = Enum.Font.Arial
                NG103.FontSize = Enum.FontSize.Size10
                NG103.Text = dCD('')
                NG103.TextColor3 = Color3.new(1, 1, 1)
                NG103.TextStrokeTransparency = 0.75
                NG103.Parent = NG41
                NG104 = Instance.new('TextButton')
                NG104.Active = true
                NG104.BackgroundColor3 = Color3.new(0.156863, 0.498039, 0.278431)
                NG104.BorderSizePixel = 0
                NG104.Name = dCD('Qnex terra')
                NG104.Position = UDim2.new(0, 155, 0, 180)
                NG104.Selectable = true
                NG104.Size = UDim2.new(0, 20, 0, 20)
                NG104.Style = Enum.ButtonStyle.Custom
                NG104.Font = Enum.Font.Arial
                NG104.FontSize = Enum.FontSize.Size10
                NG104.Text = dCD('')
                NG104.TextColor3 = Color3.new(1, 1, 1)
                NG104.TextStrokeTransparency = 0.75
                NG104.Parent = NG41
                NG105 = Instance.new('TextButton')
                NG105.Active = true
                NG105.BackgroundColor3 = Color3.new(0.152941, 0.27451, 0.176471)
                NG105.BorderSizePixel = 0
                NG105.Name = dCD('Rnegu terra')
                NG105.Position = UDim2.new(0, 180, 0, 180)
                NG105.Selectable = true
                NG105.Size = UDim2.new(0, 20, 0, 20)
                NG105.Style = Enum.ButtonStyle.Custom
                NG105.Font = Enum.Font.Arial
                NG105.FontSize = Enum.FontSize.Size10
                NG105.Text = dCD('')
                NG105.TextColor3 = Color3.new(1, 1, 1)
                NG105.TextStrokeTransparency = 0.75
                NG105.Parent = NG41
                NG106 = Instance.new('Frame')
                NG106.Active = true
                NG106.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG106.BackgroundTransparency = 1
                NG106.BorderSizePixel = 0
                NG106.Name = dCD('OGZbirGbbyTHV')
                NG106.Position = UDim2.new(0, 0, 0, 280)
                NG106.Size = UDim2.new(0, 245, 0, 90)
                NG106.Draggable = true
                NG106.Parent = NG1
                NG107 = Instance.new('Frame')
                NG107.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG107.BackgroundTransparency = 1
                NG107.BorderSizePixel = 0
                NG107.Name = dCD('Punatrf')
                NG107.Position = UDim2.new(0, 5, 0, 100)
                NG107.Size = UDim2.new(1, -5, 0, 20)
                NG107.Parent = NG106
                NG108 = Instance.new('TextLabel')
                NG108.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG108.BackgroundTransparency = 1
                NG108.BorderSizePixel = 0
                NG108.Name = dCD('Grkg')
                NG108.Position = UDim2.new(0, 10, 0, 2)
                NG108.Size = UDim2.new(1, -10, 0, 20)
                NG108.Font = Enum.Font.ArialBold
                NG108.FontSize = Enum.FontSize.Size10
                NG108.Text = dCD('zbirq 0 fghqf')
                NG108.TextColor3 = Color3.new(1, 1, 1)
                NG108.TextStrokeTransparency = 0.5
                NG108.TextWrapped = true
                NG108.TextXAlignment = Enum.TextXAlignment.Right
                NG108.Parent = NG107
                NG109 = Instance.new('Frame')
                NG109.BackgroundColor3 = Color3.new(1, 0.666667, 0)
                NG109.BorderSizePixel = 0
                NG109.Name = dCD('PbybeOne')
                NG109.Size = UDim2.new(1, 0, 0, 2)
                NG109.Parent = NG107
                NG110 = Instance.new('Frame')
                NG110.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG110.BackgroundTransparency = 1
                NG110.BorderSizePixel = 0
                NG110.Name = dCD('Vasb')
                NG110.Position = UDim2.new(0, 5, 0, 100)
                NG110.Size = UDim2.new(1, -5, 0, 60)
                NG110.Visible = false
                NG110.Parent = NG106
                NG111 = Instance.new('Frame')
                NG111.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG111.BackgroundTransparency = 1
                NG111.BorderSizePixel = 0
                NG111.Name = dCD('Pragre')
                NG111.Position = UDim2.new(0, 0, 0, 30)
                NG111.Size = UDim2.new(0, 0, 0, 0)
                NG111.Parent = NG110
                NG112 = Instance.new('Frame')
                NG112.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG112.BackgroundTransparency = 1
                NG112.BorderSizePixel = 0
                NG112.Name = dCD('M')
                NG112.Position = UDim2.new(0, 164, 0, 0)
                NG112.Size = UDim2.new(0, 50, 0, 25)
                NG112.Parent = NG111
                NG113 = Instance.new('ImageLabel')
                NG113.Active = false
                NG113.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG113.BackgroundTransparency = 1
                NG113.BorderSizePixel = 0
                NG113.Name = dCD('Onpxtebhaq')
                NG113.Selectable = false
                NG113.Size = UDim2.new(1, 0, 1, 0)
                NG113.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG113.Parent = NG112
                NG114 = Instance.new('TextButton')
                NG114.Active = true
                NG114.AutoButtonColor = false
                NG114.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG114.BackgroundTransparency = 1
                NG114.BorderSizePixel = 0
                NG114.Selectable = true
                NG114.Size = UDim2.new(1, 0, 1, 0)
                NG114.Style = Enum.ButtonStyle.Custom
                NG114.ZIndex = 3
                NG114.Font = Enum.Font.Legacy
                NG114.FontSize = Enum.FontSize.Size8
                NG114.Text = dCD('')
                NG114.Parent = NG112
                NG115 = Instance.new('TextBox')
                NG115.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG115.BackgroundTransparency = 1
                NG115.BorderSizePixel = 0
                NG115.Position = UDim2.new(0, 5, 0, 0)
                NG115.Size = UDim2.new(1, -10, 1, 0)
                NG115.ZIndex = 2
                NG115.Font = Enum.Font.ArialBold
                NG115.FontSize = Enum.FontSize.Size10
                NG115.Text = dCD('')
                NG115.TextColor3 = Color3.new(1, 1, 1)
                NG115.Parent = NG112
                NG116 = Instance.new('Frame')
                NG116.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG116.BackgroundTransparency = 1
                NG116.BorderSizePixel = 0
                NG116.Name = dCD('L')
                NG116.Position = UDim2.new(0, 117, 0, 0)
                NG116.Size = UDim2.new(0, 50, 0, 25)
                NG116.Parent = NG111
                NG117 = Instance.new('TextButton')
                NG117.Active = true
                NG117.AutoButtonColor = false
                NG117.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG117.BackgroundTransparency = 1
                NG117.BorderSizePixel = 0
                NG117.Selectable = true
                NG117.Size = UDim2.new(1, 0, 1, 0)
                NG117.Style = Enum.ButtonStyle.Custom
                NG117.ZIndex = 3
                NG117.Font = Enum.Font.Legacy
                NG117.FontSize = Enum.FontSize.Size8
                NG117.Text = dCD('')
                NG117.Parent = NG116
                NG118 = Instance.new('TextBox')
                NG118.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG118.BackgroundTransparency = 1
                NG118.BorderSizePixel = 0
                NG118.Position = UDim2.new(0, 5, 0, 0)
                NG118.Size = UDim2.new(1, -10, 1, 0)
                NG118.ZIndex = 2
                NG118.Font = Enum.Font.ArialBold
                NG118.FontSize = Enum.FontSize.Size10
                NG118.Text = dCD('')
                NG118.TextColor3 = Color3.new(1, 1, 1)
                NG118.Parent = NG116
                NG119 = Instance.new('ImageLabel')
                NG119.Active = false
                NG119.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG119.BackgroundTransparency = 1
                NG119.BorderSizePixel = 0
                NG119.Name = dCD('Onpxtebhaq')
                NG119.Selectable = false
                NG119.Size = UDim2.new(1, 0, 1, 0)
                NG119.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG119.Parent = NG116
                NG120 = Instance.new('Frame')
                NG120.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG120.BackgroundTransparency = 1
                NG120.BorderSizePixel = 0
                NG120.Name = dCD('K')
                NG120.Position = UDim2.new(0, 70, 0, 0)
                NG120.Size = UDim2.new(0, 50, 0, 25)
                NG120.Parent = NG111
                NG121 = Instance.new('TextBox')
                NG121.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG121.BackgroundTransparency = 1
                NG121.BorderSizePixel = 0
                NG121.Position = UDim2.new(0, 5, 0, 0)
                NG121.Size = UDim2.new(1, -10, 1, 0)
                NG121.ZIndex = 2
                NG121.Font = Enum.Font.ArialBold
                NG121.FontSize = Enum.FontSize.Size10
                NG121.Text = dCD('')
                NG121.TextColor3 = Color3.new(1, 1, 1)
                NG121.Parent = NG120
                NG122 = Instance.new('TextButton')
                NG122.Active = true
                NG122.AutoButtonColor = false
                NG122.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG122.BackgroundTransparency = 1
                NG122.BorderSizePixel = 0
                NG122.Selectable = true
                NG122.Size = UDim2.new(1, 0, 1, 0)
                NG122.Style = Enum.ButtonStyle.Custom
                NG122.ZIndex = 3
                NG122.Font = Enum.Font.Legacy
                NG122.FontSize = Enum.FontSize.Size8
                NG122.Text = dCD('')
                NG122.Parent = NG120
                NG123 = Instance.new('ImageLabel')
                NG123.Active = false
                NG123.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG123.BackgroundTransparency = 1
                NG123.BorderSizePixel = 0
                NG123.Name = dCD('Onpxtebhaq')
                NG123.Selectable = false
                NG123.Size = UDim2.new(1, 0, 1, 0)
                NG123.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG123.Parent = NG120
                NG124 = Instance.new('TextLabel')
                NG124.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG124.BackgroundTransparency = 1
                NG124.BorderSizePixel = 0
                NG124.Size = UDim2.new(0, 75, 0, 25)
                NG124.Font = Enum.Font.ArialBold
                NG124.FontSize = Enum.FontSize.Size10
                NG124.Text = dCD('Cbfvgvba')
                NG124.TextColor3 = Color3.new(1, 1, 1)
                NG124.TextStrokeTransparency = 0
                NG124.TextWrapped = true
                NG124.Parent = NG111
                NG125 = Instance.new('TextLabel')
                NG125.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG125.BackgroundTransparency = 1
                NG125.BorderSizePixel = 0
                NG125.Name = dCD('Ynory')
                NG125.Position = UDim2.new(0, 10, 0, 2)
                NG125.Size = UDim2.new(1, -10, 0, 20)
                NG125.Font = Enum.Font.ArialBold
                NG125.FontSize = Enum.FontSize.Size10
                NG125.Text = dCD('FRYRPGVBA VASB')
                NG125.TextColor3 = Color3.new(1, 1, 1)
                NG125.TextStrokeTransparency = 0
                NG125.TextWrapped = true
                NG125.TextXAlignment = Enum.TextXAlignment.Left
                NG125.Parent = NG110
                NG126 = Instance.new('Frame')
                NG126.BackgroundColor3 = Color3.new(1, 0.666667, 0)
                NG126.BorderSizePixel = 0
                NG126.Name = dCD('PbybeOne')
                NG126.Size = UDim2.new(1, 0, 0, 2)
                NG126.Parent = NG110
                NG127 = Instance.new('Frame')
                NG127.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG127.BackgroundTransparency = 1
                NG127.BorderSizePixel = 0
                NG127.Name = dCD('VaperzragBcgvba')
                NG127.Position = UDim2.new(0, 0, 0, 65)
                NG127.Size = UDim2.new(0, 0, 0, 0)
                NG127.Parent = NG106
                NG128 = Instance.new('Frame')
                NG128.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG128.BackgroundTransparency = 1
                NG128.BorderSizePixel = 0
                NG128.Name = dCD('Ynory')
                NG128.Size = UDim2.new(0, 75, 0, 25)
                NG128.Parent = NG127
                NG129 = Instance.new('TextLabel')
                NG129.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG129.BackgroundTransparency = 1
                NG129.BorderSizePixel = 0
                NG129.Size = UDim2.new(1, 0, 1, 0)
                NG129.Font = Enum.Font.ArialBold
                NG129.FontSize = Enum.FontSize.Size10
                NG129.Text = dCD('Vaperzrag')
                NG129.TextColor3 = Color3.new(1, 1, 1)
                NG129.TextStrokeTransparency = 0
                NG129.TextWrapped = true
                NG129.Parent = NG128
                NG130 = Instance.new('Frame')
                NG130.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG130.BackgroundTransparency = 1
                NG130.BorderSizePixel = 0
                NG130.Name = dCD('Vaperzrag')
                NG130.Position = UDim2.new(0, 70, 0, 0)
                NG130.Size = UDim2.new(0, 50, 0, 25)
                NG130.Parent = NG127
                NG131 = Instance.new('ImageLabel')
                NG131.Active = false
                NG131.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG131.BackgroundTransparency = 1
                NG131.BorderSizePixel = 0
                NG131.Name = dCD('Onpxtebhaq')
                NG131.Selectable = false
                NG131.Size = UDim2.new(1, 0, 1, 0)
                NG131.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG131.Parent = NG130
                NG132 = Instance.new('TextBox')
                NG132.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG132.BackgroundTransparency = 1
                NG132.BorderSizePixel = 0
                NG132.Position = UDim2.new(0, 5, 0, 0)
                NG132.Size = UDim2.new(1, -10, 1, 0)
                NG132.ZIndex = 2
                NG132.Font = Enum.Font.ArialBold
                NG132.FontSize = Enum.FontSize.Size10
                NG132.Text = dCD('1')
                NG132.TextColor3 = Color3.new(1, 1, 1)
                NG132.Parent = NG130
                NG133 = Instance.new('Frame')
                NG133.BorderSizePixel = 0
                NG133.Name = dCD('FryrpgrqVaqvpngbe')
                NG133.Position = UDim2.new(0, 5, 0, -2)
                NG133.Size = UDim2.new(1, -4, 0, 2)
                NG133.Parent = NG130
                NG134 = Instance.new('Frame')
                NG134.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG134.BackgroundTransparency = 1
                NG134.BorderSizePixel = 0
                NG134.Name = dCD('Gvgyr')
                NG134.Size = UDim2.new(1, 0, 0, 20)
                NG134.Parent = NG106
                NG135 = Instance.new('TextLabel')
                NG135.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG135.BackgroundTransparency = 1
                NG135.BorderSizePixel = 0
                NG135.Name = dCD('S3KFvtangher')
                NG135.Position = UDim2.new(0, 10, 0, 1)
                NG135.Size = UDim2.new(1, -10, 1, 0)
                NG135.Font = Enum.Font.ArialBold
                NG135.FontSize = Enum.FontSize.Size14
                NG135.Text = dCD('S3K')
                NG135.TextColor3 = Color3.new(1, 1, 1)
                NG135.TextStrokeTransparency = 0.89999997615814
                NG135.TextWrapped = true
                NG135.TextXAlignment = Enum.TextXAlignment.Right
                NG135.Parent = NG134
                NG136 = Instance.new('TextLabel')
                NG136.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG136.BackgroundTransparency = 1
                NG136.BorderSizePixel = 0
                NG136.Name = dCD('Ynory')
                NG136.Position = UDim2.new(0, 10, 0, 1)
                NG136.Size = UDim2.new(1, -10, 1, 0)
                NG136.Font = Enum.Font.ArialBold
                NG136.FontSize = Enum.FontSize.Size10
                NG136.Text = dCD('ZBIR GBBY')
                NG136.TextColor3 = Color3.new(1, 1, 1)
                NG136.TextStrokeTransparency = 0
                NG136.TextWrapped = true
                NG136.TextXAlignment = Enum.TextXAlignment.Left
                NG136.Parent = NG134
                NG137 = Instance.new('Frame')
                NG137.BackgroundColor3 = Color3.new(1, 0.666667, 0)
                NG137.BorderSizePixel = 0
                NG137.Name = dCD('PbybeOne')
                NG137.Position = UDim2.new(0, 5, 0, -3)
                NG137.Size = UDim2.new(1, -5, 0, 2)
                NG137.Parent = NG134
                NG138 = Instance.new('Frame')
                NG138.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG138.BackgroundTransparency = 1
                NG138.BorderSizePixel = 0
                NG138.Name = dCD('NkrfBcgvba')
                NG138.Position = UDim2.new(0, 0, 0, 30)
                NG138.Size = UDim2.new(0, 0, 0, 0)
                NG138.Parent = NG106
                NG139 = Instance.new('Frame')
                NG139.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG139.BackgroundTransparency = 1
                NG139.BorderSizePixel = 0
                NG139.Name = dCD('Ynory')
                NG139.Size = UDim2.new(0, 50, 0, 25)
                NG139.Parent = NG138
                NG140 = Instance.new('TextLabel')
                NG140.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG140.BackgroundTransparency = 1
                NG140.BorderSizePixel = 0
                NG140.Size = UDim2.new(1, 0, 1, 0)
                NG140.Font = Enum.Font.ArialBold
                NG140.FontSize = Enum.FontSize.Size10
                NG140.Text = dCD('Nkrf')
                NG140.TextColor3 = Color3.new(1, 1, 1)
                NG140.TextStrokeTransparency = 0
                NG140.TextWrapped = true
                NG140.Parent = NG139
                NG141 = Instance.new('Frame')
                NG141.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG141.BackgroundTransparency = 1
                NG141.BorderSizePixel = 0
                NG141.Name = dCD('Ynfg')
                NG141.Position = UDim2.new(0, 175, 0, 0)
                NG141.Size = UDim2.new(0, 70, 0, 25)
                NG141.Parent = NG138
                NG142 = Instance.new('TextLabel')
                NG142.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG142.BackgroundTransparency = 1
                NG142.BorderSizePixel = 0
                NG142.Name = dCD('Ynory')
                NG142.Size = UDim2.new(1, 0, 1, 0)
                NG142.ZIndex = 2
                NG142.Font = Enum.Font.ArialBold
                NG142.FontSize = Enum.FontSize.Size10
                NG142.Text = dCD('YNFG')
                NG142.TextColor3 = Color3.new(1, 1, 1)
                NG142.Parent = NG141
                NG143 = Instance.new('ImageLabel')
                NG143.Active = false
                NG143.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG143.BackgroundTransparency = 1
                NG143.BorderSizePixel = 0
                NG143.Name = dCD('Onpxtebhaq')
                NG143.Selectable = false
                NG143.Size = UDim2.new(1, 0, 1, 0)
                NG143.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG143.Parent = NG141
                NG144 = Instance.new('TextButton')
                NG144.Active = true
                NG144.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG144.BackgroundTransparency = 1
                NG144.BorderSizePixel = 0
                NG144.Name = dCD('Ohggba')
                NG144.Position = UDim2.new(0, 5, 0, 0)
                NG144.Selectable = true
                NG144.Size = UDim2.new(1, -10, 1, 0)
                NG144.Style = Enum.ButtonStyle.Custom
                NG144.ZIndex = 2
                NG144.Font = Enum.Font.Legacy
                NG144.FontSize = Enum.FontSize.Size8
                NG144.Text = dCD('')
                NG144.TextTransparency = 1
                NG144.Parent = NG141
                NG145 = Instance.new('Frame')
                NG145.BackgroundTransparency = 1
                NG145.BorderSizePixel = 0
                NG145.Name = dCD('FryrpgrqVaqvpngbe')
                NG145.Position = UDim2.new(0, 6, 0, -2)
                NG145.Size = UDim2.new(1, -5, 0, 2)
                NG145.Parent = NG141
                NG146 = Instance.new('Frame')
                NG146.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG146.BackgroundTransparency = 1
                NG146.BorderSizePixel = 0
                NG146.Name = dCD('Ybpny')
                NG146.Position = UDim2.new(0, 110, 0, 0)
                NG146.Size = UDim2.new(0, 70, 0, 25)
                NG146.Parent = NG138
                NG147 = Instance.new('TextLabel')
                NG147.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG147.BackgroundTransparency = 1
                NG147.BorderSizePixel = 0
                NG147.Name = dCD('Ynory')
                NG147.Size = UDim2.new(1, 0, 1, 0)
                NG147.ZIndex = 2
                NG147.Font = Enum.Font.ArialBold
                NG147.FontSize = Enum.FontSize.Size10
                NG147.Text = dCD('YBPNY')
                NG147.TextColor3 = Color3.new(1, 1, 1)
                NG147.Parent = NG146
                NG148 = Instance.new('ImageLabel')
                NG148.Active = false
                NG148.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG148.BackgroundTransparency = 1
                NG148.BorderSizePixel = 0
                NG148.Name = dCD('Onpxtebhaq')
                NG148.Selectable = false
                NG148.Size = UDim2.new(1, 0, 1, 0)
                NG148.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG148.Parent = NG146
                NG149 = Instance.new('TextButton')
                NG149.Active = true
                NG149.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG149.BackgroundTransparency = 1
                NG149.BorderSizePixel = 0
                NG149.Name = dCD('Ohggba')
                NG149.Position = UDim2.new(0, 5, 0, 0)
                NG149.Selectable = true
                NG149.Size = UDim2.new(1, -10, 1, 0)
                NG149.Style = Enum.ButtonStyle.Custom
                NG149.ZIndex = 2
                NG149.Font = Enum.Font.Legacy
                NG149.FontSize = Enum.FontSize.Size8
                NG149.Text = dCD('')
                NG149.TextTransparency = 1
                NG149.Parent = NG146
                NG150 = Instance.new('Frame')
                NG150.BackgroundTransparency = 1
                NG150.BorderSizePixel = 0
                NG150.Name = dCD('FryrpgrqVaqvpngbe')
                NG150.Position = UDim2.new(0, 6, 0, -2)
                NG150.Size = UDim2.new(1, -5, 0, 2)
                NG150.Parent = NG146
                NG151 = Instance.new('Frame')
                NG151.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG151.BackgroundTransparency = 1
                NG151.BorderSizePixel = 0
                NG151.Name = dCD('Tybony')
                NG151.Position = UDim2.new(0, 45, 0, 0)
                NG151.Size = UDim2.new(0, 70, 0, 25)
                NG151.Parent = NG138
                NG152 = Instance.new('TextLabel')
                NG152.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG152.BackgroundTransparency = 1
                NG152.BorderSizePixel = 0
                NG152.Name = dCD('Ynory')
                NG152.Size = UDim2.new(1, 0, 1, 0)
                NG152.ZIndex = 2
                NG152.Font = Enum.Font.ArialBold
                NG152.FontSize = Enum.FontSize.Size10
                NG152.Text = dCD('TYBONY')
                NG152.TextColor3 = Color3.new(1, 1, 1)
                NG152.Parent = NG151
                NG153 = Instance.new('ImageLabel')
                NG153.Active = false
                NG153.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG153.BackgroundTransparency = 1
                NG153.BorderSizePixel = 0
                NG153.Name = dCD('Onpxtebhaq')
                NG153.Selectable = false
                NG153.Size = UDim2.new(1, 0, 1, 0)
                NG153.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127774197')
                NG153.Parent = NG151
                NG154 = Instance.new('TextButton')
                NG154.Active = true
                NG154.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG154.BackgroundTransparency = 1
                NG154.BorderSizePixel = 0
                NG154.Name = dCD('Ohggba')
                NG154.Position = UDim2.new(0, 5, 0, 0)
                NG154.Selectable = true
                NG154.Size = UDim2.new(1, -10, 1, 0)
                NG154.Style = Enum.ButtonStyle.Custom
                NG154.ZIndex = 2
                NG154.Font = Enum.Font.Legacy
                NG154.FontSize = Enum.FontSize.Size8
                NG154.Text = dCD('')
                NG154.TextTransparency = 1
                NG154.Parent = NG151
                NG155 = Instance.new('Frame')
                NG155.BorderSizePixel = 0
                NG155.Name = dCD('FryrpgrqVaqvpngbe')
                NG155.Position = UDim2.new(0, 6, 0, -2)
                NG155.Size = UDim2.new(1, -5, 0, 2)
                NG155.Parent = NG151
                NG156 = Instance.new('Frame')
                NG156.Active = true
                NG156.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG156.BackgroundTransparency = 1
                NG156.BorderSizePixel = 0
                NG156.Name = dCD('OGErfvmrGbbyTHV')
                NG156.Position = UDim2.new(0, 0, 0, 280)
                NG156.Size = UDim2.new(0, 245, 0, 90)
                NG156.Draggable = true
                NG156.Parent = NG1
                NG157 = Instance.new('Frame')
                NG157.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG157.BackgroundTransparency = 1
                NG157.BorderSizePixel = 0
                NG157.Name = dCD('QverpgvbafBcgvba')
                NG157.Position = UDim2.new(0, 0, 0, 30)
                NG157.Size = UDim2.new(0, 0, 0, 0)
                NG157.Parent = NG156
                NG158 = Instance.new('Frame')
                NG158.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG158.BackgroundTransparency = 1
                NG158.BorderSizePixel = 0
                NG158.Name = dCD('Abezny')
                NG158.Position = UDim2.new(0, 70, 0, 0)
                NG158.Size = UDim2.new(0, 70, 0, 25)
                NG158.Parent = NG157
                NG159 = Instance.new('Frame')
                NG159.BorderSizePixel = 0
                NG159.Name = dCD('FryrpgrqVaqvpngbe')
                NG159.Position = UDim2.new(0, 6, 0, -2)
                NG159.Size = UDim2.new(1, -5, 0, 2)
                NG159.Parent = NG158
                NG160 = Instance.new('TextButton')
                NG160.Active = true
                NG160.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG160.BackgroundTransparency = 1
                NG160.BorderSizePixel = 0
                NG160.Name = dCD('Ohggba')
                NG160.Position = UDim2.new(0, 5, 0, 0)
                NG160.Selectable = true
                NG160.Size = UDim2.new(1, -10, 1, 0)
                NG160.Style = Enum.ButtonStyle.Custom
                NG160.ZIndex = 2
                NG160.Font = Enum.Font.Legacy
                NG160.FontSize = Enum.FontSize.Size8
                NG160.Text = dCD('')
                NG160.TextTransparency = 1
                NG160.Parent = NG158
                NG161 = Instance.new('ImageLabel')
                NG161.Active = false
                NG161.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG161.BackgroundTransparency = 1
                NG161.BorderSizePixel = 0
                NG161.Name = dCD('Onpxtebhaq')
                NG161.Selectable = false
                NG161.Size = UDim2.new(1, 0, 1, 0)
                NG161.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127774197')
                NG161.Parent = NG158
                NG162 = Instance.new('TextLabel')
                NG162.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG162.BackgroundTransparency = 1
                NG162.BorderSizePixel = 0
                NG162.Name = dCD('Ynory')
                NG162.Size = UDim2.new(1, 0, 1, 0)
                NG162.Font = Enum.Font.ArialBold
                NG162.FontSize = Enum.FontSize.Size10
                NG162.Text = dCD('ABEZNY')
                NG162.TextColor3 = Color3.new(1, 1, 1)
                NG162.Parent = NG158
                NG163 = Instance.new('Frame')
                NG163.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG163.BackgroundTransparency = 1
                NG163.BorderSizePixel = 0
                NG163.Name = dCD('Obgu')
                NG163.Position = UDim2.new(0, 135, 0, 0)
                NG163.Size = UDim2.new(0, 70, 0, 25)
                NG163.Parent = NG157
                NG164 = Instance.new('Frame')
                NG164.BackgroundTransparency = 1
                NG164.BorderSizePixel = 0
                NG164.Name = dCD('FryrpgrqVaqvpngbe')
                NG164.Position = UDim2.new(0, 6, 0, -2)
                NG164.Size = UDim2.new(1, -5, 0, 2)
                NG164.Parent = NG163
                NG165 = Instance.new('TextButton')
                NG165.Active = true
                NG165.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG165.BackgroundTransparency = 1
                NG165.BorderSizePixel = 0
                NG165.Name = dCD('Ohggba')
                NG165.Position = UDim2.new(0, 5, 0, 0)
                NG165.Selectable = true
                NG165.Size = UDim2.new(1, -10, 1, 0)
                NG165.Style = Enum.ButtonStyle.Custom
                NG165.ZIndex = 2
                NG165.Font = Enum.Font.Legacy
                NG165.FontSize = Enum.FontSize.Size8
                NG165.Text = dCD('')
                NG165.TextTransparency = 1
                NG165.Parent = NG163
                NG166 = Instance.new('ImageLabel')
                NG166.Active = false
                NG166.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG166.BackgroundTransparency = 1
                NG166.BorderSizePixel = 0
                NG166.Name = dCD('Onpxtebhaq')
                NG166.Selectable = false
                NG166.Size = UDim2.new(1, 0, 1, 0)
                NG166.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG166.Parent = NG163
                NG167 = Instance.new('TextLabel')
                NG167.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG167.BackgroundTransparency = 1
                NG167.BorderSizePixel = 0
                NG167.Name = dCD('Ynory')
                NG167.Size = UDim2.new(1, 0, 1, 0)
                NG167.Font = Enum.Font.ArialBold
                NG167.FontSize = Enum.FontSize.Size10
                NG167.Text = dCD('OBGU')
                NG167.TextColor3 = Color3.new(1, 1, 1)
                NG167.Parent = NG163
                NG168 = Instance.new('Frame')
                NG168.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG168.BackgroundTransparency = 1
                NG168.BorderSizePixel = 0
                NG168.Name = dCD('Ynory')
                NG168.Size = UDim2.new(0, 75, 0, 25)
                NG168.Parent = NG157
                NG169 = Instance.new('TextLabel')
                NG169.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG169.BackgroundTransparency = 1
                NG169.BorderSizePixel = 0
                NG169.Size = UDim2.new(1, 0, 1, 0)
                NG169.Font = Enum.Font.ArialBold
                NG169.FontSize = Enum.FontSize.Size10
                NG169.Text = dCD('Qverpgvbaf')
                NG169.TextColor3 = Color3.new(1, 1, 1)
                NG169.TextStrokeTransparency = 0
                NG169.TextWrapped = true
                NG169.Parent = NG168
                NG170 = Instance.new('Frame')
                NG170.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG170.BackgroundTransparency = 1
                NG170.BorderSizePixel = 0
                NG170.Name = dCD('Gvgyr')
                NG170.Size = UDim2.new(1, 0, 0, 20)
                NG170.Parent = NG156
                NG171 = Instance.new('Frame')
                NG171.BackgroundColor3 = Color3.new(0.0156863, 0.686275, 0.92549)
                NG171.BorderSizePixel = 0
                NG171.Name = dCD('PbybeOne')
                NG171.Position = UDim2.new(0, 5, 0, -3)
                NG171.Size = UDim2.new(1, -5, 0, 2)
                NG171.Parent = NG170
                NG172 = Instance.new('TextLabel')
                NG172.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG172.BackgroundTransparency = 1
                NG172.BorderSizePixel = 0
                NG172.Name = dCD('Ynory')
                NG172.Position = UDim2.new(0, 10, 0, 1)
                NG172.Size = UDim2.new(1, -10, 1, 0)
                NG172.Font = Enum.Font.ArialBold
                NG172.FontSize = Enum.FontSize.Size10
                NG172.Text = dCD('ERFVMR GBBY')
                NG172.TextColor3 = Color3.new(1, 1, 1)
                NG172.TextStrokeTransparency = 0
                NG172.TextWrapped = true
                NG172.TextXAlignment = Enum.TextXAlignment.Left
                NG172.Parent = NG170
                NG173 = Instance.new('TextLabel')
                NG173.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG173.BackgroundTransparency = 1
                NG173.BorderSizePixel = 0
                NG173.Name = dCD('S3KFvtangher')
                NG173.Position = UDim2.new(0, 10, 0, 1)
                NG173.Size = UDim2.new(1, -10, 1, 0)
                NG173.Font = Enum.Font.ArialBold
                NG173.FontSize = Enum.FontSize.Size14
                NG173.Text = dCD('S3K')
                NG173.TextColor3 = Color3.new(1, 1, 1)
                NG173.TextStrokeTransparency = 0.89999997615814
                NG173.TextWrapped = true
                NG173.TextXAlignment = Enum.TextXAlignment.Right
                NG173.Parent = NG170
                NG174 = Instance.new('Frame')
                NG174.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG174.BackgroundTransparency = 1
                NG174.BorderSizePixel = 0
                NG174.Name = dCD('VaperzragBcgvba')
                NG174.Position = UDim2.new(0, 0, 0, 65)
                NG174.Size = UDim2.new(0, 0, 0, 0)
                NG174.Parent = NG156
                NG175 = Instance.new('Frame')
                NG175.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG175.BackgroundTransparency = 1
                NG175.BorderSizePixel = 0
                NG175.Name = dCD('Vaperzrag')
                NG175.Position = UDim2.new(0, 70, 0, 0)
                NG175.Size = UDim2.new(0, 50, 0, 25)
                NG175.Parent = NG174
                NG176 = Instance.new('Frame')
                NG176.BorderSizePixel = 0
                NG176.Name = dCD('FryrpgrqVaqvpngbe')
                NG176.Position = UDim2.new(0, 5, 0, -2)
                NG176.Size = UDim2.new(1, -4, 0, 2)
                NG176.Parent = NG175
                NG177 = Instance.new('TextBox')
                NG177.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG177.BackgroundTransparency = 1
                NG177.BorderSizePixel = 0
                NG177.Position = UDim2.new(0, 5, 0, 0)
                NG177.Size = UDim2.new(1, -10, 1, 0)
                NG177.ZIndex = 2
                NG177.Font = Enum.Font.ArialBold
                NG177.FontSize = Enum.FontSize.Size10
                NG177.Text = dCD('1')
                NG177.TextColor3 = Color3.new(1, 1, 1)
                NG177.Parent = NG175
                NG178 = Instance.new('ImageLabel')
                NG178.Active = false
                NG178.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG178.BackgroundTransparency = 1
                NG178.BorderSizePixel = 0
                NG178.Name = dCD('Onpxtebhaq')
                NG178.Selectable = false
                NG178.Size = UDim2.new(1, 0, 1, 0)
                NG178.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG178.Parent = NG175
                NG179 = Instance.new('Frame')
                NG179.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG179.BackgroundTransparency = 1
                NG179.BorderSizePixel = 0
                NG179.Name = dCD('Ynory')
                NG179.Size = UDim2.new(0, 75, 0, 25)
                NG179.Parent = NG174
                NG180 = Instance.new('TextLabel')
                NG180.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG180.BackgroundTransparency = 1
                NG180.BorderSizePixel = 0
                NG180.Size = UDim2.new(1, 0, 1, 0)
                NG180.Font = Enum.Font.ArialBold
                NG180.FontSize = Enum.FontSize.Size10
                NG180.Text = dCD('Vaperzrag')
                NG180.TextColor3 = Color3.new(1, 1, 1)
                NG180.TextStrokeTransparency = 0
                NG180.TextWrapped = true
                NG180.Parent = NG179
                NG181 = Instance.new('Frame')
                NG181.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG181.BackgroundTransparency = 1
                NG181.BorderSizePixel = 0
                NG181.Name = dCD('Vasb')
                NG181.Position = UDim2.new(0, 5, 0, 100)
                NG181.Size = UDim2.new(1, -5, 0, 60)
                NG181.Visible = false
                NG181.Parent = NG156
                NG182 = Instance.new('Frame')
                NG182.BackgroundColor3 = Color3.new(0.0156863, 0.686275, 0.92549)
                NG182.BorderSizePixel = 0
                NG182.Name = dCD('PbybeOne')
                NG182.Size = UDim2.new(1, 0, 0, 2)
                NG182.Parent = NG181
                NG183 = Instance.new('TextLabel')
                NG183.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG183.BackgroundTransparency = 1
                NG183.BorderSizePixel = 0
                NG183.Name = dCD('Ynory')
                NG183.Position = UDim2.new(0, 10, 0, 2)
                NG183.Size = UDim2.new(1, -10, 0, 20)
                NG183.Font = Enum.Font.ArialBold
                NG183.FontSize = Enum.FontSize.Size10
                NG183.Text = dCD('FRYRPGVBA VASB')
                NG183.TextColor3 = Color3.new(1, 1, 1)
                NG183.TextStrokeTransparency = 0
                NG183.TextWrapped = true
                NG183.TextXAlignment = Enum.TextXAlignment.Left
                NG183.Parent = NG181
                NG184 = Instance.new('Frame')
                NG184.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG184.BackgroundTransparency = 1
                NG184.BorderSizePixel = 0
                NG184.Name = dCD('FvmrVasb')
                NG184.Position = UDim2.new(0, 0, 0, 30)
                NG184.Size = UDim2.new(0, 0, 0, 0)
                NG184.Parent = NG181
                NG185 = Instance.new('TextLabel')
                NG185.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG185.BackgroundTransparency = 1
                NG185.BorderSizePixel = 0
                NG185.Size = UDim2.new(0, 75, 0, 25)
                NG185.Font = Enum.Font.ArialBold
                NG185.FontSize = Enum.FontSize.Size10
                NG185.Text = dCD('Fvmr')
                NG185.TextColor3 = Color3.new(1, 1, 1)
                NG185.TextStrokeTransparency = 0
                NG185.TextWrapped = true
                NG185.Parent = NG184
                NG186 = Instance.new('Frame')
                NG186.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG186.BackgroundTransparency = 1
                NG186.BorderSizePixel = 0
                NG186.Name = dCD('K')
                NG186.Position = UDim2.new(0, 70, 0, 0)
                NG186.Size = UDim2.new(0, 50, 0, 25)
                NG186.Parent = NG184
                NG187 = Instance.new('TextBox')
                NG187.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG187.BackgroundTransparency = 1
                NG187.BorderSizePixel = 0
                NG187.Position = UDim2.new(0, 5, 0, 0)
                NG187.Size = UDim2.new(1, -10, 1, 0)
                NG187.ZIndex = 2
                NG187.Font = Enum.Font.ArialBold
                NG187.FontSize = Enum.FontSize.Size10
                NG187.Text = dCD('')
                NG187.TextColor3 = Color3.new(1, 1, 1)
                NG187.Parent = NG186
                NG188 = Instance.new('TextButton')
                NG188.Active = true
                NG188.AutoButtonColor = false
                NG188.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG188.BackgroundTransparency = 1
                NG188.BorderSizePixel = 0
                NG188.Selectable = true
                NG188.Size = UDim2.new(1, 0, 1, 0)
                NG188.Style = Enum.ButtonStyle.Custom
                NG188.ZIndex = 3
                NG188.Font = Enum.Font.Legacy
                NG188.FontSize = Enum.FontSize.Size8
                NG188.Text = dCD('')
                NG188.Parent = NG186
                NG189 = Instance.new('ImageLabel')
                NG189.Active = false
                NG189.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG189.BackgroundTransparency = 1
                NG189.BorderSizePixel = 0
                NG189.Name = dCD('Onpxtebhaq')
                NG189.Selectable = false
                NG189.Size = UDim2.new(1, 0, 1, 0)
                NG189.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG189.Parent = NG186
                NG190 = Instance.new('Frame')
                NG190.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG190.BackgroundTransparency = 1
                NG190.BorderSizePixel = 0
                NG190.Name = dCD('L')
                NG190.Position = UDim2.new(0, 117, 0, 0)
                NG190.Size = UDim2.new(0, 50, 0, 25)
                NG190.Parent = NG184
                NG191 = Instance.new('TextBox')
                NG191.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG191.BackgroundTransparency = 1
                NG191.BorderSizePixel = 0
                NG191.Position = UDim2.new(0, 5, 0, 0)
                NG191.Size = UDim2.new(1, -10, 1, 0)
                NG191.ZIndex = 2
                NG191.Font = Enum.Font.ArialBold
                NG191.FontSize = Enum.FontSize.Size10
                NG191.Text = dCD('')
                NG191.TextColor3 = Color3.new(1, 1, 1)
                NG191.Parent = NG190
                NG192 = Instance.new('TextButton')
                NG192.Active = true
                NG192.AutoButtonColor = false
                NG192.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG192.BackgroundTransparency = 1
                NG192.BorderSizePixel = 0
                NG192.Selectable = true
                NG192.Size = UDim2.new(1, 0, 1, 0)
                NG192.Style = Enum.ButtonStyle.Custom
                NG192.ZIndex = 3
                NG192.Font = Enum.Font.Legacy
                NG192.FontSize = Enum.FontSize.Size8
                NG192.Text = dCD('')
                NG192.Parent = NG190
                NG193 = Instance.new('ImageLabel')
                NG193.Active = false
                NG193.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG193.BackgroundTransparency = 1
                NG193.BorderSizePixel = 0
                NG193.Name = dCD('Onpxtebhaq')
                NG193.Selectable = false
                NG193.Size = UDim2.new(1, 0, 1, 0)
                NG193.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG193.Parent = NG190
                NG194 = Instance.new('Frame')
                NG194.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG194.BackgroundTransparency = 1
                NG194.BorderSizePixel = 0
                NG194.Name = dCD('M')
                NG194.Position = UDim2.new(0, 164, 0, 0)
                NG194.Size = UDim2.new(0, 50, 0, 25)
                NG194.Parent = NG184
                NG195 = Instance.new('TextBox')
                NG195.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG195.BackgroundTransparency = 1
                NG195.BorderSizePixel = 0
                NG195.Position = UDim2.new(0, 5, 0, 0)
                NG195.Size = UDim2.new(1, -10, 1, 0)
                NG195.ZIndex = 2
                NG195.Font = Enum.Font.ArialBold
                NG195.FontSize = Enum.FontSize.Size10
                NG195.Text = dCD('')
                NG195.TextColor3 = Color3.new(1, 1, 1)
                NG195.Parent = NG194
                NG196 = Instance.new('TextButton')
                NG196.Active = true
                NG196.AutoButtonColor = false
                NG196.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG196.BackgroundTransparency = 1
                NG196.BorderSizePixel = 0
                NG196.Selectable = true
                NG196.Size = UDim2.new(1, 0, 1, 0)
                NG196.Style = Enum.ButtonStyle.Custom
                NG196.ZIndex = 3
                NG196.Font = Enum.Font.Legacy
                NG196.FontSize = Enum.FontSize.Size8
                NG196.Text = dCD('')
                NG196.Parent = NG194
                NG197 = Instance.new('ImageLabel')
                NG197.Active = false
                NG197.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG197.BackgroundTransparency = 1
                NG197.BorderSizePixel = 0
                NG197.Name = dCD('Onpxtebhaq')
                NG197.Selectable = false
                NG197.Size = UDim2.new(1, 0, 1, 0)
                NG197.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG197.Parent = NG194
                NG198 = Instance.new('Frame')
                NG198.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG198.BackgroundTransparency = 1
                NG198.BorderSizePixel = 0
                NG198.Name = dCD('Punatrf')
                NG198.Position = UDim2.new(0, 5, 0, 100)
                NG198.Size = UDim2.new(1, -5, 0, 20)
                NG198.Parent = NG156
                NG199 = Instance.new('Frame')
                NG199.BackgroundColor3 = Color3.new(0.0156863, 0.686275, 0.92549)
                NG199.BorderSizePixel = 0
                NG199.Name = dCD('PbybeOne')
                NG199.Size = UDim2.new(1, 0, 0, 2)
                NG199.Parent = NG198
                NG200 = Instance.new('TextLabel')
                NG200.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG200.BackgroundTransparency = 1
                NG200.BorderSizePixel = 0
                NG200.Name = dCD('Grkg')
                NG200.Position = UDim2.new(0, 10, 0, 2)
                NG200.Size = UDim2.new(1, -10, 0, 20)
                NG200.Font = Enum.Font.ArialBold
                NG200.FontSize = Enum.FontSize.Size10
                NG200.Text = dCD('erfvmrq 0 fghqf')
                NG200.TextColor3 = Color3.new(1, 1, 1)
                NG200.TextStrokeTransparency = 0.5
                NG200.TextWrapped = true
                NG200.TextXAlignment = Enum.TextXAlignment.Right
                NG200.Parent = NG198
                NG201 = Instance.new('Frame')
                NG201.Active = true
                NG201.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG201.BackgroundTransparency = 1
                NG201.BorderSizePixel = 0
                NG201.Name = dCD('OGFhesnprGbbyTHV')
                NG201.Position = UDim2.new(0, 0, 0, 172)
                NG201.Size = UDim2.new(0, 245, 0, 90)
                NG201.Draggable = true
                NG201.Parent = NG1
                NG202 = Instance.new('Frame')
                NG202.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG202.BackgroundTransparency = 1
                NG202.BorderSizePixel = 0
                NG202.Name = dCD('Gvgyr')
                NG202.Size = UDim2.new(1, 0, 0, 20)
                NG202.Parent = NG201
                NG203 = Instance.new('Frame')
                NG203.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG203.BorderSizePixel = 0
                NG203.Name = dCD('PbybeOne')
                NG203.Position = UDim2.new(0, 5, 0, -3)
                NG203.Size = UDim2.new(1, -5, 0, 2)
                NG203.Parent = NG202
                NG204 = Instance.new('TextLabel')
                NG204.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG204.BackgroundTransparency = 1
                NG204.BorderSizePixel = 0
                NG204.Name = dCD('Ynory')
                NG204.Position = UDim2.new(0, 10, 0, 1)
                NG204.Size = UDim2.new(1, -10, 1, 0)
                NG204.Font = Enum.Font.ArialBold
                NG204.FontSize = Enum.FontSize.Size10
                NG204.Text = dCD('FHESNPR GBBY')
                NG204.TextColor3 = Color3.new(1, 1, 1)
                NG204.TextStrokeTransparency = 0
                NG204.TextWrapped = true
                NG204.TextXAlignment = Enum.TextXAlignment.Left
                NG204.Parent = NG202
                NG205 = Instance.new('TextLabel')
                NG205.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG205.BackgroundTransparency = 1
                NG205.BorderSizePixel = 0
                NG205.Name = dCD('S3KFvtangher')
                NG205.Position = UDim2.new(0, 10, 0, 1)
                NG205.Size = UDim2.new(1, -10, 1, 0)
                NG205.Font = Enum.Font.ArialBold
                NG205.FontSize = Enum.FontSize.Size14
                NG205.Text = dCD('S3K')
                NG205.TextColor3 = Color3.new(1, 1, 1)
                NG205.TextStrokeTransparency = 0.89999997615814
                NG205.TextWrapped = true
                NG205.TextXAlignment = Enum.TextXAlignment.Right
                NG205.Parent = NG202
                NG206 = Instance.new('Frame')
                NG206.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG206.BackgroundTransparency = 1
                NG206.BorderSizePixel = 0
                NG206.Name = dCD('FvqrBcgvba')
                NG206.Position = UDim2.new(0, 14, 0, 30)
                NG206.Size = UDim2.new(0, 120, 0, 25)
                NG206.Parent = NG201
                NG207 = Instance.new('TextLabel')
                NG207.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG207.BackgroundTransparency = 1
                NG207.BorderSizePixel = 0
                NG207.Name = dCD('Ynory')
                NG207.Size = UDim2.new(0, 40, 0, 25)
                NG207.Font = Enum.Font.ArialBold
                NG207.FontSize = Enum.FontSize.Size10
                NG207.Text = dCD('Fvqr')
                NG207.TextColor3 = Color3.new(1, 1, 1)
                NG207.TextStrokeTransparency = 0
                NG207.TextWrapped = true
                NG207.TextXAlignment = Enum.TextXAlignment.Left
                NG207.Parent = NG206
                NG208 = Instance.new('Frame')
                NG208.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG208.BackgroundTransparency = 1
                NG208.BorderSizePixel = 0
                NG208.Name = dCD('GlcrBcgvba')
                NG208.Position = UDim2.new(0, 124, 0, 30)
                NG208.Size = UDim2.new(0, 120, 0, 25)
                NG208.Parent = NG201
                NG209 = Instance.new('TextLabel')
                NG209.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG209.BackgroundTransparency = 1
                NG209.BorderSizePixel = 0
                NG209.Name = dCD('Ynory')
                NG209.Size = UDim2.new(0, 40, 0, 25)
                NG209.Font = Enum.Font.ArialBold
                NG209.FontSize = Enum.FontSize.Size10
                NG209.Text = dCD('Glcr')
                NG209.TextColor3 = Color3.new(1, 1, 1)
                NG209.TextStrokeTransparency = 0
                NG209.TextWrapped = true
                NG209.TextXAlignment = Enum.TextXAlignment.Left
                NG209.Parent = NG208
                NG210 = Instance.new('Frame')
                NG210.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG210.BackgroundTransparency = 1
                NG210.BorderSizePixel = 0
                NG210.Name = dCD('Gvc')
                NG210.Position = UDim2.new(0, 5, 0, 70)
                NG210.Size = UDim2.new(1, -5, 0, 20)
                NG210.Parent = NG201
                NG211 = Instance.new('Frame')
                NG211.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG211.BorderSizePixel = 0
                NG211.Name = dCD('PbybeOne')
                NG211.Size = UDim2.new(1, 0, 0, 2)
                NG211.Parent = NG210
                NG212 = Instance.new('TextLabel')
                NG212.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG212.BackgroundTransparency = 1
                NG212.BorderSizePixel = 0
                NG212.Name = dCD('Grkg')
                NG212.Position = UDim2.new(0, 6, 0, 2)
                NG212.Size = UDim2.new(1, -6, 0, 20)
                NG212.Font = Enum.Font.ArialBold
                NG212.FontSize = Enum.FontSize.Size10
                NG212.Text = dCD('GVC: Fryrpg n cneg naq evtug pyvpx ba n fhesnpr')
                NG212.TextColor3 = Color3.new(1, 1, 1)
                NG212.TextStrokeTransparency = 0.5
                NG212.TextWrapped = true
                NG212.TextXAlignment = Enum.TextXAlignment.Left
                NG212.Parent = NG210
                NG213 = Instance.new('Frame')
                NG213.Active = true
                NG213.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG213.BackgroundTransparency = 1
                NG213.BorderSizePixel = 0
                NG213.Name = dCD('OGGrkgherGbbyTHV')
                NG213.Position = UDim2.new(0, 0, 0, 172)
                NG213.Size = UDim2.new(0, 200, 0, 205)
                NG213.Draggable = true
                NG213.Parent = NG1
                NG214 = Instance.new('Frame')
                NG214.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG214.BackgroundTransparency = 1
                NG214.BorderSizePixel = 0
                NG214.Name = dCD('Gvgyr')
                NG214.Size = UDim2.new(1, 0, 0, 20)
                NG214.Parent = NG213
                NG215 = Instance.new('Frame')
                NG215.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG215.BorderSizePixel = 0
                NG215.Name = dCD('PbybeOne')
                NG215.Position = UDim2.new(0, 5, 0, -3)
                NG215.Size = UDim2.new(1, -5, 0, 2)
                NG215.Parent = NG214
                NG216 = Instance.new('TextLabel')
                NG216.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG216.BackgroundTransparency = 1
                NG216.BorderSizePixel = 0
                NG216.Name = dCD('Ynory')
                NG216.Position = UDim2.new(0, 10, 0, 1)
                NG216.Size = UDim2.new(1, -10, 1, 0)
                NG216.Font = Enum.Font.ArialBold
                NG216.FontSize = Enum.FontSize.Size10
                NG216.Text = dCD('GRKGHER GBBY')
                NG216.TextColor3 = Color3.new(1, 1, 1)
                NG216.TextStrokeTransparency = 0
                NG216.TextWrapped = true
                NG216.TextXAlignment = Enum.TextXAlignment.Left
                NG216.Parent = NG214
                NG217 = Instance.new('TextLabel')
                NG217.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG217.BackgroundTransparency = 1
                NG217.BorderSizePixel = 0
                NG217.Name = dCD('S3KFvtangher')
                NG217.Position = UDim2.new(0, 10, 0, 1)
                NG217.Size = UDim2.new(1, -10, 1, 0)
                NG217.Font = Enum.Font.ArialBold
                NG217.FontSize = Enum.FontSize.Size14
                NG217.Text = dCD('S3K')
                NG217.TextColor3 = Color3.new(1, 1, 1)
                NG217.TextStrokeTransparency = 0.89999997615814
                NG217.TextWrapped = true
                NG217.TextXAlignment = Enum.TextXAlignment.Right
                NG217.Parent = NG214
                NG218 = Instance.new('Frame')
                NG218.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG218.BackgroundTransparency = 1
                NG218.BorderSizePixel = 0
                NG218.Name = dCD('FvqrBcgvba')
                NG218.Position = UDim2.new(0, 14, 0, 65)
                NG218.Size = UDim2.new(1, -14, 0, 25)
                NG218.Parent = NG213
                NG219 = Instance.new('TextLabel')
                NG219.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG219.BackgroundTransparency = 1
                NG219.BorderSizePixel = 0
                NG219.Name = dCD('Ynory')
                NG219.Size = UDim2.new(0, 30, 0, 25)
                NG219.Font = Enum.Font.ArialBold
                NG219.FontSize = Enum.FontSize.Size10
                NG219.Text = dCD('Fvqr')
                NG219.TextColor3 = Color3.new(1, 1, 1)
                NG219.TextStrokeTransparency = 0
                NG219.TextWrapped = true
                NG219.TextXAlignment = Enum.TextXAlignment.Left
                NG219.Parent = NG218
                NG220 = Instance.new('Frame')
                NG220.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG220.BackgroundTransparency = 1
                NG220.BorderSizePixel = 0
                NG220.Name = dCD('ErcrngBcgvba')
                NG220.Position = UDim2.new(0, 0, 0, 205)
                NG220.Size = UDim2.new(0, 0, 0, 0)
                NG220.Visible = false
                NG220.Parent = NG213
                NG221 = Instance.new('TextLabel')
                NG221.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG221.BackgroundTransparency = 1
                NG221.BorderSizePixel = 0
                NG221.Name = dCD('Ynory')
                NG221.Position = UDim2.new(0, 14, 0, 0)
                NG221.Size = UDim2.new(0, 70, 0, 25)
                NG221.Font = Enum.Font.ArialBold
                NG221.FontSize = Enum.FontSize.Size10
                NG221.Text = dCD('Ercrng')
                NG221.TextColor3 = Color3.new(1, 1, 1)
                NG221.TextStrokeTransparency = 0
                NG221.TextWrapped = true
                NG221.TextXAlignment = Enum.TextXAlignment.Left
                NG221.Parent = NG220
                NG222 = Instance.new('Frame')
                NG222.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG222.BackgroundTransparency = 1
                NG222.BorderSizePixel = 0
                NG222.Name = dCD('KVachg')
                NG222.Position = UDim2.new(0, 60, 0, 0)
                NG222.Size = UDim2.new(0, 45, 0, 25)
                NG222.Parent = NG220
                NG223 = Instance.new('TextButton')
                NG223.Active = true
                NG223.AutoButtonColor = false
                NG223.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG223.BackgroundTransparency = 1
                NG223.BorderSizePixel = 0
                NG223.Selectable = true
                NG223.Size = UDim2.new(1, 0, 1, 0)
                NG223.Style = Enum.ButtonStyle.Custom
                NG223.ZIndex = 2
                NG223.Font = Enum.Font.Legacy
                NG223.FontSize = Enum.FontSize.Size8
                NG223.Text = dCD('')
                NG223.Parent = NG222
                NG224 = Instance.new('ImageLabel')
                NG224.Active = false
                NG224.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG224.BackgroundTransparency = 1
                NG224.BorderSizePixel = 0
                NG224.Name = dCD('Onpxtebhaq')
                NG224.Selectable = false
                NG224.Size = UDim2.new(1, 0, 1, 0)
                NG224.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG224.Parent = NG222
                NG225 = Instance.new('Frame')
                NG225.BorderSizePixel = 0
                NG225.Name = dCD('FryrpgrqVaqvpngbe')
                NG225.Position = UDim2.new(0, 5, 0, -2)
                NG225.Size = UDim2.new(1, -4, 0, 2)
                NG225.Parent = NG222
                NG226 = Instance.new('TextBox')
                NG226.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG226.BackgroundTransparency = 1
                NG226.BorderSizePixel = 0
                NG226.Position = UDim2.new(0, 5, 0, 0)
                NG226.Size = UDim2.new(1, -10, 1, 0)
                NG226.Font = Enum.Font.ArialBold
                NG226.FontSize = Enum.FontSize.Size10
                NG226.Text = dCD('2')
                NG226.TextColor3 = Color3.new(1, 1, 1)
                NG226.Parent = NG222
                NG227 = Instance.new('Frame')
                NG227.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG227.BackgroundTransparency = 1
                NG227.BorderSizePixel = 0
                NG227.Name = dCD('LVachg')
                NG227.Position = UDim2.new(0, 105, 0, 0)
                NG227.Size = UDim2.new(0, 45, 0, 25)
                NG227.Parent = NG220
                NG228 = Instance.new('TextButton')
                NG228.Active = true
                NG228.AutoButtonColor = false
                NG228.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG228.BackgroundTransparency = 1
                NG228.BorderSizePixel = 0
                NG228.Selectable = true
                NG228.Size = UDim2.new(1, 0, 1, 0)
                NG228.Style = Enum.ButtonStyle.Custom
                NG228.ZIndex = 2
                NG228.Font = Enum.Font.Legacy
                NG228.FontSize = Enum.FontSize.Size8
                NG228.Text = dCD('')
                NG228.Parent = NG227
                NG229 = Instance.new('ImageLabel')
                NG229.Active = false
                NG229.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG229.BackgroundTransparency = 1
                NG229.BorderSizePixel = 0
                NG229.Name = dCD('Onpxtebhaq')
                NG229.Selectable = false
                NG229.Size = UDim2.new(1, 0, 1, 0)
                NG229.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG229.Parent = NG227
                NG230 = Instance.new('Frame')
                NG230.BorderSizePixel = 0
                NG230.Name = dCD('FryrpgrqVaqvpngbe')
                NG230.Position = UDim2.new(0, 5, 0, -2)
                NG230.Size = UDim2.new(1, -4, 0, 2)
                NG230.Parent = NG227
                NG231 = Instance.new('TextBox')
                NG231.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG231.BackgroundTransparency = 1
                NG231.BorderSizePixel = 0
                NG231.Position = UDim2.new(0, 5, 0, 0)
                NG231.Size = UDim2.new(1, -10, 1, 0)
                NG231.Font = Enum.Font.ArialBold
                NG231.FontSize = Enum.FontSize.Size10
                NG231.Text = dCD('2')
                NG231.TextColor3 = Color3.new(1, 1, 1)
                NG231.Parent = NG227
                NG232 = Instance.new('Frame')
                NG232.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG232.BorderSizePixel = 0
                NG232.Name = dCD('ObggbzPbybeOne')
                NG232.Position = UDim2.new(0, 5, 1, -2)
                NG232.Size = UDim2.new(1, 0, 0, 2)
                NG232.Parent = NG213
                NG233 = Instance.new('Frame')
                NG233.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG233.BackgroundTransparency = 1
                NG233.BorderSizePixel = 0
                NG233.Name = dCD('GenafcneraplBcgvba')
                NG233.Position = UDim2.new(0, 14, 0, 135)
                NG233.Size = UDim2.new(1, 0, 0, 25)
                NG233.Parent = NG213
                NG234 = Instance.new('TextLabel')
                NG234.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG234.BackgroundTransparency = 1
                NG234.BorderSizePixel = 0
                NG234.Name = dCD('Ynory')
                NG234.Size = UDim2.new(0, 70, 0, 25)
                NG234.Font = Enum.Font.ArialBold
                NG234.FontSize = Enum.FontSize.Size10
                NG234.Text = dCD('Genafcnerapl')
                NG234.TextColor3 = Color3.new(1, 1, 1)
                NG234.TextStrokeTransparency = 0
                NG234.TextWrapped = true
                NG234.TextXAlignment = Enum.TextXAlignment.Left
                NG234.Parent = NG233
                NG235 = Instance.new('Frame')
                NG235.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG235.BackgroundTransparency = 1
                NG235.BorderSizePixel = 0
                NG235.Name = dCD('GenafcneraplVachg')
                NG235.Position = UDim2.new(0, 75, 0, 0)
                NG235.Size = UDim2.new(0, 45, 0, 25)
                NG235.Parent = NG233
                NG236 = Instance.new('TextButton')
                NG236.Active = true
                NG236.AutoButtonColor = false
                NG236.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG236.BackgroundTransparency = 1
                NG236.BorderSizePixel = 0
                NG236.Selectable = true
                NG236.Size = UDim2.new(1, 0, 1, 0)
                NG236.Style = Enum.ButtonStyle.Custom
                NG236.ZIndex = 2
                NG236.Font = Enum.Font.Legacy
                NG236.FontSize = Enum.FontSize.Size8
                NG236.Text = dCD('')
                NG236.Parent = NG235
                NG237 = Instance.new('ImageLabel')
                NG237.Active = false
                NG237.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG237.BackgroundTransparency = 1
                NG237.BorderSizePixel = 0
                NG237.Name = dCD('Onpxtebhaq')
                NG237.Selectable = false
                NG237.Size = UDim2.new(1, 0, 1, 0)
                NG237.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG237.Parent = NG235
                NG238 = Instance.new('Frame')
                NG238.BorderSizePixel = 0
                NG238.Name = dCD('FryrpgrqVaqvpngbe')
                NG238.Position = UDim2.new(0, 5, 0, -2)
                NG238.Size = UDim2.new(1, -4, 0, 2)
                NG238.Parent = NG235
                NG239 = Instance.new('TextBox')
                NG239.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG239.BackgroundTransparency = 1
                NG239.BorderSizePixel = 0
                NG239.Position = UDim2.new(0, 5, 0, 0)
                NG239.Size = UDim2.new(1, -10, 1, 0)
                NG239.Font = Enum.Font.ArialBold
                NG239.FontSize = Enum.FontSize.Size10
                NG239.Text = dCD('0')
                NG239.TextColor3 = Color3.new(1, 1, 1)
                NG239.Parent = NG235
                NG240 = Instance.new('Frame')
                NG240.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG240.BackgroundTransparency = 1
                NG240.BorderSizePixel = 0
                NG240.Name = dCD('ZbqrBcgvba')
                NG240.Position = UDim2.new(0, 0, 0, 30)
                NG240.Size = UDim2.new(0, 0, 0, 0)
                NG240.Parent = NG213
                NG241 = Instance.new('TextLabel')
                NG241.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG241.BackgroundTransparency = 1
                NG241.BorderSizePixel = 0
                NG241.Name = dCD('Ynory')
                NG241.Position = UDim2.new(0, 14, 0, 0)
                NG241.Size = UDim2.new(0, 40, 0, 25)
                NG241.Font = Enum.Font.ArialBold
                NG241.FontSize = Enum.FontSize.Size10
                NG241.Text = dCD('Zbqr')
                NG241.TextColor3 = Color3.new(1, 1, 1)
                NG241.TextStrokeTransparency = 0
                NG241.TextWrapped = true
                NG241.TextXAlignment = Enum.TextXAlignment.Left
                NG241.Parent = NG240
                NG242 = Instance.new('Frame')
                NG242.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG242.BackgroundTransparency = 1
                NG242.BorderSizePixel = 0
                NG242.Name = dCD('Qrpny')
                NG242.Position = UDim2.new(0, 55, 0, 0)
                NG242.Size = UDim2.new(0, 70, 0, 25)
                NG242.Parent = NG240
                NG243 = Instance.new('Frame')
                NG243.BorderSizePixel = 0
                NG243.Name = dCD('FryrpgrqVaqvpngbe')
                NG243.Position = UDim2.new(0, 7, 0, -2)
                NG243.Size = UDim2.new(1, -7, 0, 2)
                NG243.Parent = NG242
                NG244 = Instance.new('TextButton')
                NG244.Active = true
                NG244.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG244.BackgroundTransparency = 1
                NG244.BorderSizePixel = 0
                NG244.Name = dCD('Ohggba')
                NG244.Position = UDim2.new(0, 5, 0, 0)
                NG244.Selectable = true
                NG244.Size = UDim2.new(1, -10, 1, 0)
                NG244.Style = Enum.ButtonStyle.Custom
                NG244.ZIndex = 2
                NG244.Font = Enum.Font.Legacy
                NG244.FontSize = Enum.FontSize.Size8
                NG244.Text = dCD('')
                NG244.TextTransparency = 1
                NG244.Parent = NG242
                NG245 = Instance.new('ImageLabel')
                NG245.Active = false
                NG245.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG245.BackgroundTransparency = 1
                NG245.BorderSizePixel = 0
                NG245.Name = dCD('Onpxtebhaq')
                NG245.Selectable = false
                NG245.Size = UDim2.new(1, 0, 1, 0)
                NG245.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG245.Parent = NG242
                NG246 = Instance.new('TextLabel')
                NG246.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG246.BackgroundTransparency = 1
                NG246.BorderSizePixel = 0
                NG246.Name = dCD('Ynory')
                NG246.Size = UDim2.new(1, 0, 1, 0)
                NG246.Font = Enum.Font.ArialBold
                NG246.FontSize = Enum.FontSize.Size10
                NG246.Text = dCD('QRPNY')
                NG246.TextColor3 = Color3.new(1, 1, 1)
                NG246.Parent = NG242
                NG247 = Instance.new('Frame')
                NG247.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG247.BackgroundTransparency = 1
                NG247.BorderSizePixel = 0
                NG247.Name = dCD('Grkgher')
                NG247.Position = UDim2.new(0, 122, 0, 0)
                NG247.Size = UDim2.new(0, 70, 0, 25)
                NG247.Parent = NG240
                NG248 = Instance.new('TextButton')
                NG248.Active = true
                NG248.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG248.BackgroundTransparency = 1
                NG248.BorderSizePixel = 0
                NG248.Name = dCD('Ohggba')
                NG248.Position = UDim2.new(0, 5, 0, 0)
                NG248.Selectable = true
                NG248.Size = UDim2.new(1, -10, 1, 0)
                NG248.Style = Enum.ButtonStyle.Custom
                NG248.ZIndex = 2
                NG248.Font = Enum.Font.Legacy
                NG248.FontSize = Enum.FontSize.Size8
                NG248.Text = dCD('')
                NG248.TextTransparency = 1
                NG248.Parent = NG247
                NG249 = Instance.new('ImageLabel')
                NG249.Active = false
                NG249.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG249.BackgroundTransparency = 1
                NG249.BorderSizePixel = 0
                NG249.Name = dCD('Onpxtebhaq')
                NG249.Selectable = false
                NG249.Size = UDim2.new(1, 0, 1, 0)
                NG249.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG249.Parent = NG247
                NG250 = Instance.new('TextLabel')
                NG250.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG250.BackgroundTransparency = 1
                NG250.BorderSizePixel = 0
                NG250.Name = dCD('Ynory')
                NG250.Size = UDim2.new(1, 0, 1, 0)
                NG250.Font = Enum.Font.ArialBold
                NG250.FontSize = Enum.FontSize.Size10
                NG250.Text = dCD('GRKGHER')
                NG250.TextColor3 = Color3.new(1, 1, 1)
                NG250.Parent = NG247
                NG251 = Instance.new('Frame')
                NG251.BackgroundTransparency = 1
                NG251.BorderSizePixel = 0
                NG251.Name = dCD('FryrpgrqVaqvpngbe')
                NG251.Position = UDim2.new(0, 7, 0, -2)
                NG251.Size = UDim2.new(1, -7, 0, 2)
                NG251.Parent = NG247
                NG252 = Instance.new('Frame')
                NG252.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG252.BackgroundTransparency = 1
                NG252.BorderSizePixel = 0
                NG252.Name = dCD('VzntrVQBcgvba')
                NG252.Position = UDim2.new(0, 14, 0, 100)
                NG252.Size = UDim2.new(1, 0, 0, 25)
                NG252.Parent = NG213
                NG253 = Instance.new('TextLabel')
                NG253.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG253.BackgroundTransparency = 1
                NG253.BorderSizePixel = 0
                NG253.Name = dCD('Ynory')
                NG253.Size = UDim2.new(0, 70, 0, 25)
                NG253.Font = Enum.Font.ArialBold
                NG253.FontSize = Enum.FontSize.Size10
                NG253.Text = dCD('Vzntr VQ')
                NG253.TextColor3 = Color3.new(1, 1, 1)
                NG253.TextStrokeTransparency = 0
                NG253.TextWrapped = true
                NG253.TextXAlignment = Enum.TextXAlignment.Left
                NG253.Parent = NG252
                NG254 = Instance.new('Frame')
                NG254.BackgroundTransparency = 1
                NG254.BorderSizePixel = 0
                NG254.Name = dCD('GrkgObkObeqre')
                NG254.Position = UDim2.new(0, 61, 0, 17)
                NG254.Size = UDim2.new(0, 85, 0, 3)
                NG254.Parent = NG252
                NG255 = Instance.new('Frame')
                NG255.BackgroundColor3 = Color3.new(0.333333, 0, 0.498039)
                NG255.BorderSizePixel = 0
                NG255.Name = dCD('ObggbzObeqre')
                NG255.Position = UDim2.new(0, 0, 1, -1)
                NG255.Size = UDim2.new(1, 0, 0, 1)
                NG255.Parent = NG254
                NG256 = Instance.new('Frame')
                NG256.BackgroundColor3 = Color3.new(0.333333, 0, 0.498039)
                NG256.BorderSizePixel = 0
                NG256.Name = dCD('YrsgObeqre')
                NG256.Size = UDim2.new(0, 1, 1, 0)
                NG256.Parent = NG254
                NG257 = Instance.new('Frame')
                NG257.BackgroundColor3 = Color3.new(0.333333, 0, 0.498039)
                NG257.BorderSizePixel = 0
                NG257.Name = dCD('EvtugObeqre')
                NG257.Position = UDim2.new(1, -1, 0, 0)
                NG257.Size = UDim2.new(0, 1, 1, 0)
                NG257.Parent = NG254
                NG258 = Instance.new('Frame')
                NG258.BackgroundColor3 = Color3.new(0.333333, 0, 0.498039)
                NG258.BackgroundTransparency = 0.89999997615814
                NG258.BorderSizePixel = 0
                NG258.Name = dCD('GrkgObkOnpxtebhaq')
                NG258.Position = UDim2.new(0, 60, 0, -2)
                NG258.Size = UDim2.new(0, 86, 0, 22)
                NG258.Parent = NG252
                NG259 = Instance.new('TextButton')
                NG259.Active = true
                NG259.BackgroundTransparency = 1
                NG259.BorderSizePixel = 0
                NG259.Position = UDim2.new(0, 65, 0, -1)
                NG259.Selectable = true
                NG259.Size = UDim2.new(0, 80, 0, 18)
                NG259.Style = Enum.ButtonStyle.Custom
                NG259.ZIndex = 2
                NG259.FontSize = Enum.FontSize.Size14
                NG259.Text = dCD('')
                NG259.Parent = NG252
                NG260 = Instance.new('TextBox')
                NG260.BackgroundColor3 = Color3.new(0.333333, 0, 0.498039)
                NG260.BackgroundTransparency = 1
                NG260.BorderColor3 = Color3.new(0, 0, 0)
                NG260.BorderSizePixel = 0
                NG260.Position = UDim2.new(0, 65, 0, -1)
                NG260.Size = UDim2.new(0, 80, 0, 18)
                NG260.Font = Enum.Font.SourceSansBold
                NG260.FontSize = Enum.FontSize.Size10
                NG260.Text = dCD('')
                NG260.TextColor3 = Color3.new(1, 1, 1)
                NG260.TextScaled = true
                NG260.TextStrokeTransparency = 0.5
                NG260.TextWrapped = true
                NG260.TextXAlignment = Enum.TextXAlignment.Left
                NG260.Parent = NG252
                NG261 = Instance.new('Frame')
                NG261.BackgroundColor3 = Color3.new(0, 0, 0)
                NG261.BackgroundTransparency = 1
                NG261.BorderSizePixel = 0
                NG261.Name = dCD('NqqOhggba')
                NG261.Position = UDim2.new(0, 10, 0, 100)
                NG261.Size = UDim2.new(1, -10, 0, 20)
                NG261.Visible = false
                NG261.Parent = NG213
                NG262 = Instance.new('TextButton')
                NG262.Active = true
                NG262.BackgroundColor3 = Color3.new(0, 0, 0)
                NG262.BackgroundTransparency = 0.44999998807907
                NG262.BorderSizePixel = 0
                NG262.Name = dCD('Ohggba')
                NG262.Selectable = true
                NG262.Size = UDim2.new(1, 0, 1, 0)
                NG262.Style = Enum.ButtonStyle.Custom
                NG262.Font = Enum.Font.ArialBold
                NG262.FontSize = Enum.FontSize.Size10
                NG262.Text = dCD('NQQ QRPNY')
                NG262.TextColor3 = Color3.new(1, 1, 1)
                NG262.TextStrokeTransparency = 0.80000001192093
                NG262.Parent = NG261
                NG263 = Instance.new('Frame')
                NG263.BackgroundColor3 = Color3.new(0, 0, 0)
                NG263.BackgroundTransparency = 0.30000001192093
                NG263.BorderSizePixel = 0
                NG263.Name = dCD('Funqbj')
                NG263.Position = UDim2.new(0, 0, 1, 0)
                NG263.Size = UDim2.new(1, 0, 0, 2)
                NG263.ZIndex = 2
                NG263.Parent = NG261
                NG264 = Instance.new('Frame')
                NG264.BackgroundColor3 = Color3.new(0, 0, 0)
                NG264.BackgroundTransparency = 1
                NG264.BorderSizePixel = 0
                NG264.Name = dCD('ErzbirOhggba')
                NG264.Position = UDim2.new(0, 10, 1, -35)
                NG264.Size = UDim2.new(1, -10, 0, 20)
                NG264.Parent = NG213
                NG265 = Instance.new('TextButton')
                NG265.Active = true
                NG265.BackgroundColor3 = Color3.new(0, 0, 0)
                NG265.BackgroundTransparency = 0.44999998807907
                NG265.BorderSizePixel = 0
                NG265.Name = dCD('Ohggba')
                NG265.Selectable = true
                NG265.Size = UDim2.new(1, 0, 1, 0)
                NG265.Style = Enum.ButtonStyle.Custom
                NG265.Font = Enum.Font.ArialBold
                NG265.FontSize = Enum.FontSize.Size10
                NG265.Text = dCD('ERZBIR QRPNY')
                NG265.TextColor3 = Color3.new(1, 1, 1)
                NG265.TextStrokeTransparency = 0.80000001192093
                NG265.Parent = NG264
                NG266 = Instance.new('Frame')
                NG266.BackgroundColor3 = Color3.new(0, 0, 0)
                NG266.BackgroundTransparency = 0.30000001192093
                NG266.BorderSizePixel = 0
                NG266.Name = dCD('Funqbj')
                NG266.Position = UDim2.new(0, 0, 1, 0)
                NG266.Size = UDim2.new(1, 0, 0, 2)
                NG266.ZIndex = 2
                NG266.Parent = NG264
                NG267 = Instance.new('TextLabel')
                NG267.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG267.BackgroundTransparency = 1
                NG267.BorderSizePixel = 0
                NG267.Name = dCD('Grkg')
                NG267.Position = UDim2.new(0, 6, 1, 2)
                NG267.Size = UDim2.new(1, -6, 0, 20)
                NG267.Font = Enum.Font.ArialBold
                NG267.FontSize = Enum.FontSize.Size10
                NG267.Text = dCD('GVC: Fryrpg n cneg & evtug pyvpx ba n fhesnpr')
                NG267.TextColor3 = Color3.new(1, 1, 1)
                NG267.TextStrokeTransparency = 0.5
                NG267.TextWrapped = true
                NG267.TextXAlignment = Enum.TextXAlignment.Left
                NG267.Parent = NG213
                NG268 = Instance.new('Frame')
                NG268.Active = true
                NG268.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG268.BackgroundTransparency = 1
                NG268.BorderSizePixel = 0
                NG268.Name = dCD('OGJryqGbbyTHV')
                NG268.Position = UDim2.new(0, 0, 0, 280)
                NG268.Size = UDim2.new(0, 220, 0, 90)
                NG268.Draggable = true
                NG268.Parent = NG1
                NG269 = Instance.new('Frame')
                NG269.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG269.BackgroundTransparency = 1
                NG269.BorderSizePixel = 0
                NG269.Name = dCD('Gvgyr')
                NG269.Size = UDim2.new(1, 0, 0, 20)
                NG269.Parent = NG268
                NG270 = Instance.new('Frame')
                NG270.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG270.BorderSizePixel = 0
                NG270.Name = dCD('PbybeOne')
                NG270.Position = UDim2.new(0, 5, 0, -3)
                NG270.Size = UDim2.new(1, -5, 0, 2)
                NG270.Parent = NG269
                NG271 = Instance.new('TextLabel')
                NG271.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG271.BackgroundTransparency = 1
                NG271.BorderSizePixel = 0
                NG271.Name = dCD('Ynory')
                NG271.Position = UDim2.new(0, 10, 0, 1)
                NG271.Size = UDim2.new(1, -10, 1, 0)
                NG271.Font = Enum.Font.ArialBold
                NG271.FontSize = Enum.FontSize.Size10
                NG271.Text = dCD('JRYQ GBBY')
                NG271.TextColor3 = Color3.new(1, 1, 1)
                NG271.TextStrokeTransparency = 0
                NG271.TextWrapped = true
                NG271.TextXAlignment = Enum.TextXAlignment.Left
                NG271.Parent = NG269
                NG272 = Instance.new('TextLabel')
                NG272.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG272.BackgroundTransparency = 1
                NG272.BorderSizePixel = 0
                NG272.Name = dCD('S3KFvtangher')
                NG272.Position = UDim2.new(0, 10, 0, 1)
                NG272.Size = UDim2.new(1, -10, 1, 0)
                NG272.Font = Enum.Font.ArialBold
                NG272.FontSize = Enum.FontSize.Size14
                NG272.Text = dCD('S3K')
                NG272.TextColor3 = Color3.new(1, 1, 1)
                NG272.TextStrokeTransparency = 0.89999997615814
                NG272.TextWrapped = true
                NG272.TextXAlignment = Enum.TextXAlignment.Right
                NG272.Parent = NG269
                NG273 = Instance.new('Frame')
                NG273.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG273.BackgroundTransparency = 1
                NG273.BorderSizePixel = 0
                NG273.Name = dCD('Vagresnpr')
                NG273.Position = UDim2.new(0, 10, 0, 30)
                NG273.Size = UDim2.new(1, -10, 0, 0)
                NG273.Parent = NG268
                NG274 = Instance.new('TextButton')
                NG274.Active = true
                NG274.BackgroundColor3 = Color3.new(0, 0, 0)
                NG274.BackgroundTransparency = 0.40000000596046
                NG274.BorderSizePixel = 0
                NG274.Name = dCD('JryqOhggba')
                NG274.Selectable = true
                NG274.Size = UDim2.new(0.479999989, 0, 0, 25)
                NG274.Style = Enum.ButtonStyle.Custom
                NG274.Font = Enum.Font.ArialBold
                NG274.FontSize = Enum.FontSize.Size10
                NG274.Text = dCD('JRYQ GB YNFG')
                NG274.TextColor3 = Color3.new(1, 1, 1)
                NG274.TextStrokeTransparency = 0.85000002384186
                NG274.Parent = NG273
                NG275 = Instance.new('Frame')
                NG275.BackgroundColor3 = Color3.new(0, 0, 0)
                NG275.BackgroundTransparency = 0.15000000596046
                NG275.BorderSizePixel = 0
                NG275.Name = dCD('Funqbj')
                NG275.Position = UDim2.new(0, 0, 1, -2)
                NG275.Size = UDim2.new(1, 0, 0, 2)
                NG275.Parent = NG274
                NG276 = Instance.new('TextButton')
                NG276.Active = true
                NG276.BackgroundColor3 = Color3.new(0, 0, 0)
                NG276.BackgroundTransparency = 0.40000000596046
                NG276.BorderSizePixel = 0
                NG276.Name = dCD('OernxJryqfOhggba')
                NG276.Position = UDim2.new(0.519999981, 0, 0, 0)
                NG276.Selectable = true
                NG276.Size = UDim2.new(0.479999989, 0, 0, 25)
                NG276.Style = Enum.ButtonStyle.Custom
                NG276.Font = Enum.Font.ArialBold
                NG276.FontSize = Enum.FontSize.Size10
                NG276.Text = dCD('OERNX JRYQF')
                NG276.TextColor3 = Color3.new(1, 1, 1)
                NG276.TextStrokeTransparency = 0.85000002384186
                NG276.Parent = NG273
                NG277 = Instance.new('Frame')
                NG277.BackgroundColor3 = Color3.new(0, 0, 0)
                NG277.BackgroundTransparency = 0.15000000596046
                NG277.BorderSizePixel = 0
                NG277.Name = dCD('Funqbj')
                NG277.Position = UDim2.new(0, 0, 1, -2)
                NG277.Size = UDim2.new(1, 0, 0, 2)
                NG277.Parent = NG276
                NG278 = Instance.new('Frame')
                NG278.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG278.BackgroundTransparency = 1
                NG278.BorderSizePixel = 0
                NG278.Name = dCD('Punatrf')
                NG278.Position = UDim2.new(0, 5, 0, 70)
                NG278.Size = UDim2.new(1, -5, 0, 20)
                NG278.Parent = NG268
                NG279 = Instance.new('Frame')
                NG279.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG279.BorderSizePixel = 0
                NG279.Name = dCD('PbybeOne')
                NG279.Size = UDim2.new(1, 0, 0, 2)
                NG279.Parent = NG278
                NG280 = Instance.new('TextLabel')
                NG280.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG280.BackgroundTransparency = 1
                NG280.BorderSizePixel = 0
                NG280.Name = dCD('Grkg')
                NG280.Position = UDim2.new(0, 0, 0, 2)
                NG280.Size = UDim2.new(1, 0, 0, 20)
                NG280.Font = Enum.Font.ArialBold
                NG280.FontSize = Enum.FontSize.Size10
                NG280.Text = dCD('')
                NG280.TextColor3 = Color3.new(1, 1, 1)
                NG280.TextStrokeTransparency = 0.5
                NG280.TextWrapped = true
                NG280.TextXAlignment = Enum.TextXAlignment.Right
                NG280.Parent = NG278
                NG281 = Instance.new('Frame')
                NG281.Active = true
                NG281.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG281.BackgroundTransparency = 1
                NG281.BorderSizePixel = 0
                NG281.Name = dCD('OGYvtugvatGbbyTHV')
                NG281.Position = UDim2.new(0, 0, 0, 172)
                NG281.Size = UDim2.new(0, 200, 0, 95)
                NG281.Draggable = true
                NG281.Parent = NG1
                NG282 = Instance.new('Frame')
                NG282.BackgroundColor3 = Color3.new(0, 0, 0)
                NG282.BorderSizePixel = 0
                NG282.Name = dCD('ObggbzPbybeOne')
                NG282.Position = UDim2.new(0, 5, 1, -2)
                NG282.Size = UDim2.new(1, 0, 0, 2)
                NG282.Parent = NG281
                NG283 = Instance.new('Frame')
                NG283.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG283.BackgroundTransparency = 1
                NG283.BorderSizePixel = 0
                NG283.Name = dCD('Gvgyr')
                NG283.Size = UDim2.new(1, 0, 0, 20)
                NG283.Parent = NG281
                NG284 = Instance.new('Frame')
                NG284.BackgroundColor3 = Color3.new(0, 0, 0)
                NG284.BorderSizePixel = 0
                NG284.Name = dCD('PbybeOne')
                NG284.Position = UDim2.new(0, 5, 0, -3)
                NG284.Size = UDim2.new(1, -5, 0, 2)
                NG284.Parent = NG283
                NG285 = Instance.new('TextLabel')
                NG285.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG285.BackgroundTransparency = 1
                NG285.BorderSizePixel = 0
                NG285.Name = dCD('Ynory')
                NG285.Position = UDim2.new(0, 10, 0, 1)
                NG285.Size = UDim2.new(1, -10, 1, 0)
                NG285.Font = Enum.Font.ArialBold
                NG285.FontSize = Enum.FontSize.Size10
                NG285.Text = dCD('YVTUGVAT GBBY')
                NG285.TextColor3 = Color3.new(1, 1, 1)
                NG285.TextStrokeTransparency = 0
                NG285.TextWrapped = true
                NG285.TextXAlignment = Enum.TextXAlignment.Left
                NG285.Parent = NG283
                NG286 = Instance.new('TextLabel')
                NG286.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG286.BackgroundTransparency = 1
                NG286.BorderSizePixel = 0
                NG286.Name = dCD('S3KFvtangher')
                NG286.Position = UDim2.new(0, 10, 0, 1)
                NG286.Size = UDim2.new(1, -10, 1, 0)
                NG286.Font = Enum.Font.ArialBold
                NG286.FontSize = Enum.FontSize.Size14
                NG286.Text = dCD('S3K')
                NG286.TextColor3 = Color3.new(1, 1, 1)
                NG286.TextStrokeTransparency = 0.89999997615814
                NG286.TextWrapped = true
                NG286.TextXAlignment = Enum.TextXAlignment.Right
                NG286.Parent = NG283
                NG287 = Instance.new('Frame')
                NG287.BackgroundColor3 = Color3.new(0, 0, 0)
                NG287.BackgroundTransparency = 0.67500001192093
                NG287.BorderSizePixel = 0
                NG287.Name = dCD('Fcbgyvtug')
                NG287.Position = UDim2.new(0, 10, 0, 30)
                NG287.Size = UDim2.new(1, -10, 0, 25)
                NG287.Parent = NG281
                NG288 = Instance.new('TextLabel')
                NG288.BackgroundTransparency = 1
                NG288.BorderSizePixel = 0
                NG288.Name = dCD('Ynory')
                NG288.Position = UDim2.new(0, 35, 0, 0)
                NG288.Size = UDim2.new(0, 60, 0, 25)
                NG288.Font = Enum.Font.ArialBold
                NG288.FontSize = Enum.FontSize.Size10
                NG288.Text = dCD('Fcbgyvtug')
                NG288.TextColor3 = Color3.new(1, 1, 1)
                NG288.TextStrokeTransparency = 0.5
                NG288.TextWrapped = true
                NG288.TextXAlignment = Enum.TextXAlignment.Left
                NG288.Parent = NG287
                NG289 = Instance.new('ImageButton')
                NG289.BackgroundTransparency = 1
                NG289.BorderSizePixel = 0
                NG289.Name = dCD('NeebjOhggba')
                NG289.Position = UDim2.new(0, 10, 0, 3)
                NG289.Size = UDim2.new(0, 20, 0, 20)
                NG289.Style = Enum.ButtonStyle.Custom
                NG289.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=134367382')
                NG289.Parent = NG287
                NG290 = Instance.new('Frame')
                NG290.BackgroundColor3 = Color3.new(1, 0.682353, 0.235294)
                NG290.BorderSizePixel = 0
                NG290.Name = dCD('PbybeOne')
                NG290.Size = UDim2.new(0, 3, 1, 0)
                NG290.Parent = NG287
                NG291 = Instance.new('TextButton')
                NG291.Active = true
                NG291.BackgroundColor3 = Color3.new(0, 0, 0)
                NG291.BackgroundTransparency = 0.75
                NG291.BorderColor3 = Color3.new(0, 0, 0)
                NG291.BorderSizePixel = 0
                NG291.Name = dCD('NqqOhggba')
                NG291.Position = UDim2.new(1, -40, 0, 3)
                NG291.Selectable = true
                NG291.Size = UDim2.new(0, 35, 0, 19)
                NG291.Style = Enum.ButtonStyle.Custom
                NG291.Font = Enum.Font.ArialBold
                NG291.FontSize = Enum.FontSize.Size10
                NG291.Text = dCD('NQQ')
                NG291.TextColor3 = Color3.new(1, 1, 1)
                NG291.Parent = NG287
                NG292 = Instance.new('TextButton')
                NG292.Active = true
                NG292.BackgroundColor3 = Color3.new(0, 0, 0)
                NG292.BackgroundTransparency = 0.75
                NG292.BorderColor3 = Color3.new(0, 0, 0)
                NG292.BorderSizePixel = 0
                NG292.Name = dCD('ErzbirOhggba')
                NG292.Position = UDim2.new(0, 127, 0, 3)
                NG292.Selectable = true
                NG292.Size = UDim2.new(0, 58, 0, 19)
                NG292.Style = Enum.ButtonStyle.Custom
                NG292.Visible = false
                NG292.Font = Enum.Font.ArialBold
                NG292.FontSize = Enum.FontSize.Size10
                NG292.Text = dCD('ERZBIR')
                NG292.TextColor3 = Color3.new(1, 1, 1)
                NG292.Parent = NG287
                NG293 = Instance.new('Frame')
                NG293.BackgroundColor3 = Color3.new(0, 0, 0)
                NG293.BackgroundTransparency = 0.75
                NG293.BorderSizePixel = 0
                NG293.Name = dCD('Funqbj')
                NG293.Position = UDim2.new(0, 0, 1, -1)
                NG293.Size = UDim2.new(1, 0, 0, 1)
                NG293.Parent = NG287
                NG294 = Instance.new('Frame')
                NG294.BackgroundTransparency = 1
                NG294.BorderSizePixel = 0
                NG294.Name = dCD('Bcgvbaf')
                NG294.Position = UDim2.new(0, 3, 1, 0)
                NG294.Size = UDim2.new(1, -3, 0, 0)
                NG294.ClipsDescendants = true
                NG294.Parent = NG287
                NG295 = Instance.new('Frame')
                NG295.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG295.BackgroundTransparency = 1
                NG295.BorderSizePixel = 0
                NG295.Name = dCD('PbybeBcgvba')
                NG295.Position = UDim2.new(0, 0, 0, 10)
                NG295.Size = UDim2.new(1, 0, 0, 25)
                NG295.Parent = NG294
                NG296 = Instance.new('TextLabel')
                NG296.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG296.BackgroundTransparency = 1
                NG296.BorderSizePixel = 0
                NG296.Name = dCD('Ynory')
                NG296.Size = UDim2.new(0, 70, 0, 25)
                NG296.Font = Enum.Font.ArialBold
                NG296.FontSize = Enum.FontSize.Size10
                NG296.Text = dCD('Pbybe')
                NG296.TextColor3 = Color3.new(1, 1, 1)
                NG296.TextStrokeTransparency = 0
                NG296.TextWrapped = true
                NG296.TextXAlignment = Enum.TextXAlignment.Left
                NG296.Parent = NG295
                NG297 = Instance.new('Frame')
                NG297.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG297.BackgroundTransparency = 1
                NG297.BorderSizePixel = 0
                NG297.Name = dCD('EVachg')
                NG297.Position = UDim2.new(0, 35, 0, 0)
                NG297.Size = UDim2.new(0, 38, 0, 25)
                NG297.Parent = NG295
                NG298 = Instance.new('TextButton')
                NG298.Active = true
                NG298.AutoButtonColor = false
                NG298.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG298.BackgroundTransparency = 1
                NG298.BorderSizePixel = 0
                NG298.Selectable = true
                NG298.Size = UDim2.new(1, 0, 1, 0)
                NG298.Style = Enum.ButtonStyle.Custom
                NG298.ZIndex = 2
                NG298.Font = Enum.Font.Legacy
                NG298.FontSize = Enum.FontSize.Size8
                NG298.Text = dCD('')
                NG298.Parent = NG297
                NG299 = Instance.new('ImageLabel')
                NG299.Active = false
                NG299.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG299.BackgroundTransparency = 1
                NG299.BorderSizePixel = 0
                NG299.Name = dCD('Onpxtebhaq')
                NG299.Selectable = false
                NG299.Size = UDim2.new(1, 0, 1, 0)
                NG299.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG299.Parent = NG297
                NG300 = Instance.new('Frame')
                NG300.BackgroundColor3 = Color3.new(1, 0, 0)
                NG300.BorderSizePixel = 0
                NG300.Name = dCD('FryrpgrqVaqvpngbe')
                NG300.Position = UDim2.new(0, 3, 0, -2)
                NG300.Size = UDim2.new(1, -3, 0, 2)
                NG300.Parent = NG297
                NG301 = Instance.new('TextBox')
                NG301.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG301.BackgroundTransparency = 1
                NG301.BorderSizePixel = 0
                NG301.Position = UDim2.new(0, 5, 0, 0)
                NG301.Size = UDim2.new(1, -10, 1, 0)
                NG301.Font = Enum.Font.ArialBold
                NG301.FontSize = Enum.FontSize.Size10
                NG301.Text = dCD('255')
                NG301.TextColor3 = Color3.new(1, 1, 1)
                NG301.Parent = NG297
                NG302 = Instance.new('Frame')
                NG302.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG302.BackgroundTransparency = 1
                NG302.BorderSizePixel = 0
                NG302.Name = dCD('TVachg')
                NG302.Position = UDim2.new(0, 72, 0, 0)
                NG302.Size = UDim2.new(0, 38, 0, 25)
                NG302.Parent = NG295
                NG303 = Instance.new('TextButton')
                NG303.Active = true
                NG303.AutoButtonColor = false
                NG303.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG303.BackgroundTransparency = 1
                NG303.BorderSizePixel = 0
                NG303.Selectable = true
                NG303.Size = UDim2.new(1, 0, 1, 0)
                NG303.Style = Enum.ButtonStyle.Custom
                NG303.ZIndex = 2
                NG303.Font = Enum.Font.Legacy
                NG303.FontSize = Enum.FontSize.Size8
                NG303.Text = dCD('')
                NG303.Parent = NG302
                NG304 = Instance.new('ImageLabel')
                NG304.Active = false
                NG304.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG304.BackgroundTransparency = 1
                NG304.BorderSizePixel = 0
                NG304.Name = dCD('Onpxtebhaq')
                NG304.Selectable = false
                NG304.Size = UDim2.new(1, 0, 1, 0)
                NG304.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG304.Parent = NG302
                NG305 = Instance.new('Frame')
                NG305.BackgroundColor3 = Color3.new(0, 1, 0)
                NG305.BorderSizePixel = 0
                NG305.Name = dCD('FryrpgrqVaqvpngbe')
                NG305.Position = UDim2.new(0, 3, 0, -2)
                NG305.Size = UDim2.new(1, -3, 0, 2)
                NG305.Parent = NG302
                NG306 = Instance.new('TextBox')
                NG306.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG306.BackgroundTransparency = 1
                NG306.BorderSizePixel = 0
                NG306.Position = UDim2.new(0, 5, 0, 0)
                NG306.Size = UDim2.new(1, -10, 1, 0)
                NG306.Font = Enum.Font.ArialBold
                NG306.FontSize = Enum.FontSize.Size10
                NG306.Text = dCD('255')
                NG306.TextColor3 = Color3.new(1, 1, 1)
                NG306.Parent = NG302
                NG307 = Instance.new('Frame')
                NG307.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG307.BackgroundTransparency = 1
                NG307.BorderSizePixel = 0
                NG307.Name = dCD('OVachg')
                NG307.Position = UDim2.new(0, 109, 0, 0)
                NG307.Size = UDim2.new(0, 38, 0, 25)
                NG307.Parent = NG295
                NG308 = Instance.new('TextButton')
                NG308.Active = true
                NG308.AutoButtonColor = false
                NG308.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG308.BackgroundTransparency = 1
                NG308.BorderSizePixel = 0
                NG308.Selectable = true
                NG308.Size = UDim2.new(1, 0, 1, 0)
                NG308.Style = Enum.ButtonStyle.Custom
                NG308.ZIndex = 2
                NG308.Font = Enum.Font.Legacy
                NG308.FontSize = Enum.FontSize.Size8
                NG308.Text = dCD('')
                NG308.Parent = NG307
                NG309 = Instance.new('ImageLabel')
                NG309.Active = false
                NG309.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG309.BackgroundTransparency = 1
                NG309.BorderSizePixel = 0
                NG309.Name = dCD('Onpxtebhaq')
                NG309.Selectable = false
                NG309.Size = UDim2.new(1, 0, 1, 0)
                NG309.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG309.Parent = NG307
                NG310 = Instance.new('Frame')
                NG310.BackgroundColor3 = Color3.new(0, 0, 1)
                NG310.BorderSizePixel = 0
                NG310.Name = dCD('FryrpgrqVaqvpngbe')
                NG310.Position = UDim2.new(0, 3, 0, -2)
                NG310.Size = UDim2.new(1, -3, 0, 2)
                NG310.Parent = NG307
                NG311 = Instance.new('TextBox')
                NG311.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG311.BackgroundTransparency = 1
                NG311.BorderSizePixel = 0
                NG311.Position = UDim2.new(0, 5, 0, 0)
                NG311.Size = UDim2.new(1, -10, 1, 0)
                NG311.Font = Enum.Font.ArialBold
                NG311.FontSize = Enum.FontSize.Size10
                NG311.Text = dCD('255')
                NG311.TextColor3 = Color3.new(1, 1, 1)
                NG311.Parent = NG307
                NG312 = Instance.new('ImageButton')
                NG312.BackgroundColor3 = Color3.new(0, 0, 0)
                NG312.BackgroundTransparency = 0.40000000596046
                NG312.BorderSizePixel = 0
                NG312.Name = dCD('UFICvpxre')
                NG312.Position = UDim2.new(0, 160, 0, -2)
                NG312.Size = UDim2.new(0, 27, 0, 27)
                NG312.Style = Enum.ButtonStyle.Custom
                NG312.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141313631')
                NG312.Parent = NG295
                NG313 = Instance.new('Frame')
                NG313.BackgroundColor3 = Color3.new(0, 0, 0)
                NG313.BackgroundTransparency = 0.75
                NG313.BorderSizePixel = 0
                NG313.Name = dCD('Funqbj')
                NG313.Position = UDim2.new(0, 0, 1, -2)
                NG313.Size = UDim2.new(1, 0, 0, 2)
                NG313.Parent = NG312
                NG314 = Instance.new('Frame')
                NG314.BackgroundColor3 = Color3.new(0, 0, 0)
                NG314.BackgroundTransparency = 0.5
                NG314.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG314.BorderSizePixel = 0
                NG314.Name = dCD('Frcnengbe')
                NG314.Position = UDim2.new(0, 151, 0, 4)
                NG314.Size = UDim2.new(0, 4, 0, 4)
                NG314.Parent = NG295
                NG315 = Instance.new('Frame')
                NG315.BackgroundColor3 = Color3.new(0, 0, 0)
                NG315.BackgroundTransparency = 0.5
                NG315.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG315.BorderSizePixel = 0
                NG315.Name = dCD('Frcnengbe')
                NG315.Position = UDim2.new(0, 151, 0, 16)
                NG315.Size = UDim2.new(0, 4, 0, 4)
                NG315.Parent = NG295
                NG316 = Instance.new('Frame')
                NG316.BackgroundColor3 = Color3.new(0, 0, 0)
                NG316.BackgroundTransparency = 0.5
                NG316.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG316.BorderSizePixel = 0
                NG316.Name = dCD('Frcnengbe')
                NG316.Position = UDim2.new(0, 151, 0, 10)
                NG316.Size = UDim2.new(0, 4, 0, 4)
                NG316.Parent = NG295
                NG317 = Instance.new('Frame')
                NG317.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG317.BackgroundTransparency = 1
                NG317.BorderSizePixel = 0
                NG317.Name = dCD('OevtugarffBcgvba')
                NG317.Position = UDim2.new(0, 0, 0, 45)
                NG317.Size = UDim2.new(1, 0, 0, 25)
                NG317.Parent = NG294
                NG318 = Instance.new('TextLabel')
                NG318.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG318.BackgroundTransparency = 1
                NG318.BorderSizePixel = 0
                NG318.Name = dCD('Ynory')
                NG318.Size = UDim2.new(0, 70, 0, 25)
                NG318.Font = Enum.Font.ArialBold
                NG318.FontSize = Enum.FontSize.Size10
                NG318.Text = dCD('Oevtugarff')
                NG318.TextColor3 = Color3.new(1, 1, 1)
                NG318.TextStrokeTransparency = 0
                NG318.TextWrapped = true
                NG318.TextXAlignment = Enum.TextXAlignment.Left
                NG318.Parent = NG317
                NG319 = Instance.new('Frame')
                NG319.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG319.BackgroundTransparency = 1
                NG319.BorderSizePixel = 0
                NG319.Name = dCD('Vachg')
                NG319.Position = UDim2.new(0, 60, 0, 0)
                NG319.Size = UDim2.new(0, 38, 0, 25)
                NG319.Parent = NG317
                NG320 = Instance.new('TextButton')
                NG320.Active = true
                NG320.AutoButtonColor = false
                NG320.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG320.BackgroundTransparency = 1
                NG320.BorderSizePixel = 0
                NG320.Selectable = true
                NG320.Size = UDim2.new(1, 0, 1, 0)
                NG320.Style = Enum.ButtonStyle.Custom
                NG320.ZIndex = 2
                NG320.Font = Enum.Font.Legacy
                NG320.FontSize = Enum.FontSize.Size8
                NG320.Text = dCD('')
                NG320.Parent = NG319
                NG321 = Instance.new('ImageLabel')
                NG321.Active = false
                NG321.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG321.BackgroundTransparency = 1
                NG321.BorderSizePixel = 0
                NG321.Name = dCD('Onpxtebhaq')
                NG321.Selectable = false
                NG321.Size = UDim2.new(1, 0, 1, 0)
                NG321.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG321.Parent = NG319
                NG322 = Instance.new('Frame')
                NG322.BorderSizePixel = 0
                NG322.Name = dCD('FryrpgrqVaqvpngbe')
                NG322.Position = UDim2.new(0, 3, 0, -2)
                NG322.Size = UDim2.new(1, -3, 0, 2)
                NG322.Parent = NG319
                NG323 = Instance.new('TextBox')
                NG323.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG323.BackgroundTransparency = 1
                NG323.BorderSizePixel = 0
                NG323.Position = UDim2.new(0, 5, 0, 0)
                NG323.Size = UDim2.new(1, -10, 1, 0)
                NG323.Font = Enum.Font.ArialBold
                NG323.FontSize = Enum.FontSize.Size10
                NG323.Text = dCD('1')
                NG323.TextColor3 = Color3.new(1, 1, 1)
                NG323.Parent = NG319
                NG324 = Instance.new('Frame')
                NG324.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG324.BackgroundTransparency = 1
                NG324.BorderSizePixel = 0
                NG324.Name = dCD('NatyrBcgvba')
                NG324.Position = UDim2.new(0, 115, 0, 46)
                NG324.Size = UDim2.new(1, -115, 0, 25)
                NG324.Parent = NG294
                NG325 = Instance.new('TextLabel')
                NG325.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG325.BackgroundTransparency = 1
                NG325.BorderSizePixel = 0
                NG325.Name = dCD('Ynory')
                NG325.Size = UDim2.new(0, 70, 0, 25)
                NG325.Font = Enum.Font.ArialBold
                NG325.FontSize = Enum.FontSize.Size10
                NG325.Text = dCD('Natyr')
                NG325.TextColor3 = Color3.new(1, 1, 1)
                NG325.TextStrokeTransparency = 0
                NG325.TextWrapped = true
                NG325.TextXAlignment = Enum.TextXAlignment.Left
                NG325.Parent = NG324
                NG326 = Instance.new('Frame')
                NG326.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG326.BackgroundTransparency = 1
                NG326.BorderSizePixel = 0
                NG326.Name = dCD('Vachg')
                NG326.Position = UDim2.new(0, 35, 0, 0)
                NG326.Size = UDim2.new(0, 38, 0, 25)
                NG326.Parent = NG324
                NG327 = Instance.new('TextButton')
                NG327.Active = true
                NG327.AutoButtonColor = false
                NG327.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG327.BackgroundTransparency = 1
                NG327.BorderSizePixel = 0
                NG327.Selectable = true
                NG327.Size = UDim2.new(1, 0, 1, 0)
                NG327.Style = Enum.ButtonStyle.Custom
                NG327.ZIndex = 2
                NG327.Font = Enum.Font.Legacy
                NG327.FontSize = Enum.FontSize.Size8
                NG327.Text = dCD('')
                NG327.Parent = NG326
                NG328 = Instance.new('ImageLabel')
                NG328.Active = false
                NG328.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG328.BackgroundTransparency = 1
                NG328.BorderSizePixel = 0
                NG328.Name = dCD('Onpxtebhaq')
                NG328.Selectable = false
                NG328.Size = UDim2.new(1, 0, 1, 0)
                NG328.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG328.Parent = NG326
                NG329 = Instance.new('Frame')
                NG329.BorderSizePixel = 0
                NG329.Name = dCD('FryrpgrqVaqvpngbe')
                NG329.Position = UDim2.new(0, 3, 0, -2)
                NG329.Size = UDim2.new(1, -3, 0, 2)
                NG329.Parent = NG326
                NG330 = Instance.new('TextBox')
                NG330.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG330.BackgroundTransparency = 1
                NG330.BorderSizePixel = 0
                NG330.Position = UDim2.new(0, 5, 0, 0)
                NG330.Size = UDim2.new(1, -10, 1, 0)
                NG330.Font = Enum.Font.ArialBold
                NG330.FontSize = Enum.FontSize.Size10
                NG330.Text = dCD('90')
                NG330.TextColor3 = Color3.new(1, 1, 1)
                NG330.Parent = NG326
                NG331 = Instance.new('Frame')
                NG331.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG331.BackgroundTransparency = 1
                NG331.BorderSizePixel = 0
                NG331.Name = dCD('EnatrBcgvba')
                NG331.Position = UDim2.new(0, 0, 0, 80)
                NG331.Size = UDim2.new(1, 0, 0, 25)
                NG331.Parent = NG294
                NG332 = Instance.new('TextLabel')
                NG332.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG332.BackgroundTransparency = 1
                NG332.BorderSizePixel = 0
                NG332.Name = dCD('Ynory')
                NG332.Size = UDim2.new(0, 70, 0, 25)
                NG332.Font = Enum.Font.ArialBold
                NG332.FontSize = Enum.FontSize.Size10
                NG332.Text = dCD('Enatr')
                NG332.TextColor3 = Color3.new(1, 1, 1)
                NG332.TextStrokeTransparency = 0
                NG332.TextWrapped = true
                NG332.TextXAlignment = Enum.TextXAlignment.Left
                NG332.Parent = NG331
                NG333 = Instance.new('Frame')
                NG333.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG333.BackgroundTransparency = 1
                NG333.BorderSizePixel = 0
                NG333.Name = dCD('Vachg')
                NG333.Position = UDim2.new(0, 40, 0, 0)
                NG333.Size = UDim2.new(0, 38, 0, 25)
                NG333.Parent = NG331
                NG334 = Instance.new('TextButton')
                NG334.Active = true
                NG334.AutoButtonColor = false
                NG334.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG334.BackgroundTransparency = 1
                NG334.BorderSizePixel = 0
                NG334.Selectable = true
                NG334.Size = UDim2.new(1, 0, 1, 0)
                NG334.Style = Enum.ButtonStyle.Custom
                NG334.ZIndex = 2
                NG334.Font = Enum.Font.Legacy
                NG334.FontSize = Enum.FontSize.Size8
                NG334.Text = dCD('')
                NG334.Parent = NG333
                NG335 = Instance.new('ImageLabel')
                NG335.Active = false
                NG335.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG335.BackgroundTransparency = 1
                NG335.BorderSizePixel = 0
                NG335.Name = dCD('Onpxtebhaq')
                NG335.Selectable = false
                NG335.Size = UDim2.new(1, 0, 1, 0)
                NG335.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG335.Parent = NG333
                NG336 = Instance.new('Frame')
                NG336.BorderSizePixel = 0
                NG336.Name = dCD('FryrpgrqVaqvpngbe')
                NG336.Position = UDim2.new(0, 3, 0, -2)
                NG336.Size = UDim2.new(1, -3, 0, 2)
                NG336.Parent = NG333
                NG337 = Instance.new('TextBox')
                NG337.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG337.BackgroundTransparency = 1
                NG337.BorderSizePixel = 0
                NG337.Position = UDim2.new(0, 5, 0, 0)
                NG337.Size = UDim2.new(1, -10, 1, 0)
                NG337.Font = Enum.Font.ArialBold
                NG337.FontSize = Enum.FontSize.Size10
                NG337.Text = dCD('16')
                NG337.TextColor3 = Color3.new(1, 1, 1)
                NG337.Parent = NG333
                NG338 = Instance.new('Frame')
                NG338.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG338.BackgroundTransparency = 1
                NG338.BorderSizePixel = 0
                NG338.Name = dCD('FvqrBcgvba')
                NG338.Position = UDim2.new(0, 0, 0, 115)
                NG338.Size = UDim2.new(1, 0, 0, 25)
                NG338.Parent = NG294
                NG339 = Instance.new('TextLabel')
                NG339.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG339.BackgroundTransparency = 1
                NG339.BorderSizePixel = 0
                NG339.Name = dCD('Ynory')
                NG339.Size = UDim2.new(0, 70, 0, 25)
                NG339.Font = Enum.Font.ArialBold
                NG339.FontSize = Enum.FontSize.Size10
                NG339.Text = dCD('Fvqr')
                NG339.TextColor3 = Color3.new(1, 1, 1)
                NG339.TextStrokeTransparency = 0
                NG339.TextWrapped = true
                NG339.TextXAlignment = Enum.TextXAlignment.Left
                NG339.Parent = NG338
                NG340 = Instance.new('Frame')
                NG340.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG340.BackgroundTransparency = 1
                NG340.BorderSizePixel = 0
                NG340.Name = dCD('FunqbjfBcgvba')
                NG340.Position = UDim2.new(0, 0, 0, 150)
                NG340.Size = UDim2.new(1, 0, 0, 25)
                NG340.Parent = NG294
                NG341 = Instance.new('TextLabel')
                NG341.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG341.BackgroundTransparency = 1
                NG341.BorderSizePixel = 0
                NG341.Name = dCD('Ynory')
                NG341.Size = UDim2.new(0, 50, 0, 25)
                NG341.Font = Enum.Font.ArialBold
                NG341.FontSize = Enum.FontSize.Size10
                NG341.Text = dCD('Funqbjf')
                NG341.TextColor3 = Color3.new(1, 1, 1)
                NG341.TextStrokeTransparency = 0
                NG341.TextWrapped = true
                NG341.TextXAlignment = Enum.TextXAlignment.Left
                NG341.Parent = NG340
                NG342 = Instance.new('Frame')
                NG342.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG342.BackgroundTransparency = 1
                NG342.BorderSizePixel = 0
                NG342.Name = dCD('Ba')
                NG342.Position = UDim2.new(0, 55, 0, 0)
                NG342.Size = UDim2.new(0, 45, 0, 25)
                NG342.Parent = NG340
                NG343 = Instance.new('Frame')
                NG343.BackgroundTransparency = 1
                NG343.BorderSizePixel = 0
                NG343.Name = dCD('FryrpgrqVaqvpngbe')
                NG343.Position = UDim2.new(0, 4, 0, -2)
                NG343.Size = UDim2.new(1, -4, 0, 2)
                NG343.Parent = NG342
                NG344 = Instance.new('TextButton')
                NG344.Active = true
                NG344.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG344.BackgroundTransparency = 1
                NG344.BorderSizePixel = 0
                NG344.Name = dCD('Ohggba')
                NG344.Position = UDim2.new(0, 5, 0, 0)
                NG344.Selectable = true
                NG344.Size = UDim2.new(1, -10, 1, 0)
                NG344.Style = Enum.ButtonStyle.Custom
                NG344.ZIndex = 2
                NG344.Font = Enum.Font.Legacy
                NG344.FontSize = Enum.FontSize.Size8
                NG344.Text = dCD('')
                NG344.TextTransparency = 1
                NG344.Parent = NG342
                NG345 = Instance.new('ImageLabel')
                NG345.Active = false
                NG345.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG345.BackgroundTransparency = 1
                NG345.BorderSizePixel = 0
                NG345.Name = dCD('Onpxtebhaq')
                NG345.Selectable = false
                NG345.Size = UDim2.new(1, 0, 1, 0)
                NG345.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG345.Parent = NG342
                NG346 = Instance.new('TextLabel')
                NG346.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG346.BackgroundTransparency = 1
                NG346.BorderSizePixel = 0
                NG346.Name = dCD('Ynory')
                NG346.Size = UDim2.new(1, 0, 1, 0)
                NG346.Font = Enum.Font.ArialBold
                NG346.FontSize = Enum.FontSize.Size10
                NG346.Text = dCD('BA')
                NG346.TextColor3 = Color3.new(1, 1, 1)
                NG346.Parent = NG342
                NG347 = Instance.new('Frame')
                NG347.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG347.BackgroundTransparency = 1
                NG347.BorderSizePixel = 0
                NG347.Name = dCD('Bss')
                NG347.Position = UDim2.new(0, 100, 0, 0)
                NG347.Size = UDim2.new(0, 45, 0, 25)
                NG347.Parent = NG340
                NG348 = Instance.new('Frame')
                NG348.BackgroundTransparency = 1
                NG348.BorderSizePixel = 0
                NG348.Name = dCD('FryrpgrqVaqvpngbe')
                NG348.Position = UDim2.new(0, 4, 0, -2)
                NG348.Size = UDim2.new(1, -4, 0, 2)
                NG348.Parent = NG347
                NG349 = Instance.new('TextButton')
                NG349.Active = true
                NG349.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG349.BackgroundTransparency = 1
                NG349.BorderSizePixel = 0
                NG349.Name = dCD('Ohggba')
                NG349.Position = UDim2.new(0, 5, 0, 0)
                NG349.Selectable = true
                NG349.Size = UDim2.new(1, -10, 1, 0)
                NG349.Style = Enum.ButtonStyle.Custom
                NG349.ZIndex = 2
                NG349.Font = Enum.Font.Legacy
                NG349.FontSize = Enum.FontSize.Size8
                NG349.Text = dCD('')
                NG349.TextTransparency = 1
                NG349.Parent = NG347
                NG350 = Instance.new('ImageLabel')
                NG350.Active = false
                NG350.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG350.BackgroundTransparency = 1
                NG350.BorderSizePixel = 0
                NG350.Name = dCD('Onpxtebhaq')
                NG350.Selectable = false
                NG350.Size = UDim2.new(1, 0, 1, 0)
                NG350.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG350.Parent = NG347
                NG351 = Instance.new('TextLabel')
                NG351.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG351.BackgroundTransparency = 1
                NG351.BorderSizePixel = 0
                NG351.Name = dCD('Ynory')
                NG351.Size = UDim2.new(1, 0, 1, 0)
                NG351.Font = Enum.Font.ArialBold
                NG351.FontSize = Enum.FontSize.Size10
                NG351.Text = dCD('BSS')
                NG351.TextColor3 = Color3.new(1, 1, 1)
                NG351.Parent = NG347
                NG352 = Instance.new('TextLabel')
                NG352.BackgroundTransparency = 1
                NG352.BorderSizePixel = 0
                NG352.Name = dCD('FryrpgAbgr')
                NG352.Position = UDim2.new(0, 10, 0, 27)
                NG352.Size = UDim2.new(1, -10, 0, 15)
                NG352.Visible = false
                NG352.FontSize = Enum.FontSize.Size14
                NG352.Text = dCD('Fryrpg fbzrguvat gb hfr guvf gbby.')
                NG352.TextColor3 = Color3.new(1, 1, 1)
                NG352.TextScaled = true
                NG352.TextStrokeTransparency = 0.5
                NG352.TextWrapped = true
                NG352.TextXAlignment = Enum.TextXAlignment.Left
                NG352.Parent = NG281
                NG353 = Instance.new('Frame')
                NG353.BackgroundColor3 = Color3.new(0, 0, 0)
                NG353.BackgroundTransparency = 0.67500001192093
                NG353.BorderSizePixel = 0
                NG353.Name = dCD('CbvagYvtug')
                NG353.Position = UDim2.new(0, 10, 0, 60)
                NG353.Size = UDim2.new(1, -10, 0, 25)
                NG353.Parent = NG281
                NG354 = Instance.new('TextLabel')
                NG354.BackgroundTransparency = 1
                NG354.BorderSizePixel = 0
                NG354.Name = dCD('Ynory')
                NG354.Position = UDim2.new(0, 35, 0, 0)
                NG354.Size = UDim2.new(0, 60, 0, 25)
                NG354.Font = Enum.Font.ArialBold
                NG354.FontSize = Enum.FontSize.Size10
                NG354.Text = dCD('Cbvag yvtug')
                NG354.TextColor3 = Color3.new(1, 1, 1)
                NG354.TextStrokeTransparency = 0.5
                NG354.TextWrapped = true
                NG354.TextXAlignment = Enum.TextXAlignment.Left
                NG354.Parent = NG353
                NG355 = Instance.new('ImageButton')
                NG355.BackgroundTransparency = 1
                NG355.BorderSizePixel = 0
                NG355.Name = dCD('NeebjOhggba')
                NG355.Position = UDim2.new(0, 10, 0, 3)
                NG355.Size = UDim2.new(0, 20, 0, 20)
                NG355.Style = Enum.ButtonStyle.Custom
                NG355.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=134367382')
                NG355.Parent = NG353
                NG356 = Instance.new('Frame')
                NG356.BackgroundColor3 = Color3.new(0.85098, 0, 1)
                NG356.BorderSizePixel = 0
                NG356.Name = dCD('PbybeOne')
                NG356.Size = UDim2.new(0, 3, 1, 0)
                NG356.Parent = NG353
                NG357 = Instance.new('TextButton')
                NG357.Active = true
                NG357.BackgroundColor3 = Color3.new(0, 0, 0)
                NG357.BackgroundTransparency = 0.75
                NG357.BorderColor3 = Color3.new(0, 0, 0)
                NG357.BorderSizePixel = 0
                NG357.Name = dCD('NqqOhggba')
                NG357.Position = UDim2.new(1, -40, 0, 3)
                NG357.Selectable = true
                NG357.Size = UDim2.new(0, 35, 0, 19)
                NG357.Style = Enum.ButtonStyle.Custom
                NG357.Font = Enum.Font.ArialBold
                NG357.FontSize = Enum.FontSize.Size10
                NG357.Text = dCD('NQQ')
                NG357.TextColor3 = Color3.new(1, 1, 1)
                NG357.Parent = NG353
                NG358 = Instance.new('TextButton')
                NG358.Active = true
                NG358.BackgroundColor3 = Color3.new(0, 0, 0)
                NG358.BackgroundTransparency = 0.75
                NG358.BorderColor3 = Color3.new(0, 0, 0)
                NG358.BorderSizePixel = 0
                NG358.Name = dCD('ErzbirOhggba')
                NG358.Position = UDim2.new(0, 90, 0, 3)
                NG358.Selectable = true
                NG358.Size = UDim2.new(0, 58, 0, 19)
                NG358.Style = Enum.ButtonStyle.Custom
                NG358.Visible = false
                NG358.Font = Enum.Font.ArialBold
                NG358.FontSize = Enum.FontSize.Size10
                NG358.Text = dCD('ERZBIR')
                NG358.TextColor3 = Color3.new(1, 1, 1)
                NG358.Parent = NG353
                NG359 = Instance.new('Frame')
                NG359.BackgroundColor3 = Color3.new(0, 0, 0)
                NG359.BackgroundTransparency = 0.75
                NG359.BorderSizePixel = 0
                NG359.Name = dCD('Funqbj')
                NG359.Position = UDim2.new(0, 0, 1, -1)
                NG359.Size = UDim2.new(1, 0, 0, 1)
                NG359.Parent = NG353
                NG360 = Instance.new('Frame')
                NG360.BackgroundTransparency = 1
                NG360.BorderSizePixel = 0
                NG360.Name = dCD('Bcgvbaf')
                NG360.Position = UDim2.new(0, 3, 1, 0)
                NG360.Size = UDim2.new(1, -3, 0, 0)
                NG360.ClipsDescendants = true
                NG360.Parent = NG353
                NG361 = Instance.new('Frame')
                NG361.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG361.BackgroundTransparency = 1
                NG361.BorderSizePixel = 0
                NG361.Name = dCD('PbybeBcgvba')
                NG361.Position = UDim2.new(0, 0, 0, 10)
                NG361.Size = UDim2.new(1, 0, 0, 25)
                NG361.Parent = NG360
                NG362 = Instance.new('TextLabel')
                NG362.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG362.BackgroundTransparency = 1
                NG362.BorderSizePixel = 0
                NG362.Name = dCD('Ynory')
                NG362.Size = UDim2.new(0, 70, 0, 25)
                NG362.Font = Enum.Font.ArialBold
                NG362.FontSize = Enum.FontSize.Size10
                NG362.Text = dCD('Pbybe')
                NG362.TextColor3 = Color3.new(1, 1, 1)
                NG362.TextStrokeTransparency = 0
                NG362.TextWrapped = true
                NG362.TextXAlignment = Enum.TextXAlignment.Left
                NG362.Parent = NG361
                NG363 = Instance.new('Frame')
                NG363.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG363.BackgroundTransparency = 1
                NG363.BorderSizePixel = 0
                NG363.Name = dCD('EVachg')
                NG363.Position = UDim2.new(0, 35, 0, 0)
                NG363.Size = UDim2.new(0, 38, 0, 25)
                NG363.Parent = NG361
                NG364 = Instance.new('TextButton')
                NG364.Active = true
                NG364.AutoButtonColor = false
                NG364.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG364.BackgroundTransparency = 1
                NG364.BorderSizePixel = 0
                NG364.Selectable = true
                NG364.Size = UDim2.new(1, 0, 1, 0)
                NG364.Style = Enum.ButtonStyle.Custom
                NG364.ZIndex = 2
                NG364.Font = Enum.Font.Legacy
                NG364.FontSize = Enum.FontSize.Size8
                NG364.Text = dCD('')
                NG364.Parent = NG363
                NG365 = Instance.new('ImageLabel')
                NG365.Active = false
                NG365.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG365.BackgroundTransparency = 1
                NG365.BorderSizePixel = 0
                NG365.Name = dCD('Onpxtebhaq')
                NG365.Selectable = false
                NG365.Size = UDim2.new(1, 0, 1, 0)
                NG365.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG365.Parent = NG363
                NG366 = Instance.new('Frame')
                NG366.BackgroundColor3 = Color3.new(1, 0, 0)
                NG366.BorderSizePixel = 0
                NG366.Name = dCD('FryrpgrqVaqvpngbe')
                NG366.Position = UDim2.new(0, 3, 0, -2)
                NG366.Size = UDim2.new(1, -3, 0, 2)
                NG366.Parent = NG363
                NG367 = Instance.new('TextBox')
                NG367.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG367.BackgroundTransparency = 1
                NG367.BorderSizePixel = 0
                NG367.Position = UDim2.new(0, 5, 0, 0)
                NG367.Size = UDim2.new(1, -10, 1, 0)
                NG367.Font = Enum.Font.ArialBold
                NG367.FontSize = Enum.FontSize.Size10
                NG367.Text = dCD('255')
                NG367.TextColor3 = Color3.new(1, 1, 1)
                NG367.Parent = NG363
                NG368 = Instance.new('Frame')
                NG368.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG368.BackgroundTransparency = 1
                NG368.BorderSizePixel = 0
                NG368.Name = dCD('TVachg')
                NG368.Position = UDim2.new(0, 72, 0, 0)
                NG368.Size = UDim2.new(0, 38, 0, 25)
                NG368.Parent = NG361
                NG369 = Instance.new('TextButton')
                NG369.Active = true
                NG369.AutoButtonColor = false
                NG369.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG369.BackgroundTransparency = 1
                NG369.BorderSizePixel = 0
                NG369.Selectable = true
                NG369.Size = UDim2.new(1, 0, 1, 0)
                NG369.Style = Enum.ButtonStyle.Custom
                NG369.ZIndex = 2
                NG369.Font = Enum.Font.Legacy
                NG369.FontSize = Enum.FontSize.Size8
                NG369.Text = dCD('')
                NG369.Parent = NG368
                NG370 = Instance.new('ImageLabel')
                NG370.Active = false
                NG370.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG370.BackgroundTransparency = 1
                NG370.BorderSizePixel = 0
                NG370.Name = dCD('Onpxtebhaq')
                NG370.Selectable = false
                NG370.Size = UDim2.new(1, 0, 1, 0)
                NG370.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG370.Parent = NG368
                NG371 = Instance.new('Frame')
                NG371.BackgroundColor3 = Color3.new(0, 1, 0)
                NG371.BorderSizePixel = 0
                NG371.Name = dCD('FryrpgrqVaqvpngbe')
                NG371.Position = UDim2.new(0, 3, 0, -2)
                NG371.Size = UDim2.new(1, -3, 0, 2)
                NG371.Parent = NG368
                NG372 = Instance.new('TextBox')
                NG372.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG372.BackgroundTransparency = 1
                NG372.BorderSizePixel = 0
                NG372.Position = UDim2.new(0, 5, 0, 0)
                NG372.Size = UDim2.new(1, -10, 1, 0)
                NG372.Font = Enum.Font.ArialBold
                NG372.FontSize = Enum.FontSize.Size10
                NG372.Text = dCD('255')
                NG372.TextColor3 = Color3.new(1, 1, 1)
                NG372.Parent = NG368
                NG373 = Instance.new('Frame')
                NG373.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG373.BackgroundTransparency = 1
                NG373.BorderSizePixel = 0
                NG373.Name = dCD('OVachg')
                NG373.Position = UDim2.new(0, 109, 0, 0)
                NG373.Size = UDim2.new(0, 38, 0, 25)
                NG373.Parent = NG361
                NG374 = Instance.new('TextButton')
                NG374.Active = true
                NG374.AutoButtonColor = false
                NG374.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG374.BackgroundTransparency = 1
                NG374.BorderSizePixel = 0
                NG374.Selectable = true
                NG374.Size = UDim2.new(1, 0, 1, 0)
                NG374.Style = Enum.ButtonStyle.Custom
                NG374.ZIndex = 2
                NG374.Font = Enum.Font.Legacy
                NG374.FontSize = Enum.FontSize.Size8
                NG374.Text = dCD('')
                NG374.Parent = NG373
                NG375 = Instance.new('ImageLabel')
                NG375.Active = false
                NG375.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG375.BackgroundTransparency = 1
                NG375.BorderSizePixel = 0
                NG375.Name = dCD('Onpxtebhaq')
                NG375.Selectable = false
                NG375.Size = UDim2.new(1, 0, 1, 0)
                NG375.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG375.Parent = NG373
                NG376 = Instance.new('Frame')
                NG376.BackgroundColor3 = Color3.new(0, 0, 1)
                NG376.BorderSizePixel = 0
                NG376.Name = dCD('FryrpgrqVaqvpngbe')
                NG376.Position = UDim2.new(0, 3, 0, -2)
                NG376.Size = UDim2.new(1, -3, 0, 2)
                NG376.Parent = NG373
                NG377 = Instance.new('TextBox')
                NG377.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG377.BackgroundTransparency = 1
                NG377.BorderSizePixel = 0
                NG377.Position = UDim2.new(0, 5, 0, 0)
                NG377.Size = UDim2.new(1, -10, 1, 0)
                NG377.Font = Enum.Font.ArialBold
                NG377.FontSize = Enum.FontSize.Size10
                NG377.Text = dCD('255')
                NG377.TextColor3 = Color3.new(1, 1, 1)
                NG377.Parent = NG373
                NG378 = Instance.new('ImageButton')
                NG378.BackgroundColor3 = Color3.new(0, 0, 0)
                NG378.BackgroundTransparency = 0.40000000596046
                NG378.BorderSizePixel = 0
                NG378.Name = dCD('UFICvpxre')
                NG378.Position = UDim2.new(0, 160, 0, -2)
                NG378.Size = UDim2.new(0, 27, 0, 27)
                NG378.Style = Enum.ButtonStyle.Custom
                NG378.ZIndex = 2
                NG378.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141313631')
                NG378.Parent = NG361
                NG379 = Instance.new('Frame')
                NG379.BackgroundColor3 = Color3.new(0, 0, 0)
                NG379.BackgroundTransparency = 0.75
                NG379.BorderSizePixel = 0
                NG379.Name = dCD('Funqbj')
                NG379.Position = UDim2.new(0, 0, 1, -2)
                NG379.Size = UDim2.new(1, 0, 0, 2)
                NG379.Parent = NG378
                NG380 = Instance.new('Frame')
                NG380.BackgroundColor3 = Color3.new(0, 0, 0)
                NG380.BackgroundTransparency = 0.5
                NG380.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG380.BorderSizePixel = 0
                NG380.Name = dCD('Frcnengbe')
                NG380.Position = UDim2.new(0, 151, 0, 4)
                NG380.Size = UDim2.new(0, 4, 0, 4)
                NG380.Parent = NG361
                NG381 = Instance.new('Frame')
                NG381.BackgroundColor3 = Color3.new(0, 0, 0)
                NG381.BackgroundTransparency = 0.5
                NG381.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG381.BorderSizePixel = 0
                NG381.Name = dCD('Frcnengbe')
                NG381.Position = UDim2.new(0, 151, 0, 16)
                NG381.Size = UDim2.new(0, 4, 0, 4)
                NG381.Parent = NG361
                NG382 = Instance.new('Frame')
                NG382.BackgroundColor3 = Color3.new(0, 0, 0)
                NG382.BackgroundTransparency = 0.5
                NG382.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG382.BorderSizePixel = 0
                NG382.Name = dCD('Frcnengbe')
                NG382.Position = UDim2.new(0, 151, 0, 10)
                NG382.Size = UDim2.new(0, 4, 0, 4)
                NG382.Parent = NG361
                NG383 = Instance.new('Frame')
                NG383.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG383.BackgroundTransparency = 1
                NG383.BorderSizePixel = 0
                NG383.Name = dCD('OevtugarffBcgvba')
                NG383.Position = UDim2.new(0, 0, 0, 45)
                NG383.Size = UDim2.new(1, 0, 0, 25)
                NG383.Parent = NG360
                NG384 = Instance.new('TextLabel')
                NG384.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG384.BackgroundTransparency = 1
                NG384.BorderSizePixel = 0
                NG384.Name = dCD('Ynory')
                NG384.Size = UDim2.new(0, 70, 0, 25)
                NG384.Font = Enum.Font.ArialBold
                NG384.FontSize = Enum.FontSize.Size10
                NG384.Text = dCD('Oevtugarff')
                NG384.TextColor3 = Color3.new(1, 1, 1)
                NG384.TextStrokeTransparency = 0
                NG384.TextWrapped = true
                NG384.TextXAlignment = Enum.TextXAlignment.Left
                NG384.Parent = NG383
                NG385 = Instance.new('Frame')
                NG385.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG385.BackgroundTransparency = 1
                NG385.BorderSizePixel = 0
                NG385.Name = dCD('Vachg')
                NG385.Position = UDim2.new(0, 60, 0, 0)
                NG385.Size = UDim2.new(0, 38, 0, 25)
                NG385.Parent = NG383
                NG386 = Instance.new('TextButton')
                NG386.Active = true
                NG386.AutoButtonColor = false
                NG386.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG386.BackgroundTransparency = 1
                NG386.BorderSizePixel = 0
                NG386.Selectable = true
                NG386.Size = UDim2.new(1, 0, 1, 0)
                NG386.Style = Enum.ButtonStyle.Custom
                NG386.ZIndex = 2
                NG386.Font = Enum.Font.Legacy
                NG386.FontSize = Enum.FontSize.Size8
                NG386.Text = dCD('')
                NG386.Parent = NG385
                NG387 = Instance.new('ImageLabel')
                NG387.Active = false
                NG387.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG387.BackgroundTransparency = 1
                NG387.BorderSizePixel = 0
                NG387.Name = dCD('Onpxtebhaq')
                NG387.Selectable = false
                NG387.Size = UDim2.new(1, 0, 1, 0)
                NG387.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG387.Parent = NG385
                NG388 = Instance.new('Frame')
                NG388.BorderSizePixel = 0
                NG388.Name = dCD('FryrpgrqVaqvpngbe')
                NG388.Position = UDim2.new(0, 3, 0, -2)
                NG388.Size = UDim2.new(1, -3, 0, 2)
                NG388.Parent = NG385
                NG389 = Instance.new('TextBox')
                NG389.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG389.BackgroundTransparency = 1
                NG389.BorderSizePixel = 0
                NG389.Position = UDim2.new(0, 5, 0, 0)
                NG389.Size = UDim2.new(1, -10, 1, 0)
                NG389.Font = Enum.Font.ArialBold
                NG389.FontSize = Enum.FontSize.Size10
                NG389.Text = dCD('1')
                NG389.TextColor3 = Color3.new(1, 1, 1)
                NG389.Parent = NG385
                NG390 = Instance.new('Frame')
                NG390.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG390.BackgroundTransparency = 1
                NG390.BorderSizePixel = 0
                NG390.Name = dCD('EnatrBcgvba')
                NG390.Position = UDim2.new(0, 110, 0, 45)
                NG390.Size = UDim2.new(1, 0, 0, 25)
                NG390.Parent = NG360
                NG391 = Instance.new('TextLabel')
                NG391.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG391.BackgroundTransparency = 1
                NG391.BorderSizePixel = 0
                NG391.Name = dCD('Ynory')
                NG391.Size = UDim2.new(0, 70, 0, 25)
                NG391.Font = Enum.Font.ArialBold
                NG391.FontSize = Enum.FontSize.Size10
                NG391.Text = dCD('Enatr')
                NG391.TextColor3 = Color3.new(1, 1, 1)
                NG391.TextStrokeTransparency = 0
                NG391.TextWrapped = true
                NG391.TextXAlignment = Enum.TextXAlignment.Left
                NG391.Parent = NG390
                NG392 = Instance.new('Frame')
                NG392.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG392.BackgroundTransparency = 1
                NG392.BorderSizePixel = 0
                NG392.Name = dCD('Vachg')
                NG392.Position = UDim2.new(0, 40, 0, 0)
                NG392.Size = UDim2.new(0, 38, 0, 25)
                NG392.Parent = NG390
                NG393 = Instance.new('TextButton')
                NG393.Active = true
                NG393.AutoButtonColor = false
                NG393.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG393.BackgroundTransparency = 1
                NG393.BorderSizePixel = 0
                NG393.Selectable = true
                NG393.Size = UDim2.new(1, 0, 1, 0)
                NG393.Style = Enum.ButtonStyle.Custom
                NG393.ZIndex = 2
                NG393.Font = Enum.Font.Legacy
                NG393.FontSize = Enum.FontSize.Size8
                NG393.Text = dCD('')
                NG393.Parent = NG392
                NG394 = Instance.new('ImageLabel')
                NG394.Active = false
                NG394.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG394.BackgroundTransparency = 1
                NG394.BorderSizePixel = 0
                NG394.Name = dCD('Onpxtebhaq')
                NG394.Selectable = false
                NG394.Size = UDim2.new(1, 0, 1, 0)
                NG394.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG394.Parent = NG392
                NG395 = Instance.new('Frame')
                NG395.BorderSizePixel = 0
                NG395.Name = dCD('FryrpgrqVaqvpngbe')
                NG395.Position = UDim2.new(0, 3, 0, -2)
                NG395.Size = UDim2.new(1, -3, 0, 2)
                NG395.Parent = NG392
                NG396 = Instance.new('TextBox')
                NG396.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG396.BackgroundTransparency = 1
                NG396.BorderSizePixel = 0
                NG396.Position = UDim2.new(0, 5, 0, 0)
                NG396.Size = UDim2.new(1, -10, 1, 0)
                NG396.Font = Enum.Font.ArialBold
                NG396.FontSize = Enum.FontSize.Size10
                NG396.Text = dCD('16')
                NG396.TextColor3 = Color3.new(1, 1, 1)
                NG396.Parent = NG392
                NG397 = Instance.new('Frame')
                NG397.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG397.BackgroundTransparency = 1
                NG397.BorderSizePixel = 0
                NG397.Name = dCD('FunqbjfBcgvba')
                NG397.Position = UDim2.new(0, 0, 0, 80)
                NG397.Size = UDim2.new(0, 0, 0, 0)
                NG397.Parent = NG360
                NG398 = Instance.new('TextLabel')
                NG398.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG398.BackgroundTransparency = 1
                NG398.BorderSizePixel = 0
                NG398.Name = dCD('Ynory')
                NG398.Size = UDim2.new(0, 50, 0, 25)
                NG398.Font = Enum.Font.ArialBold
                NG398.FontSize = Enum.FontSize.Size10
                NG398.Text = dCD('Funqbjf')
                NG398.TextColor3 = Color3.new(1, 1, 1)
                NG398.TextStrokeTransparency = 0
                NG398.TextWrapped = true
                NG398.TextXAlignment = Enum.TextXAlignment.Left
                NG398.Parent = NG397
                NG399 = Instance.new('Frame')
                NG399.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG399.BackgroundTransparency = 1
                NG399.BorderSizePixel = 0
                NG399.Name = dCD('Ba')
                NG399.Position = UDim2.new(0, 55, 0, 0)
                NG399.Size = UDim2.new(0, 45, 0, 25)
                NG399.Parent = NG397
                NG400 = Instance.new('Frame')
                NG400.BackgroundTransparency = 1
                NG400.BorderSizePixel = 0
                NG400.Name = dCD('FryrpgrqVaqvpngbe')
                NG400.Position = UDim2.new(0, 4, 0, -2)
                NG400.Size = UDim2.new(1, -4, 0, 2)
                NG400.Parent = NG399
                NG401 = Instance.new('TextButton')
                NG401.Active = true
                NG401.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG401.BackgroundTransparency = 1
                NG401.BorderSizePixel = 0
                NG401.Name = dCD('Ohggba')
                NG401.Position = UDim2.new(0, 5, 0, 0)
                NG401.Selectable = true
                NG401.Size = UDim2.new(1, -10, 1, 0)
                NG401.Style = Enum.ButtonStyle.Custom
                NG401.ZIndex = 2
                NG401.Font = Enum.Font.Legacy
                NG401.FontSize = Enum.FontSize.Size8
                NG401.Text = dCD('')
                NG401.TextTransparency = 1
                NG401.Parent = NG399
                NG402 = Instance.new('ImageLabel')
                NG402.Active = false
                NG402.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG402.BackgroundTransparency = 1
                NG402.BorderSizePixel = 0
                NG402.Name = dCD('Onpxtebhaq')
                NG402.Selectable = false
                NG402.Size = UDim2.new(1, 0, 1, 0)
                NG402.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG402.Parent = NG399
                NG403 = Instance.new('TextLabel')
                NG403.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG403.BackgroundTransparency = 1
                NG403.BorderSizePixel = 0
                NG403.Name = dCD('Ynory')
                NG403.Size = UDim2.new(1, 0, 1, 0)
                NG403.Font = Enum.Font.ArialBold
                NG403.FontSize = Enum.FontSize.Size10
                NG403.Text = dCD('BA')
                NG403.TextColor3 = Color3.new(1, 1, 1)
                NG403.Parent = NG399
                NG404 = Instance.new('Frame')
                NG404.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG404.BackgroundTransparency = 1
                NG404.BorderSizePixel = 0
                NG404.Name = dCD('Bss')
                NG404.Position = UDim2.new(0, 100, 0, 0)
                NG404.Size = UDim2.new(0, 45, 0, 25)
                NG404.Parent = NG397
                NG405 = Instance.new('Frame')
                NG405.BackgroundTransparency = 1
                NG405.BorderSizePixel = 0
                NG405.Name = dCD('FryrpgrqVaqvpngbe')
                NG405.Position = UDim2.new(0, 4, 0, -2)
                NG405.Size = UDim2.new(1, -4, 0, 2)
                NG405.Parent = NG404
                NG406 = Instance.new('TextButton')
                NG406.Active = true
                NG406.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG406.BackgroundTransparency = 1
                NG406.BorderSizePixel = 0
                NG406.Name = dCD('Ohggba')
                NG406.Position = UDim2.new(0, 5, 0, 0)
                NG406.Selectable = true
                NG406.Size = UDim2.new(1, -10, 1, 0)
                NG406.Style = Enum.ButtonStyle.Custom
                NG406.ZIndex = 2
                NG406.Font = Enum.Font.Legacy
                NG406.FontSize = Enum.FontSize.Size8
                NG406.Text = dCD('')
                NG406.TextTransparency = 1
                NG406.Parent = NG404
                NG407 = Instance.new('ImageLabel')
                NG407.Active = false
                NG407.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG407.BackgroundTransparency = 1
                NG407.BorderSizePixel = 0
                NG407.Name = dCD('Onpxtebhaq')
                NG407.Selectable = false
                NG407.Size = UDim2.new(1, 0, 1, 0)
                NG407.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG407.Parent = NG404
                NG408 = Instance.new('TextLabel')
                NG408.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG408.BackgroundTransparency = 1
                NG408.BorderSizePixel = 0
                NG408.Name = dCD('Ynory')
                NG408.Size = UDim2.new(1, 0, 1, 0)
                NG408.Font = Enum.Font.ArialBold
                NG408.FontSize = Enum.FontSize.Size10
                NG408.Text = dCD('BSS')
                NG408.TextColor3 = Color3.new(1, 1, 1)
                NG408.Parent = NG404
                NG409 = Instance.new('Frame')
                NG409.Active = true
                NG409.BackgroundColor3 = Color3.new(0, 0, 0)
                NG409.BackgroundTransparency = 0.89999997615814
                NG409.BorderSizePixel = 0
                NG409.Name = dCD('OGUFIPbybeCvpxre')
                NG409.Position = UDim2.new(0, 220, 0, 116)
                NG409.Size = UDim2.new(0, 250, 0, 380)
                NG409.Draggable = true
                NG409.Parent = NG1
                NG410 = Instance.new('ImageButton')
                NG410.BorderColor3 = Color3.new(0.207843, 0.207843, 0.207843)
                NG410.Name = dCD('UhrFnghengvba')
                NG410.Position = UDim2.new(0, 10, 0, 10)
                NG410.Size = UDim2.new(0, 209, 0, 200)
                NG410.Style = Enum.ButtonStyle.Custom
                NG410.Image = dCD('uggc://jjj.eboybk.pbz/nffrg?vq=141066192')
                NG410.Parent = NG409
                NG411 = Instance.new('ImageLabel')
                NG411.Active = false
                NG411.BackgroundTransparency = 1
                NG411.BorderSizePixel = 0
                NG411.Name = dCD('Phefbe')
                NG411.Position = UDim2.new(0, -8, 0, 194)
                NG411.Selectable = false
                NG411.Size = UDim2.new(0, 16, 0, 16)
                NG411.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141186650')
                NG411.Parent = NG410
                NG412 = Instance.new('ImageButton')
                NG412.BackgroundTransparency = 1
                NG412.BorderColor3 = Color3.new(0.207843, 0.207843, 0.207843)
                NG412.BorderSizePixel = 0
                NG412.Name = dCD('Inyhr')
                NG412.Position = UDim2.new(0, 229, 0, 10)
                NG412.Size = UDim2.new(0, 13, 0, 200)
                NG412.Style = Enum.ButtonStyle.Custom
                NG412.ZIndex = 2
                NG412.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141066196')
                NG412.Parent = NG409
                NG413 = Instance.new('Frame')
                NG413.BorderSizePixel = 0
                NG413.Name = dCD('PbybeOT')
                NG413.Size = UDim2.new(1, 0, 1, 0)
                NG413.Parent = NG412
                NG414 = Instance.new('ImageLabel')
                NG414.Active = false
                NG414.BackgroundTransparency = 1
                NG414.BorderSizePixel = 0
                NG414.Name = dCD('Phefbe')
                NG414.Position = UDim2.new(0, -2, 0, -8)
                NG414.Selectable = false
                NG414.Size = UDim2.new(0, 16, 0, 16)
                NG414.ZIndex = 2
                NG414.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141186650')
                NG414.Parent = NG412
                NG415 = Instance.new('Frame')
                NG415.BackgroundTransparency = 1
                NG415.BorderSizePixel = 0
                NG415.Name = dCD('UhrBcgvba')
                NG415.Position = UDim2.new(0, 10, 0, 218)
                NG415.Size = UDim2.new(1, -25, 0, 34)
                NG415.Parent = NG409
                NG416 = Instance.new('TextLabel')
                NG416.BackgroundTransparency = 1
                NG416.BorderSizePixel = 0
                NG416.Name = dCD('Ynory')
                NG416.Position = UDim2.new(0, 15, 0, 0)
                NG416.Size = UDim2.new(0, 100, 1, 0)
                NG416.Font = Enum.Font.SourceSansBold
                NG416.FontSize = Enum.FontSize.Size18
                NG416.Text = dCD('Uhr')
                NG416.TextColor3 = Color3.new(1, 1, 1)
                NG416.TextStrokeTransparency = 0.5
                NG416.TextWrapped = true
                NG416.TextXAlignment = Enum.TextXAlignment.Left
                NG416.Parent = NG415
                NG417 = Instance.new('Frame')
                NG417.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG417.BackgroundTransparency = 1
                NG417.BorderSizePixel = 0
                NG417.Name = dCD('Vachg')
                NG417.Position = UDim2.new(0, 55, 0, 4)
                NG417.Size = UDim2.new(0, 50, 0, 26)
                NG417.Parent = NG415
                NG418 = Instance.new('TextButton')
                NG418.Active = true
                NG418.AutoButtonColor = false
                NG418.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG418.BackgroundTransparency = 1
                NG418.BorderSizePixel = 0
                NG418.Selectable = true
                NG418.Size = UDim2.new(1, 0, 1, 0)
                NG418.Style = Enum.ButtonStyle.Custom
                NG418.ZIndex = 2
                NG418.Font = Enum.Font.Legacy
                NG418.FontSize = Enum.FontSize.Size8
                NG418.Text = dCD('')
                NG418.Parent = NG417
                NG419 = Instance.new('ImageLabel')
                NG419.Active = false
                NG419.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG419.BackgroundTransparency = 1
                NG419.BorderSizePixel = 0
                NG419.Name = dCD('Onpxtebhaq')
                NG419.Selectable = false
                NG419.Size = UDim2.new(1, 0, 1, 0)
                NG419.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG419.Parent = NG417
                NG420 = Instance.new('TextBox')
                NG420.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG420.BackgroundTransparency = 1
                NG420.BorderSizePixel = 0
                NG420.Position = UDim2.new(0, 5, 0, 0)
                NG420.Size = UDim2.new(1, -10, 1, 0)
                NG420.Font = Enum.Font.ArialBold
                NG420.FontSize = Enum.FontSize.Size10
                NG420.Text = dCD('360')
                NG420.TextColor3 = Color3.new(1, 1, 1)
                NG420.Parent = NG417
                NG421 = Instance.new('Frame')
                NG421.BorderSizePixel = 0
                NG421.Name = dCD('One')
                NG421.Position = UDim2.new(0, 0, 0, 2)
                NG421.Size = UDim2.new(0, 3, 1, -4)
                NG421.Parent = NG415
                NG422 = Instance.new('Frame')
                NG422.BackgroundColor3 = Color3.new(0, 0, 0)
                NG422.BackgroundTransparency = 0.89999997615814
                NG422.BorderSizePixel = 0
                NG422.Name = dCD('Funqbj')
                NG422.Position = UDim2.new(0, 0, 1, -3)
                NG422.Size = UDim2.new(1, 0, 0, 3)
                NG422.Parent = NG421
                NG423 = Instance.new('Frame')
                NG423.BackgroundTransparency = 1
                NG423.BorderSizePixel = 0
                NG423.Name = dCD('FnghengvbaBcgvba')
                NG423.Position = UDim2.new(0, 10, 0, 255)
                NG423.Size = UDim2.new(1, -25, 0, 34)
                NG423.Parent = NG409
                NG424 = Instance.new('TextLabel')
                NG424.BackgroundTransparency = 1
                NG424.BorderSizePixel = 0
                NG424.Name = dCD('Ynory')
                NG424.Position = UDim2.new(0, 15, 0, 0)
                NG424.Size = UDim2.new(0, 100, 1, 0)
                NG424.Font = Enum.Font.SourceSansBold
                NG424.FontSize = Enum.FontSize.Size18
                NG424.Text = dCD('Fnghengvba')
                NG424.TextColor3 = Color3.new(1, 1, 1)
                NG424.TextStrokeTransparency = 0.5
                NG424.TextWrapped = true
                NG424.TextXAlignment = Enum.TextXAlignment.Left
                NG424.Parent = NG423
                NG425 = Instance.new('Frame')
                NG425.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG425.BackgroundTransparency = 1
                NG425.BorderSizePixel = 0
                NG425.Name = dCD('Vachg')
                NG425.Position = UDim2.new(0, 100, 0, 4)
                NG425.Size = UDim2.new(0, 50, 0, 26)
                NG425.Parent = NG423
                NG426 = Instance.new('TextButton')
                NG426.Active = true
                NG426.AutoButtonColor = false
                NG426.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG426.BackgroundTransparency = 1
                NG426.BorderSizePixel = 0
                NG426.Selectable = true
                NG426.Size = UDim2.new(1, 0, 1, 0)
                NG426.Style = Enum.ButtonStyle.Custom
                NG426.ZIndex = 2
                NG426.Font = Enum.Font.Legacy
                NG426.FontSize = Enum.FontSize.Size8
                NG426.Text = dCD('')
                NG426.Parent = NG425
                NG427 = Instance.new('ImageLabel')
                NG427.Active = false
                NG427.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG427.BackgroundTransparency = 1
                NG427.BorderSizePixel = 0
                NG427.Name = dCD('Onpxtebhaq')
                NG427.Selectable = false
                NG427.Size = UDim2.new(1, 0, 1, 0)
                NG427.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG427.Parent = NG425
                NG428 = Instance.new('TextBox')
                NG428.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG428.BackgroundTransparency = 1
                NG428.BorderSizePixel = 0
                NG428.Position = UDim2.new(0, 5, 0, 0)
                NG428.Size = UDim2.new(1, -10, 1, 0)
                NG428.Font = Enum.Font.ArialBold
                NG428.FontSize = Enum.FontSize.Size10
                NG428.Text = dCD('100%')
                NG428.TextColor3 = Color3.new(1, 1, 1)
                NG428.Parent = NG425
                NG429 = Instance.new('Frame')
                NG429.BorderSizePixel = 0
                NG429.Name = dCD('One')
                NG429.Position = UDim2.new(0, 0, 0, 2)
                NG429.Size = UDim2.new(0, 3, 1, -4)
                NG429.Parent = NG423
                NG430 = Instance.new('Frame')
                NG430.BackgroundColor3 = Color3.new(0, 0, 0)
                NG430.BackgroundTransparency = 0.89999997615814
                NG430.BorderSizePixel = 0
                NG430.Name = dCD('Funqbj')
                NG430.Position = UDim2.new(0, 0, 1, -3)
                NG430.Size = UDim2.new(1, 0, 0, 3)
                NG430.Parent = NG429
                NG431 = Instance.new('Frame')
                NG431.BackgroundTransparency = 1
                NG431.BorderSizePixel = 0
                NG431.Name = dCD('InyhrBcgvba')
                NG431.Position = UDim2.new(0, 10, 0, 292)
                NG431.Size = UDim2.new(1, -25, 0, 34)
                NG431.Parent = NG409
                NG432 = Instance.new('TextLabel')
                NG432.BackgroundTransparency = 1
                NG432.BorderSizePixel = 0
                NG432.Name = dCD('Ynory')
                NG432.Position = UDim2.new(0, 15, 0, 0)
                NG432.Size = UDim2.new(0, 100, 1, 0)
                NG432.Font = Enum.Font.SourceSansBold
                NG432.FontSize = Enum.FontSize.Size18
                NG432.Text = dCD('Oevtugarff')
                NG432.TextColor3 = Color3.new(1, 1, 1)
                NG432.TextStrokeTransparency = 0.5
                NG432.TextWrapped = true
                NG432.TextXAlignment = Enum.TextXAlignment.Left
                NG432.Parent = NG431
                NG433 = Instance.new('Frame')
                NG433.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG433.BackgroundTransparency = 1
                NG433.BorderSizePixel = 0
                NG433.Name = dCD('Vachg')
                NG433.Position = UDim2.new(0, 100, 0, 4)
                NG433.Size = UDim2.new(0, 50, 0, 26)
                NG433.Parent = NG431
                NG434 = Instance.new('TextButton')
                NG434.Active = true
                NG434.AutoButtonColor = false
                NG434.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG434.BackgroundTransparency = 1
                NG434.BorderSizePixel = 0
                NG434.Selectable = true
                NG434.Size = UDim2.new(1, 0, 1, 0)
                NG434.Style = Enum.ButtonStyle.Custom
                NG434.ZIndex = 2
                NG434.Font = Enum.Font.Legacy
                NG434.FontSize = Enum.FontSize.Size8
                NG434.Text = dCD('')
                NG434.Parent = NG433
                NG435 = Instance.new('ImageLabel')
                NG435.Active = false
                NG435.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG435.BackgroundTransparency = 1
                NG435.BorderSizePixel = 0
                NG435.Name = dCD('Onpxtebhaq')
                NG435.Selectable = false
                NG435.Size = UDim2.new(1, 0, 1, 0)
                NG435.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG435.Parent = NG433
                NG436 = Instance.new('TextBox')
                NG436.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG436.BackgroundTransparency = 1
                NG436.BorderSizePixel = 0
                NG436.Position = UDim2.new(0, 5, 0, 0)
                NG436.Size = UDim2.new(1, -10, 1, 0)
                NG436.Font = Enum.Font.ArialBold
                NG436.FontSize = Enum.FontSize.Size10
                NG436.Text = dCD('100%')
                NG436.TextColor3 = Color3.new(1, 1, 1)
                NG436.Parent = NG433
                NG437 = Instance.new('Frame')
                NG437.BorderSizePixel = 0
                NG437.Name = dCD('One')
                NG437.Position = UDim2.new(0, 0, 0, 2)
                NG437.Size = UDim2.new(0, 3, 1, -4)
                NG437.Parent = NG431
                NG438 = Instance.new('Frame')
                NG438.BackgroundColor3 = Color3.new(0, 0, 0)
                NG438.BackgroundTransparency = 0.89999997615814
                NG438.BorderSizePixel = 0
                NG438.Name = dCD('Funqbj')
                NG438.Position = UDim2.new(0, 0, 1, -3)
                NG438.Size = UDim2.new(1, 0, 0, 3)
                NG438.Parent = NG437
                NG439 = Instance.new('Frame')
                NG439.BorderSizePixel = 0
                NG439.Name = dCD('PbybeQvfcynl')
                NG439.Position = UDim2.new(0, 180, 0, 220)
                NG439.Size = UDim2.new(0, 60, 0, 103)
                NG439.Parent = NG409
                NG440 = Instance.new('Frame')
                NG440.BackgroundColor3 = Color3.new(0, 0, 0)
                NG440.BackgroundTransparency = 0.89999997615814
                NG440.BorderSizePixel = 0
                NG440.Name = dCD('Funqbj')
                NG440.Position = UDim2.new(0, 0, 1, -3)
                NG440.Size = UDim2.new(1, 0, 0, 3)
                NG440.Parent = NG439
                NG441 = Instance.new('TextButton')
                NG441.Active = true
                NG441.BackgroundColor3 = Color3.new(1, 0.635294, 0.184314)
                NG441.BorderSizePixel = 0
                NG441.Name = dCD('BxOhggba')
                NG441.Position = UDim2.new(0, 10, 0, 335)
                NG441.Selectable = true
                NG441.Size = UDim2.new(0, 140, 0, 30)
                NG441.Style = Enum.ButtonStyle.Custom
                NG441.ZIndex = 2
                NG441.Font = Enum.Font.SourceSansBold
                NG441.FontSize = Enum.FontSize.Size18
                NG441.Text = dCD('Bx')
                NG441.TextColor3 = Color3.new(1, 1, 1)
                NG441.TextStrokeTransparency = 0.85000002384186
                NG441.Parent = NG409
                NG442 = Instance.new('Frame')
                NG442.BackgroundColor3 = Color3.new(0.8, 0.505882, 0.145098)
                NG442.BorderSizePixel = 0
                NG442.Name = dCD('Oriry')
                NG442.Position = UDim2.new(0, 0, 1, -2)
                NG442.Size = UDim2.new(1, 0, 0, 2)
                NG442.ZIndex = 2
                NG442.Parent = NG441
                NG443 = Instance.new('TextButton')
                NG443.Active = true
                NG443.BackgroundColor3 = Color3.new(1, 0.635294, 0.184314)
                NG443.BackgroundTransparency = 0.60000002384186
                NG443.BorderSizePixel = 0
                NG443.Name = dCD('PnapryOhggba')
                NG443.Position = UDim2.new(0, 160, 0, 335)
                NG443.Selectable = true
                NG443.Size = UDim2.new(0, 80, 0, 30)
                NG443.Style = Enum.ButtonStyle.Custom
                NG443.ZIndex = 2
                NG443.Font = Enum.Font.SourceSansBold
                NG443.FontSize = Enum.FontSize.Size18
                NG443.Text = dCD('Pnapry')
                NG443.TextColor3 = Color3.new(1, 1, 1)
                NG443.TextStrokeTransparency = 0.85000002384186
                NG443.Parent = NG409
                NG444 = Instance.new('Frame')
                NG444.BackgroundColor3 = Color3.new(0.8, 0.505882, 0.145098)
                NG444.BackgroundTransparency = 0.60000002384186
                NG444.BorderSizePixel = 0
                NG444.Name = dCD('Oriry')
                NG444.Position = UDim2.new(0, 0, 1, -2)
                NG444.Size = UDim2.new(1, 0, 0, 2)
                NG444.ZIndex = 2
                NG444.Parent = NG443
                NG445 = Instance.new('Frame')
                NG445.Active = true
                NG445.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG445.BackgroundTransparency = 1
                NG445.BorderSizePixel = 0
                NG445.Name = dCD('OGZrfuGbbyTHV')
                NG445.Position = UDim2.new(0, 0, 0, 172)
                NG445.Size = UDim2.new(0, 200, 0, 55)
                NG445.Draggable = true
                NG445.Parent = NG1
                NG446 = Instance.new('Frame')
                NG446.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG446.BackgroundTransparency = 1
                NG446.BorderSizePixel = 0
                NG446.Name = dCD('Gvgyr')
                NG446.Size = UDim2.new(1, 0, 0, 20)
                NG446.Parent = NG445
                NG447 = Instance.new('Frame')
                NG447.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG447.BorderSizePixel = 0
                NG447.Name = dCD('PbybeOne')
                NG447.Position = UDim2.new(0, 5, 0, -3)
                NG447.Size = UDim2.new(1, -5, 0, 2)
                NG447.Parent = NG446
                NG448 = Instance.new('TextLabel')
                NG448.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG448.BackgroundTransparency = 1
                NG448.BorderSizePixel = 0
                NG448.Name = dCD('Ynory')
                NG448.Position = UDim2.new(0, 10, 0, 1)
                NG448.Size = UDim2.new(1, -10, 1, 0)
                NG448.Font = Enum.Font.ArialBold
                NG448.FontSize = Enum.FontSize.Size10
                NG448.Text = dCD('ZRFU GBBY')
                NG448.TextColor3 = Color3.new(1, 1, 1)
                NG448.TextStrokeTransparency = 0
                NG448.TextWrapped = true
                NG448.TextXAlignment = Enum.TextXAlignment.Left
                NG448.Parent = NG446
                NG449 = Instance.new('TextLabel')
                NG449.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG449.BackgroundTransparency = 1
                NG449.BorderSizePixel = 0
                NG449.Name = dCD('S3KFvtangher')
                NG449.Position = UDim2.new(0, 10, 0, 1)
                NG449.Size = UDim2.new(1, -10, 1, 0)
                NG449.Font = Enum.Font.ArialBold
                NG449.FontSize = Enum.FontSize.Size14
                NG449.Text = dCD('S3K')
                NG449.TextColor3 = Color3.new(1, 1, 1)
                NG449.TextStrokeTransparency = 0.89999997615814
                NG449.TextWrapped = true
                NG449.TextXAlignment = Enum.TextXAlignment.Right
                NG449.Parent = NG446
                NG450 = Instance.new('Frame')
                NG450.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG450.BackgroundTransparency = 1
                NG450.BorderSizePixel = 0
                NG450.Name = dCD('GlcrBcgvba')
                NG450.Position = UDim2.new(0, 14, 0, 65)
                NG450.Size = UDim2.new(1, -14, 0, 25)
                NG450.Visible = false
                NG450.Parent = NG445
                NG451 = Instance.new('TextLabel')
                NG451.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG451.BackgroundTransparency = 1
                NG451.BorderSizePixel = 0
                NG451.Name = dCD('Ynory')
                NG451.Size = UDim2.new(0, 30, 0, 25)
                NG451.Font = Enum.Font.ArialBold
                NG451.FontSize = Enum.FontSize.Size10
                NG451.Text = dCD('Glcr')
                NG451.TextColor3 = Color3.new(1, 1, 1)
                NG451.TextStrokeTransparency = 0
                NG451.TextWrapped = true
                NG451.TextXAlignment = Enum.TextXAlignment.Left
                NG451.Parent = NG450
                NG452 = Instance.new('Frame')
                NG452.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG452.BackgroundTransparency = 1
                NG452.BorderSizePixel = 0
                NG452.Name = dCD('FpnyrBcgvba')
                NG452.Position = UDim2.new(0, 0, 0, 100)
                NG452.Size = UDim2.new(0, 0, 0, 0)
                NG452.Visible = false
                NG452.Parent = NG445
                NG453 = Instance.new('TextLabel')
                NG453.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG453.BackgroundTransparency = 1
                NG453.BorderSizePixel = 0
                NG453.Name = dCD('Ynory')
                NG453.Position = UDim2.new(0, 14, 0, 0)
                NG453.Size = UDim2.new(0, 70, 0, 25)
                NG453.Font = Enum.Font.ArialBold
                NG453.FontSize = Enum.FontSize.Size10
                NG453.Text = dCD('Fpnyr')
                NG453.TextColor3 = Color3.new(1, 1, 1)
                NG453.TextStrokeTransparency = 0
                NG453.TextWrapped = true
                NG453.TextXAlignment = Enum.TextXAlignment.Left
                NG453.Parent = NG452
                NG454 = Instance.new('Frame')
                NG454.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG454.BackgroundTransparency = 1
                NG454.BorderSizePixel = 0
                NG454.Name = dCD('KVachg')
                NG454.Position = UDim2.new(0, 55, 0, 0)
                NG454.Size = UDim2.new(0, 45, 0, 25)
                NG454.Parent = NG452
                NG455 = Instance.new('TextButton')
                NG455.Active = true
                NG455.AutoButtonColor = false
                NG455.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG455.BackgroundTransparency = 1
                NG455.BorderSizePixel = 0
                NG455.Selectable = true
                NG455.Size = UDim2.new(1, 0, 1, 0)
                NG455.Style = Enum.ButtonStyle.Custom
                NG455.ZIndex = 2
                NG455.Font = Enum.Font.Legacy
                NG455.FontSize = Enum.FontSize.Size8
                NG455.Text = dCD('')
                NG455.Parent = NG454
                NG456 = Instance.new('ImageLabel')
                NG456.Active = false
                NG456.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG456.BackgroundTransparency = 1
                NG456.BorderSizePixel = 0
                NG456.Name = dCD('Onpxtebhaq')
                NG456.Selectable = false
                NG456.Size = UDim2.new(1, 0, 1, 0)
                NG456.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG456.Parent = NG454
                NG457 = Instance.new('Frame')
                NG457.BorderSizePixel = 0
                NG457.Name = dCD('FryrpgrqVaqvpngbe')
                NG457.Position = UDim2.new(0, 5, 0, -2)
                NG457.Size = UDim2.new(1, -4, 0, 2)
                NG457.Parent = NG454
                NG458 = Instance.new('TextBox')
                NG458.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG458.BackgroundTransparency = 1
                NG458.BorderSizePixel = 0
                NG458.Position = UDim2.new(0, 5, 0, 0)
                NG458.Size = UDim2.new(1, -10, 1, 0)
                NG458.Font = Enum.Font.ArialBold
                NG458.FontSize = Enum.FontSize.Size10
                NG458.Text = dCD('1')
                NG458.TextColor3 = Color3.new(1, 1, 1)
                NG458.Parent = NG454
                NG459 = Instance.new('Frame')
                NG459.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG459.BackgroundTransparency = 1
                NG459.BorderSizePixel = 0
                NG459.Name = dCD('LVachg')
                NG459.Position = UDim2.new(0, 100, 0, 0)
                NG459.Size = UDim2.new(0, 45, 0, 25)
                NG459.Parent = NG452
                NG460 = Instance.new('TextButton')
                NG460.Active = true
                NG460.AutoButtonColor = false
                NG460.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG460.BackgroundTransparency = 1
                NG460.BorderSizePixel = 0
                NG460.Selectable = true
                NG460.Size = UDim2.new(1, 0, 1, 0)
                NG460.Style = Enum.ButtonStyle.Custom
                NG460.ZIndex = 2
                NG460.Font = Enum.Font.Legacy
                NG460.FontSize = Enum.FontSize.Size8
                NG460.Text = dCD('')
                NG460.Parent = NG459
                NG461 = Instance.new('ImageLabel')
                NG461.Active = false
                NG461.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG461.BackgroundTransparency = 1
                NG461.BorderSizePixel = 0
                NG461.Name = dCD('Onpxtebhaq')
                NG461.Selectable = false
                NG461.Size = UDim2.new(1, 0, 1, 0)
                NG461.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG461.Parent = NG459
                NG462 = Instance.new('Frame')
                NG462.BorderSizePixel = 0
                NG462.Name = dCD('FryrpgrqVaqvpngbe')
                NG462.Position = UDim2.new(0, 5, 0, -2)
                NG462.Size = UDim2.new(1, -4, 0, 2)
                NG462.Parent = NG459
                NG463 = Instance.new('TextBox')
                NG463.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG463.BackgroundTransparency = 1
                NG463.BorderSizePixel = 0
                NG463.Position = UDim2.new(0, 5, 0, 0)
                NG463.Size = UDim2.new(1, -10, 1, 0)
                NG463.Font = Enum.Font.ArialBold
                NG463.FontSize = Enum.FontSize.Size10
                NG463.Text = dCD('1')
                NG463.TextColor3 = Color3.new(1, 1, 1)
                NG463.Parent = NG459
                NG464 = Instance.new('Frame')
                NG464.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG464.BackgroundTransparency = 1
                NG464.BorderSizePixel = 0
                NG464.Name = dCD('MVachg')
                NG464.Position = UDim2.new(0, 145, 0, 0)
                NG464.Size = UDim2.new(0, 45, 0, 25)
                NG464.Parent = NG452
                NG465 = Instance.new('TextButton')
                NG465.Active = true
                NG465.AutoButtonColor = false
                NG465.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG465.BackgroundTransparency = 1
                NG465.BorderSizePixel = 0
                NG465.Selectable = true
                NG465.Size = UDim2.new(1, 0, 1, 0)
                NG465.Style = Enum.ButtonStyle.Custom
                NG465.ZIndex = 2
                NG465.Font = Enum.Font.Legacy
                NG465.FontSize = Enum.FontSize.Size8
                NG465.Text = dCD('')
                NG465.Parent = NG464
                NG466 = Instance.new('ImageLabel')
                NG466.Active = false
                NG466.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG466.BackgroundTransparency = 1
                NG466.BorderSizePixel = 0
                NG466.Name = dCD('Onpxtebhaq')
                NG466.Selectable = false
                NG466.Size = UDim2.new(1, 0, 1, 0)
                NG466.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG466.Parent = NG464
                NG467 = Instance.new('Frame')
                NG467.BorderSizePixel = 0
                NG467.Name = dCD('FryrpgrqVaqvpngbe')
                NG467.Position = UDim2.new(0, 5, 0, -2)
                NG467.Size = UDim2.new(1, -4, 0, 2)
                NG467.Parent = NG464
                NG468 = Instance.new('TextBox')
                NG468.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG468.BackgroundTransparency = 1
                NG468.BorderSizePixel = 0
                NG468.Position = UDim2.new(0, 5, 0, 0)
                NG468.Size = UDim2.new(1, -10, 1, 0)
                NG468.Font = Enum.Font.ArialBold
                NG468.FontSize = Enum.FontSize.Size10
                NG468.Text = dCD('1')
                NG468.TextColor3 = Color3.new(1, 1, 1)
                NG468.Parent = NG464
                NG469 = Instance.new('Frame')
                NG469.BackgroundColor3 = Color3.new(0, 0, 0)
                NG469.BackgroundTransparency = 1
                NG469.BorderSizePixel = 0
                NG469.Name = dCD('NqqOhggba')
                NG469.Position = UDim2.new(0, 10, 0, 30)
                NG469.Size = UDim2.new(1, -10, 0, 20)
                NG469.Visible = false
                NG469.Parent = NG445
                NG470 = Instance.new('TextButton')
                NG470.Active = true
                NG470.BackgroundColor3 = Color3.new(0, 0, 0)
                NG470.BackgroundTransparency = 0.44999998807907
                NG470.BorderSizePixel = 0
                NG470.Name = dCD('Ohggba')
                NG470.Selectable = true
                NG470.Size = UDim2.new(1, 0, 1, 0)
                NG470.Style = Enum.ButtonStyle.Custom
                NG470.Font = Enum.Font.ArialBold
                NG470.FontSize = Enum.FontSize.Size10
                NG470.Text = dCD('NQQ ZRFU')
                NG470.TextColor3 = Color3.new(1, 1, 1)
                NG470.TextStrokeTransparency = 0.80000001192093
                NG470.Parent = NG469
                NG471 = Instance.new('Frame')
                NG471.BackgroundColor3 = Color3.new(0, 0, 0)
                NG471.BackgroundTransparency = 0.30000001192093
                NG471.BorderSizePixel = 0
                NG471.Name = dCD('Funqbj')
                NG471.Position = UDim2.new(0, 0, 1, 0)
                NG471.Size = UDim2.new(1, 0, 0, 2)
                NG471.ZIndex = 2
                NG471.Parent = NG469
                NG472 = Instance.new('Frame')
                NG472.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG472.BackgroundTransparency = 1
                NG472.BorderSizePixel = 0
                NG472.Name = dCD('ZrfuVQBcgvba')
                NG472.Position = UDim2.new(0, 14, 0, 135)
                NG472.Size = UDim2.new(1, 0, 0, 25)
                NG472.Visible = false
                NG472.Parent = NG445
                NG473 = Instance.new('TextLabel')
                NG473.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG473.BackgroundTransparency = 1
                NG473.BorderSizePixel = 0
                NG473.Name = dCD('Ynory')
                NG473.Size = UDim2.new(0, 70, 0, 25)
                NG473.Font = Enum.Font.ArialBold
                NG473.FontSize = Enum.FontSize.Size10
                NG473.Text = dCD('Zrfu VQ')
                NG473.TextColor3 = Color3.new(1, 1, 1)
                NG473.TextStrokeTransparency = 0
                NG473.TextWrapped = true
                NG473.TextXAlignment = Enum.TextXAlignment.Left
                NG473.Parent = NG472
                NG474 = Instance.new('TextBox')
                NG474.BackgroundColor3 = Color3.new(0.333333, 0, 0.498039)
                NG474.BackgroundTransparency = 1
                NG474.BorderColor3 = Color3.new(0, 0, 0)
                NG474.BorderSizePixel = 0
                NG474.Position = UDim2.new(0, 60, 0, -1)
                NG474.Size = UDim2.new(0, 80, 0, 18)
                NG474.Font = Enum.Font.SourceSansBold
                NG474.FontSize = Enum.FontSize.Size10
                NG474.Text = dCD('')
                NG474.TextColor3 = Color3.new(1, 1, 1)
                NG474.TextScaled = true
                NG474.TextStrokeTransparency = 0.5
                NG474.TextWrapped = true
                NG474.TextXAlignment = Enum.TextXAlignment.Left
                NG474.Parent = NG472
                NG475 = Instance.new('Frame')
                NG475.BackgroundTransparency = 1
                NG475.BorderSizePixel = 0
                NG475.Name = dCD('GrkgObkObeqre')
                NG475.Position = UDim2.new(0, 56, 0, 17)
                NG475.Size = UDim2.new(0, 85, 0, 3)
                NG475.Parent = NG472
                NG476 = Instance.new('Frame')
                NG476.BackgroundColor3 = Color3.new(0.333333, 0, 0.498039)
                NG476.BorderSizePixel = 0
                NG476.Name = dCD('ObggbzObeqre')
                NG476.Position = UDim2.new(0, 0, 1, -1)
                NG476.Size = UDim2.new(1, 0, 0, 1)
                NG476.Parent = NG475
                NG477 = Instance.new('Frame')
                NG477.BackgroundColor3 = Color3.new(0.333333, 0, 0.498039)
                NG477.BorderSizePixel = 0
                NG477.Name = dCD('YrsgObeqre')
                NG477.Size = UDim2.new(0, 1, 1, 0)
                NG477.Parent = NG475
                NG478 = Instance.new('Frame')
                NG478.BackgroundColor3 = Color3.new(0.333333, 0, 0.498039)
                NG478.BorderSizePixel = 0
                NG478.Name = dCD('EvtugObeqre')
                NG478.Position = UDim2.new(1, -1, 0, 0)
                NG478.Size = UDim2.new(0, 1, 1, 0)
                NG478.Parent = NG475
                NG479 = Instance.new('Frame')
                NG479.BackgroundColor3 = Color3.new(0.333333, 0, 0.498039)
                NG479.BackgroundTransparency = 0.89999997615814
                NG479.BorderSizePixel = 0
                NG479.Name = dCD('GrkgObkOnpxtebhaq')
                NG479.Position = UDim2.new(0, 55, 0, -2)
                NG479.Size = UDim2.new(0, 86, 0, 22)
                NG479.Parent = NG472
                NG480 = Instance.new('TextButton')
                NG480.Active = true
                NG480.BackgroundTransparency = 1
                NG480.BorderSizePixel = 0
                NG480.Position = UDim2.new(0, 60, 0, -1)
                NG480.Selectable = true
                NG480.Size = UDim2.new(0, 80, 0, 18)
                NG480.Style = Enum.ButtonStyle.Custom
                NG480.ZIndex = 2
                NG480.FontSize = Enum.FontSize.Size14
                NG480.Text = dCD('')
                NG480.Parent = NG472
                NG481 = Instance.new('Frame')
                NG481.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG481.BorderSizePixel = 0
                NG481.Name = dCD('ObggbzPbybeOne')
                NG481.Position = UDim2.new(0, 5, 1, -2)
                NG481.Size = UDim2.new(1, 0, 0, 2)
                NG481.Parent = NG445
                NG482 = Instance.new('Frame')
                NG482.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG482.BackgroundTransparency = 1
                NG482.BorderSizePixel = 0
                NG482.Name = dCD('GrkgherVQBcgvba')
                NG482.Position = UDim2.new(0, 14, 0, 165)
                NG482.Size = UDim2.new(1, 0, 0, 25)
                NG482.Visible = false
                NG482.Parent = NG445
                NG483 = Instance.new('TextLabel')
                NG483.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG483.BackgroundTransparency = 1
                NG483.BorderSizePixel = 0
                NG483.Name = dCD('Ynory')
                NG483.Size = UDim2.new(0, 70, 0, 25)
                NG483.Font = Enum.Font.ArialBold
                NG483.FontSize = Enum.FontSize.Size10
                NG483.Text = dCD('Grkgher VQ')
                NG483.TextColor3 = Color3.new(1, 1, 1)
                NG483.TextStrokeTransparency = 0
                NG483.TextWrapped = true
                NG483.TextXAlignment = Enum.TextXAlignment.Left
                NG483.Parent = NG482
                NG484 = Instance.new('TextBox')
                NG484.BackgroundColor3 = Color3.new(0.333333, 0, 0.498039)
                NG484.BackgroundTransparency = 1
                NG484.BorderColor3 = Color3.new(0, 0, 0)
                NG484.BorderSizePixel = 0
                NG484.Position = UDim2.new(0, 65, 0, -1)
                NG484.Size = UDim2.new(0, 80, 0, 18)
                NG484.Font = Enum.Font.SourceSansBold
                NG484.FontSize = Enum.FontSize.Size10
                NG484.Text = dCD('')
                NG484.TextColor3 = Color3.new(1, 1, 1)
                NG484.TextScaled = true
                NG484.TextStrokeTransparency = 0.5
                NG484.TextWrapped = true
                NG484.TextXAlignment = Enum.TextXAlignment.Left
                NG484.Parent = NG482
                NG485 = Instance.new('Frame')
                NG485.BackgroundTransparency = 1
                NG485.BorderSizePixel = 0
                NG485.Name = dCD('GrkgObkObeqre')
                NG485.Position = UDim2.new(0, 61, 0, 17)
                NG485.Size = UDim2.new(0, 85, 0, 3)
                NG485.Parent = NG482
                NG486 = Instance.new('Frame')
                NG486.BackgroundColor3 = Color3.new(0.333333, 0, 0.498039)
                NG486.BorderSizePixel = 0
                NG486.Name = dCD('ObggbzObeqre')
                NG486.Position = UDim2.new(0, 0, 1, -1)
                NG486.Size = UDim2.new(1, 0, 0, 1)
                NG486.Parent = NG485
                NG487 = Instance.new('Frame')
                NG487.BackgroundColor3 = Color3.new(0.333333, 0, 0.498039)
                NG487.BorderSizePixel = 0
                NG487.Name = dCD('YrsgObeqre')
                NG487.Size = UDim2.new(0, 1, 1, 0)
                NG487.Parent = NG485
                NG488 = Instance.new('Frame')
                NG488.BackgroundColor3 = Color3.new(0.333333, 0, 0.498039)
                NG488.BorderSizePixel = 0
                NG488.Name = dCD('EvtugObeqre')
                NG488.Position = UDim2.new(1, -1, 0, 0)
                NG488.Size = UDim2.new(0, 1, 1, 0)
                NG488.Parent = NG485
                NG489 = Instance.new('Frame')
                NG489.BackgroundColor3 = Color3.new(0.333333, 0, 0.498039)
                NG489.BackgroundTransparency = 0.89999997615814
                NG489.BorderSizePixel = 0
                NG489.Name = dCD('GrkgObkOnpxtebhaq')
                NG489.Position = UDim2.new(0, 60, 0, -2)
                NG489.Size = UDim2.new(0, 86, 0, 22)
                NG489.Parent = NG482
                NG490 = Instance.new('TextButton')
                NG490.Active = true
                NG490.BackgroundTransparency = 1
                NG490.BorderSizePixel = 0
                NG490.Position = UDim2.new(0, 65, 0, -1)
                NG490.Selectable = true
                NG490.Size = UDim2.new(0, 80, 0, 18)
                NG490.Style = Enum.ButtonStyle.Custom
                NG490.ZIndex = 2
                NG490.FontSize = Enum.FontSize.Size14
                NG490.Text = dCD('')
                NG490.Parent = NG482
                NG491 = Instance.new('Frame')
                NG491.BackgroundColor3 = Color3.new(0, 0, 0)
                NG491.BackgroundTransparency = 1
                NG491.BorderSizePixel = 0
                NG491.Name = dCD('ErzbirOhggba')
                NG491.Position = UDim2.new(0, 10, 1, -30)
                NG491.Size = UDim2.new(1, -10, 0, 20)
                NG491.Visible = false
                NG491.Parent = NG445
                NG492 = Instance.new('TextButton')
                NG492.Active = true
                NG492.BackgroundColor3 = Color3.new(0, 0, 0)
                NG492.BackgroundTransparency = 0.44999998807907
                NG492.BorderSizePixel = 0
                NG492.Name = dCD('Ohggba')
                NG492.Selectable = true
                NG492.Size = UDim2.new(1, 0, 1, 0)
                NG492.Style = Enum.ButtonStyle.Custom
                NG492.Font = Enum.Font.ArialBold
                NG492.FontSize = Enum.FontSize.Size10
                NG492.Text = dCD('ERZBIR ZRFU')
                NG492.TextColor3 = Color3.new(1, 1, 1)
                NG492.TextStrokeTransparency = 0.80000001192093
                NG492.Parent = NG491
                NG493 = Instance.new('Frame')
                NG493.BackgroundColor3 = Color3.new(0, 0, 0)
                NG493.BackgroundTransparency = 0.30000001192093
                NG493.BorderSizePixel = 0
                NG493.Name = dCD('Funqbj')
                NG493.Position = UDim2.new(0, 0, 1, 0)
                NG493.Size = UDim2.new(1, 0, 0, 2)
                NG493.ZIndex = 2
                NG493.Parent = NG491
                NG494 = Instance.new('Frame')
                NG494.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG494.BackgroundTransparency = 1
                NG494.BorderSizePixel = 0
                NG494.Name = dCD('GvagBcgvba')
                NG494.Position = UDim2.new(0, 0, 0, 200)
                NG494.Size = UDim2.new(0, 0, 0, 0)
                NG494.Visible = false
                NG494.Parent = NG445
                NG495 = Instance.new('TextLabel')
                NG495.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG495.BackgroundTransparency = 1
                NG495.BorderSizePixel = 0
                NG495.Name = dCD('Ynory')
                NG495.Position = UDim2.new(0, 14, 0, 0)
                NG495.Size = UDim2.new(0, 70, 0, 25)
                NG495.Font = Enum.Font.ArialBold
                NG495.FontSize = Enum.FontSize.Size10
                NG495.Text = dCD('Gvag')
                NG495.TextColor3 = Color3.new(1, 1, 1)
                NG495.TextStrokeTransparency = 0
                NG495.TextWrapped = true
                NG495.TextXAlignment = Enum.TextXAlignment.Left
                NG495.Parent = NG494
                NG496 = Instance.new('Frame')
                NG496.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG496.BackgroundTransparency = 1
                NG496.BorderSizePixel = 0
                NG496.Name = dCD('OVachg')
                NG496.Position = UDim2.new(0, 114, 0, 0)
                NG496.Size = UDim2.new(0, 38, 0, 25)
                NG496.Parent = NG494
                NG497 = Instance.new('TextButton')
                NG497.Active = true
                NG497.AutoButtonColor = false
                NG497.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG497.BackgroundTransparency = 1
                NG497.BorderSizePixel = 0
                NG497.Selectable = true
                NG497.Size = UDim2.new(1, 0, 1, 0)
                NG497.Style = Enum.ButtonStyle.Custom
                NG497.ZIndex = 2
                NG497.Font = Enum.Font.Legacy
                NG497.FontSize = Enum.FontSize.Size8
                NG497.Text = dCD('')
                NG497.Parent = NG496
                NG498 = Instance.new('ImageLabel')
                NG498.Active = false
                NG498.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG498.BackgroundTransparency = 1
                NG498.BorderSizePixel = 0
                NG498.Name = dCD('Onpxtebhaq')
                NG498.Selectable = false
                NG498.Size = UDim2.new(1, 0, 1, 0)
                NG498.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG498.Parent = NG496
                NG499 = Instance.new('Frame')
                NG499.BackgroundColor3 = Color3.new(0, 0, 1)
                NG499.BorderSizePixel = 0
                NG499.Name = dCD('FryrpgrqVaqvpngbe')
                NG499.Position = UDim2.new(0, 3, 0, -2)
                NG499.Size = UDim2.new(1, -3, 0, 2)
                NG499.Parent = NG496
                NG500 = Instance.new('TextBox')
                NG500.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG500.BackgroundTransparency = 1
                NG500.BorderSizePixel = 0
                NG500.Position = UDim2.new(0, 5, 0, 0)
                NG500.Size = UDim2.new(1, -10, 1, 0)
                NG500.Font = Enum.Font.ArialBold
                NG500.FontSize = Enum.FontSize.Size10
                NG500.Text = dCD('255')
                NG500.TextColor3 = Color3.new(1, 1, 1)
                NG500.Parent = NG496
                NG501 = Instance.new('Frame')
                NG501.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG501.BackgroundTransparency = 1
                NG501.BorderSizePixel = 0
                NG501.Name = dCD('TVachg')
                NG501.Position = UDim2.new(0, 77, 0, 0)
                NG501.Size = UDim2.new(0, 38, 0, 25)
                NG501.Parent = NG494
                NG502 = Instance.new('TextButton')
                NG502.Active = true
                NG502.AutoButtonColor = false
                NG502.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG502.BackgroundTransparency = 1
                NG502.BorderSizePixel = 0
                NG502.Selectable = true
                NG502.Size = UDim2.new(1, 0, 1, 0)
                NG502.Style = Enum.ButtonStyle.Custom
                NG502.ZIndex = 2
                NG502.Font = Enum.Font.Legacy
                NG502.FontSize = Enum.FontSize.Size8
                NG502.Text = dCD('')
                NG502.Parent = NG501
                NG503 = Instance.new('ImageLabel')
                NG503.Active = false
                NG503.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG503.BackgroundTransparency = 1
                NG503.BorderSizePixel = 0
                NG503.Name = dCD('Onpxtebhaq')
                NG503.Selectable = false
                NG503.Size = UDim2.new(1, 0, 1, 0)
                NG503.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG503.Parent = NG501
                NG504 = Instance.new('Frame')
                NG504.BackgroundColor3 = Color3.new(0, 1, 0)
                NG504.BorderSizePixel = 0
                NG504.Name = dCD('FryrpgrqVaqvpngbe')
                NG504.Position = UDim2.new(0, 3, 0, -2)
                NG504.Size = UDim2.new(1, -3, 0, 2)
                NG504.Parent = NG501
                NG505 = Instance.new('TextBox')
                NG505.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG505.BackgroundTransparency = 1
                NG505.BorderSizePixel = 0
                NG505.Position = UDim2.new(0, 5, 0, 0)
                NG505.Size = UDim2.new(1, -10, 1, 0)
                NG505.Font = Enum.Font.ArialBold
                NG505.FontSize = Enum.FontSize.Size10
                NG505.Text = dCD('255')
                NG505.TextColor3 = Color3.new(1, 1, 1)
                NG505.Parent = NG501
                NG506 = Instance.new('Frame')
                NG506.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG506.BackgroundTransparency = 1
                NG506.BorderSizePixel = 0
                NG506.Name = dCD('EVachg')
                NG506.Position = UDim2.new(0, 40, 0, 0)
                NG506.Size = UDim2.new(0, 38, 0, 25)
                NG506.Parent = NG494
                NG507 = Instance.new('TextButton')
                NG507.Active = true
                NG507.AutoButtonColor = false
                NG507.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG507.BackgroundTransparency = 1
                NG507.BorderSizePixel = 0
                NG507.Selectable = true
                NG507.Size = UDim2.new(1, 0, 1, 0)
                NG507.Style = Enum.ButtonStyle.Custom
                NG507.ZIndex = 2
                NG507.Font = Enum.Font.Legacy
                NG507.FontSize = Enum.FontSize.Size8
                NG507.Text = dCD('')
                NG507.Parent = NG506
                NG508 = Instance.new('ImageLabel')
                NG508.Active = false
                NG508.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG508.BackgroundTransparency = 1
                NG508.BorderSizePixel = 0
                NG508.Name = dCD('Onpxtebhaq')
                NG508.Selectable = false
                NG508.Size = UDim2.new(1, 0, 1, 0)
                NG508.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG508.Parent = NG506
                NG509 = Instance.new('Frame')
                NG509.BackgroundColor3 = Color3.new(1, 0, 0)
                NG509.BorderSizePixel = 0
                NG509.Name = dCD('FryrpgrqVaqvpngbe')
                NG509.Position = UDim2.new(0, 3, 0, -2)
                NG509.Size = UDim2.new(1, -3, 0, 2)
                NG509.Parent = NG506
                NG510 = Instance.new('TextBox')
                NG510.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG510.BackgroundTransparency = 1
                NG510.BorderSizePixel = 0
                NG510.Position = UDim2.new(0, 5, 0, 0)
                NG510.Size = UDim2.new(1, -10, 1, 0)
                NG510.Font = Enum.Font.ArialBold
                NG510.FontSize = Enum.FontSize.Size10
                NG510.Text = dCD('255')
                NG510.TextColor3 = Color3.new(1, 1, 1)
                NG510.Parent = NG506
                NG511 = Instance.new('Frame')
                NG511.BackgroundColor3 = Color3.new(0, 0, 0)
                NG511.BackgroundTransparency = 0.5
                NG511.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG511.BorderSizePixel = 0
                NG511.Name = dCD('Frcnengbe')
                NG511.Position = UDim2.new(0, 156, 0, 4)
                NG511.Size = UDim2.new(0, 4, 0, 4)
                NG511.Parent = NG494
                NG512 = Instance.new('Frame')
                NG512.BackgroundColor3 = Color3.new(0, 0, 0)
                NG512.BackgroundTransparency = 0.5
                NG512.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG512.BorderSizePixel = 0
                NG512.Name = dCD('Frcnengbe')
                NG512.Position = UDim2.new(0, 156, 0, 16)
                NG512.Size = UDim2.new(0, 4, 0, 4)
                NG512.Parent = NG494
                NG513 = Instance.new('Frame')
                NG513.BackgroundColor3 = Color3.new(0, 0, 0)
                NG513.BackgroundTransparency = 0.5
                NG513.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG513.BorderSizePixel = 0
                NG513.Name = dCD('Frcnengbe')
                NG513.Position = UDim2.new(0, 156, 0, 10)
                NG513.Size = UDim2.new(0, 4, 0, 4)
                NG513.Parent = NG494
                NG514 = Instance.new('ImageButton')
                NG514.BackgroundColor3 = Color3.new(0, 0, 0)
                NG514.BackgroundTransparency = 0.40000000596046
                NG514.BorderSizePixel = 0
                NG514.Name = dCD('UFICvpxre')
                NG514.Position = UDim2.new(0, 165, 0, -2)
                NG514.Size = UDim2.new(0, 27, 0, 27)
                NG514.Style = Enum.ButtonStyle.Custom
                NG514.ZIndex = 2
                NG514.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141313631')
                NG514.Parent = NG494
                NG515 = Instance.new('Frame')
                NG515.BackgroundColor3 = Color3.new(0, 0, 0)
                NG515.BackgroundTransparency = 0.75
                NG515.BorderSizePixel = 0
                NG515.Name = dCD('Funqbj')
                NG515.Position = UDim2.new(0, 0, 1, -2)
                NG515.Size = UDim2.new(1, 0, 0, 2)
                NG515.Parent = NG514
                NG516 = Instance.new('TextLabel')
                NG516.BackgroundTransparency = 1
                NG516.BorderSizePixel = 0
                NG516.Name = dCD('FryrpgAbgr')
                NG516.Position = UDim2.new(0, 10, 0, 27)
                NG516.Size = UDim2.new(1, -10, 0, 15)
                NG516.FontSize = Enum.FontSize.Size14
                NG516.Text = dCD('Fryrpg fbzrguvat gb hfr guvf gbby.')
                NG516.TextColor3 = Color3.new(1, 1, 1)
                NG516.TextScaled = true
                NG516.TextStrokeTransparency = 0.5
                NG516.TextWrapped = true
                NG516.TextXAlignment = Enum.TextXAlignment.Left
                NG516.Parent = NG445
                NG517 = Instance.new('Frame')
                NG517.Active = true
                NG517.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG517.BackgroundTransparency = 1
                NG517.BorderSizePixel = 0
                NG517.Name = dCD('OGZbirGbbyTHV')
                NG517.Position = UDim2.new(0, 0, 0, 280)
                NG517.Size = UDim2.new(0, 245, 0, 90)
                NG517.Draggable = true
                NG517.Parent = NG1
                NG518 = Instance.new('Frame')
                NG518.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG518.BackgroundTransparency = 1
                NG518.BorderSizePixel = 0
                NG518.Name = dCD('Punatrf')
                NG518.Position = UDim2.new(0, 5, 0, 100)
                NG518.Size = UDim2.new(1, -5, 0, 20)
                NG518.Parent = NG517
                NG519 = Instance.new('TextLabel')
                NG519.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG519.BackgroundTransparency = 1
                NG519.BorderSizePixel = 0
                NG519.Name = dCD('Grkg')
                NG519.Position = UDim2.new(0, 10, 0, 2)
                NG519.Size = UDim2.new(1, -10, 0, 20)
                NG519.Font = Enum.Font.ArialBold
                NG519.FontSize = Enum.FontSize.Size10
                NG519.Text = dCD('zbirq 0 fghqf')
                NG519.TextColor3 = Color3.new(1, 1, 1)
                NG519.TextStrokeTransparency = 0.5
                NG519.TextWrapped = true
                NG519.TextXAlignment = Enum.TextXAlignment.Right
                NG519.Parent = NG518
                NG520 = Instance.new('Frame')
                NG520.BackgroundColor3 = Color3.new(1, 0.666667, 0)
                NG520.BorderSizePixel = 0
                NG520.Name = dCD('PbybeOne')
                NG520.Size = UDim2.new(1, 0, 0, 2)
                NG520.Parent = NG518
                NG521 = Instance.new('Frame')
                NG521.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG521.BackgroundTransparency = 1
                NG521.BorderSizePixel = 0
                NG521.Name = dCD('Vasb')
                NG521.Position = UDim2.new(0, 5, 0, 100)
                NG521.Size = UDim2.new(1, -5, 0, 60)
                NG521.Visible = false
                NG521.Parent = NG517
                NG522 = Instance.new('Frame')
                NG522.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG522.BackgroundTransparency = 1
                NG522.BorderSizePixel = 0
                NG522.Name = dCD('Pragre')
                NG522.Position = UDim2.new(0, 0, 0, 30)
                NG522.Size = UDim2.new(0, 0, 0, 0)
                NG522.Parent = NG521
                NG523 = Instance.new('Frame')
                NG523.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG523.BackgroundTransparency = 1
                NG523.BorderSizePixel = 0
                NG523.Name = dCD('M')
                NG523.Position = UDim2.new(0, 164, 0, 0)
                NG523.Size = UDim2.new(0, 50, 0, 25)
                NG523.Parent = NG522
                NG524 = Instance.new('ImageLabel')
                NG524.Active = false
                NG524.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG524.BackgroundTransparency = 1
                NG524.BorderSizePixel = 0
                NG524.Name = dCD('Onpxtebhaq')
                NG524.Selectable = false
                NG524.Size = UDim2.new(1, 0, 1, 0)
                NG524.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG524.Parent = NG523
                NG525 = Instance.new('TextButton')
                NG525.Active = true
                NG525.AutoButtonColor = false
                NG525.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG525.BackgroundTransparency = 1
                NG525.BorderSizePixel = 0
                NG525.Selectable = true
                NG525.Size = UDim2.new(1, 0, 1, 0)
                NG525.Style = Enum.ButtonStyle.Custom
                NG525.ZIndex = 2
                NG525.Font = Enum.Font.Legacy
                NG525.FontSize = Enum.FontSize.Size8
                NG525.Text = dCD('')
                NG525.Parent = NG523
                NG526 = Instance.new('TextBox')
                NG526.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG526.BackgroundTransparency = 1
                NG526.BorderSizePixel = 0
                NG526.Position = UDim2.new(0, 5, 0, 0)
                NG526.Size = UDim2.new(1, -10, 1, 0)
                NG526.Font = Enum.Font.ArialBold
                NG526.FontSize = Enum.FontSize.Size10
                NG526.Text = dCD('')
                NG526.TextColor3 = Color3.new(1, 1, 1)
                NG526.Parent = NG523
                NG527 = Instance.new('Frame')
                NG527.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG527.BackgroundTransparency = 1
                NG527.BorderSizePixel = 0
                NG527.Name = dCD('L')
                NG527.Position = UDim2.new(0, 117, 0, 0)
                NG527.Size = UDim2.new(0, 50, 0, 25)
                NG527.Parent = NG522
                NG528 = Instance.new('TextButton')
                NG528.Active = true
                NG528.AutoButtonColor = false
                NG528.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG528.BackgroundTransparency = 1
                NG528.BorderSizePixel = 0
                NG528.Selectable = true
                NG528.Size = UDim2.new(1, 0, 1, 0)
                NG528.Style = Enum.ButtonStyle.Custom
                NG528.ZIndex = 2
                NG528.Font = Enum.Font.Legacy
                NG528.FontSize = Enum.FontSize.Size8
                NG528.Text = dCD('')
                NG528.Parent = NG527
                NG529 = Instance.new('TextBox')
                NG529.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG529.BackgroundTransparency = 1
                NG529.BorderSizePixel = 0
                NG529.Position = UDim2.new(0, 5, 0, 0)
                NG529.Size = UDim2.new(1, -10, 1, 0)
                NG529.Font = Enum.Font.ArialBold
                NG529.FontSize = Enum.FontSize.Size10
                NG529.Text = dCD('')
                NG529.TextColor3 = Color3.new(1, 1, 1)
                NG529.Parent = NG527
                NG530 = Instance.new('ImageLabel')
                NG530.Active = false
                NG530.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG530.BackgroundTransparency = 1
                NG530.BorderSizePixel = 0
                NG530.Name = dCD('Onpxtebhaq')
                NG530.Selectable = false
                NG530.Size = UDim2.new(1, 0, 1, 0)
                NG530.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG530.Parent = NG527
                NG531 = Instance.new('Frame')
                NG531.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG531.BackgroundTransparency = 1
                NG531.BorderSizePixel = 0
                NG531.Name = dCD('K')
                NG531.Position = UDim2.new(0, 70, 0, 0)
                NG531.Size = UDim2.new(0, 50, 0, 25)
                NG531.Parent = NG522
                NG532 = Instance.new('TextBox')
                NG532.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG532.BackgroundTransparency = 1
                NG532.BorderSizePixel = 0
                NG532.Position = UDim2.new(0, 5, 0, 0)
                NG532.Size = UDim2.new(1, -10, 1, 0)
                NG532.Font = Enum.Font.ArialBold
                NG532.FontSize = Enum.FontSize.Size10
                NG532.Text = dCD('')
                NG532.TextColor3 = Color3.new(1, 1, 1)
                NG532.Parent = NG531
                NG533 = Instance.new('TextButton')
                NG533.Active = true
                NG533.AutoButtonColor = false
                NG533.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG533.BackgroundTransparency = 1
                NG533.BorderSizePixel = 0
                NG533.Selectable = true
                NG533.Size = UDim2.new(1, 0, 1, 0)
                NG533.Style = Enum.ButtonStyle.Custom
                NG533.ZIndex = 2
                NG533.Font = Enum.Font.Legacy
                NG533.FontSize = Enum.FontSize.Size8
                NG533.Text = dCD('')
                NG533.Parent = NG531
                NG534 = Instance.new('ImageLabel')
                NG534.Active = false
                NG534.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG534.BackgroundTransparency = 1
                NG534.BorderSizePixel = 0
                NG534.Name = dCD('Onpxtebhaq')
                NG534.Selectable = false
                NG534.Size = UDim2.new(1, 0, 1, 0)
                NG534.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG534.Parent = NG531
                NG535 = Instance.new('TextLabel')
                NG535.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG535.BackgroundTransparency = 1
                NG535.BorderSizePixel = 0
                NG535.Size = UDim2.new(0, 75, 0, 25)
                NG535.Font = Enum.Font.ArialBold
                NG535.FontSize = Enum.FontSize.Size10
                NG535.Text = dCD('Cbfvgvba')
                NG535.TextColor3 = Color3.new(1, 1, 1)
                NG535.TextStrokeTransparency = 0
                NG535.TextWrapped = true
                NG535.Parent = NG522
                NG536 = Instance.new('TextLabel')
                NG536.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG536.BackgroundTransparency = 1
                NG536.BorderSizePixel = 0
                NG536.Name = dCD('Ynory')
                NG536.Position = UDim2.new(0, 10, 0, 2)
                NG536.Size = UDim2.new(1, -10, 0, 20)
                NG536.Font = Enum.Font.ArialBold
                NG536.FontSize = Enum.FontSize.Size10
                NG536.Text = dCD('FRYRPGVBA VASB')
                NG536.TextColor3 = Color3.new(1, 1, 1)
                NG536.TextStrokeTransparency = 0
                NG536.TextWrapped = true
                NG536.TextXAlignment = Enum.TextXAlignment.Left
                NG536.Parent = NG521
                NG537 = Instance.new('Frame')
                NG537.BackgroundColor3 = Color3.new(1, 0.666667, 0)
                NG537.BorderSizePixel = 0
                NG537.Name = dCD('PbybeOne')
                NG537.Size = UDim2.new(1, 0, 0, 2)
                NG537.Parent = NG521
                NG538 = Instance.new('Frame')
                NG538.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG538.BackgroundTransparency = 1
                NG538.BorderSizePixel = 0
                NG538.Name = dCD('VaperzragBcgvba')
                NG538.Position = UDim2.new(0, 0, 0, 65)
                NG538.Size = UDim2.new(0, 0, 0, 0)
                NG538.Parent = NG517
                NG539 = Instance.new('Frame')
                NG539.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG539.BackgroundTransparency = 1
                NG539.BorderSizePixel = 0
                NG539.Name = dCD('Ynory')
                NG539.Size = UDim2.new(0, 75, 0, 25)
                NG539.Parent = NG538
                NG540 = Instance.new('TextLabel')
                NG540.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG540.BackgroundTransparency = 1
                NG540.BorderSizePixel = 0
                NG540.Size = UDim2.new(1, 0, 1, 0)
                NG540.Font = Enum.Font.ArialBold
                NG540.FontSize = Enum.FontSize.Size10
                NG540.Text = dCD('Vaperzrag')
                NG540.TextColor3 = Color3.new(1, 1, 1)
                NG540.TextStrokeTransparency = 0
                NG540.TextWrapped = true
                NG540.Parent = NG539
                NG541 = Instance.new('Frame')
                NG541.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG541.BackgroundTransparency = 1
                NG541.BorderSizePixel = 0
                NG541.Name = dCD('Vaperzrag')
                NG541.Position = UDim2.new(0, 70, 0, 0)
                NG541.Size = UDim2.new(0, 50, 0, 25)
                NG541.Parent = NG538
                NG542 = Instance.new('ImageLabel')
                NG542.Active = false
                NG542.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG542.BackgroundTransparency = 1
                NG542.BorderSizePixel = 0
                NG542.Name = dCD('Onpxtebhaq')
                NG542.Selectable = false
                NG542.Size = UDim2.new(1, 0, 1, 0)
                NG542.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG542.Parent = NG541
                NG543 = Instance.new('TextBox')
                NG543.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG543.BackgroundTransparency = 1
                NG543.BorderSizePixel = 0
                NG543.Position = UDim2.new(0, 5, 0, 0)
                NG543.Size = UDim2.new(1, -10, 1, 0)
                NG543.ZIndex = 2
                NG543.Font = Enum.Font.ArialBold
                NG543.FontSize = Enum.FontSize.Size10
                NG543.Text = dCD('1')
                NG543.TextColor3 = Color3.new(1, 1, 1)
                NG543.Parent = NG541
                NG544 = Instance.new('Frame')
                NG544.BorderSizePixel = 0
                NG544.Name = dCD('FryrpgrqVaqvpngbe')
                NG544.Position = UDim2.new(0, 5, 0, -2)
                NG544.Size = UDim2.new(1, -4, 0, 2)
                NG544.Parent = NG541
                NG545 = Instance.new('Frame')
                NG545.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG545.BackgroundTransparency = 1
                NG545.BorderSizePixel = 0
                NG545.Name = dCD('Gvgyr')
                NG545.Size = UDim2.new(1, 0, 0, 20)
                NG545.Parent = NG517
                NG546 = Instance.new('TextLabel')
                NG546.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG546.BackgroundTransparency = 1
                NG546.BorderSizePixel = 0
                NG546.Name = dCD('S3KFvtangher')
                NG546.Position = UDim2.new(0, 10, 0, 1)
                NG546.Size = UDim2.new(1, -10, 1, 0)
                NG546.Font = Enum.Font.ArialBold
                NG546.FontSize = Enum.FontSize.Size14
                NG546.Text = dCD('S3K')
                NG546.TextColor3 = Color3.new(1, 1, 1)
                NG546.TextStrokeTransparency = 0.89999997615814
                NG546.TextWrapped = true
                NG546.TextXAlignment = Enum.TextXAlignment.Right
                NG546.Parent = NG545
                NG547 = Instance.new('TextLabel')
                NG547.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG547.BackgroundTransparency = 1
                NG547.BorderSizePixel = 0
                NG547.Name = dCD('Ynory')
                NG547.Position = UDim2.new(0, 10, 0, 1)
                NG547.Size = UDim2.new(1, -10, 1, 0)
                NG547.Font = Enum.Font.ArialBold
                NG547.FontSize = Enum.FontSize.Size10
                NG547.Text = dCD('ZBIR GBBY')
                NG547.TextColor3 = Color3.new(1, 1, 1)
                NG547.TextStrokeTransparency = 0
                NG547.TextWrapped = true
                NG547.TextXAlignment = Enum.TextXAlignment.Left
                NG547.Parent = NG545
                NG548 = Instance.new('Frame')
                NG548.BackgroundColor3 = Color3.new(1, 0.666667, 0)
                NG548.BorderSizePixel = 0
                NG548.Name = dCD('PbybeOne')
                NG548.Position = UDim2.new(0, 5, 0, -3)
                NG548.Size = UDim2.new(1, -5, 0, 2)
                NG548.Parent = NG545
                NG549 = Instance.new('Frame')
                NG549.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG549.BackgroundTransparency = 1
                NG549.BorderSizePixel = 0
                NG549.Name = dCD('NkrfBcgvba')
                NG549.Position = UDim2.new(0, 0, 0, 30)
                NG549.Size = UDim2.new(0, 0, 0, 0)
                NG549.Parent = NG517
                NG550 = Instance.new('Frame')
                NG550.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG550.BackgroundTransparency = 1
                NG550.BorderSizePixel = 0
                NG550.Name = dCD('Ynory')
                NG550.Size = UDim2.new(0, 50, 0, 25)
                NG550.Parent = NG549
                NG551 = Instance.new('TextLabel')
                NG551.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG551.BackgroundTransparency = 1
                NG551.BorderSizePixel = 0
                NG551.Size = UDim2.new(1, 0, 1, 0)
                NG551.Font = Enum.Font.ArialBold
                NG551.FontSize = Enum.FontSize.Size10
                NG551.Text = dCD('Nkrf')
                NG551.TextColor3 = Color3.new(1, 1, 1)
                NG551.TextStrokeTransparency = 0
                NG551.TextWrapped = true
                NG551.Parent = NG550
                NG552 = Instance.new('Frame')
                NG552.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG552.BackgroundTransparency = 1
                NG552.BorderSizePixel = 0
                NG552.Name = dCD('Ynfg')
                NG552.Position = UDim2.new(0, 175, 0, 0)
                NG552.Size = UDim2.new(0, 70, 0, 25)
                NG552.Parent = NG549
                NG553 = Instance.new('TextLabel')
                NG553.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG553.BackgroundTransparency = 1
                NG553.BorderSizePixel = 0
                NG553.Name = dCD('Ynory')
                NG553.Size = UDim2.new(1, 0, 1, 0)
                NG553.Font = Enum.Font.ArialBold
                NG553.FontSize = Enum.FontSize.Size10
                NG553.Text = dCD('YNFG')
                NG553.TextColor3 = Color3.new(1, 1, 1)
                NG553.Parent = NG552
                NG554 = Instance.new('ImageLabel')
                NG554.Active = false
                NG554.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG554.BackgroundTransparency = 1
                NG554.BorderSizePixel = 0
                NG554.Name = dCD('Onpxtebhaq')
                NG554.Selectable = false
                NG554.Size = UDim2.new(1, 0, 1, 0)
                NG554.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG554.Parent = NG552
                NG555 = Instance.new('TextButton')
                NG555.Active = true
                NG555.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG555.BackgroundTransparency = 1
                NG555.BorderSizePixel = 0
                NG555.Name = dCD('Ohggba')
                NG555.Position = UDim2.new(0, 5, 0, 0)
                NG555.Selectable = true
                NG555.Size = UDim2.new(1, -10, 1, 0)
                NG555.Style = Enum.ButtonStyle.Custom
                NG555.ZIndex = 2
                NG555.Font = Enum.Font.Legacy
                NG555.FontSize = Enum.FontSize.Size8
                NG555.Text = dCD('')
                NG555.TextTransparency = 1
                NG555.Parent = NG552
                NG556 = Instance.new('Frame')
                NG556.BackgroundTransparency = 1
                NG556.BorderSizePixel = 0
                NG556.Name = dCD('FryrpgrqVaqvpngbe')
                NG556.Position = UDim2.new(0, 6, 0, -2)
                NG556.Size = UDim2.new(1, -5, 0, 2)
                NG556.Parent = NG552
                NG557 = Instance.new('Frame')
                NG557.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG557.BackgroundTransparency = 1
                NG557.BorderSizePixel = 0
                NG557.Name = dCD('Ybpny')
                NG557.Position = UDim2.new(0, 110, 0, 0)
                NG557.Size = UDim2.new(0, 70, 0, 25)
                NG557.Parent = NG549
                NG558 = Instance.new('TextLabel')
                NG558.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG558.BackgroundTransparency = 1
                NG558.BorderSizePixel = 0
                NG558.Name = dCD('Ynory')
                NG558.Size = UDim2.new(1, 0, 1, 0)
                NG558.Font = Enum.Font.ArialBold
                NG558.FontSize = Enum.FontSize.Size10
                NG558.Text = dCD('YBPNY')
                NG558.TextColor3 = Color3.new(1, 1, 1)
                NG558.Parent = NG557
                NG559 = Instance.new('ImageLabel')
                NG559.Active = false
                NG559.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG559.BackgroundTransparency = 1
                NG559.BorderSizePixel = 0
                NG559.Name = dCD('Onpxtebhaq')
                NG559.Selectable = false
                NG559.Size = UDim2.new(1, 0, 1, 0)
                NG559.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG559.Parent = NG557
                NG560 = Instance.new('TextButton')
                NG560.Active = true
                NG560.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG560.BackgroundTransparency = 1
                NG560.BorderSizePixel = 0
                NG560.Name = dCD('Ohggba')
                NG560.Position = UDim2.new(0, 5, 0, 0)
                NG560.Selectable = true
                NG560.Size = UDim2.new(1, -10, 1, 0)
                NG560.Style = Enum.ButtonStyle.Custom
                NG560.ZIndex = 2
                NG560.Font = Enum.Font.Legacy
                NG560.FontSize = Enum.FontSize.Size8
                NG560.Text = dCD('')
                NG560.TextTransparency = 1
                NG560.Parent = NG557
                NG561 = Instance.new('Frame')
                NG561.BackgroundTransparency = 1
                NG561.BorderSizePixel = 0
                NG561.Name = dCD('FryrpgrqVaqvpngbe')
                NG561.Position = UDim2.new(0, 6, 0, -2)
                NG561.Size = UDim2.new(1, -5, 0, 2)
                NG561.Parent = NG557
                NG562 = Instance.new('Frame')
                NG562.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG562.BackgroundTransparency = 1
                NG562.BorderSizePixel = 0
                NG562.Name = dCD('Tybony')
                NG562.Position = UDim2.new(0, 45, 0, 0)
                NG562.Size = UDim2.new(0, 70, 0, 25)
                NG562.Parent = NG549
                NG563 = Instance.new('TextLabel')
                NG563.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG563.BackgroundTransparency = 1
                NG563.BorderSizePixel = 0
                NG563.Name = dCD('Ynory')
                NG563.Size = UDim2.new(1, 0, 1, 0)
                NG563.Font = Enum.Font.ArialBold
                NG563.FontSize = Enum.FontSize.Size10
                NG563.Text = dCD('TYBONY')
                NG563.TextColor3 = Color3.new(1, 1, 1)
                NG563.Parent = NG562
                NG564 = Instance.new('ImageLabel')
                NG564.Active = false
                NG564.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG564.BackgroundTransparency = 1
                NG564.BorderSizePixel = 0
                NG564.Name = dCD('Onpxtebhaq')
                NG564.Selectable = false
                NG564.Size = UDim2.new(1, 0, 1, 0)
                NG564.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127774197')
                NG564.Parent = NG562
                NG565 = Instance.new('TextButton')
                NG565.Active = true
                NG565.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG565.BackgroundTransparency = 1
                NG565.BorderSizePixel = 0
                NG565.Name = dCD('Ohggba')
                NG565.Position = UDim2.new(0, 5, 0, 0)
                NG565.Selectable = true
                NG565.Size = UDim2.new(1, -10, 1, 0)
                NG565.Style = Enum.ButtonStyle.Custom
                NG565.ZIndex = 2
                NG565.Font = Enum.Font.Legacy
                NG565.FontSize = Enum.FontSize.Size8
                NG565.Text = dCD('')
                NG565.TextTransparency = 1
                NG565.Parent = NG562
                NG566 = Instance.new('Frame')
                NG566.BorderSizePixel = 0
                NG566.Name = dCD('FryrpgrqVaqvpngbe')
                NG566.Position = UDim2.new(0, 6, 0, -2)
                NG566.Size = UDim2.new(1, -5, 0, 2)
                NG566.Parent = NG562
                NG567 = Instance.new('Frame')
                NG567.BackgroundTransparency = 1
                NG567.BorderSizePixel = 0
                NG567.Name = dCD('OGFgneghcAbgvsvpngvbaPbagnvare')
                NG567.Position = UDim2.new(0, 210, 0, 0)
                NG567.Size = UDim2.new(0, 300, 0, 0)
                NG567.Draggable = true
                NG567.Parent = NG1
                NG568 = Instance.new('Frame')
                NG568.BackgroundColor3 = Color3.new(0, 0, 0)
                NG568.BackgroundTransparency = 0.69999998807907
                NG568.BorderSizePixel = 0
                NG568.Name = dCD('GbbyHcqngrAbgvsvpngvba')
                NG568.Size = UDim2.new(1, 0, 0, 65)
                NG568.Visible = false
                NG568.Parent = NG567
                NG569 = Instance.new('Frame')
                NG569.BackgroundColor3 = Color3.new(1, 0.666667, 0)
                NG569.BorderSizePixel = 0
                NG569.Name = dCD('One')
                NG569.Size = UDim2.new(1, 0, 0, 2)
                NG569.Parent = NG568
                NG570 = Instance.new('TextButton')
                NG570.Active = true
                NG570.BackgroundColor3 = Color3.new(0, 0, 0)
                NG570.BackgroundTransparency = 0.80000001192093
                NG570.BorderColor3 = Color3.new(0, 0, 0)
                NG570.BorderSizePixel = 0
                NG570.Name = dCD('BXOhggba')
                NG570.Position = UDim2.new(0, 0, 1, -22)
                NG570.Selectable = true
                NG570.Size = UDim2.new(0.5, 0, 0, 22)
                NG570.Style = Enum.ButtonStyle.Custom
                NG570.Font = Enum.Font.Arial
                NG570.FontSize = Enum.FontSize.Size10
                NG570.Text = dCD('TBG VG')
                NG570.TextColor3 = Color3.new(1, 1, 1)
                NG570.Parent = NG568
                NG571 = Instance.new('TextButton')
                NG571.Active = true
                NG571.BackgroundColor3 = Color3.new(0, 0, 0)
                NG571.BackgroundTransparency = 0.80000001192093
                NG571.BorderColor3 = Color3.new(0, 0, 0)
                NG571.BorderSizePixel = 0
                NG571.Name = dCD('UrycOhggba')
                NG571.Position = UDim2.new(0.5, 0, 1, -22)
                NG571.Selectable = true
                NG571.Size = UDim2.new(0.5, 0, 0, 22)
                NG571.Style = Enum.ButtonStyle.Custom
                NG571.Font = Enum.Font.Arial
                NG571.FontSize = Enum.FontSize.Size10
                NG571.Text = dCD('JUNG PNA V QB?')
                NG571.TextColor3 = Color3.new(1, 1, 1)
                NG571.Parent = NG568
                NG572 = Instance.new('Frame')
                NG572.BackgroundColor3 = Color3.new(0, 0, 0)
                NG572.BackgroundTransparency = 0.75
                NG572.BorderSizePixel = 0
                NG572.Name = dCD('OhggbaFrcnengbe')
                NG572.Position = UDim2.new(0.5, 0, 1, -22)
                NG572.Size = UDim2.new(0, 1, 0, 22)
                NG572.Parent = NG568
                NG573 = Instance.new('Frame')
                NG573.BackgroundTransparency = 1
                NG573.BorderSizePixel = 0
                NG573.Name = dCD('Abgvpr')
                NG573.Position = UDim2.new(0, 0, 0, 2)
                NG573.Size = UDim2.new(1, 0, 1, -22)
                NG573.Parent = NG568
                NG574 = Instance.new('TextLabel')
                NG574.BackgroundTransparency = 1
                NG574.BorderColor3 = Color3.new(0, 0, 0)
                NG574.BorderSizePixel = 0
                NG574.Size = UDim2.new(1, 0, 1, 0)
                NG574.Font = Enum.Font.SourceSansBold
                NG574.FontSize = Enum.FontSize.Size14
                NG574.Text = dCD('Guvf irefvba bs Ohvyqvat Gbbyf vf bhgqngrq.')
                NG574.TextColor3 = Color3.new(1, 1, 1)
                NG574.TextStrokeTransparency = 0.80000001192093
                NG574.TextWrapped = true
                NG574.Parent = NG573
                NG575 = Instance.new('IntValue')
                NG575.Value = 65
                NG575.Parent = NG573
                NG576 = Instance.new('Frame')
                NG576.BackgroundTransparency = 1
                NG576.BorderSizePixel = 0
                NG576.Name = dCD('Uryc')
                NG576.Position = UDim2.new(0, 0, 0, 2)
                NG576.Size = UDim2.new(1, 0, 1, -22)
                NG576.Visible = false
                NG576.Parent = NG568
                NG577 = Instance.new('TextLabel')
                NG577.BackgroundTransparency = 1
                NG577.BorderColor3 = Color3.new(0, 0, 0)
                NG577.BorderSizePixel = 0
                NG577.Position = UDim2.new(0, 20, 0, 0)
                NG577.Size = UDim2.new(1, -20, 1, 0)
                NG577.Font = Enum.Font.SourceSansBold
                NG577.FontSize = Enum.FontSize.Size14
                NG577.Text = dCD('Bja guvf cynpr? Fvzcyl ervafreg gur Ohvyqvat Gbbyf zbqry.')
                NG577.TextColor3 = Color3.new(1, 1, 1)
                NG577.TextStrokeTransparency = 0.80000001192093
                NG577.TextWrapped = true
                NG577.TextXAlignment = Enum.TextXAlignment.Left
                NG577.Parent = NG576
                NG578 = Instance.new('IntValue')
                NG578.Value = 80
                NG578.Parent = NG576
                NG579 = Instance.new('TextLabel')
                NG579.BackgroundTransparency = 1
                NG579.BorderColor3 = Color3.new(0, 0, 0)
                NG579.BorderSizePixel = 0
                NG579.Position = UDim2.new(0, 60, 0, 7)
                NG579.Size = UDim2.new(1, -20, 1, 0)
                NG579.FontSize = Enum.FontSize.Size14
                NG579.Text = dCD('Bgurejvfr, gryy gur bjare gb qb gur nobir.')
                NG579.TextColor3 = Color3.new(1, 1, 1)
                NG579.TextStrokeTransparency = 0.80000001192093
                NG579.TextWrapped = true
                NG579.TextXAlignment = Enum.TextXAlignment.Left
                NG579.Parent = NG576
                NG580 = Instance.new('Frame')
                NG580.BackgroundColor3 = Color3.new(0, 0, 0)
                NG580.BackgroundTransparency = 0.69999998807907
                NG580.BorderSizePixel = 0
                NG580.Name = dCD('FbybJneavat')
                NG580.Size = UDim2.new(1, 0, 0, 80)
                NG580.Visible = false
                NG580.Parent = NG567
                NG581 = Instance.new('Frame')
                NG581.BackgroundColor3 = Color3.new(1, 0, 0.0156863)
                NG581.BorderSizePixel = 0
                NG581.Name = dCD('One')
                NG581.Size = UDim2.new(1, 0, 0, 2)
                NG581.Parent = NG580
                NG582 = Instance.new('TextButton')
                NG582.Active = true
                NG582.BackgroundColor3 = Color3.new(0, 0, 0)
                NG582.BackgroundTransparency = 0.80000001192093
                NG582.BorderColor3 = Color3.new(0, 0, 0)
                NG582.BorderSizePixel = 0
                NG582.Name = dCD('BXOhggba')
                NG582.Position = UDim2.new(0, 0, 1, -22)
                NG582.Selectable = true
                NG582.Size = UDim2.new(0.5, 0, 0, 22)
                NG582.Style = Enum.ButtonStyle.Custom
                NG582.Font = Enum.Font.Arial
                NG582.FontSize = Enum.FontSize.Size10
                NG582.Text = dCD('TBG VG')
                NG582.TextColor3 = Color3.new(1, 1, 1)
                NG582.Parent = NG580
                NG583 = Instance.new('TextButton')
                NG583.Active = true
                NG583.BackgroundColor3 = Color3.new(0, 0, 0)
                NG583.BackgroundTransparency = 0.80000001192093
                NG583.BorderColor3 = Color3.new(0, 0, 0)
                NG583.BorderSizePixel = 0
                NG583.Name = dCD('UrycOhggba')
                NG583.Position = UDim2.new(0.5, 0, 1, -22)
                NG583.Selectable = true
                NG583.Size = UDim2.new(0.5, 0, 0, 22)
                NG583.Style = Enum.ButtonStyle.Custom
                NG583.Font = Enum.Font.Arial
                NG583.FontSize = Enum.FontSize.Size10
                NG583.Text = dCD('JUNG PNA V QB?')
                NG583.TextColor3 = Color3.new(1, 1, 1)
                NG583.Parent = NG580
                NG584 = Instance.new('Frame')
                NG584.BackgroundColor3 = Color3.new(0, 0, 0)
                NG584.BackgroundTransparency = 0.75
                NG584.BorderSizePixel = 0
                NG584.Name = dCD('OhggbaFrcnengbe')
                NG584.Position = UDim2.new(0.5, 0, 1, -22)
                NG584.Size = UDim2.new(0, 1, 0, 22)
                NG584.Parent = NG580
                NG585 = Instance.new('Frame')
                NG585.BackgroundTransparency = 1
                NG585.BorderSizePixel = 0
                NG585.Name = dCD('Abgvpr')
                NG585.Position = UDim2.new(0, 0, 0, 2)
                NG585.Size = UDim2.new(1, 0, 1, -22)
                NG585.Parent = NG580
                NG586 = Instance.new('TextLabel')
                NG586.BackgroundTransparency = 1
                NG586.BorderColor3 = Color3.new(0, 0, 0)
                NG586.BorderSizePixel = 0
                NG586.Position = UDim2.new(0, 10, 0, 0)
                NG586.Size = UDim2.new(1, -20, 1, 0)
                NG586.Font = Enum.Font.SourceSansBold
                NG586.FontSize = Enum.FontSize.Size14
                NG586.Text = dCD(
[[Fbzr srngherf ner abg ninvynoyr ba ohvyq zbqr be qhevat fbyb grfgvat, vapyhqvat rkcbegvat.]])
                NG586.TextColor3 = Color3.new(1, 1, 1)
                NG586.TextStrokeTransparency = 0.80000001192093
                NG586.TextWrapped = true
                NG586.Parent = NG585
                NG587 = Instance.new('IntValue')
                NG587.Value = 80
                NG587.Parent = NG585
                NG588 = Instance.new('Frame')
                NG588.BackgroundTransparency = 1
                NG588.BorderSizePixel = 0
                NG588.Name = dCD('Uryc')
                NG588.Position = UDim2.new(0, 0, 0, 2)
                NG588.Size = UDim2.new(1, 0, 1, -22)
                NG588.Visible = false
                NG588.Parent = NG580
                NG589 = Instance.new('TextLabel')
                NG589.BackgroundTransparency = 1
                NG589.BorderColor3 = Color3.new(0, 0, 0)
                NG589.BorderSizePixel = 0
                NG589.Position = UDim2.new(0, 10, 0, 0)
                NG589.Size = UDim2.new(1, -20, 1, 0)
                NG589.Font = Enum.Font.SourceSansBold
                NG589.FontSize = Enum.FontSize.Size14
                NG589.Text = dCD(
[[Sbe nyy srngherf gb or ninvynoyr, lbh fubhyq or va n tnzr freire (n erthyne tnzr, be crefbany ohvyqvat freire). Nygreangviryl, lbh pbhyq hfr gur Fghqvb cyhtva irefvba bs Ohvyqvat Gbbyf.]])
                NG589.TextColor3 = Color3.new(1, 1, 1)
                NG589.TextStrokeTransparency = 0.80000001192093
                NG589.TextWrapped = true
                NG589.Parent = NG588
                NG590 = Instance.new('IntValue')
                NG590.Value = 110
                NG590.Parent = NG588
                NG591 = Instance.new('Frame')
                NG591.BackgroundColor3 = Color3.new(0, 0, 0)
                NG591.BackgroundTransparency = 0.69999998807907
                NG591.BorderSizePixel = 0
                NG591.Name = dCD('CyhtvaHcqngrAbgvsvpngvba')
                NG591.Size = UDim2.new(1, 0, 0, 65)
                NG591.Visible = false
                NG591.Parent = NG567
                NG592 = Instance.new('Frame')
                NG592.BackgroundColor3 = Color3.new(1, 0.666667, 0)
                NG592.BorderSizePixel = 0
                NG592.Name = dCD('One')
                NG592.Size = UDim2.new(1, 0, 0, 2)
                NG592.Parent = NG591
                NG593 = Instance.new('TextButton')
                NG593.Active = true
                NG593.BackgroundColor3 = Color3.new(0, 0, 0)
                NG593.BackgroundTransparency = 0.80000001192093
                NG593.BorderColor3 = Color3.new(0, 0, 0)
                NG593.BorderSizePixel = 0
                NG593.Name = dCD('BXOhggba')
                NG593.Position = UDim2.new(0, 0, 1, -22)
                NG593.Selectable = true
                NG593.Size = UDim2.new(0.5, 0, 0, 22)
                NG593.Style = Enum.ButtonStyle.Custom
                NG593.Font = Enum.Font.Arial
                NG593.FontSize = Enum.FontSize.Size10
                NG593.Text = dCD('TBG VG')
                NG593.TextColor3 = Color3.new(1, 1, 1)
                NG593.Parent = NG591
                NG594 = Instance.new('TextButton')
                NG594.Active = true
                NG594.BackgroundColor3 = Color3.new(0, 0, 0)
                NG594.BackgroundTransparency = 0.80000001192093
                NG594.BorderColor3 = Color3.new(0, 0, 0)
                NG594.BorderSizePixel = 0
                NG594.Name = dCD('UrycOhggba')
                NG594.Position = UDim2.new(0.5, 0, 1, -22)
                NG594.Selectable = true
                NG594.Size = UDim2.new(0.5, 0, 0, 22)
                NG594.Style = Enum.ButtonStyle.Custom
                NG594.Font = Enum.Font.Arial
                NG594.FontSize = Enum.FontSize.Size10
                NG594.Text = dCD('JUNG PNA V QB?')
                NG594.TextColor3 = Color3.new(1, 1, 1)
                NG594.Parent = NG591
                NG595 = Instance.new('Frame')
                NG595.BackgroundColor3 = Color3.new(0, 0, 0)
                NG595.BackgroundTransparency = 0.75
                NG595.BorderSizePixel = 0
                NG595.Name = dCD('OhggbaFrcnengbe')
                NG595.Position = UDim2.new(0.5, 0, 1, -22)
                NG595.Size = UDim2.new(0, 1, 0, 22)
                NG595.Parent = NG591
                NG596 = Instance.new('Frame')
                NG596.BackgroundTransparency = 1
                NG596.BorderSizePixel = 0
                NG596.Name = dCD('Abgvpr')
                NG596.Position = UDim2.new(0, 0, 0, 2)
                NG596.Size = UDim2.new(1, 0, 1, -22)
                NG596.Parent = NG591
                NG597 = Instance.new('TextLabel')
                NG597.BackgroundTransparency = 1
                NG597.BorderColor3 = Color3.new(0, 0, 0)
                NG597.BorderSizePixel = 0
                NG597.Size = UDim2.new(1, 0, 1, 0)
                NG597.Font = Enum.Font.SourceSansBold
                NG597.FontSize = Enum.FontSize.Size14
                NG597.Text = dCD('Guvf irefvba bs Ohvyqvat Gbbyf vf bhgqngrq.')
                NG597.TextColor3 = Color3.new(1, 1, 1)
                NG597.TextStrokeTransparency = 0.80000001192093
                NG597.TextWrapped = true
                NG597.Parent = NG596
                NG598 = Instance.new('IntValue')
                NG598.Value = 65
                NG598.Parent = NG596
                NG599 = Instance.new('Frame')
                NG599.BackgroundTransparency = 1
                NG599.BorderSizePixel = 0
                NG599.Name = dCD('Uryc')
                NG599.Position = UDim2.new(0, 0, 0, 2)
                NG599.Size = UDim2.new(1, 0, 1, -22)
                NG599.Visible = false
                NG599.Parent = NG591
                NG600 = Instance.new('TextLabel')
                NG600.BackgroundTransparency = 1
                NG600.BorderColor3 = Color3.new(0, 0, 0)
                NG600.BorderSizePixel = 0
                NG600.Position = UDim2.new(0, 10, 0, 0)
                NG600.Size = UDim2.new(1, -20, 1, 0)
                NG600.Font = Enum.Font.SourceSansBold
                NG600.FontSize = Enum.FontSize.Size14
                NG600.Text = dCD(
[[Tb gb Gbbyf > Znantr Cyhtvaf be Cyhtvaf > Znantr Cyhtvaf gb hcqngr cyhtvaf  :)]])
                NG600.TextColor3 = Color3.new(1, 1, 1)
                NG600.TextStrokeTransparency = 0.80000001192093
                NG600.TextWrapped = true
                NG600.Parent = NG599
                NG601 = Instance.new('IntValue')
                NG601.Value = 80
                NG601.Parent = NG599
                NG602 = Instance.new('Frame')
                NG602.BackgroundColor3 = Color3.new(0, 0, 0)
                NG602.BackgroundTransparency = 0.69999998807907
                NG602.BorderSizePixel = 0
                NG602.Name = dCD('UggcQvfnoyrqJneavat')
                NG602.Size = UDim2.new(1, 0, 0, 80)
                NG602.Visible = false
                NG602.Parent = NG567
                NG603 = Instance.new('Frame')
                NG603.BackgroundColor3 = Color3.new(1, 0, 0.0156863)
                NG603.BorderSizePixel = 0
                NG603.Name = dCD('One')
                NG603.Size = UDim2.new(1, 0, 0, 2)
                NG603.Parent = NG602
                NG604 = Instance.new('TextButton')
                NG604.Active = true
                NG604.BackgroundColor3 = Color3.new(0, 0, 0)
                NG604.BackgroundTransparency = 0.80000001192093
                NG604.BorderColor3 = Color3.new(0, 0, 0)
                NG604.BorderSizePixel = 0
                NG604.Name = dCD('BXOhggba')
                NG604.Position = UDim2.new(0, 0, 1, -22)
                NG604.Selectable = true
                NG604.Size = UDim2.new(0.5, 0, 0, 22)
                NG604.Style = Enum.ButtonStyle.Custom
                NG604.Font = Enum.Font.Arial
                NG604.FontSize = Enum.FontSize.Size10
                NG604.Text = dCD('TBG VG')
                NG604.TextColor3 = Color3.new(1, 1, 1)
                NG604.Parent = NG602
                NG605 = Instance.new('TextButton')
                NG605.Active = true
                NG605.BackgroundColor3 = Color3.new(0, 0, 0)
                NG605.BackgroundTransparency = 0.80000001192093
                NG605.BorderColor3 = Color3.new(0, 0, 0)
                NG605.BorderSizePixel = 0
                NG605.Name = dCD('UrycOhggba')
                NG605.Position = UDim2.new(0.5, 0, 1, -22)
                NG605.Selectable = true
                NG605.Size = UDim2.new(0.5, 0, 0, 22)
                NG605.Style = Enum.ButtonStyle.Custom
                NG605.Font = Enum.Font.Arial
                NG605.FontSize = Enum.FontSize.Size10
                NG605.Text = dCD('JUNG PNA V QB?')
                NG605.TextColor3 = Color3.new(1, 1, 1)
                NG605.Parent = NG602
                NG606 = Instance.new('Frame')
                NG606.BackgroundColor3 = Color3.new(0, 0, 0)
                NG606.BackgroundTransparency = 0.75
                NG606.BorderSizePixel = 0
                NG606.Name = dCD('OhggbaFrcnengbe')
                NG606.Position = UDim2.new(0.5, 0, 1, -22)
                NG606.Size = UDim2.new(0, 1, 0, 22)
                NG606.Parent = NG602
                NG607 = Instance.new('Frame')
                NG607.BackgroundTransparency = 1
                NG607.BorderSizePixel = 0
                NG607.Name = dCD('Abgvpr')
                NG607.Position = UDim2.new(0, 0, 0, 2)
                NG607.Size = UDim2.new(1, 0, 1, -22)
                NG607.Parent = NG602
                NG608 = Instance.new('TextLabel')
                NG608.BackgroundTransparency = 1
                NG608.BorderColor3 = Color3.new(0, 0, 0)
                NG608.BorderSizePixel = 0
                NG608.Size = UDim2.new(1, 0, 1, 0)
                NG608.Font = Enum.Font.SourceSansBold
                NG608.FontSize = Enum.FontSize.Size14
                NG608.Text = dCD(
[[Bu ab snz! UggcFreivpr vfa'g jbexvat ba lbhe pyvrag. Fbzr srngherf bs guvf unpxl s3k gbby jba'g jbex, vapyhqvat rkcbegvat.]])
                NG608.TextColor3 = Color3.new(1, 1, 1)
                NG608.TextStrokeTransparency = 0.80000001192093
                NG608.TextWrapped = true
                NG608.Parent = NG607
                NG609 = Instance.new('IntValue')
                NG609.Value = 80
                NG609.Parent = NG607
                NG610 = Instance.new('Frame')
                NG610.BackgroundTransparency = 1
                NG610.BorderSizePixel = 0
                NG610.Name = dCD('Uryc')
                NG610.Position = UDim2.new(0, 0, 0, 2)
                NG610.Size = UDim2.new(1, 0, 1, -22)
                NG610.Visible = false
                NG610.Parent = NG602
                NG611 = Instance.new('TextLabel')
                NG611.BackgroundTransparency = 1
                NG611.BorderColor3 = Color3.new(0, 0, 0)
                NG611.BorderSizePixel = 0
                NG611.Position = UDim2.new(0, 10, 0, 0)
                NG611.Size = UDim2.new(1, -20, 0.699999988, 0)
                NG611.Font = Enum.Font.SourceSansBold
                NG611.FontSize = Enum.FontSize.Size14
                NG611.Text = dCD(
[[Gurer vf abguvat lbh pna qb, vg vf rffragvnyyl bayl noyr gb jbex vs lbhe rkcybvg vf noyr gb ybnq UggcFreivpr.]])
                NG611.TextColor3 = Color3.new(1, 1, 1)
                NG611.TextStrokeTransparency = 0.80000001192093
                NG611.TextWrapped = true
                NG611.TextXAlignment = Enum.TextXAlignment.Left
                NG611.Parent = NG610
                NG612 = Instance.new('TextLabel')
                NG612.BackgroundTransparency = 1
                NG612.BorderColor3 = Color3.new(0, 0, 0)
                NG612.BorderSizePixel = 0
                NG612.Position = UDim2.new(0, 10, 0.649999976, 0)
                NG612.Size = UDim2.new(1, -10, 0.300000012, 0)
                NG612.FontSize = Enum.FontSize.Size14
                NG612.Text = dCD("V'z fbb fbeel \r\n( ~Avpxbnxm")
                NG612.TextColor3 = Color3.new(1, 1, 1)
                NG612.TextStrokeTransparency = 0.80000001192093
                NG612.TextWrapped = true
                NG612.TextXAlignment = Enum.TextXAlignment.Left
                NG612.Parent = NG610
                NG613 = Instance.new('IntValue')
                NG613.Value = 110
                NG613.Parent = NG610
                NG614 = Instance.new('Frame')
                NG614.BackgroundColor3 = Color3.new(0, 0, 0)
                NG614.BackgroundTransparency = 0.69999998807907
                NG614.BorderSizePixel = 0
                NG614.Name = dCD('UggcRanoyrqJneavat')
                NG614.Size = UDim2.new(1, 0, 0, 80)
                NG614.Visible = false
                NG614.Parent = NG567
                NG615 = Instance.new('Frame')
                NG615.BackgroundColor3 = Color3.new(0, 0.666667, 0)
                NG615.BorderSizePixel = 0
                NG615.Name = dCD('One')
                NG615.Size = UDim2.new(1, 0, 0, 2)
                NG615.Parent = NG614
                NG616 = Instance.new('TextButton')
                NG616.Active = true
                NG616.BackgroundColor3 = Color3.new(0, 0, 0)
                NG616.BackgroundTransparency = 0.80000001192093
                NG616.BorderColor3 = Color3.new(0, 0, 0)
                NG616.BorderSizePixel = 0
                NG616.Name = dCD('BXOhggba')
                NG616.Position = UDim2.new(0, 0, 1, -22)
                NG616.Selectable = true
                NG616.Size = UDim2.new(0.5, 0, 0, 22)
                NG616.Style = Enum.ButtonStyle.Custom
                NG616.Font = Enum.Font.Arial
                NG616.FontSize = Enum.FontSize.Size10
                NG616.Text = dCD('TBG VG')
                NG616.TextColor3 = Color3.new(1, 1, 1)
                NG616.Parent = NG614
                NG617 = Instance.new('TextButton')
                NG617.Active = true
                NG617.BackgroundColor3 = Color3.new(0, 0, 0)
                NG617.BackgroundTransparency = 0.80000001192093
                NG617.BorderColor3 = Color3.new(0, 0, 0)
                NG617.BorderSizePixel = 0
                NG617.Name = dCD('UrycOhggba')
                NG617.Position = UDim2.new(0.5, 0, 1, -22)
                NG617.Selectable = true
                NG617.Size = UDim2.new(0.5, 0, 0, 22)
                NG617.Style = Enum.ButtonStyle.Custom
                NG617.Font = Enum.Font.Arial
                NG617.FontSize = Enum.FontSize.Size10
                NG617.Text = dCD('JNVG JUNG?')
                NG617.TextColor3 = Color3.new(1, 1, 1)
                NG617.Parent = NG614
                NG618 = Instance.new('Frame')
                NG618.BackgroundColor3 = Color3.new(0, 0, 0)
                NG618.BackgroundTransparency = 0.75
                NG618.BorderSizePixel = 0
                NG618.Name = dCD('OhggbaFrcnengbe')
                NG618.Position = UDim2.new(0.5, 0, 1, -22)
                NG618.Size = UDim2.new(0, 1, 0, 22)
                NG618.Parent = NG614
                NG619 = Instance.new('Frame')
                NG619.BackgroundTransparency = 1
                NG619.BorderSizePixel = 0
                NG619.Name = dCD('Abgvpr')
                NG619.Position = UDim2.new(0, 0, 0, 2)
                NG619.Size = UDim2.new(1, 0, 1, -22)
                NG619.Parent = NG614
                NG620 = Instance.new('TextLabel')
                NG620.BackgroundTransparency = 1
                NG620.BorderColor3 = Color3.new(0, 0, 0)
                NG620.BorderSizePixel = 0
                NG620.Size = UDim2.new(1, 0, 1, 0)
                NG620.Font = Enum.Font.SourceSansBold
                NG620.FontSize = Enum.FontSize.Size14
                NG620.Text = dCD(
[[JBB SNZ! UggcFreivpr jbexf sbe lbhe pyvrag! Lbh'yy or noyr gb fgrny cnegf sebz guvf tnzr hfvat guvf rkcybvg :)]])
                NG620.TextColor3 = Color3.new(1, 1, 1)
                NG620.TextStrokeTransparency = 0.80000001192093
                NG620.TextWrapped = true
                NG620.Parent = NG619
                NG621 = Instance.new('IntValue')
                NG621.Value = 80
                NG621.Parent = NG619
                NG622 = Instance.new('Frame')
                NG622.BackgroundTransparency = 1
                NG622.BorderSizePixel = 0
                NG622.Name = dCD('Uryc')
                NG622.Position = UDim2.new(0, 0, 0, 2)
                NG622.Size = UDim2.new(1, 0, 1, -22)
                NG622.Visible = false
                NG622.Parent = NG614
                NG623 = Instance.new('TextLabel')
                NG623.BackgroundTransparency = 1
                NG623.BorderColor3 = Color3.new(0, 0, 0)
                NG623.BorderSizePixel = 0
                NG623.Position = UDim2.new(0, 10, 0, 0)
                NG623.Size = UDim2.new(1, -20, 0.300000012, 0)
                NG623.Font = Enum.Font.SourceSansBold
                NG623.FontSize = Enum.FontSize.Size14
                NG623.Text = dCD('Jung qb lbh zrna gung UGGCFreivpr vf ba?')
                NG623.TextColor3 = Color3.new(1, 1, 1)
                NG623.TextStrokeTransparency = 0.80000001192093
                NG623.TextWrapped = true
                NG623.TextXAlignment = Enum.TextXAlignment.Left
                NG623.Parent = NG622
                NG624 = Instance.new('TextLabel')
                NG624.BackgroundTransparency = 1
                NG624.BorderColor3 = Color3.new(0, 0, 0)
                NG624.BorderSizePixel = 0
                NG624.Position = UDim2.new(0, 10, 0.200000003, 0)
                NG624.Size = UDim2.new(1, -10, 0.800000012, 0)
                NG624.FontSize = Enum.FontSize.Size14
                NG624.Text = dCD(
[[Jryy hzz, lbh pna fryrpg n gba bs cnegf vatnzr, naq rkcbeg vg guebhtu guvf unpxl s3k gbby, naq or noyr gb fgrny gurz guebhtu Eboybk Fghqvb? Lrnu, gungf pbby snz!]])
                NG624.TextColor3 = Color3.new(1, 1, 1)
                NG624.TextStrokeTransparency = 0.80000001192093
                NG624.TextWrapped = true
                NG624.TextXAlignment = Enum.TextXAlignment.Left
                NG624.Parent = NG622
                NG625 = Instance.new('IntValue')
                NG625.Value = 110
                NG625.Parent = NG622
                NG626 = Instance.new('Frame')
                NG626.BackgroundColor3 = Color3.new(0, 0, 0)
                NG626.BackgroundTransparency = 0.69999998807907
                NG626.BorderSizePixel = 0
                NG626.Name = dCD('JrypbzrSrk')
                NG626.Size = UDim2.new(1, 0, 0, 80)
                NG626.Visible = false
                NG626.Parent = NG567
                NG627 = Instance.new('TextButton')
                NG627.Active = true
                NG627.BackgroundColor3 = Color3.new(0, 0, 0)
                NG627.BackgroundTransparency = 0.80000001192093
                NG627.BorderColor3 = Color3.new(0, 0, 0)
                NG627.BorderSizePixel = 0
                NG627.Name = dCD('BXOhggba')
                NG627.Position = UDim2.new(0, 0, 1, -22)
                NG627.Selectable = true
                NG627.Size = UDim2.new(0.5, 0, 0, 22)
                NG627.Style = Enum.ButtonStyle.Custom
                NG627.Font = Enum.Font.Arial
                NG627.FontSize = Enum.FontSize.Size10
                NG627.Text = dCD('TBG VG')
                NG627.TextColor3 = Color3.new(1, 1, 1)
                NG627.Parent = NG626
                NG628 = Instance.new('TextButton')
                NG628.Active = true
                NG628.BackgroundColor3 = Color3.new(0, 0, 0)
                NG628.BackgroundTransparency = 0.80000001192093
                NG628.BorderColor3 = Color3.new(0, 0, 0)
                NG628.BorderSizePixel = 0
                NG628.Name = dCD('UrycOhggba')
                NG628.Position = UDim2.new(0.5, 0, 1, -22)
                NG628.Selectable = true
                NG628.Size = UDim2.new(0.5, 0, 0, 22)
                NG628.Style = Enum.ButtonStyle.Custom
                NG628.Font = Enum.Font.Arial
                NG628.FontSize = Enum.FontSize.Size10
                NG628.Text = dCD('JUNG PNA V QB?')
                NG628.TextColor3 = Color3.new(1, 1, 1)
                NG628.Parent = NG626
                NG629 = Instance.new('Frame')
                NG629.BackgroundColor3 = Color3.new(0, 0, 0)
                NG629.BackgroundTransparency = 0.75
                NG629.BorderSizePixel = 0
                NG629.Name = dCD('OhggbaFrcnengbe')
                NG629.Position = UDim2.new(0.5, 0, 1, -22)
                NG629.Size = UDim2.new(0, 1, 0, 22)
                NG629.Parent = NG626
                NG630 = Instance.new('Frame')
                NG630.BackgroundTransparency = 1
                NG630.BorderSizePixel = 0
                NG630.Name = dCD('Abgvpr')
                NG630.Position = UDim2.new(0, 0, 0, 2)
                NG630.Size = UDim2.new(1, 0, 1, -22)
                NG630.Parent = NG626
                NG631 = Instance.new('TextLabel')
                NG631.BackgroundTransparency = 1
                NG631.BorderColor3 = Color3.new(0, 0, 0)
                NG631.BorderSizePixel = 0
                NG631.Size = UDim2.new(1, 0, 1, 0)
                NG631.Font = Enum.Font.SourceSansBold
                NG631.FontSize = Enum.FontSize.Size14
                NG631.Text = dCD('S3KSbepr vf ehaavat. Znqr ol Avpxbnxm')
                NG631.TextColor3 = Color3.new(1, 1, 1)
                NG631.TextStrokeTransparency = 0.80000001192093
                NG631.TextWrapped = true
                NG631.Parent = NG630
                NG632 = Instance.new('IntValue')
                NG632.Value = 80
                NG632.Parent = NG630
                NG633 = Instance.new('Frame')
                NG633.BackgroundTransparency = 1
                NG633.BorderSizePixel = 0
                NG633.Name = dCD('Uryc')
                NG633.Position = UDim2.new(0, 0, 0, 2)
                NG633.Size = UDim2.new(1, 0, 1, -22)
                NG633.Visible = false
                NG633.Parent = NG626
                NG634 = Instance.new('TextLabel')
                NG634.BackgroundTransparency = 1
                NG634.BorderColor3 = Color3.new(0, 0, 0)
                NG634.BorderSizePixel = 0
                NG634.Position = UDim2.new(0, 10, 0, 0)
                NG634.Size = UDim2.new(1, -20, 0.699999988, 0)
                NG634.Font = Enum.Font.SourceSansBold
                NG634.FontSize = Enum.FontSize.Size14
                NG634.Text = dCD('Unir sha?')
                NG634.TextColor3 = Color3.new(1, 1, 1)
                NG634.TextStrokeTransparency = 0.80000001192093
                NG634.TextWrapped = true
                NG634.TextXAlignment = Enum.TextXAlignment.Left
                NG634.Parent = NG633
                NG635 = Instance.new('TextLabel')
                NG635.BackgroundTransparency = 1
                NG635.BorderColor3 = Color3.new(0, 0, 0)
                NG635.BorderSizePixel = 0
                NG635.Position = UDim2.new(0, 10, 0.649999976, 0)
                NG635.Size = UDim2.new(1, -10, 0.300000012, 0)
                NG635.FontSize = Enum.FontSize.Size14
                NG635.Text = dCD('~Avpxbnxm')
                NG635.TextColor3 = Color3.new(1, 1, 1)
                NG635.TextStrokeTransparency = 0.80000001192093
                NG635.TextWrapped = true
                NG635.TextXAlignment = Enum.TextXAlignment.Left
                NG635.Parent = NG633
                NG636 = Instance.new('IntValue')
                NG636.Value = 110
                NG636.Parent = NG633
                NG637 = Instance.new('Frame')
                NG637.BackgroundTransparency = 1
                NG637.BorderSizePixel = 0
                NG637.Name = dCD('ObggbzPbybeOne')
                NG637.Position = UDim2.new(0, 0, 1, 0)
                NG637.Rotation = 180
                NG637.Size = UDim2.new(1, 0, 0, 3)
                NG637.Parent = NG626
                NG638 = Instance.new('Frame')
                NG638.BackgroundColor3 = Color3.new(1, 0.686275, 0)
                NG638.BackgroundTransparency = 0.25
                NG638.BorderSizePixel = 0
                NG638.Name = dCD('Lryybj')
                NG638.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG638.Parent = NG637
                NG639 = Instance.new('Frame')
                NG639.BackgroundColor3 = Color3.new(0.294118, 0.592157, 0.294118)
                NG639.BackgroundTransparency = 0.25
                NG639.BorderSizePixel = 0
                NG639.Name = dCD('Terra')
                NG639.Position = UDim2.new(0.200000003, 0, 0, 0)
                NG639.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG639.Parent = NG637
                NG640 = Instance.new('Frame')
                NG640.BackgroundColor3 = Color3.new(0.0156863, 0.686275, 0.92549)
                NG640.BackgroundTransparency = 0.25
                NG640.BorderSizePixel = 0
                NG640.Name = dCD('Oyhr')
                NG640.Position = UDim2.new(0.400000006, 0, 0, 0)
                NG640.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG640.Parent = NG637
                NG641 = Instance.new('Frame')
                NG641.BackgroundColor3 = Color3.new(1, 0, 0)
                NG641.BackgroundTransparency = 0.25
                NG641.BorderSizePixel = 0
                NG641.Name = dCD('Erq')
                NG641.Position = UDim2.new(0.600000024, 0, 0, 0)
                NG641.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG641.Parent = NG637
                NG642 = Instance.new('Frame')
                NG642.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG642.BackgroundTransparency = 0.25
                NG642.BorderSizePixel = 0
                NG642.Name = dCD('Checyr')
                NG642.Position = UDim2.new(0.800000012, 0, 0, 0)
                NG642.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG642.Parent = NG637
                NG643 = Instance.new('Frame')
                NG643.BackgroundTransparency = 1
                NG643.BorderSizePixel = 0
                NG643.Name = dCD('GbcPbybeOne')
                NG643.Position = UDim2.new(0, 0, 0, -2)
                NG643.Rotation = 180
                NG643.Size = UDim2.new(1, 0, 0, 3)
                NG643.Parent = NG626
                NG644 = Instance.new('Frame')
                NG644.BackgroundColor3 = Color3.new(1, 0.686275, 0)
                NG644.BackgroundTransparency = 0.25
                NG644.BorderSizePixel = 0
                NG644.Name = dCD('Lryybj')
                NG644.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG644.Parent = NG643
                NG645 = Instance.new('Frame')
                NG645.BackgroundColor3 = Color3.new(0.294118, 0.592157, 0.294118)
                NG645.BackgroundTransparency = 0.25
                NG645.BorderSizePixel = 0
                NG645.Name = dCD('Terra')
                NG645.Position = UDim2.new(0.200000003, 0, 0, 0)
                NG645.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG645.Parent = NG643
                NG646 = Instance.new('Frame')
                NG646.BackgroundColor3 = Color3.new(0.0156863, 0.686275, 0.92549)
                NG646.BackgroundTransparency = 0.25
                NG646.BorderSizePixel = 0
                NG646.Name = dCD('Oyhr')
                NG646.Position = UDim2.new(0.400000006, 0, 0, 0)
                NG646.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG646.Parent = NG643
                NG647 = Instance.new('Frame')
                NG647.BackgroundColor3 = Color3.new(1, 0, 0)
                NG647.BackgroundTransparency = 0.25
                NG647.BorderSizePixel = 0
                NG647.Name = dCD('Erq')
                NG647.Position = UDim2.new(0.600000024, 0, 0, 0)
                NG647.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG647.Parent = NG643
                NG648 = Instance.new('Frame')
                NG648.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG648.BackgroundTransparency = 0.25
                NG648.BorderSizePixel = 0
                NG648.Name = dCD('Checyr')
                NG648.Position = UDim2.new(0.800000012, 0, 0, 0)
                NG648.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG648.Parent = NG643
                NG649 = Instance.new('Frame')
                NG649.Active = true
                NG649.BackgroundColor3 = Color3.new(0, 0, 0)
                NG649.BackgroundTransparency = 1
                NG649.BorderColor3 = Color3.new(0.137255, 0.137255, 0.137255)
                NG649.BorderSizePixel = 0
                NG649.Name = dCD('OGQbpxTHV')
                NG649.Position = UDim2.new(0.699999988, 0, 0.300000012, 0)
                NG649.Size = UDim2.new(0, 70, 0, 380)
                NG649.Draggable = true
                NG649.Parent = NG1
                NG650 = Instance.new('Frame')
                NG650.BackgroundTransparency = 1
                NG650.BorderSizePixel = 0
                NG650.Name = dCD('Gbbygvcf')
                NG650.Position = UDim2.new(0, -120, 0, 0)
                NG650.Size = UDim2.new(0, 120, 0, 315)
                NG650.Parent = NG649
                NG651 = Instance.new('Frame')
                NG651.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG651.BackgroundTransparency = 0.20000000298023
                NG651.BorderSizePixel = 0
                NG651.Name = dCD('CnvagVasb')
                NG651.Size = UDim2.new(1, 0, 1, 0)
                NG651.Visible = false
                NG651.Parent = NG650
                NG652 = Instance.new('Frame')
                NG652.BackgroundTransparency = 1
                NG652.BorderSizePixel = 0
                NG652.Name = dCD('Pbagrag')
                NG652.Size = UDim2.new(1, 0, 0, 70)
                NG652.Parent = NG651
                NG653 = Instance.new('Frame')
                NG653.BackgroundColor3 = Color3.new(1, 0, 0)
                NG653.BorderSizePixel = 0
                NG653.Name = dCD('PbybeOne')
                NG653.Size = UDim2.new(1, 0, 0, 2)
                NG653.Parent = NG652
                NG654 = Instance.new('TextLabel')
                NG654.BackgroundTransparency = 1
                NG654.BorderSizePixel = 0
                NG654.Name = dCD('GbbyQrfpevcgvba')
                NG654.Position = UDim2.new(0, 10, 0, 25)
                NG654.Size = UDim2.new(0, 82, 0, 50)
                NG654.Font = Enum.Font.Arial
                NG654.FontSize = Enum.FontSize.Size10
                NG654.Text = dCD('Nyybjf lbh gb punatr gur pbybe bs cnegf.')
                NG654.TextColor3 = Color3.new(1, 1, 1)
                NG654.TextWrapped = true
                NG654.TextXAlignment = Enum.TextXAlignment.Left
                NG654.TextYAlignment = Enum.TextYAlignment.Top
                NG654.Parent = NG652
                NG655 = Instance.new('TextLabel')
                NG655.BackgroundTransparency = 1
                NG655.BorderSizePixel = 0
                NG655.Name = dCD('GbbyAnzr')
                NG655.Position = UDim2.new(0, 10, 0, 0)
                NG655.Size = UDim2.new(0, 50, 0, 25)
                NG655.Font = Enum.Font.ArialBold
                NG655.FontSize = Enum.FontSize.Size10
                NG655.Text = dCD('CNVAG GBBY')
                NG655.TextColor3 = Color3.new(1, 1, 1)
                NG655.TextXAlignment = Enum.TextXAlignment.Left
                NG655.Parent = NG652
                NG656 = Instance.new('Frame')
                NG656.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG656.BackgroundTransparency = 0.20000000298023
                NG656.BorderSizePixel = 0
                NG656.Name = dCD('FhesnprVasb')
                NG656.Size = UDim2.new(1, 0, 1, 0)
                NG656.Visible = false
                NG656.Parent = NG650
                NG657 = Instance.new('Frame')
                NG657.BackgroundTransparency = 1
                NG657.BorderSizePixel = 0
                NG657.Name = dCD('Pbagrag')
                NG657.Size = UDim2.new(1, 0, 0, 150)
                NG657.Parent = NG656
                NG658 = Instance.new('Frame')
                NG658.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG658.BorderSizePixel = 0
                NG658.Name = dCD('PbybeOne')
                NG658.Size = UDim2.new(1, 0, 0, 2)
                NG658.Parent = NG657
                NG659 = Instance.new('TextLabel')
                NG659.BackgroundTransparency = 1
                NG659.BorderSizePixel = 0
                NG659.Name = dCD('GbbyQrfpevcgvba')
                NG659.Position = UDim2.new(0, 10, 0, 25)
                NG659.Size = UDim2.new(0, 82, 0, 120)
                NG659.Font = Enum.Font.Arial
                NG659.FontSize = Enum.FontSize.Size10
                NG659.Text = dCD(
[[Yrgf lbh punatr gur fhesnpr glcr bs cnegf.  GVC: Lbh pna fryrpg gur fvqr gb punatr ol evtug pyvpxvat ba n cneg'f fvqr.]])
                NG659.TextColor3 = Color3.new(1, 1, 1)
                NG659.TextWrapped = true
                NG659.TextXAlignment = Enum.TextXAlignment.Left
                NG659.TextYAlignment = Enum.TextYAlignment.Top
                NG659.Parent = NG657
                NG660 = Instance.new('TextLabel')
                NG660.BackgroundTransparency = 1
                NG660.BorderSizePixel = 0
                NG660.Name = dCD('GbbyAnzr')
                NG660.Position = UDim2.new(0, 10, 0, 0)
                NG660.Size = UDim2.new(0, 50, 0, 25)
                NG660.Font = Enum.Font.ArialBold
                NG660.FontSize = Enum.FontSize.Size10
                NG660.Text = dCD('FHESNPR GBBY')
                NG660.TextColor3 = Color3.new(1, 1, 1)
                NG660.TextXAlignment = Enum.TextXAlignment.Left
                NG660.Parent = NG657
                NG661 = Instance.new('Frame')
                NG661.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG661.BackgroundTransparency = 0.20000000298023
                NG661.BorderSizePixel = 0
                NG661.Name = dCD('ZngrevnyVasb')
                NG661.Size = UDim2.new(1, 0, 1, 0)
                NG661.Visible = false
                NG661.Parent = NG650
                NG662 = Instance.new('Frame')
                NG662.BackgroundTransparency = 1
                NG662.BorderSizePixel = 0
                NG662.Name = dCD('Pbagrag')
                NG662.Size = UDim2.new(1, 0, 0, 150)
                NG662.Parent = NG661
                NG663 = Instance.new('Frame')
                NG663.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG663.BorderSizePixel = 0
                NG663.Name = dCD('PbybeOne')
                NG663.Size = UDim2.new(1, 0, 0, 2)
                NG663.Parent = NG662
                NG664 = Instance.new('TextLabel')
                NG664.BackgroundTransparency = 1
                NG664.BorderSizePixel = 0
                NG664.Name = dCD('GbbyQrfpevcgvba')
                NG664.Position = UDim2.new(0, 10, 0, 25)
                NG664.Size = UDim2.new(0, 80, 0, 120)
                NG664.Font = Enum.Font.Arial
                NG664.FontSize = Enum.FontSize.Size10
                NG664.Text = dCD(
[[Yrgf lbh punatr gur zngrevny, genafcnerapl, naq ersyrpgnapr bs cnegf.]])
                NG664.TextColor3 = Color3.new(1, 1, 1)
                NG664.TextWrapped = true
                NG664.TextXAlignment = Enum.TextXAlignment.Left
                NG664.TextYAlignment = Enum.TextYAlignment.Top
                NG664.Parent = NG662
                NG665 = Instance.new('TextLabel')
                NG665.BackgroundTransparency = 1
                NG665.BorderSizePixel = 0
                NG665.Name = dCD('GbbyAnzr')
                NG665.Position = UDim2.new(0, 10, 0, 0)
                NG665.Size = UDim2.new(0, 50, 0, 25)
                NG665.Font = Enum.Font.ArialBold
                NG665.FontSize = Enum.FontSize.Size10
                NG665.Text = dCD('ZNGREVNY GBBY')
                NG665.TextColor3 = Color3.new(1, 1, 1)
                NG665.TextXAlignment = Enum.TextXAlignment.Left
                NG665.Parent = NG662
                NG666 = Instance.new('Frame')
                NG666.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG666.BackgroundTransparency = 0.20000000298023
                NG666.BorderSizePixel = 0
                NG666.Name = dCD('PbyyvfvbaVasb')
                NG666.Size = UDim2.new(1, 0, 1, 0)
                NG666.Visible = false
                NG666.Parent = NG650
                NG667 = Instance.new('Frame')
                NG667.BackgroundTransparency = 1
                NG667.BorderSizePixel = 0
                NG667.Name = dCD('Pbagrag')
                NG667.Size = UDim2.new(1, 0, 0, 150)
                NG667.Parent = NG666
                NG668 = Instance.new('Frame')
                NG668.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG668.BorderSizePixel = 0
                NG668.Name = dCD('PbybeOne')
                NG668.Size = UDim2.new(1, 0, 0, 2)
                NG668.Parent = NG667
                NG669 = Instance.new('TextLabel')
                NG669.BackgroundTransparency = 1
                NG669.BorderSizePixel = 0
                NG669.Name = dCD('GbbyQrfpevcgvba')
                NG669.Position = UDim2.new(0, 10, 0, 25)
                NG669.Size = UDim2.new(0, 80, 0, 120)
                NG669.Font = Enum.Font.Arial
                NG669.FontSize = Enum.FontSize.Size10
                NG669.Text = dCD(
[[Yrgf lbh punatr jurgure gur cnegf pbyyvqr jvgu bguref be abg.  GVC: Lbh pna gbttyr pbyyvfvba ol cerffvat Ragre.]])
                NG669.TextColor3 = Color3.new(1, 1, 1)
                NG669.TextWrapped = true
                NG669.TextXAlignment = Enum.TextXAlignment.Left
                NG669.TextYAlignment = Enum.TextYAlignment.Top
                NG669.Parent = NG667
                NG670 = Instance.new('TextLabel')
                NG670.BackgroundTransparency = 1
                NG670.BorderSizePixel = 0
                NG670.Name = dCD('GbbyAnzr')
                NG670.Position = UDim2.new(0, 10, 0, 0)
                NG670.Size = UDim2.new(0, 50, 0, 25)
                NG670.Font = Enum.Font.ArialBold
                NG670.FontSize = Enum.FontSize.Size10
                NG670.Text = dCD('PBYYVFVBA GBBY')
                NG670.TextColor3 = Color3.new(1, 1, 1)
                NG670.TextXAlignment = Enum.TextXAlignment.Left
                NG670.Parent = NG667
                NG671 = Instance.new('Frame')
                NG671.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG671.BackgroundTransparency = 0.20000000298023
                NG671.BorderSizePixel = 0
                NG671.Name = dCD('NapubeVasb')
                NG671.Size = UDim2.new(1, 0, 1, 0)
                NG671.Visible = false
                NG671.Parent = NG650
                NG672 = Instance.new('Frame')
                NG672.BackgroundTransparency = 1
                NG672.BorderSizePixel = 0
                NG672.Name = dCD('Pbagrag')
                NG672.Size = UDim2.new(1, 0, 0, 150)
                NG672.Parent = NG671
                NG673 = Instance.new('Frame')
                NG673.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG673.BorderSizePixel = 0
                NG673.Name = dCD('PbybeOne')
                NG673.Size = UDim2.new(1, 0, 0, 2)
                NG673.Parent = NG672
                NG674 = Instance.new('TextLabel')
                NG674.BackgroundTransparency = 1
                NG674.BorderSizePixel = 0
                NG674.Name = dCD('GbbyQrfpevcgvba')
                NG674.Position = UDim2.new(0, 10, 0, 25)
                NG674.Size = UDim2.new(0, 80, 0, 120)
                NG674.Font = Enum.Font.Arial
                NG674.FontSize = Enum.FontSize.Size10
                NG674.Text = dCD(
[[Yrgf lbh napube naq hanapube cnegf.  GVC: Lbh pna cerff Ragre gb gbttyr gur napube dhvpxyl.]])
                NG674.TextColor3 = Color3.new(1, 1, 1)
                NG674.TextWrapped = true
                NG674.TextXAlignment = Enum.TextXAlignment.Left
                NG674.TextYAlignment = Enum.TextYAlignment.Top
                NG674.Parent = NG672
                NG675 = Instance.new('TextLabel')
                NG675.BackgroundTransparency = 1
                NG675.BorderSizePixel = 0
                NG675.Name = dCD('GbbyAnzr')
                NG675.Position = UDim2.new(0, 10, 0, 0)
                NG675.Size = UDim2.new(0, 50, 0, 25)
                NG675.Font = Enum.Font.ArialBold
                NG675.FontSize = Enum.FontSize.Size10
                NG675.Text = dCD('NAPUBE GBBY')
                NG675.TextColor3 = Color3.new(1, 1, 1)
                NG675.TextXAlignment = Enum.TextXAlignment.Left
                NG675.Parent = NG672
                NG676 = Instance.new('Frame')
                NG676.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG676.BackgroundTransparency = 0.20000000298023
                NG676.BorderSizePixel = 0
                NG676.Name = dCD('ArjCnegVasb')
                NG676.Size = UDim2.new(1, 0, 1, 0)
                NG676.Visible = false
                NG676.Parent = NG650
                NG677 = Instance.new('Frame')
                NG677.BackgroundTransparency = 1
                NG677.BorderSizePixel = 0
                NG677.Name = dCD('Pbagrag')
                NG677.Size = UDim2.new(1, 0, 0, 150)
                NG677.Parent = NG676
                NG678 = Instance.new('Frame')
                NG678.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG678.BorderSizePixel = 0
                NG678.Name = dCD('PbybeOne')
                NG678.Size = UDim2.new(1, 0, 0, 2)
                NG678.Parent = NG677
                NG679 = Instance.new('TextLabel')
                NG679.BackgroundTransparency = 1
                NG679.BorderSizePixel = 0
                NG679.Name = dCD('GbbyQrfpevcgvba')
                NG679.Position = UDim2.new(0, 10, 0, 25)
                NG679.Size = UDim2.new(0, 80, 0, 120)
                NG679.Font = Enum.Font.Arial
                NG679.FontSize = Enum.FontSize.Size10
                NG679.Text = dCD(
[[Yrgf lbh perngr arj cnegf bs qvssrerag glcrf.  Fryrpg gur cneg glcr, gura pyvpx naq qent gb cynpr gur cneg.]])
                NG679.TextColor3 = Color3.new(1, 1, 1)
                NG679.TextWrapped = true
                NG679.TextXAlignment = Enum.TextXAlignment.Left
                NG679.TextYAlignment = Enum.TextYAlignment.Top
                NG679.Parent = NG677
                NG680 = Instance.new('TextLabel')
                NG680.BackgroundTransparency = 1
                NG680.BorderSizePixel = 0
                NG680.Name = dCD('GbbyAnzr')
                NG680.Position = UDim2.new(0, 10, 0, 0)
                NG680.Size = UDim2.new(0, 50, 0, 25)
                NG680.Font = Enum.Font.ArialBold
                NG680.FontSize = Enum.FontSize.Size10
                NG680.Text = dCD('ARJ CNEG GBBY')
                NG680.TextColor3 = Color3.new(1, 1, 1)
                NG680.TextXAlignment = Enum.TextXAlignment.Left
                NG680.Parent = NG677
                NG681 = Instance.new('Frame')
                NG681.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG681.BackgroundTransparency = 0.20000000298023
                NG681.BorderSizePixel = 0
                NG681.Name = dCD('ZrfuVasb')
                NG681.Size = UDim2.new(1, 0, 1, 0)
                NG681.Visible = false
                NG681.Parent = NG650
                NG682 = Instance.new('Frame')
                NG682.BackgroundTransparency = 1
                NG682.BorderSizePixel = 0
                NG682.Name = dCD('Pbagrag')
                NG682.Size = UDim2.new(1, 0, 0, 150)
                NG682.Parent = NG681
                NG683 = Instance.new('Frame')
                NG683.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG683.BorderSizePixel = 0
                NG683.Name = dCD('PbybeOne')
                NG683.Size = UDim2.new(1, 0, 0, 2)
                NG683.Parent = NG682
                NG684 = Instance.new('TextLabel')
                NG684.BackgroundTransparency = 1
                NG684.BorderSizePixel = 0
                NG684.Name = dCD('GbbyQrfpevcgvba')
                NG684.Position = UDim2.new(0, 10, 0, 25)
                NG684.Size = UDim2.new(0, 84, 0, 260)
                NG684.Font = Enum.Font.Arial
                NG684.FontSize = Enum.FontSize.Size10
                NG684.Text = dCD(
[[Yrgf lbh nqq zrfurf gb cnegf.  Vs lbh'er hfvat n svyr zrfu, lbh pna cnfgr gur HEY bs nalguvat jvgu n zrfu (r.t. n ung, trne, rgp.) naq vg jvyy svaq gur evtug zrfu/grkgher VQ sbe lbh.  ABGR: Vs UggcFreivpr vf abg ranoyrq, lbh zhfg glcr gur VQ bs gur zrfu/vzntr nffrg qverpgyl.]])
                NG684.TextColor3 = Color3.new(1, 1, 1)
                NG684.TextWrapped = true
                NG684.TextXAlignment = Enum.TextXAlignment.Left
                NG684.TextYAlignment = Enum.TextYAlignment.Top
                NG684.Parent = NG682
                NG685 = Instance.new('TextLabel')
                NG685.BackgroundTransparency = 1
                NG685.BorderSizePixel = 0
                NG685.Name = dCD('GbbyAnzr')
                NG685.Position = UDim2.new(0, 10, 0, 0)
                NG685.Size = UDim2.new(0, 50, 0, 25)
                NG685.Font = Enum.Font.ArialBold
                NG685.FontSize = Enum.FontSize.Size10
                NG685.Text = dCD('ZRFU GBBY')
                NG685.TextColor3 = Color3.new(1, 1, 1)
                NG685.TextXAlignment = Enum.TextXAlignment.Left
                NG685.Parent = NG682
                NG686 = Instance.new('Frame')
                NG686.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG686.BackgroundTransparency = 0.20000000298023
                NG686.BorderSizePixel = 0
                NG686.Name = dCD('GrkgherVasb')
                NG686.Size = UDim2.new(1, 0, 1, 0)
                NG686.Visible = false
                NG686.Parent = NG650
                NG687 = Instance.new('Frame')
                NG687.BackgroundTransparency = 1
                NG687.BorderSizePixel = 0
                NG687.Name = dCD('Pbagrag')
                NG687.Size = UDim2.new(1, 0, 0, 150)
                NG687.Parent = NG686
                NG688 = Instance.new('Frame')
                NG688.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG688.BorderSizePixel = 0
                NG688.Name = dCD('PbybeOne')
                NG688.Size = UDim2.new(1, 0, 0, 2)
                NG688.Parent = NG687
                NG689 = Instance.new('TextLabel')
                NG689.BackgroundTransparency = 1
                NG689.BorderSizePixel = 0
                NG689.Name = dCD('GbbyQrfpevcgvba')
                NG689.Position = UDim2.new(0, 10, 0, 25)
                NG689.Size = UDim2.new(0, 84, 0, 250)
                NG689.Font = Enum.Font.Arial
                NG689.FontSize = Enum.FontSize.Size10
                NG689.Text = dCD(
[[Yrgf lbh nqq qrpnyf naq grkgherf gb cnegf. Fvzcyl nqq n arj qrpny be grkgher, naq cnfgr gur HEY bs gur qrpny lbh jnag gb nqq.  GVC: Lbh pna fryrpg gur qrpny/grkgher fvqr ol evtug pyvpxvat.  ABGR: Vs UggcFreivpr vf abg ranoyrq, lbh zhfg glcr gur VQ bs gur vzntr vgrz (abg gur qrpny). Guvf pna hfhnyyl or sbhaq ol fhogenpgvat bar sebz gur VQ ahzore.]])
                NG689.TextColor3 = Color3.new(1, 1, 1)
                NG689.TextWrapped = true
                NG689.TextXAlignment = Enum.TextXAlignment.Left
                NG689.TextYAlignment = Enum.TextYAlignment.Top
                NG689.Parent = NG687
                NG690 = Instance.new('TextLabel')
                NG690.BackgroundTransparency = 1
                NG690.BorderSizePixel = 0
                NG690.Name = dCD('GbbyAnzr')
                NG690.Position = UDim2.new(0, 10, 0, 0)
                NG690.Size = UDim2.new(0, 50, 0, 25)
                NG690.Font = Enum.Font.ArialBold
                NG690.FontSize = Enum.FontSize.Size10
                NG690.Text = dCD('GRKGHER GBBY')
                NG690.TextColor3 = Color3.new(1, 1, 1)
                NG690.TextXAlignment = Enum.TextXAlignment.Left
                NG690.Parent = NG687
                NG691 = Instance.new('Frame')
                NG691.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG691.BackgroundTransparency = 0.20000000298023
                NG691.BorderSizePixel = 0
                NG691.Name = dCD('YvtugvatVasb')
                NG691.Size = UDim2.new(1, 0, 1, 0)
                NG691.Visible = false
                NG691.Parent = NG650
                NG692 = Instance.new('Frame')
                NG692.BackgroundTransparency = 1
                NG692.BorderSizePixel = 0
                NG692.Name = dCD('Pbagrag')
                NG692.Size = UDim2.new(1, 0, 0, 100)
                NG692.Parent = NG691
                NG693 = Instance.new('Frame')
                NG693.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG693.BorderSizePixel = 0
                NG693.Name = dCD('PbybeOne')
                NG693.Size = UDim2.new(1, 0, 0, 2)
                NG693.Parent = NG692
                NG694 = Instance.new('TextLabel')
                NG694.BackgroundTransparency = 1
                NG694.BorderSizePixel = 0
                NG694.Name = dCD('GbbyQrfpevcgvba')
                NG694.Position = UDim2.new(0, 10, 0, 25)
                NG694.Size = UDim2.new(0, 80, 0, 200)
                NG694.Font = Enum.Font.Arial
                NG694.FontSize = Enum.FontSize.Size10
                NG694.Text = dCD('Nyybjf lbh gb nqq fcbgyvtugf be cbvag yvtugf gb cnegf.')
                NG694.TextColor3 = Color3.new(1, 1, 1)
                NG694.TextWrapped = true
                NG694.TextXAlignment = Enum.TextXAlignment.Left
                NG694.TextYAlignment = Enum.TextYAlignment.Top
                NG694.Parent = NG692
                NG695 = Instance.new('TextLabel')
                NG695.BackgroundTransparency = 1
                NG695.BorderSizePixel = 0
                NG695.Name = dCD('GbbyAnzr')
                NG695.Position = UDim2.new(0, 10, 0, 0)
                NG695.Size = UDim2.new(0, 50, 0, 25)
                NG695.Font = Enum.Font.ArialBold
                NG695.FontSize = Enum.FontSize.Size10
                NG695.Text = dCD('YVTUGVAT GBBY')
                NG695.TextColor3 = Color3.new(1, 1, 1)
                NG695.TextXAlignment = Enum.TextXAlignment.Left
                NG695.Parent = NG692
                NG696 = Instance.new('Frame')
                NG696.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG696.BackgroundTransparency = 0.20000000298023
                NG696.BorderSizePixel = 0
                NG696.Name = dCD('QrpbengrVasb')
                NG696.Size = UDim2.new(1, 0, 1, 0)
                NG696.Visible = false
                NG696.Parent = NG650
                NG697 = Instance.new('Frame')
                NG697.BackgroundTransparency = 1
                NG697.BorderSizePixel = 0
                NG697.Name = dCD('Pbagrag')
                NG697.Size = UDim2.new(1, 0, 0, 100)
                NG697.Parent = NG696
                NG698 = Instance.new('Frame')
                NG698.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG698.BorderSizePixel = 0
                NG698.Name = dCD('PbybeOne')
                NG698.Size = UDim2.new(1, 0, 0, 2)
                NG698.Parent = NG697
                NG699 = Instance.new('TextLabel')
                NG699.BackgroundTransparency = 1
                NG699.BorderSizePixel = 0
                NG699.Name = dCD('GbbyQrfpevcgvba')
                NG699.Position = UDim2.new(0, 10, 0, 25)
                NG699.Size = UDim2.new(0, 80, 0, 200)
                NG699.Font = Enum.Font.Arial
                NG699.FontSize = Enum.FontSize.Size10
                NG699.Text = dCD('Nyybjf lbh gb nqq fzbxr, sver, naq fcnexyrf gb cnegf.')
                NG699.TextColor3 = Color3.new(1, 1, 1)
                NG699.TextWrapped = true
                NG699.TextXAlignment = Enum.TextXAlignment.Left
                NG699.TextYAlignment = Enum.TextYAlignment.Top
                NG699.Parent = NG697
                NG700 = Instance.new('TextLabel')
                NG700.BackgroundTransparency = 1
                NG700.BorderSizePixel = 0
                NG700.Name = dCD('GbbyAnzr')
                NG700.Position = UDim2.new(0, 10, 0, 0)
                NG700.Size = UDim2.new(0, 50, 0, 25)
                NG700.Font = Enum.Font.ArialBold
                NG700.FontSize = Enum.FontSize.Size10
                NG700.Text = dCD('QRPBENGR GBBY')
                NG700.TextColor3 = Color3.new(1, 1, 1)
                NG700.TextXAlignment = Enum.TextXAlignment.Left
                NG700.Parent = NG697
                NG701 = Instance.new('Frame')
                NG701.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG701.BackgroundTransparency = 0.20000000298023
                NG701.BorderSizePixel = 0
                NG701.Name = dCD('ZbirVasb')
                NG701.Size = UDim2.new(1, 0, 1, 0)
                NG701.Visible = false
                NG701.Parent = NG650
                NG702 = Instance.new('Frame')
                NG702.BackgroundTransparency = 1
                NG702.BorderSizePixel = 0
                NG702.Name = dCD('Pbagrag')
                NG702.Size = UDim2.new(1, 0, 0, 500)
                NG702.Parent = NG701
                NG703 = Instance.new('Frame')
                NG703.BackgroundTransparency = 1
                NG703.BorderSizePixel = 0
                NG703.Name = dCD('NkrfVasb')
                NG703.Position = UDim2.new(0, 0, 0, 60)
                NG703.Size = UDim2.new(1, 0, 0, 300)
                NG703.Parent = NG702
                NG704 = Instance.new('Frame')
                NG704.BackgroundColor3 = Color3.new(1, 0.666667, 0)
                NG704.BorderSizePixel = 0
                NG704.Position = UDim2.new(0, 10, 0, 83)
                NG704.Size = UDim2.new(0, 2, 0, 123)
                NG704.Parent = NG703
                NG705 = Instance.new('TextLabel')
                NG705.BackgroundTransparency = 1
                NG705.BorderSizePixel = 0
                NG705.Position = UDim2.new(0, 17, 0, 83)
                NG705.Size = UDim2.new(0, 80, 0, 180)
                NG705.Font = Enum.Font.Arial
                NG705.FontSize = Enum.FontSize.Size10
                NG705.Text = dCD(
[[TYBONY - Abezny  YBPNY - Eryngvir gb rnpu cneg  YNFG - Eryngvir gb gur ynfg cneg fryrpgrq]])
                NG705.TextColor3 = Color3.new(1, 1, 1)
                NG705.TextWrapped = true
                NG705.TextXAlignment = Enum.TextXAlignment.Left
                NG705.TextYAlignment = Enum.TextYAlignment.Top
                NG705.Parent = NG703
                NG706 = Instance.new('TextLabel')
                NG706.BackgroundTransparency = 1
                NG706.BorderSizePixel = 0
                NG706.Position = UDim2.new(0, 10, 0, 15)
                NG706.Size = UDim2.new(0, 80, 0, 60)
                NG706.Font = Enum.Font.Arial
                NG706.FontSize = Enum.FontSize.Size10
                NG706.Text = dCD(
[[Guvf bcgvba yrgf lbh pubbfr va juvpu qverpgvba gb zbir rnpu cneg.]])
                NG706.TextColor3 = Color3.new(1, 1, 1)
                NG706.TextWrapped = true
                NG706.TextXAlignment = Enum.TextXAlignment.Left
                NG706.TextYAlignment = Enum.TextYAlignment.Top
                NG706.Parent = NG703
                NG707 = Instance.new('TextLabel')
                NG707.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG707.BackgroundTransparency = 1
                NG707.BorderSizePixel = 0
                NG707.Position = UDim2.new(0, 10, 0, 0)
                NG707.Size = UDim2.new(0, 80, 0, 12)
                NG707.Font = Enum.Font.ArialBold
                NG707.FontSize = Enum.FontSize.Size10
                NG707.Text = dCD('Nkrf')
                NG707.TextColor3 = Color3.new(1, 1, 1)
                NG707.TextWrapped = true
                NG707.TextXAlignment = Enum.TextXAlignment.Left
                NG707.TextYAlignment = Enum.TextYAlignment.Top
                NG707.Parent = NG703
                NG708 = Instance.new('TextLabel')
                NG708.BackgroundTransparency = 1
                NG708.BorderSizePixel = 0
                NG708.Position = UDim2.new(0, 10, 0, 210)
                NG708.Size = UDim2.new(0, 80, 0, 90)
                NG708.Font = Enum.Font.Arial
                NG708.FontSize = Enum.FontSize.Size10
                NG708.Text = dCD(
[[GVC: Jura lbhe nkrf ner frg gb ybpny be ynfg, lbh pna evtug pyvpx gb punatr juvpu cneg unf gur unaqyrf.]])
                NG708.TextColor3 = Color3.new(1, 1, 1)
                NG708.TextWrapped = true
                NG708.TextXAlignment = Enum.TextXAlignment.Left
                NG708.TextYAlignment = Enum.TextYAlignment.Top
                NG708.Parent = NG703
                NG709 = Instance.new('Frame')
                NG709.BackgroundColor3 = Color3.new(1, 0.666667, 0)
                NG709.BorderSizePixel = 0
                NG709.Name = dCD('PbybeOne')
                NG709.Size = UDim2.new(1, 0, 0, 2)
                NG709.Parent = NG702
                NG710 = Instance.new('TextLabel')
                NG710.BackgroundTransparency = 1
                NG710.BorderSizePixel = 0
                NG710.Name = dCD('GbbyQrfpevcgvba')
                NG710.Position = UDim2.new(0, 10, 0, 25)
                NG710.Size = UDim2.new(0, 80, 0, 50)
                NG710.Font = Enum.Font.Arial
                NG710.FontSize = Enum.FontSize.Size10
                NG710.Text = dCD('Nyybjf lbh gb zbir cnegf.')
                NG710.TextColor3 = Color3.new(1, 1, 1)
                NG710.TextWrapped = true
                NG710.TextXAlignment = Enum.TextXAlignment.Left
                NG710.TextYAlignment = Enum.TextYAlignment.Top
                NG710.Parent = NG702
                NG711 = Instance.new('TextLabel')
                NG711.BackgroundTransparency = 1
                NG711.BorderSizePixel = 0
                NG711.Name = dCD('GbbyAnzr')
                NG711.Position = UDim2.new(0, 10, 0, 0)
                NG711.Size = UDim2.new(0, 50, 0, 25)
                NG711.Font = Enum.Font.ArialBold
                NG711.FontSize = Enum.FontSize.Size10
                NG711.Text = dCD('ZBIR GBBY')
                NG711.TextColor3 = Color3.new(1, 1, 1)
                NG711.TextXAlignment = Enum.TextXAlignment.Left
                NG711.Parent = NG702
                NG712 = Instance.new('Frame')
                NG712.BackgroundTransparency = 1
                NG712.BorderSizePixel = 0
                NG712.Name = dCD('VaperzragVasb')
                NG712.Position = UDim2.new(0, 0, 0, 365)
                NG712.Size = UDim2.new(1, 0, 0, 300)
                NG712.Parent = NG702
                NG713 = Instance.new('TextLabel')
                NG713.BackgroundTransparency = 1
                NG713.BorderSizePixel = 0
                NG713.Position = UDim2.new(0, 10, 0, 15)
                NG713.Size = UDim2.new(0, 80, 0, 60)
                NG713.Font = Enum.Font.Arial
                NG713.FontSize = Enum.FontSize.Size10
                NG713.Text = dCD('Yrgf lbh pubbfr ubj znal fghqf gb zbir gur cnegf.')
                NG713.TextColor3 = Color3.new(1, 1, 1)
                NG713.TextWrapped = true
                NG713.TextXAlignment = Enum.TextXAlignment.Left
                NG713.TextYAlignment = Enum.TextYAlignment.Top
                NG713.Parent = NG712
                NG714 = Instance.new('TextLabel')
                NG714.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG714.BackgroundTransparency = 1
                NG714.BorderSizePixel = 0
                NG714.Position = UDim2.new(0, 10, 0, 0)
                NG714.Size = UDim2.new(0, 80, 0, 12)
                NG714.Font = Enum.Font.ArialBold
                NG714.FontSize = Enum.FontSize.Size10
                NG714.Text = dCD('Vaperzrag')
                NG714.TextColor3 = Color3.new(1, 1, 1)
                NG714.TextWrapped = true
                NG714.TextXAlignment = Enum.TextXAlignment.Left
                NG714.TextYAlignment = Enum.TextYAlignment.Top
                NG714.Parent = NG712
                NG715 = Instance.new('TextLabel')
                NG715.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG715.BackgroundTransparency = 1
                NG715.BorderSizePixel = 0
                NG715.Position = UDim2.new(0, 10, 0, 70)
                NG715.Size = UDim2.new(0, 80, 0, 50)
                NG715.Font = Enum.Font.Arial
                NG715.FontSize = Enum.FontSize.Size10
                NG715.Text = dCD('GVC: Hfr gur - xrl gb sbphf ba gur vaperzrag vachg.')
                NG715.TextColor3 = Color3.new(1, 1, 1)
                NG715.TextWrapped = true
                NG715.TextXAlignment = Enum.TextXAlignment.Left
                NG715.TextYAlignment = Enum.TextYAlignment.Top
                NG715.Parent = NG712
                NG716 = Instance.new('Frame')
                NG716.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG716.BackgroundTransparency = 0.20000000298023
                NG716.BorderSizePixel = 0
                NG716.Name = dCD('EbgngrVasb')
                NG716.Size = UDim2.new(1, 0, 1, 0)
                NG716.Visible = false
                NG716.Parent = NG650
                NG717 = Instance.new('Frame')
                NG717.BackgroundTransparency = 1
                NG717.BorderSizePixel = 0
                NG717.Name = dCD('Pbagrag')
                NG717.Size = UDim2.new(1, 0, 0, 530)
                NG717.Parent = NG716
                NG718 = Instance.new('Frame')
                NG718.BackgroundTransparency = 1
                NG718.BorderSizePixel = 0
                NG718.Name = dCD('CvibgVasb')
                NG718.Position = UDim2.new(0, 0, 0, 60)
                NG718.Size = UDim2.new(1, 0, 0, 300)
                NG718.Parent = NG717
                NG719 = Instance.new('Frame')
                NG719.BackgroundColor3 = Color3.new(0.294118, 0.592157, 0.294118)
                NG719.BorderSizePixel = 0
                NG719.Position = UDim2.new(0, 10, 0, 73)
                NG719.Size = UDim2.new(0, 2, 0, 168)
                NG719.Parent = NG718
                NG720 = Instance.new('TextLabel')
                NG720.BackgroundTransparency = 1
                NG720.BorderSizePixel = 0
                NG720.Position = UDim2.new(0, 17, 0, 71)
                NG720.Size = UDim2.new(0, 80, 0, 180)
                NG720.Font = Enum.Font.Arial
                NG720.FontSize = Enum.FontSize.Size10
                NG720.Text = dCD(
[[PRAGRE - Ebgngr nebhaq gur pragre bs gur tebhc bs fryrpgrq cnegf  YBPNY - Ebgngr rnpu cneg nebhaq vgf bja pragre  YNFG - Ebgngr rnpu cneg nebhaq gur pragre bs gur ynfg cneg fryrpgrq]])
                NG720.TextColor3 = Color3.new(1, 1, 1)
                NG720.TextWrapped = true
                NG720.TextXAlignment = Enum.TextXAlignment.Left
                NG720.TextYAlignment = Enum.TextYAlignment.Top
                NG720.Parent = NG718
                NG721 = Instance.new('TextLabel')
                NG721.BackgroundTransparency = 1
                NG721.BorderSizePixel = 0
                NG721.Position = UDim2.new(0, 10, 0, 15)
                NG721.Size = UDim2.new(0, 80, 0, 60)
                NG721.Font = Enum.Font.Arial
                NG721.FontSize = Enum.FontSize.Size10
                NG721.Text = dCD(
[[Guvf bcgvba yrgf lbh pubbfr jung gb ebgngr gur cnegf nebhaq.]])
                NG721.TextColor3 = Color3.new(1, 1, 1)
                NG721.TextWrapped = true
                NG721.TextXAlignment = Enum.TextXAlignment.Left
                NG721.TextYAlignment = Enum.TextYAlignment.Top
                NG721.Parent = NG718
                NG722 = Instance.new('TextLabel')
                NG722.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG722.BackgroundTransparency = 1
                NG722.BorderSizePixel = 0
                NG722.Position = UDim2.new(0, 10, 0, 0)
                NG722.Size = UDim2.new(0, 80, 0, 12)
                NG722.Font = Enum.Font.ArialBold
                NG722.FontSize = Enum.FontSize.Size10
                NG722.Text = dCD('Cvibg')
                NG722.TextColor3 = Color3.new(1, 1, 1)
                NG722.TextWrapped = true
                NG722.TextXAlignment = Enum.TextXAlignment.Left
                NG722.TextYAlignment = Enum.TextYAlignment.Top
                NG722.Parent = NG718
                NG723 = Instance.new('TextLabel')
                NG723.BackgroundTransparency = 1
                NG723.BorderSizePixel = 0
                NG723.Position = UDim2.new(0, 10, 0, 250)
                NG723.Size = UDim2.new(0, 80, 0, 90)
                NG723.Font = Enum.Font.Arial
                NG723.FontSize = Enum.FontSize.Size10
                NG723.Text = dCD(
[[GVC: Jura gur cvibg vf frg gb ybpny be ynfg, lbh pna evtug pyvpx gb fjvgpu juvpu cneg unf gur unaqyrf.]])
                NG723.TextColor3 = Color3.new(1, 1, 1)
                NG723.TextWrapped = true
                NG723.TextXAlignment = Enum.TextXAlignment.Left
                NG723.TextYAlignment = Enum.TextYAlignment.Top
                NG723.Parent = NG718
                NG724 = Instance.new('Frame')
                NG724.BackgroundColor3 = Color3.new(0.294118, 0.592157, 0.294118)
                NG724.BorderSizePixel = 0
                NG724.Name = dCD('PbybeOne')
                NG724.Size = UDim2.new(1, 0, 0, 2)
                NG724.Parent = NG717
                NG725 = Instance.new('TextLabel')
                NG725.BackgroundTransparency = 1
                NG725.BorderSizePixel = 0
                NG725.Name = dCD('GbbyQrfpevcgvba')
                NG725.Position = UDim2.new(0, 10, 0, 25)
                NG725.Size = UDim2.new(0, 80, 0, 50)
                NG725.Font = Enum.Font.Arial
                NG725.FontSize = Enum.FontSize.Size10
                NG725.Text = dCD('Nyybjf lbh gb ebgngr cnegf.')
                NG725.TextColor3 = Color3.new(1, 1, 1)
                NG725.TextWrapped = true
                NG725.TextXAlignment = Enum.TextXAlignment.Left
                NG725.TextYAlignment = Enum.TextYAlignment.Top
                NG725.Parent = NG717
                NG726 = Instance.new('TextLabel')
                NG726.BackgroundTransparency = 1
                NG726.BorderSizePixel = 0
                NG726.Name = dCD('GbbyAnzr')
                NG726.Position = UDim2.new(0, 10, 0, 0)
                NG726.Size = UDim2.new(0, 50, 0, 25)
                NG726.Font = Enum.Font.ArialBold
                NG726.FontSize = Enum.FontSize.Size10
                NG726.Text = dCD('EBGNGR GBBY')
                NG726.TextColor3 = Color3.new(1, 1, 1)
                NG726.TextXAlignment = Enum.TextXAlignment.Left
                NG726.Parent = NG717
                NG727 = Instance.new('Frame')
                NG727.BackgroundTransparency = 1
                NG727.BorderSizePixel = 0
                NG727.Name = dCD('VaperzragVasb')
                NG727.Position = UDim2.new(0, 0, 0, 395)
                NG727.Size = UDim2.new(1, 0, 0, 130)
                NG727.Parent = NG717
                NG728 = Instance.new('TextLabel')
                NG728.BackgroundTransparency = 1
                NG728.BorderSizePixel = 0
                NG728.Position = UDim2.new(0, 10, 0, 15)
                NG728.Size = UDim2.new(0, 80, 0, 60)
                NG728.Font = Enum.Font.Arial
                NG728.FontSize = Enum.FontSize.Size10
                NG728.Text = dCD('Yrgf lbh pubbfr ubj znal qrterrf gb ebgngr gur cnegf.')
                NG728.TextColor3 = Color3.new(1, 1, 1)
                NG728.TextWrapped = true
                NG728.TextXAlignment = Enum.TextXAlignment.Left
                NG728.TextYAlignment = Enum.TextYAlignment.Top
                NG728.Parent = NG727
                NG729 = Instance.new('TextLabel')
                NG729.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG729.BackgroundTransparency = 1
                NG729.BorderSizePixel = 0
                NG729.Position = UDim2.new(0, 10, 0, 0)
                NG729.Size = UDim2.new(0, 80, 0, 12)
                NG729.Font = Enum.Font.ArialBold
                NG729.FontSize = Enum.FontSize.Size10
                NG729.Text = dCD('Vaperzrag')
                NG729.TextColor3 = Color3.new(1, 1, 1)
                NG729.TextWrapped = true
                NG729.TextXAlignment = Enum.TextXAlignment.Left
                NG729.TextYAlignment = Enum.TextYAlignment.Top
                NG729.Parent = NG727
                NG730 = Instance.new('TextLabel')
                NG730.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG730.BackgroundTransparency = 1
                NG730.BorderSizePixel = 0
                NG730.Position = UDim2.new(0, 10, 0, 70)
                NG730.Size = UDim2.new(0, 80, 0, 50)
                NG730.Font = Enum.Font.Arial
                NG730.FontSize = Enum.FontSize.Size10
                NG730.Text = dCD('GVC: Hfr gur - xrl gb sbphf ba gur vaperzrag vachg.')
                NG730.TextColor3 = Color3.new(1, 1, 1)
                NG730.TextWrapped = true
                NG730.TextXAlignment = Enum.TextXAlignment.Left
                NG730.TextYAlignment = Enum.TextYAlignment.Top
                NG730.Parent = NG727
                NG731 = Instance.new('Frame')
                NG731.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG731.BackgroundTransparency = 0.20000000298023
                NG731.BorderSizePixel = 0
                NG731.Name = dCD('ErfvmrVasb')
                NG731.Size = UDim2.new(1, 0, 1, 0)
                NG731.Visible = false
                NG731.Parent = NG650
                NG732 = Instance.new('Frame')
                NG732.BackgroundTransparency = 1
                NG732.BorderSizePixel = 0
                NG732.Name = dCD('Pbagrag')
                NG732.Size = UDim2.new(1, 0, 0, 330)
                NG732.Parent = NG731
                NG733 = Instance.new('Frame')
                NG733.BackgroundTransparency = 1
                NG733.BorderSizePixel = 0
                NG733.Name = dCD('QverpgvbafVasb')
                NG733.Position = UDim2.new(0, 0, 0, 60)
                NG733.Size = UDim2.new(1, 0, 0, 300)
                NG733.Parent = NG732
                NG734 = Instance.new('TextLabel')
                NG734.BackgroundTransparency = 1
                NG734.BorderSizePixel = 0
                NG734.Position = UDim2.new(0, 10, 0, 15)
                NG734.Size = UDim2.new(0, 80, 0, 120)
                NG734.Font = Enum.Font.Arial
                NG734.FontSize = Enum.FontSize.Size10
                NG734.Text = dCD(
[[Yrgf lbh pubbfr va juvpu qverpgvbaf gb erfvmr gur cneg.  GVC: Lbh pna fjvgpu juvpu cneg unf gur unaqyrf ol evtug-pyvpxvat.]])
                NG734.TextColor3 = Color3.new(1, 1, 1)
                NG734.TextWrapped = true
                NG734.TextXAlignment = Enum.TextXAlignment.Left
                NG734.TextYAlignment = Enum.TextYAlignment.Top
                NG734.Parent = NG733
                NG735 = Instance.new('TextLabel')
                NG735.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG735.BackgroundTransparency = 1
                NG735.BorderSizePixel = 0
                NG735.Position = UDim2.new(0, 10, 0, 0)
                NG735.Size = UDim2.new(0, 80, 0, 12)
                NG735.Font = Enum.Font.ArialBold
                NG735.FontSize = Enum.FontSize.Size10
                NG735.Text = dCD('Qverpgvbaf')
                NG735.TextColor3 = Color3.new(1, 1, 1)
                NG735.TextWrapped = true
                NG735.TextXAlignment = Enum.TextXAlignment.Left
                NG735.TextYAlignment = Enum.TextYAlignment.Top
                NG735.Parent = NG733
                NG736 = Instance.new('Frame')
                NG736.BackgroundColor3 = Color3.new(0.0156863, 0.686275, 0.92549)
                NG736.BorderSizePixel = 0
                NG736.Name = dCD('PbybeOne')
                NG736.Size = UDim2.new(1, 0, 0, 2)
                NG736.Parent = NG732
                NG737 = Instance.new('TextLabel')
                NG737.BackgroundTransparency = 1
                NG737.BorderSizePixel = 0
                NG737.Name = dCD('GbbyQrfpevcgvba')
                NG737.Position = UDim2.new(0, 10, 0, 25)
                NG737.Size = UDim2.new(0, 80, 0, 50)
                NG737.Font = Enum.Font.Arial
                NG737.FontSize = Enum.FontSize.Size10
                NG737.Text = dCD('Nyybjf lbh gb erfvmr cnegf.')
                NG737.TextColor3 = Color3.new(1, 1, 1)
                NG737.TextWrapped = true
                NG737.TextXAlignment = Enum.TextXAlignment.Left
                NG737.TextYAlignment = Enum.TextYAlignment.Top
                NG737.Parent = NG732
                NG738 = Instance.new('TextLabel')
                NG738.BackgroundTransparency = 1
                NG738.BorderSizePixel = 0
                NG738.Name = dCD('GbbyAnzr')
                NG738.Position = UDim2.new(0, 10, 0, 0)
                NG738.Size = UDim2.new(0, 50, 0, 25)
                NG738.Font = Enum.Font.ArialBold
                NG738.FontSize = Enum.FontSize.Size10
                NG738.Text = dCD('ERFVMR GBBY')
                NG738.TextColor3 = Color3.new(1, 1, 1)
                NG738.TextXAlignment = Enum.TextXAlignment.Left
                NG738.Parent = NG732
                NG739 = Instance.new('Frame')
                NG739.BackgroundTransparency = 1
                NG739.BorderSizePixel = 0
                NG739.Name = dCD('VaperzragVasb')
                NG739.Position = UDim2.new(0, 0, 0, 200)
                NG739.Size = UDim2.new(1, 0, 0, 140)
                NG739.Parent = NG732
                NG740 = Instance.new('TextLabel')
                NG740.BackgroundTransparency = 1
                NG740.BorderSizePixel = 0
                NG740.Position = UDim2.new(0, 10, 0, 15)
                NG740.Size = UDim2.new(0, 80, 0, 60)
                NG740.Font = Enum.Font.Arial
                NG740.FontSize = Enum.FontSize.Size10
                NG740.Text = dCD('Yrgf lbh pubbfr ubj znal fghqf gb erfvmr gur cnegf.')
                NG740.TextColor3 = Color3.new(1, 1, 1)
                NG740.TextWrapped = true
                NG740.TextXAlignment = Enum.TextXAlignment.Left
                NG740.TextYAlignment = Enum.TextYAlignment.Top
                NG740.Parent = NG739
                NG741 = Instance.new('TextLabel')
                NG741.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG741.BackgroundTransparency = 1
                NG741.BorderSizePixel = 0
                NG741.Position = UDim2.new(0, 10, 0, 0)
                NG741.Size = UDim2.new(0, 80, 0, 12)
                NG741.Font = Enum.Font.ArialBold
                NG741.FontSize = Enum.FontSize.Size10
                NG741.Text = dCD('Vaperzrag')
                NG741.TextColor3 = Color3.new(1, 1, 1)
                NG741.TextWrapped = true
                NG741.TextXAlignment = Enum.TextXAlignment.Left
                NG741.TextYAlignment = Enum.TextYAlignment.Top
                NG741.Parent = NG739
                NG742 = Instance.new('TextLabel')
                NG742.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG742.BackgroundTransparency = 1
                NG742.BorderSizePixel = 0
                NG742.Position = UDim2.new(0, 10, 0, 70)
                NG742.Size = UDim2.new(0, 80, 0, 50)
                NG742.Font = Enum.Font.Arial
                NG742.FontSize = Enum.FontSize.Size10
                NG742.Text = dCD('GVC: Hfr gur - xrl gb sbphf ba gur vaperzrag vachg.')
                NG742.TextColor3 = Color3.new(1, 1, 1)
                NG742.TextWrapped = true
                NG742.TextXAlignment = Enum.TextXAlignment.Left
                NG742.TextYAlignment = Enum.TextYAlignment.Top
                NG742.Parent = NG739
                NG743 = Instance.new('Frame')
                NG743.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG743.BackgroundTransparency = 0.20000000298023
                NG743.BorderSizePixel = 0
                NG743.Name = dCD('JryqVasb')
                NG743.Size = UDim2.new(1, 0, 1, 0)
                NG743.Visible = false
                NG743.Parent = NG650
                NG744 = Instance.new('Frame')
                NG744.BackgroundTransparency = 1
                NG744.BorderSizePixel = 0
                NG744.Name = dCD('Pbagrag')
                NG744.Size = UDim2.new(1, 0, 0, 310)
                NG744.Parent = NG743
                NG745 = Instance.new('Frame')
                NG745.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG745.BorderSizePixel = 0
                NG745.Name = dCD('PbybeOne')
                NG745.Size = UDim2.new(1, 0, 0, 2)
                NG745.Parent = NG744
                NG746 = Instance.new('TextLabel')
                NG746.BackgroundTransparency = 1
                NG746.BorderSizePixel = 0
                NG746.Name = dCD('GbbyQrfpevcgvba')
                NG746.Position = UDim2.new(0, 10, 0, 25)
                NG746.Size = UDim2.new(0, 80, 0, 300)
                NG746.Font = Enum.Font.Arial
                NG746.FontSize = Enum.FontSize.Size10
                NG746.Text = dCD(
[[Nyybjf lbh gb jryq cnegf gbtrgure fb gung gurl'yy zbir gbtrgure.  ABGR: Gur jryqf orgjrra cnegf znl oernx vs lbh bayl zbir bar bs gur cnegf (zbir nyy bs gur cnegf gung ner pbaarpgrq ol jryqf gb cerirag guvf).  ABGR: Guvf gbby qbrfa'g jbex va EBOYBK Fghqvb (vg'f xvaq bs hfryrff va gung pbagrkg).]])
                NG746.TextColor3 = Color3.new(1, 1, 1)
                NG746.TextWrapped = true
                NG746.TextXAlignment = Enum.TextXAlignment.Left
                NG746.TextYAlignment = Enum.TextYAlignment.Top
                NG746.Parent = NG744
                NG747 = Instance.new('TextLabel')
                NG747.BackgroundTransparency = 1
                NG747.BorderSizePixel = 0
                NG747.Name = dCD('GbbyAnzr')
                NG747.Position = UDim2.new(0, 10, 0, 0)
                NG747.Size = UDim2.new(0, 50, 0, 25)
                NG747.Font = Enum.Font.ArialBold
                NG747.FontSize = Enum.FontSize.Size10
                NG747.Text = dCD('JRYQ GBBY')
                NG747.TextColor3 = Color3.new(1, 1, 1)
                NG747.TextXAlignment = Enum.TextXAlignment.Left
                NG747.Parent = NG744
                NG748 = Instance.new('Frame')
                NG748.BackgroundColor3 = Color3.new(0, 0, 0)
                NG748.BackgroundTransparency = 0.75
                NG748.BorderSizePixel = 0
                NG748.Name = dCD('VasbOhggbaf')
                NG748.Position = UDim2.new(0, 0, 0, 350)
                NG748.Size = UDim2.new(1, 0, 0, 32)
                NG748.Parent = NG649
                NG749 = Instance.new('TextLabel')
                NG749.BackgroundTransparency = 1
                NG749.BorderSizePixel = 0
                NG749.Name = dCD('S3KFvtangher')
                NG749.Position = UDim2.new(0, 0, 0, 7)
                NG749.Size = UDim2.new(1, -28, 0, 17)
                NG749.Font = Enum.Font.ArialBold
                NG749.FontSize = Enum.FontSize.Size14
                NG749.Text = dCD('S3K')
                NG749.TextColor3 = Color3.new(1, 1, 1)
                NG749.TextScaled = true
                NG749.TextStrokeTransparency = 0.89999997615814
                NG749.TextWrapped = true
                NG749.Parent = NG748
                NG750 = Instance.new('ImageButton')
                NG750.BackgroundColor3 = Color3.new(0.333333, 0.666667, 1)
                NG750.BackgroundTransparency = 1
                NG750.BorderSizePixel = 0
                NG750.Name = dCD('UrycOhggba')
                NG750.Position = UDim2.new(1, -32, 0, 0)
                NG750.Size = UDim2.new(0, 32, 0, 32)
                NG750.Style = Enum.ButtonStyle.Custom
                NG750.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141911973')
                NG750.Parent = NG748
                NG751 = Instance.new('Frame')
                NG751.BackgroundTransparency = 1
                NG751.BorderSizePixel = 0
                NG751.Name = dCD('Gbbygvc')
                NG751.Position = UDim2.new(-0.300000012, 0, 1, 0)
                NG751.Size = UDim2.new(1.60000002, 0, 0, 0)
                NG751.Visible = false
                NG751.Parent = NG750
                NG752 = Instance.new('TextLabel')
                NG752.BackgroundColor3 = Color3.new(0, 0, 0)
                NG752.BackgroundTransparency = 0.5
                NG752.BorderSizePixel = 0
                NG752.Name = dCD('Grkg')
                NG752.Size = UDim2.new(1, 0, 0, 20)
                NG752.Font = Enum.Font.ArialBold
                NG752.FontSize = Enum.FontSize.Size10
                NG752.Text = dCD('URYC')
                NG752.TextColor3 = Color3.new(1, 1, 1)
                NG752.Parent = NG751
                NG753 = Instance.new('Frame')
                NG753.BackgroundColor3 = Color3.new(0, 0, 0)
                NG753.BackgroundTransparency = 0.69999998807907
                NG753.BorderSizePixel = 0
                NG753.Name = dCD('Funqbj')
                NG753.Position = UDim2.new(0, 0, 1, -2)
                NG753.Size = UDim2.new(1, 0, 0, 2)
                NG753.Parent = NG748
                NG754 = Instance.new('Frame')
                NG754.BackgroundColor3 = Color3.new(0, 0, 0)
                NG754.BackgroundTransparency = 0.5
                NG754.BorderSizePixel = 0
                NG754.Name = dCD('FryrpgvbaOhggbaf')
                NG754.Position = UDim2.new(0, 0, 0, 245)
                NG754.Size = UDim2.new(1, 0, 0, 105)
                NG754.Parent = NG649
                NG755 = Instance.new('ImageButton')
                NG755.BackgroundColor3 = Color3.new(0.333333, 0.666667, 1)
                NG755.BackgroundTransparency = 1
                NG755.BorderSizePixel = 0
                NG755.Name = dCD('QryrgrOhggba')
                NG755.Position = UDim2.new(0, 0, 0, 35)
                NG755.Size = UDim2.new(0, 35, 0, 35)
                NG755.Style = Enum.ButtonStyle.Custom
                NG755.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=142074644')
                NG755.Parent = NG754
                NG756 = Instance.new('Frame')
                NG756.BackgroundTransparency = 1
                NG756.BorderSizePixel = 0
                NG756.Name = dCD('Gbbygvc')
                NG756.Position = UDim2.new(-0.300000012, 0, 1, 0)
                NG756.Size = UDim2.new(1.60000002, 0, 0, 0)
                NG756.Visible = false
                NG756.Parent = NG755
                NG757 = Instance.new('TextLabel')
                NG757.BackgroundColor3 = Color3.new(0, 0, 0)
                NG757.BackgroundTransparency = 0.5
                NG757.BorderSizePixel = 0
                NG757.Name = dCD('Grkg')
                NG757.Size = UDim2.new(1, 0, 0, 28)
                NG757.Font = Enum.Font.ArialBold
                NG757.FontSize = Enum.FontSize.Size10
                NG757.Text = dCD('QRYRGR (Fuvsg + K)')
                NG757.TextColor3 = Color3.new(1, 1, 1)
                NG757.Parent = NG756
                NG758 = Instance.new('ImageButton')
                NG758.BackgroundColor3 = Color3.new(0.333333, 0.666667, 1)
                NG758.BackgroundTransparency = 1
                NG758.BorderSizePixel = 0
                NG758.Name = dCD('RkcbegOhggba')
                NG758.Position = UDim2.new(0, 35, 0, 35)
                NG758.Size = UDim2.new(0, 35, 0, 35)
                NG758.Style = Enum.ButtonStyle.Custom
                NG758.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=142074569')
                NG758.Parent = NG754
                NG759 = Instance.new('Frame')
                NG759.BackgroundTransparency = 1
                NG759.BorderSizePixel = 0
                NG759.Name = dCD('Gbbygvc')
                NG759.Position = UDim2.new(-0.300000012, 0, 1, 0)
                NG759.Size = UDim2.new(1.60000002, 0, 0, 0)
                NG759.Visible = false
                NG759.Parent = NG758
                NG760 = Instance.new('TextLabel')
                NG760.BackgroundColor3 = Color3.new(0, 0, 0)
                NG760.BackgroundTransparency = 0.5
                NG760.BorderSizePixel = 0
                NG760.Name = dCD('Grkg')
                NG760.Size = UDim2.new(1, 0, 0, 28)
                NG760.Font = Enum.Font.ArialBold
                NG760.FontSize = Enum.FontSize.Size10
                NG760.Text = dCD('RKCBEG (Fuvsg + C)')
                NG760.TextColor3 = Color3.new(1, 1, 1)
                NG760.Parent = NG759
                NG761 = Instance.new('ImageButton')
                NG761.BackgroundColor3 = Color3.new(0.333333, 0.666667, 1)
                NG761.BackgroundTransparency = 1
                NG761.BorderSizePixel = 0
                NG761.Name = dCD('ErqbOhggba')
                NG761.Position = UDim2.new(0, 35, 0, 0)
                NG761.Size = UDim2.new(0, 35, 0, 35)
                NG761.Style = Enum.ButtonStyle.Custom
                NG761.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=142074553')
                NG761.Parent = NG754
                NG762 = Instance.new('Frame')
                NG762.BackgroundTransparency = 1
                NG762.BorderSizePixel = 0
                NG762.Name = dCD('Gbbygvc')
                NG762.Position = UDim2.new(-0.300000012, 0, 1, 0)
                NG762.Size = UDim2.new(1.60000002, 0, 0, 0)
                NG762.Visible = false
                NG762.Parent = NG761
                NG763 = Instance.new('TextLabel')
                NG763.BackgroundColor3 = Color3.new(0, 0, 0)
                NG763.BackgroundTransparency = 0.5
                NG763.BorderSizePixel = 0
                NG763.Name = dCD('Grkg')
                NG763.Size = UDim2.new(1, 0, 0, 28)
                NG763.Font = Enum.Font.ArialBold
                NG763.FontSize = Enum.FontSize.Size10
                NG763.Text = dCD('ERQB (Fuvsg + L)')
                NG763.TextColor3 = Color3.new(1, 1, 1)
                NG763.Parent = NG762
                NG764 = Instance.new('ImageButton')
                NG764.BackgroundColor3 = Color3.new(0.333333, 0.666667, 1)
                NG764.BackgroundTransparency = 1
                NG764.BorderSizePixel = 0
                NG764.Name = dCD('HaqbOhggba')
                NG764.Size = UDim2.new(0, 35, 0, 35)
                NG764.Style = Enum.ButtonStyle.Custom
                NG764.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=142074557')
                NG764.Parent = NG754
                NG765 = Instance.new('Frame')
                NG765.BackgroundTransparency = 1
                NG765.BorderSizePixel = 0
                NG765.Name = dCD('Gbbygvc')
                NG765.Position = UDim2.new(-0.300000012, 0, 1, 0)
                NG765.Size = UDim2.new(1.60000002, 0, 0, 0)
                NG765.Visible = false
                NG765.Parent = NG764
                NG766 = Instance.new('TextLabel')
                NG766.BackgroundColor3 = Color3.new(0, 0, 0)
                NG766.BackgroundTransparency = 0.5
                NG766.BorderSizePixel = 0
                NG766.Name = dCD('Grkg')
                NG766.Size = UDim2.new(1, 0, 0, 28)
                NG766.Font = Enum.Font.ArialBold
                NG766.FontSize = Enum.FontSize.Size10
                NG766.Text = dCD('HAQB (Fuvsg + M)')
                NG766.TextColor3 = Color3.new(1, 1, 1)
                NG766.Parent = NG765
                NG767 = Instance.new('ImageButton')
                NG767.BackgroundColor3 = Color3.new(0.333333, 0.666667, 1)
                NG767.BackgroundTransparency = 1
                NG767.BorderSizePixel = 0
                NG767.Name = dCD('PybarOhggba')
                NG767.Position = UDim2.new(0, 0, 0, 70)
                NG767.Size = UDim2.new(0, 35, 0, 35)
                NG767.Style = Enum.ButtonStyle.Custom
                NG767.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=142074563')
                NG767.Parent = NG754
                NG768 = Instance.new('Frame')
                NG768.BackgroundTransparency = 1
                NG768.BorderSizePixel = 0
                NG768.Name = dCD('Gbbygvc')
                NG768.Position = UDim2.new(-0.300000012, 0, 1, 0)
                NG768.Size = UDim2.new(1.60000002, 0, 0, 0)
                NG768.Visible = false
                NG768.Parent = NG767
                NG769 = Instance.new('TextLabel')
                NG769.BackgroundColor3 = Color3.new(0, 0, 0)
                NG769.BackgroundTransparency = 0.5
                NG769.BorderSizePixel = 0
                NG769.Name = dCD('Grkg')
                NG769.Size = UDim2.new(1, 0, 0, 28)
                NG769.Font = Enum.Font.ArialBold
                NG769.FontSize = Enum.FontSize.Size10
                NG769.Text = dCD('PYBAR (Fuvsg + P)')
                NG769.TextColor3 = Color3.new(1, 1, 1)
                NG769.Parent = NG768
                NG770 = Instance.new('ImageButton')
                NG770.BackgroundColor3 = Color3.new(0.333333, 0.666667, 1)
                NG770.BackgroundTransparency = 1
                NG770.BorderSizePixel = 0
                NG770.Name = dCD('TebhcfOhggba')
                NG770.Position = UDim2.new(0, 35, 0, 70)
                NG770.Size = UDim2.new(0, 35, 0, 35)
                NG770.Style = Enum.ButtonStyle.Custom
                NG770.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=160378203')
                NG770.Parent = NG754
                NG771 = Instance.new('Frame')
                NG771.BackgroundTransparency = 1
                NG771.BorderSizePixel = 0
                NG771.Name = dCD('Gbbygvc')
                NG771.Position = UDim2.new(-0.300000012, 0, 1, 0)
                NG771.Size = UDim2.new(1.60000002, 0, 0, 0)
                NG771.Visible = false
                NG771.Parent = NG770
                NG772 = Instance.new('TextLabel')
                NG772.BackgroundColor3 = Color3.new(0, 0, 0)
                NG772.BackgroundTransparency = 0.5
                NG772.BorderSizePixel = 0
                NG772.Name = dCD('Grkg')
                NG772.Size = UDim2.new(1, 0, 0, 28)
                NG772.Font = Enum.Font.ArialBold
                NG772.FontSize = Enum.FontSize.Size10
                NG772.Text = dCD('TEBHCF (Fuvsg + T)')
                NG772.TextColor3 = Color3.new(1, 1, 1)
                NG772.TextWrapped = true
                NG772.Parent = NG771
                NG773 = Instance.new('Frame')
                NG773.BackgroundColor3 = Color3.new(0, 0, 0)
                NG773.BackgroundTransparency = 0.60000002384186
                NG773.BorderSizePixel = 0
                NG773.Name = dCD('GbbyOhggbaf')
                NG773.Size = UDim2.new(0, 70, 0, 245)
                NG773.Parent = NG649
                NG774 = Instance.new('ImageButton')
                NG774.AutoButtonColor = false
                NG774.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG774.BackgroundTransparency = 1
                NG774.BorderSizePixel = 0
                NG774.Name = dCD('QrpbengrOhggba')
                NG774.Position = UDim2.new(0, 35, 0, 210)
                NG774.Size = UDim2.new(0, 35, 0, 35)
                NG774.Style = Enum.ButtonStyle.Custom
                NG774.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141741412')
                NG774.Parent = NG773
                NG775 = Instance.new('TextLabel')
                NG775.BackgroundColor3 = Color3.new(0, 0, 0)
                NG775.BackgroundTransparency = 1
                NG775.BorderSizePixel = 0
                NG775.Name = dCD('Fubegphg')
                NG775.Size = UDim2.new(0, 13, 0, 13)
                NG775.Font = Enum.Font.ArialBold
                NG775.FontSize = Enum.FontSize.Size10
                NG775.Text = dCD('C')
                NG775.TextColor3 = Color3.new(1, 1, 1)
                NG775.Parent = NG774
                NG776 = Instance.new('ImageButton')
                NG776.AutoButtonColor = false
                NG776.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG776.BackgroundTransparency = 1
                NG776.BorderSizePixel = 0
                NG776.Name = dCD('JryqOhggba')
                NG776.Position = UDim2.new(0, 35, 0, 175)
                NG776.Size = UDim2.new(0, 35, 0, 35)
                NG776.Style = Enum.ButtonStyle.Custom
                NG776.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141741418')
                NG776.Parent = NG773
                NG777 = Instance.new('TextLabel')
                NG777.BackgroundColor3 = Color3.new(0, 0, 0)
                NG777.BackgroundTransparency = 1
                NG777.BorderSizePixel = 0
                NG777.Name = dCD('Fubegphg')
                NG777.Size = UDim2.new(0, 13, 0, 13)
                NG777.Font = Enum.Font.ArialBold
                NG777.FontSize = Enum.FontSize.Size10
                NG777.Text = dCD('S')
                NG777.TextColor3 = Color3.new(1, 1, 1)
                NG777.Parent = NG776
                NG778 = Instance.new('ImageButton')
                NG778.AutoButtonColor = false
                NG778.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG778.BackgroundTransparency = 1
                NG778.BorderSizePixel = 0
                NG778.Name = dCD('YvtugvatOhggba')
                NG778.Position = UDim2.new(0, 0, 0, 210)
                NG778.Size = UDim2.new(0, 35, 0, 35)
                NG778.Style = Enum.ButtonStyle.Custom
                NG778.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141741341')
                NG778.Parent = NG773
                NG779 = Instance.new('TextLabel')
                NG779.BackgroundColor3 = Color3.new(0, 0, 0)
                NG779.BackgroundTransparency = 1
                NG779.BorderSizePixel = 0
                NG779.Name = dCD('Fubegphg')
                NG779.Size = UDim2.new(0, 13, 0, 13)
                NG779.Font = Enum.Font.ArialBold
                NG779.FontSize = Enum.FontSize.Size10
                NG779.Text = dCD('H')
                NG779.TextColor3 = Color3.new(1, 1, 1)
                NG779.Parent = NG778
                NG780 = Instance.new('ImageButton')
                NG780.AutoButtonColor = false
                NG780.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG780.BackgroundTransparency = 1
                NG780.BorderSizePixel = 0
                NG780.Name = dCD('ZrfuOhggba')
                NG780.Position = UDim2.new(0, 35, 0, 140)
                NG780.Size = UDim2.new(0, 35, 0, 35)
                NG780.Style = Enum.ButtonStyle.Custom
                NG780.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141806786')
                NG780.Parent = NG773
                NG781 = Instance.new('TextLabel')
                NG781.BackgroundColor3 = Color3.new(0, 0, 0)
                NG781.BackgroundTransparency = 1
                NG781.BorderSizePixel = 0
                NG781.Name = dCD('Fubegphg')
                NG781.Size = UDim2.new(0, 13, 0, 13)
                NG781.Font = Enum.Font.ArialBold
                NG781.FontSize = Enum.FontSize.Size10
                NG781.Text = dCD('U')
                NG781.TextColor3 = Color3.new(1, 1, 1)
                NG781.Parent = NG780
                NG782 = Instance.new('ImageButton')
                NG782.AutoButtonColor = false
                NG782.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG782.BackgroundTransparency = 1
                NG782.BorderSizePixel = 0
                NG782.Name = dCD('PbyyvfvbaOhggba')
                NG782.Position = UDim2.new(0, 35, 0, 105)
                NG782.Size = UDim2.new(0, 35, 0, 35)
                NG782.Style = Enum.ButtonStyle.Custom
                NG782.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141809596')
                NG782.Parent = NG773
                NG783 = Instance.new('TextLabel')
                NG783.BackgroundColor3 = Color3.new(0, 0, 0)
                NG783.BackgroundTransparency = 1
                NG783.BorderSizePixel = 0
                NG783.Name = dCD('Fubegphg')
                NG783.Size = UDim2.new(0, 13, 0, 13)
                NG783.Font = Enum.Font.ArialBold
                NG783.FontSize = Enum.FontSize.Size10
                NG783.Text = dCD('X')
                NG783.TextColor3 = Color3.new(1, 1, 1)
                NG783.Parent = NG782
                NG784 = Instance.new('ImageButton')
                NG784.AutoButtonColor = false
                NG784.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG784.BackgroundTransparency = 1
                NG784.BorderSizePixel = 0
                NG784.Name = dCD('ZngrevnyOhggba')
                NG784.Position = UDim2.new(0, 35, 0, 70)
                NG784.Size = UDim2.new(0, 35, 0, 35)
                NG784.Style = Enum.ButtonStyle.Custom
                NG784.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141809090')
                NG784.Parent = NG773
                NG785 = Instance.new('TextLabel')
                NG785.BackgroundColor3 = Color3.new(0, 0, 0)
                NG785.BackgroundTransparency = 1
                NG785.BorderSizePixel = 0
                NG785.Name = dCD('Fubegphg')
                NG785.Size = UDim2.new(0, 13, 0, 13)
                NG785.Font = Enum.Font.ArialBold
                NG785.FontSize = Enum.FontSize.Size10
                NG785.Text = dCD('A')
                NG785.TextColor3 = Color3.new(1, 1, 1)
                NG785.Parent = NG784
                NG786 = Instance.new('ImageButton')
                NG786.AutoButtonColor = false
                NG786.BackgroundColor3 = Color3.new(1, 0, 0)
                NG786.BackgroundTransparency = 1
                NG786.BorderSizePixel = 0
                NG786.Name = dCD('CnvagOhggba')
                NG786.Position = UDim2.new(0, 35, 0, 35)
                NG786.Size = UDim2.new(0, 35, 0, 35)
                NG786.Style = Enum.ButtonStyle.Custom
                NG786.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141741444')
                NG786.Parent = NG773
                NG787 = Instance.new('TextLabel')
                NG787.BackgroundColor3 = Color3.new(0, 0, 0)
                NG787.BackgroundTransparency = 1
                NG787.BorderSizePixel = 0
                NG787.Name = dCD('Fubegphg')
                NG787.Size = UDim2.new(0, 13, 0, 13)
                NG787.Font = Enum.Font.ArialBold
                NG787.FontSize = Enum.FontSize.Size10
                NG787.Text = dCD('I')
                NG787.TextColor3 = Color3.new(1, 1, 1)
                NG787.Parent = NG786
                NG788 = Instance.new('ImageButton')
                NG788.AutoButtonColor = false
                NG788.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG788.BackgroundTransparency = 1
                NG788.BorderSizePixel = 0
                NG788.Name = dCD('ArjCnegOhggba')
                NG788.Position = UDim2.new(0, 0, 0, 140)
                NG788.Size = UDim2.new(0, 35, 0, 35)
                NG788.Style = Enum.ButtonStyle.Custom
                NG788.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141741393')
                NG788.Parent = NG773
                NG789 = Instance.new('TextLabel')
                NG789.BackgroundColor3 = Color3.new(0, 0, 0)
                NG789.BackgroundTransparency = 1
                NG789.BorderSizePixel = 0
                NG789.Name = dCD('Fubegphg')
                NG789.Size = UDim2.new(0, 13, 0, 13)
                NG789.Font = Enum.Font.ArialBold
                NG789.FontSize = Enum.FontSize.Size10
                NG789.Text = dCD('W')
                NG789.TextColor3 = Color3.new(1, 1, 1)
                NG789.Parent = NG788
                NG790 = Instance.new('ImageButton')
                NG790.AutoButtonColor = false
                NG790.BackgroundColor3 = Color3.new(1, 0.686275, 0)
                NG790.BackgroundTransparency = 1
                NG790.BorderSizePixel = 0
                NG790.Name = dCD('ZbirOhggba')
                NG790.Size = UDim2.new(0, 35, 0, 35)
                NG790.Style = Enum.ButtonStyle.Custom
                NG790.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141741366')
                NG790.Parent = NG773
                NG791 = Instance.new('TextLabel')
                NG791.BackgroundColor3 = Color3.new(0, 0, 0)
                NG791.BackgroundTransparency = 1
                NG791.BorderSizePixel = 0
                NG791.Name = dCD('Fubegphg')
                NG791.Size = UDim2.new(0, 13, 0, 13)
                NG791.Font = Enum.Font.ArialBold
                NG791.FontSize = Enum.FontSize.Size10
                NG791.Text = dCD('M')
                NG791.TextColor3 = Color3.new(1, 1, 1)
                NG791.Parent = NG790
                NG792 = Instance.new('ImageButton')
                NG792.AutoButtonColor = false
                NG792.BackgroundColor3 = Color3.new(0.0156863, 0.686275, 0.92549)
                NG792.BackgroundTransparency = 1
                NG792.BorderSizePixel = 0
                NG792.Name = dCD('ErfvmrOhggba')
                NG792.Position = UDim2.new(0, 35, 0, 0)
                NG792.Size = UDim2.new(0, 35, 0, 35)
                NG792.Style = Enum.ButtonStyle.Custom
                NG792.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141794324')
                NG792.Parent = NG773
                NG793 = Instance.new('TextLabel')
                NG793.BackgroundColor3 = Color3.new(0, 0, 0)
                NG793.BackgroundTransparency = 1
                NG793.BorderSizePixel = 0
                NG793.Name = dCD('Fubegphg')
                NG793.Size = UDim2.new(0, 13, 0, 13)
                NG793.Font = Enum.Font.ArialBold
                NG793.FontSize = Enum.FontSize.Size10
                NG793.Text = dCD('K')
                NG793.TextColor3 = Color3.new(1, 1, 1)
                NG793.Parent = NG792
                NG794 = Instance.new('ImageButton')
                NG794.AutoButtonColor = false
                NG794.BackgroundColor3 = Color3.new(0.294118, 0.592157, 0.294118)
                NG794.BackgroundTransparency = 1
                NG794.BorderSizePixel = 0
                NG794.Name = dCD('EbgngrOhggba')
                NG794.Position = UDim2.new(0, 0, 0, 35)
                NG794.Size = UDim2.new(0, 35, 0, 35)
                NG794.Style = Enum.ButtonStyle.Custom
                NG794.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141807775')
                NG794.Parent = NG773
                NG795 = Instance.new('TextLabel')
                NG795.BackgroundColor3 = Color3.new(0, 0, 0)
                NG795.BackgroundTransparency = 1
                NG795.BorderSizePixel = 0
                NG795.Name = dCD('Fubegphg')
                NG795.Size = UDim2.new(0, 13, 0, 13)
                NG795.Font = Enum.Font.ArialBold
                NG795.FontSize = Enum.FontSize.Size10
                NG795.Text = dCD('P')
                NG795.TextColor3 = Color3.new(1, 1, 1)
                NG795.Parent = NG794
                NG796 = Instance.new('ImageButton')
                NG796.AutoButtonColor = false
                NG796.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG796.BackgroundTransparency = 1
                NG796.BorderSizePixel = 0
                NG796.Name = dCD('FhesnprOhggba')
                NG796.Position = UDim2.new(0, 0, 0, 70)
                NG796.Size = UDim2.new(0, 35, 0, 35)
                NG796.Style = Enum.ButtonStyle.Custom
                NG796.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141803491')
                NG796.Parent = NG773
                NG797 = Instance.new('TextLabel')
                NG797.BackgroundColor3 = Color3.new(0, 0, 0)
                NG797.BackgroundTransparency = 1
                NG797.BorderSizePixel = 0
                NG797.Name = dCD('Fubegphg')
                NG797.Size = UDim2.new(0, 13, 0, 13)
                NG797.Font = Enum.Font.ArialBold
                NG797.FontSize = Enum.FontSize.Size10
                NG797.Text = dCD('O')
                NG797.TextColor3 = Color3.new(1, 1, 1)
                NG797.Parent = NG796
                NG798 = Instance.new('ImageButton')
                NG798.AutoButtonColor = false
                NG798.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG798.BackgroundTransparency = 1
                NG798.BorderSizePixel = 0
                NG798.Name = dCD('GrkgherOhggba')
                NG798.Position = UDim2.new(0, 0, 0, 175)
                NG798.Size = UDim2.new(0, 35, 0, 35)
                NG798.Style = Enum.ButtonStyle.Custom
                NG798.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141805275')
                NG798.Parent = NG773
                NG799 = Instance.new('TextLabel')
                NG799.BackgroundColor3 = Color3.new(0, 0, 0)
                NG799.BackgroundTransparency = 1
                NG799.BorderSizePixel = 0
                NG799.Name = dCD('Fubegphg')
                NG799.Size = UDim2.new(0, 13, 0, 13)
                NG799.Font = Enum.Font.ArialBold
                NG799.FontSize = Enum.FontSize.Size10
                NG799.Text = dCD('T')
                NG799.TextColor3 = Color3.new(1, 1, 1)
                NG799.Parent = NG798
                NG800 = Instance.new('ImageButton')
                NG800.AutoButtonColor = false
                NG800.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG800.BackgroundTransparency = 1
                NG800.BorderSizePixel = 0
                NG800.Name = dCD('NapubeOhggba')
                NG800.Position = UDim2.new(0, 0, 0, 105)
                NG800.Size = UDim2.new(0, 35, 0, 35)
                NG800.Style = Enum.ButtonStyle.Custom
                NG800.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141741323')
                NG800.Parent = NG773
                NG801 = Instance.new('TextLabel')
                NG801.BackgroundColor3 = Color3.new(0, 0, 0)
                NG801.BackgroundTransparency = 1
                NG801.BorderSizePixel = 0
                NG801.Name = dCD('Fubegphg')
                NG801.Size = UDim2.new(0, 13, 0, 13)
                NG801.Font = Enum.Font.ArialBold
                NG801.FontSize = Enum.FontSize.Size10
                NG801.Text = dCD('Z')
                NG801.TextColor3 = Color3.new(1, 1, 1)
                NG801.Parent = NG800
                NG802 = Instance.new('Frame')
                NG802.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG802.BackgroundTransparency = 0.20000000298023
                NG802.BorderSizePixel = 0
                NG802.Name = dCD('UrycVasb')
                NG802.Position = UDim2.new(0, -120, 0, 0)
                NG802.Size = UDim2.new(0, 120, 0, 380)
                NG802.Visible = false
                NG802.ClipsDescendants = true
                NG802.Parent = NG649
                NG803 = Instance.new('Frame')
                NG803.BackgroundTransparency = 1
                NG803.BorderSizePixel = 0
                NG803.Name = dCD('ObggbzPbybeOne')
                NG803.Position = UDim2.new(0, 0, 1, 0)
                NG803.Rotation = 180
                NG803.Size = UDim2.new(1, 0, 0, 3)
                NG803.Parent = NG802
                NG804 = Instance.new('Frame')
                NG804.BackgroundColor3 = Color3.new(1, 0.686275, 0)
                NG804.BackgroundTransparency = 0.25
                NG804.BorderSizePixel = 0
                NG804.Name = dCD('Lryybj')
                NG804.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG804.Parent = NG803
                NG805 = Instance.new('Frame')
                NG805.BackgroundColor3 = Color3.new(0.294118, 0.592157, 0.294118)
                NG805.BackgroundTransparency = 0.25
                NG805.BorderSizePixel = 0
                NG805.Name = dCD('Terra')
                NG805.Position = UDim2.new(0.200000003, 0, 0, 0)
                NG805.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG805.Parent = NG803
                NG806 = Instance.new('Frame')
                NG806.BackgroundColor3 = Color3.new(0.0156863, 0.686275, 0.92549)
                NG806.BackgroundTransparency = 0.25
                NG806.BorderSizePixel = 0
                NG806.Name = dCD('Oyhr')
                NG806.Position = UDim2.new(0.400000006, 0, 0, 0)
                NG806.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG806.Parent = NG803
                NG807 = Instance.new('Frame')
                NG807.BackgroundColor3 = Color3.new(1, 0, 0)
                NG807.BackgroundTransparency = 0.25
                NG807.BorderSizePixel = 0
                NG807.Name = dCD('Erq')
                NG807.Position = UDim2.new(0.600000024, 0, 0, 0)
                NG807.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG807.Parent = NG803
                NG808 = Instance.new('Frame')
                NG808.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG808.BackgroundTransparency = 0.25
                NG808.BorderSizePixel = 0
                NG808.Name = dCD('Checyr')
                NG808.Position = UDim2.new(0.800000012, 0, 0, 0)
                NG808.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG808.Parent = NG803
                NG809 = Instance.new('Frame')
                NG809.BackgroundTransparency = 1
                NG809.BorderSizePixel = 0
                NG809.Name = dCD('Pbagrag')
                NG809.Size = UDim2.new(1, 0, 0, 680)
                NG809.Parent = NG802
                NG810 = Instance.new('TextLabel')
                NG810.BackgroundTransparency = 1
                NG810.BorderSizePixel = 0
                NG810.Name = dCD('GbbyQrfpevcgvba')
                NG810.Position = UDim2.new(0, 10, 0, 80)
                NG810.Size = UDim2.new(0, 85, 0, 85)
                NG810.Font = Enum.Font.Arial
                NG810.FontSize = Enum.FontSize.Size10
                NG810.Text = dCD(
[[Sbe zber vasbezngvba ba nal gbby, ubire lbhe zbhfr bire vgf vpba naq vg'yy erirny zber qrgnvyf.]])
                NG810.TextColor3 = Color3.new(1, 1, 1)
                NG810.TextWrapped = true
                NG810.TextXAlignment = Enum.TextXAlignment.Left
                NG810.TextYAlignment = Enum.TextYAlignment.Top
                NG810.Parent = NG809
                NG811 = Instance.new('Frame')
                NG811.BackgroundTransparency = 1
                NG811.BorderSizePixel = 0
                NG811.Name = dCD('PbybeOne')
                NG811.Size = UDim2.new(1, 0, 0, 3)
                NG811.Parent = NG809
                NG812 = Instance.new('Frame')
                NG812.BackgroundColor3 = Color3.new(1, 0.686275, 0)
                NG812.BackgroundTransparency = 0.25
                NG812.BorderSizePixel = 0
                NG812.Name = dCD('Lryybj')
                NG812.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG812.Parent = NG811
                NG813 = Instance.new('Frame')
                NG813.BackgroundColor3 = Color3.new(0.294118, 0.592157, 0.294118)
                NG813.BackgroundTransparency = 0.25
                NG813.BorderSizePixel = 0
                NG813.Name = dCD('Terra')
                NG813.Position = UDim2.new(0.200000003, 0, 0, 0)
                NG813.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG813.Parent = NG811
                NG814 = Instance.new('Frame')
                NG814.BackgroundColor3 = Color3.new(0.0156863, 0.686275, 0.92549)
                NG814.BackgroundTransparency = 0.25
                NG814.BorderSizePixel = 0
                NG814.Name = dCD('Oyhr')
                NG814.Position = UDim2.new(0.400000006, 0, 0, 0)
                NG814.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG814.Parent = NG811
                NG815 = Instance.new('Frame')
                NG815.BackgroundColor3 = Color3.new(1, 0, 0)
                NG815.BackgroundTransparency = 0.25
                NG815.BorderSizePixel = 0
                NG815.Name = dCD('Erq')
                NG815.Position = UDim2.new(0.600000024, 0, 0, 0)
                NG815.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG815.Parent = NG811
                NG816 = Instance.new('Frame')
                NG816.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG816.BackgroundTransparency = 0.25
                NG816.BorderSizePixel = 0
                NG816.Name = dCD('Checyr')
                NG816.Position = UDim2.new(0.800000012, 0, 0, 0)
                NG816.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG816.Parent = NG811
                NG817 = Instance.new('TextLabel')
                NG817.BackgroundTransparency = 1
                NG817.BorderSizePixel = 0
                NG817.Name = dCD('GbbyAnzr')
                NG817.Position = UDim2.new(0, 10, 0, 4)
                NG817.Size = UDim2.new(0, 80, 0, 80)
                NG817.Font = Enum.Font.ArialBold
                NG817.FontSize = Enum.FontSize.Size10
                NG817.Text = dCD(
[[OHVYQVAT GBBYF OL S3K ZBQVSVRQ GB JBEX NF BAR FPEVCG OL AVPXBNXM]])
                NG817.TextColor3 = Color3.new(1, 1, 1)
                NG817.TextWrapped = true
                NG817.TextXAlignment = Enum.TextXAlignment.Left
                NG817.Parent = NG809
                NG818 = Instance.new('Frame')
                NG818.BackgroundTransparency = 1
                NG818.BorderSizePixel = 0
                NG818.Name = dCD('FryrpgvbaVasb')
                NG818.Position = UDim2.new(0, 0, 0, 170)
                NG818.Size = UDim2.new(1, 0, 0, 150)
                NG818.Parent = NG809
                NG819 = Instance.new('TextLabel')
                NG819.BackgroundTransparency = 1
                NG819.BorderSizePixel = 0
                NG819.Position = UDim2.new(0, 10, 0, 15)
                NG819.Size = UDim2.new(0, 82, 0, 240)
                NG819.Font = Enum.Font.Arial
                NG819.FontSize = Enum.FontSize.Size10
                NG819.Text = dCD(
[[Lbh pna fryrpg zhygvcyr cnegf ol ubyqvat [Fuvsg] naq pyvpxvat ba rnpu cneg.  Lbh pna nyfb ubyq [Fuvsg], pyvpx, naq qent gb fryrpg cnegf va gung nern.  Cerff [Fuvsg + X] gb fryrpg cnegf vafvqr bs gur fryrpgrq cnegf.  Cerff [Fuvsg + E] gb pyrne lbhe fryrpgvba.]])
                NG819.TextColor3 = Color3.new(1, 1, 1)
                NG819.TextWrapped = true
                NG819.TextXAlignment = Enum.TextXAlignment.Left
                NG819.TextYAlignment = Enum.TextYAlignment.Top
                NG819.Parent = NG818
                NG820 = Instance.new('TextLabel')
                NG820.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG820.BackgroundTransparency = 1
                NG820.BorderSizePixel = 0
                NG820.Position = UDim2.new(0, 10, 0, 0)
                NG820.Size = UDim2.new(0, 80, 0, 12)
                NG820.Font = Enum.Font.ArialBold
                NG820.FontSize = Enum.FontSize.Size10
                NG820.Text = dCD('Fryrpgvat')
                NG820.TextColor3 = Color3.new(1, 1, 1)
                NG820.TextWrapped = true
                NG820.TextXAlignment = Enum.TextXAlignment.Left
                NG820.TextYAlignment = Enum.TextYAlignment.Top
                NG820.Parent = NG818
                NG821 = Instance.new('Frame')
                NG821.BackgroundTransparency = 1
                NG821.BorderSizePixel = 0
                NG821.Name = dCD('RkcbegvatVasb')
                NG821.Position = UDim2.new(0, 0, 0, 420)
                NG821.Size = UDim2.new(1, 0, 0, 220)
                NG821.Parent = NG809
                NG822 = Instance.new('TextLabel')
                NG822.BackgroundTransparency = 1
                NG822.BorderSizePixel = 0
                NG822.Position = UDim2.new(0, 10, 0, 30)
                NG822.Size = UDim2.new(0, 82, 0, 200)
                NG822.Font = Enum.Font.Arial
                NG822.FontSize = Enum.FontSize.Size10
                NG822.Text = dCD(
[[Lbh pna rkcbeg nal perngvbaf lbh ohvyg jvgu Ohvyqvat Gbbyf ol S3K ol hfvat gur rkcbeg ohggba ba gur qbpx (be cerffvat fuvsg + C).  Vafgnyy guvf cyhtva (eboybk.pbz/vgrz.nfck?vq=142485815) va EBOYBK Fghqvb gb vzcbeg lbhe perngvba.]])
                NG822.TextColor3 = Color3.new(1, 1, 1)
                NG822.TextWrapped = true
                NG822.TextXAlignment = Enum.TextXAlignment.Left
                NG822.TextYAlignment = Enum.TextYAlignment.Top
                NG822.Parent = NG821
                NG823 = Instance.new('TextLabel')
                NG823.BackgroundColor3 = Color3.new(0.239216, 0.239216, 0.239216)
                NG823.BackgroundTransparency = 1
                NG823.BorderSizePixel = 0
                NG823.Position = UDim2.new(0, 10, 0, 0)
                NG823.Size = UDim2.new(0, 80, 0, 24)
                NG823.Font = Enum.Font.ArialBold
                NG823.FontSize = Enum.FontSize.Size10
                NG823.Text = dCD('Rkcbegvat lbhe perngvbaf')
                NG823.TextColor3 = Color3.new(1, 1, 1)
                NG823.TextWrapped = true
                NG823.TextXAlignment = Enum.TextXAlignment.Left
                NG823.TextYAlignment = Enum.TextYAlignment.Top
                NG823.Parent = NG821
                NG824 = Instance.new('Frame')
                NG824.Active = true
                NG824.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG824.BackgroundTransparency = 1
                NG824.BorderSizePixel = 0
                NG824.Name = dCD('OGTebhcfTHV')
                NG824.Position = UDim2.new(0, -210, 0, 0)
                NG824.Size = UDim2.new(0, 200, 0, 100)
                NG824.Parent = NG1
                NG825 = Instance.new('Frame')
                NG825.BackgroundTransparency = 1
                NG825.BorderSizePixel = 0
                NG825.Name = dCD('Grzcyngrf')
                NG825.Visible = false
                NG825.Parent = NG824
                NG826 = Instance.new('Frame')
                NG826.BackgroundColor3 = Color3.new(0.266667, 0.266667, 0.266667)
                NG826.BackgroundTransparency = 0.64999997615814
                NG826.BorderSizePixel = 0
                NG826.Name = dCD('TebhcOhggba')
                NG826.Size = UDim2.new(1, -5, 0, 25)
                NG826.Parent = NG825
                NG827 = Instance.new('ImageButton')
                NG827.BackgroundColor3 = Color3.new(0, 0, 0)
                NG827.BackgroundTransparency = 1
                NG827.BorderSizePixel = 0
                NG827.Name = dCD('RqvgOhggba')
                NG827.Position = UDim2.new(1, -50, 0, 5)
                NG827.Size = UDim2.new(0, 16, 0, 16)
                NG827.Style = Enum.ButtonStyle.Custom
                NG827.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=160400465')
                NG827.ImageTransparency = 0.25
                NG827.Parent = NG826
                NG828 = Instance.new('Frame')
                NG828.BackgroundColor3 = Color3.new(0, 0, 0)
                NG828.BorderSizePixel = 0
                NG828.Name = dCD('EvtugGbbygvc')
                NG828.Position = UDim2.new(0, -50, 0, 0)
                NG828.Size = UDim2.new(0, 40, 0, 16)
                NG828.Visible = false
                NG828.ZIndex = 2
                NG828.Parent = NG827
                NG829 = Instance.new('Frame')
                NG829.BackgroundColor3 = Color3.new(0, 0, 0)
                NG829.BorderSizePixel = 0
                NG829.Name = dCD('Gvc')
                NG829.Position = UDim2.new(1, -6, 0, 2)
                NG829.Rotation = 45
                NG829.Size = UDim2.new(0, 12, 0, 12)
                NG829.ZIndex = 2
                NG829.Parent = NG828
                NG830 = Instance.new('TextLabel')
                NG830.BackgroundColor3 = Color3.new(0, 0, 0)
                NG830.BackgroundTransparency = 1
                NG830.BorderSizePixel = 0
                NG830.Name = dCD('Grkg')
                NG830.Size = UDim2.new(1, 4, 1, 0)
                NG830.ZIndex = 3
                NG830.Font = Enum.Font.ArialBold
                NG830.FontSize = Enum.FontSize.Size10
                NG830.Text = dCD('ERANZR')
                NG830.TextColor3 = Color3.new(1, 1, 1)
                NG830.Parent = NG828
                NG831 = Instance.new('ImageButton')
                NG831.BackgroundColor3 = Color3.new(0, 0, 0)
                NG831.BackgroundTransparency = 1
                NG831.BorderSizePixel = 0
                NG831.Name = dCD('VtaberOhggba')
                NG831.Position = UDim2.new(1, -25, 0, 5)
                NG831.Size = UDim2.new(0, 16, 0, 16)
                NG831.Style = Enum.ButtonStyle.Custom
                NG831.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=160408836')
                NG831.ImageTransparency = 0.25
                NG831.Parent = NG826
                NG832 = Instance.new('Frame')
                NG832.BackgroundColor3 = Color3.new(0, 0, 0)
                NG832.BorderSizePixel = 0
                NG832.Name = dCD('EvtugGbbygvc')
                NG832.Position = UDim2.new(0, -58, 0, 0)
                NG832.Size = UDim2.new(0, 48, 0, 16)
                NG832.Visible = false
                NG832.ZIndex = 2
                NG832.Parent = NG831
                NG833 = Instance.new('Frame')
                NG833.BackgroundColor3 = Color3.new(0, 0, 0)
                NG833.BorderSizePixel = 0
                NG833.Name = dCD('Gvc')
                NG833.Position = UDim2.new(1, -6, 0, 2)
                NG833.Rotation = 45
                NG833.Size = UDim2.new(0, 12, 0, 12)
                NG833.ZIndex = 2
                NG833.Parent = NG832
                NG834 = Instance.new('TextLabel')
                NG834.BackgroundColor3 = Color3.new(0, 0, 0)
                NG834.BackgroundTransparency = 1
                NG834.BorderSizePixel = 0
                NG834.Name = dCD('Grkg')
                NG834.Size = UDim2.new(1, 4, 1, 0)
                NG834.ZIndex = 3
                NG834.Font = Enum.Font.ArialBold
                NG834.FontSize = Enum.FontSize.Size10
                NG834.Text = dCD('HAVTABER')
                NG834.TextColor3 = Color3.new(1, 1, 1)
                NG834.Parent = NG832
                NG835 = Instance.new('ImageButton')
                NG835.BackgroundColor3 = Color3.new(0, 0, 0)
                NG835.BackgroundTransparency = 1
                NG835.BorderSizePixel = 0
                NG835.Name = dCD('HcqngrOhggba')
                NG835.Position = UDim2.new(0, 12, 0, 5)
                NG835.Size = UDim2.new(0, 16, 0, 16)
                NG835.Style = Enum.ButtonStyle.Custom
                NG835.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=160402908')
                NG835.ImageTransparency = 0.25
                NG835.Parent = NG826
                NG836 = Instance.new('Frame')
                NG836.BackgroundColor3 = Color3.new(0, 0, 0)
                NG836.BorderSizePixel = 0
                NG836.Name = dCD('YrsgGbbygvc')
                NG836.Position = UDim2.new(1, 12, 0, 0)
                NG836.Size = UDim2.new(0, 38, 0, 16)
                NG836.Visible = false
                NG836.ZIndex = 3
                NG836.Parent = NG835
                NG837 = Instance.new('Frame')
                NG837.BackgroundColor3 = Color3.new(0, 0, 0)
                NG837.BorderSizePixel = 0
                NG837.Name = dCD('Gvc')
                NG837.Position = UDim2.new(0, -6, 0, 2)
                NG837.Rotation = 45
                NG837.Size = UDim2.new(0, 12, 0, 12)
                NG837.ZIndex = 3
                NG837.Parent = NG836
                NG838 = Instance.new('TextLabel')
                NG838.BackgroundColor3 = Color3.new(0, 0, 0)
                NG838.BackgroundTransparency = 1
                NG838.BorderSizePixel = 0
                NG838.Name = dCD('Grkg')
                NG838.Position = UDim2.new(0, -4, 0, 0)
                NG838.Size = UDim2.new(1, 4, 1, 0)
                NG838.ZIndex = 3
                NG838.Font = Enum.Font.ArialBold
                NG838.FontSize = Enum.FontSize.Size10
                NG838.Text = dCD('HCQNGR')
                NG838.TextColor3 = Color3.new(1, 1, 1)
                NG838.Parent = NG836
                NG839 = Instance.new('Frame')
                NG839.BackgroundTransparency = 1
                NG839.BorderSizePixel = 0
                NG839.Name = dCD('TebhcAnzrNern')
                NG839.Position = UDim2.new(0, 35, 0, 0)
                NG839.Size = UDim2.new(0, 90, 0, 25)
                NG839.Parent = NG826
                NG840 = Instance.new('Frame')
                NG840.BackgroundColor3 = Color3.new(0, 0, 0)
                NG840.BorderSizePixel = 0
                NG840.Name = dCD('YrsgGbbygvc')
                NG840.Position = UDim2.new(1, 12, 0, 5)
                NG840.Size = UDim2.new(0, 38, 0, 16)
                NG840.Visible = false
                NG840.ZIndex = 2
                NG840.Parent = NG839
                NG841 = Instance.new('Frame')
                NG841.BackgroundColor3 = Color3.new(0, 0, 0)
                NG841.BorderSizePixel = 0
                NG841.Name = dCD('Gvc')
                NG841.Position = UDim2.new(0, -6, 0, 2)
                NG841.Rotation = 45
                NG841.Size = UDim2.new(0, 12, 0, 12)
                NG841.ZIndex = 2
                NG841.Parent = NG840
                NG842 = Instance.new('TextLabel')
                NG842.BackgroundColor3 = Color3.new(0, 0, 0)
                NG842.BackgroundTransparency = 1
                NG842.BorderSizePixel = 0
                NG842.Name = dCD('Grkg')
                NG842.Position = UDim2.new(0, -4, 0, 0)
                NG842.Size = UDim2.new(1, 4, 1, 0)
                NG842.ZIndex = 3
                NG842.Font = Enum.Font.ArialBold
                NG842.FontSize = Enum.FontSize.Size10
                NG842.Text = dCD('FRYRPG')
                NG842.TextColor3 = Color3.new(1, 1, 1)
                NG842.Parent = NG840
                NG843 = Instance.new('TextButton')
                NG843.Active = true
                NG843.BackgroundTransparency = 1
                NG843.BorderSizePixel = 0
                NG843.Name = dCD('TebhcAnzr')
                NG843.Position = UDim2.new(0, 35, 0, 0)
                NG843.Selectable = true
                NG843.Size = UDim2.new(0, 90, 0, 25)
                NG843.Style = Enum.ButtonStyle.Custom
                NG843.ZIndex = 2
                NG843.Font = Enum.Font.ArialBold
                NG843.FontSize = Enum.FontSize.Size10
                NG843.Text = dCD('Tebhc 1')
                NG843.TextColor3 = Color3.new(1, 1, 1)
                NG843.TextStrokeTransparency = 0.80000001192093
                NG843.TextXAlignment = Enum.TextXAlignment.Left
                NG843.ClipsDescendants = true
                NG843.Parent = NG826
                NG844 = Instance.new('TextBox')
                NG844.BackgroundTransparency = 1
                NG844.BorderSizePixel = 0
                NG844.Name = dCD('TebhcAnzre')
                NG844.Position = UDim2.new(0, 35, 0, 0)
                NG844.Size = UDim2.new(0, 90, 0, 25)
                NG844.Visible = false
                NG844.ZIndex = 2
                NG844.Font = Enum.Font.ArialBold
                NG844.FontSize = Enum.FontSize.Size10
                NG844.Text = dCD('Tebhc 1')
                NG844.TextColor3 = Color3.new(1, 1, 1)
                NG844.TextStrokeTransparency = 0.80000001192093
                NG844.TextXAlignment = Enum.TextXAlignment.Left
                NG844.ClipsDescendants = true
                NG844.Parent = NG826
                NG845 = Instance.new('ScrollingFrame')
                NG845.BackgroundTransparency = 1
                NG845.BorderSizePixel = 0
                NG845.Name = dCD('TebhcYvfg')
                NG845.Position = UDim2.new(0, 10, 0, 30)
                NG845.Selectable = true
                NG845.Size = UDim2.new(1, -10, 0, 70)
                NG845.BottomImage = dCD('eoknffrg://grkgherf/oynpxOxt_fdhner.cat')
                NG845.CanvasSize = UDim2.new(1, -10, 0, 0)
                NG845.MidImage = dCD('eoknffrg://grkgherf/oynpxOxt_fdhner.cat')
                NG845.ScrollBarThickness = 3
                NG845.TopImage = dCD('eoknffrg://grkgherf/oynpxOxt_fdhner.cat')
                NG845.ClipsDescendants = true
                NG845.Parent = NG824
                NG846 = Instance.new('TextLabel')
                NG846.BackgroundTransparency = 1
                NG846.BorderSizePixel = 0
                NG846.Name = dCD('FryrpgAbgr')
                NG846.Position = UDim2.new(0, 10, 0, 27)
                NG846.Size = UDim2.new(1, -10, 0, 15)
                NG846.Visible = false
                NG846.FontSize = Enum.FontSize.Size14
                NG846.Text = dCD('Fryrpg fbzrguvat gb hfr guvf gbby.')
                NG846.TextColor3 = Color3.new(1, 1, 1)
                NG846.TextScaled = true
                NG846.TextStrokeTransparency = 0.5
                NG846.TextWrapped = true
                NG846.TextXAlignment = Enum.TextXAlignment.Left
                NG846.Parent = NG824
                NG847 = Instance.new('Frame')
                NG847.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG847.BackgroundTransparency = 1
                NG847.BorderSizePixel = 0
                NG847.Name = dCD('Gvgyr')
                NG847.Size = UDim2.new(1, 0, 0, 20)
                NG847.Parent = NG824
                NG848 = Instance.new('TextButton')
                NG848.Active = true
                NG848.BackgroundColor3 = Color3.new(0.223529, 0.223529, 0.223529)
                NG848.BackgroundTransparency = 0.5
                NG848.BorderSizePixel = 0
                NG848.Name = dCD('PerngrOhggba')
                NG848.Position = UDim2.new(1, -40, 0, 3)
                NG848.Selectable = true
                NG848.Size = UDim2.new(0, 40, 0, 16)
                NG848.Style = Enum.ButtonStyle.Custom
                NG848.Font = Enum.Font.ArialBold
                NG848.FontSize = Enum.FontSize.Size10
                NG848.Text = dCD('ARJ')
                NG848.TextColor3 = Color3.new(1, 1, 1)
                NG848.Parent = NG847
                NG849 = Instance.new('Frame')
                NG849.BackgroundColor3 = Color3.new(0, 0, 0)
                NG849.BorderSizePixel = 0
                NG849.Name = dCD('PbybeOne')
                NG849.Position = UDim2.new(0, 7, 0, -3)
                NG849.Size = UDim2.new(1, -5, 0, 2)
                NG849.Parent = NG847
                NG850 = Instance.new('TextLabel')
                NG850.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG850.BackgroundTransparency = 1
                NG850.BorderSizePixel = 0
                NG850.Name = dCD('Ynory')
                NG850.Position = UDim2.new(0, 10, 0, 1)
                NG850.Size = UDim2.new(1, -10, 1, 0)
                NG850.Font = Enum.Font.ArialBold
                NG850.FontSize = Enum.FontSize.Size10
                NG850.Text = dCD('FRYRPGVBA TEBHCF')
                NG850.TextColor3 = Color3.new(1, 1, 1)
                NG850.TextStrokeTransparency = 0
                NG850.TextWrapped = true
                NG850.TextXAlignment = Enum.TextXAlignment.Left
                NG850.Parent = NG847
                NG851 = Instance.new('Frame')
                NG851.Active = true
                NG851.BackgroundColor3 = Color3.new(0, 0, 0)
                NG851.BackgroundTransparency = 1
                NG851.BorderSizePixel = 0
                NG851.Name = dCD('OGRkcbegQvnybt')
                NG851.Position = UDim2.new(0, 100, 0, 128)
                NG851.Size = UDim2.new(0, 200, 0, 110)
                NG851.Draggable = true
                NG851.Parent = NG1
                NG852 = Instance.new('Frame')
                NG852.BackgroundTransparency = 1
                NG852.BorderSizePixel = 0
                NG852.Name = dCD('Vasb')
                NG852.Size = UDim2.new(1, 0, 0, 75)
                NG852.Visible = false
                NG852.ClipsDescendants = true
                NG852.Parent = NG851
                NG853 = Instance.new('TextLabel')
                NG853.BackgroundTransparency = 1
                NG853.BorderSizePixel = 0
                NG853.Name = dCD('PerngvbaVQYnory')
                NG853.Position = UDim2.new(0, 0, 0, 5)
                NG853.Size = UDim2.new(1, 0, 0, 40)
                NG853.Font = Enum.Font.SourceSansBold
                NG853.FontSize = Enum.FontSize.Size18
                NG853.Text = dCD("Lbhe perngvba'f VQ:")
                NG853.TextColor3 = Color3.new(1, 1, 1)
                NG853.TextStrokeTransparency = 0.75
                NG853.Parent = NG852
                NG854 = Instance.new('TextLabel')
                NG854.BackgroundTransparency = 1
                NG854.BorderSizePixel = 0
                NG854.Name = dCD('PerngvbaVQ')
                NG854.Position = UDim2.new(0, 0, 0, 30)
                NG854.Size = UDim2.new(1, 0, 0, 40)
                NG854.Font = Enum.Font.SourceSansBold
                NG854.FontSize = Enum.FontSize.Size24
                NG854.Text = dCD('w5bs0')
                NG854.TextColor3 = Color3.new(0.439216, 0.439216, 0.439216)
                NG854.TextStrokeColor3 = Color3.new(1, 1, 1)
                NG854.TextStrokeTransparency = 0
                NG854.Parent = NG852
                NG855 = Instance.new('Frame')
                NG855.BackgroundTransparency = 1
                NG855.BorderSizePixel = 0
                NG855.Name = dCD('PbybeOne')
                NG855.Size = UDim2.new(1, 0, 0, 3)
                NG855.Parent = NG852
                NG856 = Instance.new('Frame')
                NG856.BackgroundColor3 = Color3.new(1, 0.686275, 0)
                NG856.BorderSizePixel = 0
                NG856.Name = dCD('Lryybj')
                NG856.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG856.Parent = NG855
                NG857 = Instance.new('Frame')
                NG857.BackgroundColor3 = Color3.new(0.294118, 0.592157, 0.294118)
                NG857.BorderSizePixel = 0
                NG857.Name = dCD('Terra')
                NG857.Position = UDim2.new(0.200000003, 0, 0, 0)
                NG857.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG857.Parent = NG855
                NG858 = Instance.new('Frame')
                NG858.BackgroundColor3 = Color3.new(0.0156863, 0.686275, 0.92549)
                NG858.BorderSizePixel = 0
                NG858.Name = dCD('Oyhr')
                NG858.Position = UDim2.new(0.400000006, 0, 0, 0)
                NG858.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG858.Parent = NG855
                NG859 = Instance.new('Frame')
                NG859.BackgroundColor3 = Color3.new(1, 0, 0)
                NG859.BorderSizePixel = 0
                NG859.Name = dCD('Erq')
                NG859.Position = UDim2.new(0.600000024, 0, 0, 0)
                NG859.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG859.Parent = NG855
                NG860 = Instance.new('Frame')
                NG860.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG860.BorderSizePixel = 0
                NG860.Name = dCD('Checyr')
                NG860.Position = UDim2.new(0.800000012, 0, 0, 0)
                NG860.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG860.Parent = NG855
                NG861 = Instance.new('Frame')
                NG861.BackgroundTransparency = 1
                NG861.BorderSizePixel = 0
                NG861.Name = dCD('Gvc')
                NG861.Position = UDim2.new(0, 0, 0, 75)
                NG861.Size = UDim2.new(1, 0, 0, 30)
                NG861.Visible = false
                NG861.Parent = NG851
                NG862 = Instance.new('TextLabel')
                NG862.BackgroundTransparency = 1
                NG862.BorderSizePixel = 0
                NG862.Name = dCD('Gvc')
                NG862.Position = UDim2.new(0, 0, 0, 7)
                NG862.Size = UDim2.new(1, 0, 0, 30)
                NG862.Font = Enum.Font.SourceSansBold
                NG862.FontSize = Enum.FontSize.Size12
                NG862.Text = dCD('Hfr gur VQ nobir gb vzcbeg lbhe perngvba hfvat gur cyhtva.')
                NG862.TextColor3 = Color3.new(1, 1, 1)
                NG862.TextStrokeTransparency = 0.75
                NG862.TextWrapped = true
                NG862.TextXAlignment = Enum.TextXAlignment.Left
                NG862.TextYAlignment = Enum.TextYAlignment.Top
                NG862.Parent = NG861
                NG863 = Instance.new('Frame')
                NG863.BackgroundTransparency = 1
                NG863.BorderSizePixel = 0
                NG863.Name = dCD('PbybeOne')
                NG863.Rotation = 180
                NG863.Size = UDim2.new(1, 0, 0, 3)
                NG863.Parent = NG861
                NG864 = Instance.new('Frame')
                NG864.BackgroundColor3 = Color3.new(1, 0.686275, 0)
                NG864.BorderSizePixel = 0
                NG864.Name = dCD('Lryybj')
                NG864.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG864.Parent = NG863
                NG865 = Instance.new('Frame')
                NG865.BackgroundColor3 = Color3.new(0.294118, 0.592157, 0.294118)
                NG865.BorderSizePixel = 0
                NG865.Name = dCD('Terra')
                NG865.Position = UDim2.new(0.200000003, 0, 0, 0)
                NG865.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG865.Parent = NG863
                NG866 = Instance.new('Frame')
                NG866.BackgroundColor3 = Color3.new(0.0156863, 0.686275, 0.92549)
                NG866.BorderSizePixel = 0
                NG866.Name = dCD('Oyhr')
                NG866.Position = UDim2.new(0.400000006, 0, 0, 0)
                NG866.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG866.Parent = NG863
                NG867 = Instance.new('Frame')
                NG867.BackgroundColor3 = Color3.new(1, 0, 0)
                NG867.BorderSizePixel = 0
                NG867.Name = dCD('Erq')
                NG867.Position = UDim2.new(0.600000024, 0, 0, 0)
                NG867.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG867.Parent = NG863
                NG868 = Instance.new('Frame')
                NG868.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG868.BorderSizePixel = 0
                NG868.Name = dCD('Checyr')
                NG868.Position = UDim2.new(0.800000012, 0, 0, 0)
                NG868.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG868.Parent = NG863
                NG869 = Instance.new('Frame')
                NG869.BackgroundColor3 = Color3.new(0, 0, 0)
                NG869.BackgroundTransparency = 1
                NG869.BorderSizePixel = 0
                NG869.Name = dCD('Pybfr')
                NG869.Position = UDim2.new(0, 0, 1, 5)
                NG869.Size = UDim2.new(1, 0, 0, 20)
                NG869.Visible = false
                NG869.Parent = NG851
                NG870 = Instance.new('TextButton')
                NG870.Active = true
                NG870.BackgroundColor3 = Color3.new(0, 0, 0)
                NG870.BackgroundTransparency = 0.5
                NG870.BorderSizePixel = 0
                NG870.Name = dCD('Ohggba')
                NG870.Selectable = true
                NG870.Size = UDim2.new(1, 0, 1, 0)
                NG870.Style = Enum.ButtonStyle.Custom
                NG870.FontSize = Enum.FontSize.Size14
                NG870.Text = dCD('Tbg vg')
                NG870.TextColor3 = Color3.new(1, 1, 1)
                NG870.TextStrokeTransparency = 0.80000001192093
                NG870.Parent = NG869
                NG871 = Instance.new('Frame')
                NG871.BackgroundColor3 = Color3.new(0, 0, 0)
                NG871.BackgroundTransparency = 0.30000001192093
                NG871.BorderSizePixel = 0
                NG871.Name = dCD('Funqbj')
                NG871.Position = UDim2.new(0, 0, 1, 0)
                NG871.Size = UDim2.new(1, 0, 0, 2)
                NG871.ZIndex = 2
                NG871.Parent = NG869
                NG872 = Instance.new('Frame')
                NG872.BackgroundTransparency = 1
                NG872.BorderSizePixel = 0
                NG872.Name = dCD('Ybnqvat')
                NG872.Size = UDim2.new(1, 0, 0, 80)
                NG872.ClipsDescendants = true
                NG872.Parent = NG851
                NG873 = Instance.new('Frame')
                NG873.BackgroundTransparency = 1
                NG873.BorderSizePixel = 0
                NG873.Name = dCD('PbybeOne')
                NG873.Size = UDim2.new(1, 0, 0, 3)
                NG873.Parent = NG872
                NG874 = Instance.new('Frame')
                NG874.BackgroundColor3 = Color3.new(1, 0.686275, 0)
                NG874.BackgroundTransparency = 0.25
                NG874.BorderSizePixel = 0
                NG874.Name = dCD('Lryybj')
                NG874.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG874.Parent = NG873
                NG875 = Instance.new('Frame')
                NG875.BackgroundColor3 = Color3.new(0.294118, 0.592157, 0.294118)
                NG875.BackgroundTransparency = 0.25
                NG875.BorderSizePixel = 0
                NG875.Name = dCD('Terra')
                NG875.Position = UDim2.new(0.200000003, 0, 0, 0)
                NG875.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG875.Parent = NG873
                NG876 = Instance.new('Frame')
                NG876.BackgroundColor3 = Color3.new(0.0156863, 0.686275, 0.92549)
                NG876.BackgroundTransparency = 0.25
                NG876.BorderSizePixel = 0
                NG876.Name = dCD('Oyhr')
                NG876.Position = UDim2.new(0.400000006, 0, 0, 0)
                NG876.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG876.Parent = NG873
                NG877 = Instance.new('Frame')
                NG877.BackgroundColor3 = Color3.new(1, 0, 0)
                NG877.BackgroundTransparency = 0.25
                NG877.BorderSizePixel = 0
                NG877.Name = dCD('Erq')
                NG877.Position = UDim2.new(0.600000024, 0, 0, 0)
                NG877.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG877.Parent = NG873
                NG878 = Instance.new('Frame')
                NG878.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG878.BackgroundTransparency = 0.25
                NG878.BorderSizePixel = 0
                NG878.Name = dCD('Checyr')
                NG878.Position = UDim2.new(0.800000012, 0, 0, 0)
                NG878.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG878.Parent = NG873
                NG879 = Instance.new('TextLabel')
                NG879.BackgroundTransparency = 1
                NG879.BorderSizePixel = 0
                NG879.Size = UDim2.new(1, 0, 0, 50)
                NG879.Font = Enum.Font.SourceSansBold
                NG879.FontSize = Enum.FontSize.Size18
                NG879.Text = dCD('Hcybnqvat lbhe perngvba...')
                NG879.TextColor3 = Color3.new(1, 1, 1)
                NG879.TextStrokeTransparency = 0.80000001192093
                NG879.TextWrapped = true
                NG879.Parent = NG872
                NG880 = Instance.new('Frame')
                NG880.BackgroundTransparency = 1
                NG880.BorderSizePixel = 0
                NG880.Name = dCD('ObggbzPbybeOne')
                NG880.Position = UDim2.new(0, 0, 1, 0)
                NG880.Rotation = 180
                NG880.Size = UDim2.new(1, 0, 0, 3)
                NG880.Parent = NG872
                NG881 = Instance.new('Frame')
                NG881.BackgroundColor3 = Color3.new(1, 0.686275, 0)
                NG881.BackgroundTransparency = 0.25
                NG881.BorderSizePixel = 0
                NG881.Name = dCD('Lryybj')
                NG881.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG881.Parent = NG880
                NG882 = Instance.new('Frame')
                NG882.BackgroundColor3 = Color3.new(0.294118, 0.592157, 0.294118)
                NG882.BackgroundTransparency = 0.25
                NG882.BorderSizePixel = 0
                NG882.Name = dCD('Terra')
                NG882.Position = UDim2.new(0.200000003, 0, 0, 0)
                NG882.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG882.Parent = NG880
                NG883 = Instance.new('Frame')
                NG883.BackgroundColor3 = Color3.new(0.0156863, 0.686275, 0.92549)
                NG883.BackgroundTransparency = 0.25
                NG883.BorderSizePixel = 0
                NG883.Name = dCD('Oyhr')
                NG883.Position = UDim2.new(0.400000006, 0, 0, 0)
                NG883.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG883.Parent = NG880
                NG884 = Instance.new('Frame')
                NG884.BackgroundColor3 = Color3.new(1, 0, 0)
                NG884.BackgroundTransparency = 0.25
                NG884.BorderSizePixel = 0
                NG884.Name = dCD('Erq')
                NG884.Position = UDim2.new(0.600000024, 0, 0, 0)
                NG884.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG884.Parent = NG880
                NG885 = Instance.new('Frame')
                NG885.BackgroundColor3 = Color3.new(0.419608, 0.196078, 0.486275)
                NG885.BackgroundTransparency = 0.25
                NG885.BorderSizePixel = 0
                NG885.Name = dCD('Checyr')
                NG885.Position = UDim2.new(0.800000012, 0, 0, 0)
                NG885.Size = UDim2.new(0.200000003, 0, 1, 0)
                NG885.Parent = NG880
                NG886 = Instance.new('TextButton')
                NG886.Active = true
                NG886.BackgroundColor3 = Color3.new(0, 0, 0)
                NG886.BackgroundTransparency = 0.5
                NG886.BorderSizePixel = 0
                NG886.Name = dCD('PybfrOhggba')
                NG886.Position = UDim2.new(0, 0, 1, -30)
                NG886.Selectable = true
                NG886.Size = UDim2.new(1, 0, 0, 25)
                NG886.Style = Enum.ButtonStyle.Custom
                NG886.Font = Enum.Font.SourceSansBold
                NG886.FontSize = Enum.FontSize.Size14
                NG886.Text = dCD('Pybfr')
                NG886.TextColor3 = Color3.new(1, 1, 1)
                NG886.TextStrokeTransparency = 0.85000002384186
                NG886.Parent = NG872
                NG887 = Instance.new('Frame')
                NG887.BackgroundColor3 = Color3.new(0, 0, 0)
                NG887.BackgroundTransparency = 0.69999998807907
                NG887.BorderSizePixel = 0
                NG887.Name = dCD('Funqbj')
                NG887.Position = UDim2.new(0, 0, 1, -2)
                NG887.Size = UDim2.new(1, 0, 0, 2)
                NG887.Parent = NG886
                NG888 = Instance.new('Frame')
                NG888.Active = true
                NG888.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG888.BackgroundTransparency = 1
                NG888.BorderSizePixel = 0
                NG888.Name = dCD('OGQrpbengrGbbyTHV')
                NG888.Position = UDim2.new(0, 0, 0, 172)
                NG888.Size = UDim2.new(0, 200, 0, 125)
                NG888.Draggable = true
                NG888.Parent = NG1
                NG889 = Instance.new('Frame')
                NG889.BackgroundColor3 = Color3.new(0, 0, 0)
                NG889.BorderSizePixel = 0
                NG889.Name = dCD('ObggbzPbybeOne')
                NG889.Position = UDim2.new(0, 5, 1, -2)
                NG889.Size = UDim2.new(1, 0, 0, 2)
                NG889.Parent = NG888
                NG890 = Instance.new('Frame')
                NG890.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG890.BackgroundTransparency = 1
                NG890.BorderSizePixel = 0
                NG890.Name = dCD('Gvgyr')
                NG890.Size = UDim2.new(1, 0, 0, 20)
                NG890.Parent = NG888
                NG891 = Instance.new('Frame')
                NG891.BackgroundColor3 = Color3.new(0, 0, 0)
                NG891.BorderSizePixel = 0
                NG891.Name = dCD('PbybeOne')
                NG891.Position = UDim2.new(0, 5, 0, -3)
                NG891.Size = UDim2.new(1, -5, 0, 2)
                NG891.Parent = NG890
                NG892 = Instance.new('TextLabel')
                NG892.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG892.BackgroundTransparency = 1
                NG892.BorderSizePixel = 0
                NG892.Name = dCD('Ynory')
                NG892.Position = UDim2.new(0, 10, 0, 1)
                NG892.Size = UDim2.new(1, -10, 1, 0)
                NG892.Font = Enum.Font.ArialBold
                NG892.FontSize = Enum.FontSize.Size10
                NG892.Text = dCD('QRPBENGR GBBY')
                NG892.TextColor3 = Color3.new(1, 1, 1)
                NG892.TextStrokeTransparency = 0
                NG892.TextWrapped = true
                NG892.TextXAlignment = Enum.TextXAlignment.Left
                NG892.Parent = NG890
                NG893 = Instance.new('TextLabel')
                NG893.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG893.BackgroundTransparency = 1
                NG893.BorderSizePixel = 0
                NG893.Name = dCD('S3KFvtangher')
                NG893.Position = UDim2.new(0, 10, 0, 1)
                NG893.Size = UDim2.new(1, -10, 1, 0)
                NG893.Font = Enum.Font.ArialBold
                NG893.FontSize = Enum.FontSize.Size14
                NG893.Text = dCD('S3K')
                NG893.TextColor3 = Color3.new(1, 1, 1)
                NG893.TextStrokeTransparency = 0.89999997615814
                NG893.TextWrapped = true
                NG893.TextXAlignment = Enum.TextXAlignment.Right
                NG893.Parent = NG890
                NG894 = Instance.new('Frame')
                NG894.BackgroundColor3 = Color3.new(0, 0, 0)
                NG894.BackgroundTransparency = 0.67500001192093
                NG894.BorderSizePixel = 0
                NG894.Name = dCD('Fzbxr')
                NG894.Position = UDim2.new(0, 10, 0, 30)
                NG894.Size = UDim2.new(1, -10, 0, 25)
                NG894.Parent = NG888
                NG895 = Instance.new('TextLabel')
                NG895.BackgroundTransparency = 1
                NG895.BorderSizePixel = 0
                NG895.Name = dCD('Ynory')
                NG895.Position = UDim2.new(0, 35, 0, 0)
                NG895.Size = UDim2.new(0, 60, 0, 25)
                NG895.Font = Enum.Font.ArialBold
                NG895.FontSize = Enum.FontSize.Size10
                NG895.Text = dCD('Fzbxr')
                NG895.TextColor3 = Color3.new(1, 1, 1)
                NG895.TextStrokeTransparency = 0.5
                NG895.TextWrapped = true
                NG895.TextXAlignment = Enum.TextXAlignment.Left
                NG895.Parent = NG894
                NG896 = Instance.new('ImageButton')
                NG896.BackgroundTransparency = 1
                NG896.BorderSizePixel = 0
                NG896.Name = dCD('NeebjOhggba')
                NG896.Position = UDim2.new(0, 10, 0, 3)
                NG896.Size = UDim2.new(0, 20, 0, 20)
                NG896.Style = Enum.ButtonStyle.Custom
                NG896.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=134367382')
                NG896.Parent = NG894
                NG897 = Instance.new('Frame')
                NG897.BackgroundColor3 = Color3.new(1, 0.682353, 0.235294)
                NG897.BorderSizePixel = 0
                NG897.Name = dCD('PbybeOne')
                NG897.Size = UDim2.new(0, 3, 1, 0)
                NG897.Parent = NG894
                NG898 = Instance.new('TextButton')
                NG898.Active = true
                NG898.BackgroundColor3 = Color3.new(0, 0, 0)
                NG898.BackgroundTransparency = 0.75
                NG898.BorderColor3 = Color3.new(0, 0, 0)
                NG898.BorderSizePixel = 0
                NG898.Name = dCD('NqqOhggba')
                NG898.Position = UDim2.new(1, -40, 0, 3)
                NG898.Selectable = true
                NG898.Size = UDim2.new(0, 35, 0, 19)
                NG898.Style = Enum.ButtonStyle.Custom
                NG898.Font = Enum.Font.ArialBold
                NG898.FontSize = Enum.FontSize.Size10
                NG898.Text = dCD('NQQ')
                NG898.TextColor3 = Color3.new(1, 1, 1)
                NG898.Parent = NG894
                NG899 = Instance.new('TextButton')
                NG899.Active = true
                NG899.BackgroundColor3 = Color3.new(0, 0, 0)
                NG899.BackgroundTransparency = 0.75
                NG899.BorderColor3 = Color3.new(0, 0, 0)
                NG899.BorderSizePixel = 0
                NG899.Name = dCD('ErzbirOhggba')
                NG899.Position = UDim2.new(0, 127, 0, 3)
                NG899.Selectable = true
                NG899.Size = UDim2.new(0, 58, 0, 19)
                NG899.Style = Enum.ButtonStyle.Custom
                NG899.Visible = false
                NG899.Font = Enum.Font.ArialBold
                NG899.FontSize = Enum.FontSize.Size10
                NG899.Text = dCD('ERZBIR')
                NG899.TextColor3 = Color3.new(1, 1, 1)
                NG899.Parent = NG894
                NG900 = Instance.new('Frame')
                NG900.BackgroundColor3 = Color3.new(0, 0, 0)
                NG900.BackgroundTransparency = 0.75
                NG900.BorderSizePixel = 0
                NG900.Name = dCD('Funqbj')
                NG900.Position = UDim2.new(0, 0, 1, -1)
                NG900.Size = UDim2.new(1, 0, 0, 1)
                NG900.Parent = NG894
                NG901 = Instance.new('Frame')
                NG901.BackgroundTransparency = 1
                NG901.BorderSizePixel = 0
                NG901.Name = dCD('Bcgvbaf')
                NG901.Position = UDim2.new(0, 3, 1, 0)
                NG901.Size = UDim2.new(1, -3, 0, 0)
                NG901.ClipsDescendants = true
                NG901.Parent = NG894
                NG902 = Instance.new('Frame')
                NG902.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG902.BackgroundTransparency = 1
                NG902.BorderSizePixel = 0
                NG902.Name = dCD('PbybeBcgvba')
                NG902.Position = UDim2.new(0, 0, 0, 10)
                NG902.Size = UDim2.new(1, 0, 0, 25)
                NG902.Parent = NG901
                NG903 = Instance.new('TextLabel')
                NG903.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG903.BackgroundTransparency = 1
                NG903.BorderSizePixel = 0
                NG903.Name = dCD('Ynory')
                NG903.Size = UDim2.new(0, 70, 0, 25)
                NG903.Font = Enum.Font.ArialBold
                NG903.FontSize = Enum.FontSize.Size10
                NG903.Text = dCD('Pbybe')
                NG903.TextColor3 = Color3.new(1, 1, 1)
                NG903.TextStrokeTransparency = 0
                NG903.TextWrapped = true
                NG903.TextXAlignment = Enum.TextXAlignment.Left
                NG903.Parent = NG902
                NG904 = Instance.new('Frame')
                NG904.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG904.BackgroundTransparency = 1
                NG904.BorderSizePixel = 0
                NG904.Name = dCD('EVachg')
                NG904.Position = UDim2.new(0, 35, 0, 0)
                NG904.Size = UDim2.new(0, 38, 0, 25)
                NG904.Parent = NG902
                NG905 = Instance.new('TextButton')
                NG905.Active = true
                NG905.AutoButtonColor = false
                NG905.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG905.BackgroundTransparency = 1
                NG905.BorderSizePixel = 0
                NG905.Selectable = true
                NG905.Size = UDim2.new(1, 0, 1, 0)
                NG905.Style = Enum.ButtonStyle.Custom
                NG905.ZIndex = 2
                NG905.Font = Enum.Font.Legacy
                NG905.FontSize = Enum.FontSize.Size8
                NG905.Text = dCD('')
                NG905.Parent = NG904
                NG906 = Instance.new('ImageLabel')
                NG906.Active = false
                NG906.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG906.BackgroundTransparency = 1
                NG906.BorderSizePixel = 0
                NG906.Name = dCD('Onpxtebhaq')
                NG906.Selectable = false
                NG906.Size = UDim2.new(1, 0, 1, 0)
                NG906.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG906.Parent = NG904
                NG907 = Instance.new('Frame')
                NG907.BackgroundColor3 = Color3.new(1, 0, 0)
                NG907.BorderSizePixel = 0
                NG907.Name = dCD('FryrpgrqVaqvpngbe')
                NG907.Position = UDim2.new(0, 3, 0, -2)
                NG907.Size = UDim2.new(1, -3, 0, 2)
                NG907.Parent = NG904
                NG908 = Instance.new('TextBox')
                NG908.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG908.BackgroundTransparency = 1
                NG908.BorderSizePixel = 0
                NG908.Position = UDim2.new(0, 5, 0, 0)
                NG908.Size = UDim2.new(1, -10, 1, 0)
                NG908.Font = Enum.Font.ArialBold
                NG908.FontSize = Enum.FontSize.Size10
                NG908.Text = dCD('255')
                NG908.TextColor3 = Color3.new(1, 1, 1)
                NG908.Parent = NG904
                NG909 = Instance.new('Frame')
                NG909.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG909.BackgroundTransparency = 1
                NG909.BorderSizePixel = 0
                NG909.Name = dCD('TVachg')
                NG909.Position = UDim2.new(0, 72, 0, 0)
                NG909.Size = UDim2.new(0, 38, 0, 25)
                NG909.Parent = NG902
                NG910 = Instance.new('TextButton')
                NG910.Active = true
                NG910.AutoButtonColor = false
                NG910.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG910.BackgroundTransparency = 1
                NG910.BorderSizePixel = 0
                NG910.Selectable = true
                NG910.Size = UDim2.new(1, 0, 1, 0)
                NG910.Style = Enum.ButtonStyle.Custom
                NG910.ZIndex = 2
                NG910.Font = Enum.Font.Legacy
                NG910.FontSize = Enum.FontSize.Size8
                NG910.Text = dCD('')
                NG910.Parent = NG909
                NG911 = Instance.new('ImageLabel')
                NG911.Active = false
                NG911.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG911.BackgroundTransparency = 1
                NG911.BorderSizePixel = 0
                NG911.Name = dCD('Onpxtebhaq')
                NG911.Selectable = false
                NG911.Size = UDim2.new(1, 0, 1, 0)
                NG911.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG911.Parent = NG909
                NG912 = Instance.new('Frame')
                NG912.BackgroundColor3 = Color3.new(0, 1, 0)
                NG912.BorderSizePixel = 0
                NG912.Name = dCD('FryrpgrqVaqvpngbe')
                NG912.Position = UDim2.new(0, 3, 0, -2)
                NG912.Size = UDim2.new(1, -3, 0, 2)
                NG912.Parent = NG909
                NG913 = Instance.new('TextBox')
                NG913.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG913.BackgroundTransparency = 1
                NG913.BorderSizePixel = 0
                NG913.Position = UDim2.new(0, 5, 0, 0)
                NG913.Size = UDim2.new(1, -10, 1, 0)
                NG913.Font = Enum.Font.ArialBold
                NG913.FontSize = Enum.FontSize.Size10
                NG913.Text = dCD('255')
                NG913.TextColor3 = Color3.new(1, 1, 1)
                NG913.Parent = NG909
                NG914 = Instance.new('Frame')
                NG914.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG914.BackgroundTransparency = 1
                NG914.BorderSizePixel = 0
                NG914.Name = dCD('OVachg')
                NG914.Position = UDim2.new(0, 109, 0, 0)
                NG914.Size = UDim2.new(0, 38, 0, 25)
                NG914.Parent = NG902
                NG915 = Instance.new('TextButton')
                NG915.Active = true
                NG915.AutoButtonColor = false
                NG915.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG915.BackgroundTransparency = 1
                NG915.BorderSizePixel = 0
                NG915.Selectable = true
                NG915.Size = UDim2.new(1, 0, 1, 0)
                NG915.Style = Enum.ButtonStyle.Custom
                NG915.ZIndex = 2
                NG915.Font = Enum.Font.Legacy
                NG915.FontSize = Enum.FontSize.Size8
                NG915.Text = dCD('')
                NG915.Parent = NG914
                NG916 = Instance.new('ImageLabel')
                NG916.Active = false
                NG916.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG916.BackgroundTransparency = 1
                NG916.BorderSizePixel = 0
                NG916.Name = dCD('Onpxtebhaq')
                NG916.Selectable = false
                NG916.Size = UDim2.new(1, 0, 1, 0)
                NG916.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG916.Parent = NG914
                NG917 = Instance.new('Frame')
                NG917.BackgroundColor3 = Color3.new(0, 0, 1)
                NG917.BorderSizePixel = 0
                NG917.Name = dCD('FryrpgrqVaqvpngbe')
                NG917.Position = UDim2.new(0, 3, 0, -2)
                NG917.Size = UDim2.new(1, -3, 0, 2)
                NG917.Parent = NG914
                NG918 = Instance.new('TextBox')
                NG918.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG918.BackgroundTransparency = 1
                NG918.BorderSizePixel = 0
                NG918.Position = UDim2.new(0, 5, 0, 0)
                NG918.Size = UDim2.new(1, -10, 1, 0)
                NG918.Font = Enum.Font.ArialBold
                NG918.FontSize = Enum.FontSize.Size10
                NG918.Text = dCD('255')
                NG918.TextColor3 = Color3.new(1, 1, 1)
                NG918.Parent = NG914
                NG919 = Instance.new('ImageButton')
                NG919.BackgroundColor3 = Color3.new(0, 0, 0)
                NG919.BackgroundTransparency = 0.40000000596046
                NG919.BorderSizePixel = 0
                NG919.Name = dCD('UFICvpxre')
                NG919.Position = UDim2.new(0, 160, 0, -2)
                NG919.Size = UDim2.new(0, 27, 0, 27)
                NG919.Style = Enum.ButtonStyle.Custom
                NG919.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141313631')
                NG919.Parent = NG902
                NG920 = Instance.new('Frame')
                NG920.BackgroundColor3 = Color3.new(0, 0, 0)
                NG920.BackgroundTransparency = 0.75
                NG920.BorderSizePixel = 0
                NG920.Name = dCD('Funqbj')
                NG920.Position = UDim2.new(0, 0, 1, -2)
                NG920.Size = UDim2.new(1, 0, 0, 2)
                NG920.Parent = NG919
                NG921 = Instance.new('Frame')
                NG921.BackgroundColor3 = Color3.new(0, 0, 0)
                NG921.BackgroundTransparency = 0.5
                NG921.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG921.BorderSizePixel = 0
                NG921.Name = dCD('Frcnengbe')
                NG921.Position = UDim2.new(0, 151, 0, 4)
                NG921.Size = UDim2.new(0, 4, 0, 4)
                NG921.Parent = NG902
                NG922 = Instance.new('Frame')
                NG922.BackgroundColor3 = Color3.new(0, 0, 0)
                NG922.BackgroundTransparency = 0.5
                NG922.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG922.BorderSizePixel = 0
                NG922.Name = dCD('Frcnengbe')
                NG922.Position = UDim2.new(0, 151, 0, 16)
                NG922.Size = UDim2.new(0, 4, 0, 4)
                NG922.Parent = NG902
                NG923 = Instance.new('Frame')
                NG923.BackgroundColor3 = Color3.new(0, 0, 0)
                NG923.BackgroundTransparency = 0.5
                NG923.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG923.BorderSizePixel = 0
                NG923.Name = dCD('Frcnengbe')
                NG923.Position = UDim2.new(0, 151, 0, 10)
                NG923.Size = UDim2.new(0, 4, 0, 4)
                NG923.Parent = NG902
                NG924 = Instance.new('Frame')
                NG924.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG924.BackgroundTransparency = 1
                NG924.BorderSizePixel = 0
                NG924.Name = dCD('BcnpvglBcgvba')
                NG924.Position = UDim2.new(0, 0, 0, 45)
                NG924.Size = UDim2.new(1, 0, 0, 25)
                NG924.Parent = NG901
                NG925 = Instance.new('TextLabel')
                NG925.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG925.BackgroundTransparency = 1
                NG925.BorderSizePixel = 0
                NG925.Name = dCD('Ynory')
                NG925.Size = UDim2.new(0, 70, 0, 25)
                NG925.Font = Enum.Font.ArialBold
                NG925.FontSize = Enum.FontSize.Size10
                NG925.Text = dCD('Bcnpvgl')
                NG925.TextColor3 = Color3.new(1, 1, 1)
                NG925.TextStrokeTransparency = 0
                NG925.TextWrapped = true
                NG925.TextXAlignment = Enum.TextXAlignment.Left
                NG925.Parent = NG924
                NG926 = Instance.new('Frame')
                NG926.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG926.BackgroundTransparency = 1
                NG926.BorderSizePixel = 0
                NG926.Name = dCD('Vachg')
                NG926.Position = UDim2.new(0, 45, 0, 0)
                NG926.Size = UDim2.new(0, 38, 0, 25)
                NG926.Parent = NG924
                NG927 = Instance.new('TextButton')
                NG927.Active = true
                NG927.AutoButtonColor = false
                NG927.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG927.BackgroundTransparency = 1
                NG927.BorderSizePixel = 0
                NG927.Selectable = true
                NG927.Size = UDim2.new(1, 0, 1, 0)
                NG927.Style = Enum.ButtonStyle.Custom
                NG927.ZIndex = 2
                NG927.Font = Enum.Font.Legacy
                NG927.FontSize = Enum.FontSize.Size8
                NG927.Text = dCD('')
                NG927.Parent = NG926
                NG928 = Instance.new('ImageLabel')
                NG928.Active = false
                NG928.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG928.BackgroundTransparency = 1
                NG928.BorderSizePixel = 0
                NG928.Name = dCD('Onpxtebhaq')
                NG928.Selectable = false
                NG928.Size = UDim2.new(1, 0, 1, 0)
                NG928.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG928.Parent = NG926
                NG929 = Instance.new('Frame')
                NG929.BorderSizePixel = 0
                NG929.Name = dCD('FryrpgrqVaqvpngbe')
                NG929.Position = UDim2.new(0, 3, 0, -2)
                NG929.Size = UDim2.new(1, -3, 0, 2)
                NG929.Parent = NG926
                NG930 = Instance.new('TextBox')
                NG930.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG930.BackgroundTransparency = 1
                NG930.BorderSizePixel = 0
                NG930.Position = UDim2.new(0, 5, 0, 0)
                NG930.Size = UDim2.new(1, -10, 1, 0)
                NG930.Font = Enum.Font.ArialBold
                NG930.FontSize = Enum.FontSize.Size10
                NG930.Text = dCD('1')
                NG930.TextColor3 = Color3.new(1, 1, 1)
                NG930.Parent = NG926
                NG931 = Instance.new('Frame')
                NG931.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG931.BackgroundTransparency = 1
                NG931.BorderSizePixel = 0
                NG931.Name = dCD('IrybpvglBcgvba')
                NG931.Position = UDim2.new(0, 100, 0, 45)
                NG931.Size = UDim2.new(1, -115, 0, 25)
                NG931.Parent = NG901
                NG932 = Instance.new('TextLabel')
                NG932.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG932.BackgroundTransparency = 1
                NG932.BorderSizePixel = 0
                NG932.Name = dCD('Ynory')
                NG932.Size = UDim2.new(0, 70, 0, 25)
                NG932.Font = Enum.Font.ArialBold
                NG932.FontSize = Enum.FontSize.Size10
                NG932.Text = dCD('Irybpvgl')
                NG932.TextColor3 = Color3.new(1, 1, 1)
                NG932.TextStrokeTransparency = 0
                NG932.TextWrapped = true
                NG932.TextXAlignment = Enum.TextXAlignment.Left
                NG932.Parent = NG931
                NG933 = Instance.new('Frame')
                NG933.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG933.BackgroundTransparency = 1
                NG933.BorderSizePixel = 0
                NG933.Name = dCD('Vachg')
                NG933.Position = UDim2.new(0, 45, 0, 0)
                NG933.Size = UDim2.new(0, 38, 0, 25)
                NG933.Parent = NG931
                NG934 = Instance.new('TextButton')
                NG934.Active = true
                NG934.AutoButtonColor = false
                NG934.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG934.BackgroundTransparency = 1
                NG934.BorderSizePixel = 0
                NG934.Selectable = true
                NG934.Size = UDim2.new(1, 0, 1, 0)
                NG934.Style = Enum.ButtonStyle.Custom
                NG934.ZIndex = 2
                NG934.Font = Enum.Font.Legacy
                NG934.FontSize = Enum.FontSize.Size8
                NG934.Text = dCD('')
                NG934.Parent = NG933
                NG935 = Instance.new('ImageLabel')
                NG935.Active = false
                NG935.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG935.BackgroundTransparency = 1
                NG935.BorderSizePixel = 0
                NG935.Name = dCD('Onpxtebhaq')
                NG935.Selectable = false
                NG935.Size = UDim2.new(1, 0, 1, 0)
                NG935.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG935.Parent = NG933
                NG936 = Instance.new('Frame')
                NG936.BorderSizePixel = 0
                NG936.Name = dCD('FryrpgrqVaqvpngbe')
                NG936.Position = UDim2.new(0, 3, 0, -2)
                NG936.Size = UDim2.new(1, -3, 0, 2)
                NG936.Parent = NG933
                NG937 = Instance.new('TextBox')
                NG937.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG937.BackgroundTransparency = 1
                NG937.BorderSizePixel = 0
                NG937.Position = UDim2.new(0, 5, 0, 0)
                NG937.Size = UDim2.new(1, -10, 1, 0)
                NG937.Font = Enum.Font.ArialBold
                NG937.FontSize = Enum.FontSize.Size10
                NG937.Text = dCD('90')
                NG937.TextColor3 = Color3.new(1, 1, 1)
                NG937.Parent = NG933
                NG938 = Instance.new('Frame')
                NG938.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG938.BackgroundTransparency = 1
                NG938.BorderSizePixel = 0
                NG938.Name = dCD('FvmrBcgvba')
                NG938.Position = UDim2.new(0, 0, 0, 80)
                NG938.Size = UDim2.new(1, 0, 0, 25)
                NG938.Parent = NG901
                NG939 = Instance.new('TextLabel')
                NG939.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG939.BackgroundTransparency = 1
                NG939.BorderSizePixel = 0
                NG939.Name = dCD('Ynory')
                NG939.Size = UDim2.new(0, 70, 0, 25)
                NG939.Font = Enum.Font.ArialBold
                NG939.FontSize = Enum.FontSize.Size10
                NG939.Text = dCD('Fvmr')
                NG939.TextColor3 = Color3.new(1, 1, 1)
                NG939.TextStrokeTransparency = 0
                NG939.TextWrapped = true
                NG939.TextXAlignment = Enum.TextXAlignment.Left
                NG939.Parent = NG938
                NG940 = Instance.new('Frame')
                NG940.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG940.BackgroundTransparency = 1
                NG940.BorderSizePixel = 0
                NG940.Name = dCD('Vachg')
                NG940.Position = UDim2.new(0, 30, 0, 0)
                NG940.Size = UDim2.new(0, 38, 0, 25)
                NG940.Parent = NG938
                NG941 = Instance.new('TextButton')
                NG941.Active = true
                NG941.AutoButtonColor = false
                NG941.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG941.BackgroundTransparency = 1
                NG941.BorderSizePixel = 0
                NG941.Selectable = true
                NG941.Size = UDim2.new(1, 0, 1, 0)
                NG941.Style = Enum.ButtonStyle.Custom
                NG941.ZIndex = 2
                NG941.Font = Enum.Font.Legacy
                NG941.FontSize = Enum.FontSize.Size8
                NG941.Text = dCD('')
                NG941.Parent = NG940
                NG942 = Instance.new('ImageLabel')
                NG942.Active = false
                NG942.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG942.BackgroundTransparency = 1
                NG942.BorderSizePixel = 0
                NG942.Name = dCD('Onpxtebhaq')
                NG942.Selectable = false
                NG942.Size = UDim2.new(1, 0, 1, 0)
                NG942.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG942.Parent = NG940
                NG943 = Instance.new('Frame')
                NG943.BorderSizePixel = 0
                NG943.Name = dCD('FryrpgrqVaqvpngbe')
                NG943.Position = UDim2.new(0, 3, 0, -2)
                NG943.Size = UDim2.new(1, -3, 0, 2)
                NG943.Parent = NG940
                NG944 = Instance.new('TextBox')
                NG944.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG944.BackgroundTransparency = 1
                NG944.BorderSizePixel = 0
                NG944.Position = UDim2.new(0, 5, 0, 0)
                NG944.Size = UDim2.new(1, -10, 1, 0)
                NG944.Font = Enum.Font.ArialBold
                NG944.FontSize = Enum.FontSize.Size10
                NG944.Text = dCD('16')
                NG944.TextColor3 = Color3.new(1, 1, 1)
                NG944.Parent = NG940
                NG945 = Instance.new('TextLabel')
                NG945.BackgroundTransparency = 1
                NG945.BorderSizePixel = 0
                NG945.Name = dCD('FryrpgAbgr')
                NG945.Position = UDim2.new(0, 10, 0, 27)
                NG945.Size = UDim2.new(1, -10, 0, 15)
                NG945.Visible = false
                NG945.FontSize = Enum.FontSize.Size14
                NG945.Text = dCD('Fryrpg fbzrguvat gb hfr guvf gbby.')
                NG945.TextColor3 = Color3.new(1, 1, 1)
                NG945.TextScaled = true
                NG945.TextStrokeTransparency = 0.5
                NG945.TextWrapped = true
                NG945.TextXAlignment = Enum.TextXAlignment.Left
                NG945.Parent = NG888
                NG946 = Instance.new('Frame')
                NG946.BackgroundColor3 = Color3.new(0, 0, 0)
                NG946.BackgroundTransparency = 0.67500001192093
                NG946.BorderSizePixel = 0
                NG946.Name = dCD('Sver')
                NG946.Position = UDim2.new(0, 10, 0, 60)
                NG946.Size = UDim2.new(1, -10, 0, 25)
                NG946.Parent = NG888
                NG947 = Instance.new('TextLabel')
                NG947.BackgroundTransparency = 1
                NG947.BorderSizePixel = 0
                NG947.Name = dCD('Ynory')
                NG947.Position = UDim2.new(0, 35, 0, 0)
                NG947.Size = UDim2.new(0, 60, 0, 25)
                NG947.Font = Enum.Font.ArialBold
                NG947.FontSize = Enum.FontSize.Size10
                NG947.Text = dCD('Sver')
                NG947.TextColor3 = Color3.new(1, 1, 1)
                NG947.TextStrokeTransparency = 0.5
                NG947.TextWrapped = true
                NG947.TextXAlignment = Enum.TextXAlignment.Left
                NG947.Parent = NG946
                NG948 = Instance.new('ImageButton')
                NG948.BackgroundTransparency = 1
                NG948.BorderSizePixel = 0
                NG948.Name = dCD('NeebjOhggba')
                NG948.Position = UDim2.new(0, 10, 0, 3)
                NG948.Size = UDim2.new(0, 20, 0, 20)
                NG948.Style = Enum.ButtonStyle.Custom
                NG948.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=134367382')
                NG948.Parent = NG946
                NG949 = Instance.new('Frame')
                NG949.BackgroundColor3 = Color3.new(0.85098, 0, 1)
                NG949.BorderSizePixel = 0
                NG949.Name = dCD('PbybeOne')
                NG949.Size = UDim2.new(0, 3, 1, 0)
                NG949.Parent = NG946
                NG950 = Instance.new('TextButton')
                NG950.Active = true
                NG950.BackgroundColor3 = Color3.new(0, 0, 0)
                NG950.BackgroundTransparency = 0.75
                NG950.BorderColor3 = Color3.new(0, 0, 0)
                NG950.BorderSizePixel = 0
                NG950.Name = dCD('NqqOhggba')
                NG950.Position = UDim2.new(1, -40, 0, 3)
                NG950.Selectable = true
                NG950.Size = UDim2.new(0, 35, 0, 19)
                NG950.Style = Enum.ButtonStyle.Custom
                NG950.Font = Enum.Font.ArialBold
                NG950.FontSize = Enum.FontSize.Size10
                NG950.Text = dCD('NQQ')
                NG950.TextColor3 = Color3.new(1, 1, 1)
                NG950.Parent = NG946
                NG951 = Instance.new('TextButton')
                NG951.Active = true
                NG951.BackgroundColor3 = Color3.new(0, 0, 0)
                NG951.BackgroundTransparency = 0.75
                NG951.BorderColor3 = Color3.new(0, 0, 0)
                NG951.BorderSizePixel = 0
                NG951.Name = dCD('ErzbirOhggba')
                NG951.Position = UDim2.new(0, 90, 0, 3)
                NG951.Selectable = true
                NG951.Size = UDim2.new(0, 58, 0, 19)
                NG951.Style = Enum.ButtonStyle.Custom
                NG951.Visible = false
                NG951.Font = Enum.Font.ArialBold
                NG951.FontSize = Enum.FontSize.Size10
                NG951.Text = dCD('ERZBIR')
                NG951.TextColor3 = Color3.new(1, 1, 1)
                NG951.Parent = NG946
                NG952 = Instance.new('Frame')
                NG952.BackgroundColor3 = Color3.new(0, 0, 0)
                NG952.BackgroundTransparency = 0.75
                NG952.BorderSizePixel = 0
                NG952.Name = dCD('Funqbj')
                NG952.Position = UDim2.new(0, 0, 1, -1)
                NG952.Size = UDim2.new(1, 0, 0, 1)
                NG952.Parent = NG946
                NG953 = Instance.new('Frame')
                NG953.BackgroundTransparency = 1
                NG953.BorderSizePixel = 0
                NG953.Name = dCD('Bcgvbaf')
                NG953.Position = UDim2.new(0, 3, 1, 0)
                NG953.Size = UDim2.new(1, -3, 0, 0)
                NG953.ClipsDescendants = true
                NG953.Parent = NG946
                NG954 = Instance.new('Frame')
                NG954.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG954.BackgroundTransparency = 1
                NG954.BorderSizePixel = 0
                NG954.Name = dCD('PbybeBcgvba')
                NG954.Position = UDim2.new(0, 0, 0, 10)
                NG954.Size = UDim2.new(1, 0, 0, 25)
                NG954.Parent = NG953
                NG955 = Instance.new('TextLabel')
                NG955.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG955.BackgroundTransparency = 1
                NG955.BorderSizePixel = 0
                NG955.Name = dCD('Ynory')
                NG955.Size = UDim2.new(0, 70, 0, 25)
                NG955.Font = Enum.Font.ArialBold
                NG955.FontSize = Enum.FontSize.Size10
                NG955.Text = dCD('Pbybe')
                NG955.TextColor3 = Color3.new(1, 1, 1)
                NG955.TextStrokeTransparency = 0
                NG955.TextWrapped = true
                NG955.TextXAlignment = Enum.TextXAlignment.Left
                NG955.Parent = NG954
                NG956 = Instance.new('Frame')
                NG956.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG956.BackgroundTransparency = 1
                NG956.BorderSizePixel = 0
                NG956.Name = dCD('EVachg')
                NG956.Position = UDim2.new(0, 35, 0, 0)
                NG956.Size = UDim2.new(0, 38, 0, 25)
                NG956.Parent = NG954
                NG957 = Instance.new('TextButton')
                NG957.Active = true
                NG957.AutoButtonColor = false
                NG957.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG957.BackgroundTransparency = 1
                NG957.BorderSizePixel = 0
                NG957.Selectable = true
                NG957.Size = UDim2.new(1, 0, 1, 0)
                NG957.Style = Enum.ButtonStyle.Custom
                NG957.ZIndex = 2
                NG957.Font = Enum.Font.Legacy
                NG957.FontSize = Enum.FontSize.Size8
                NG957.Text = dCD('')
                NG957.Parent = NG956
                NG958 = Instance.new('ImageLabel')
                NG958.Active = false
                NG958.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG958.BackgroundTransparency = 1
                NG958.BorderSizePixel = 0
                NG958.Name = dCD('Onpxtebhaq')
                NG958.Selectable = false
                NG958.Size = UDim2.new(1, 0, 1, 0)
                NG958.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG958.Parent = NG956
                NG959 = Instance.new('Frame')
                NG959.BackgroundColor3 = Color3.new(1, 0, 0)
                NG959.BorderSizePixel = 0
                NG959.Name = dCD('FryrpgrqVaqvpngbe')
                NG959.Position = UDim2.new(0, 3, 0, -2)
                NG959.Size = UDim2.new(1, -3, 0, 2)
                NG959.Parent = NG956
                NG960 = Instance.new('TextBox')
                NG960.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG960.BackgroundTransparency = 1
                NG960.BorderSizePixel = 0
                NG960.Position = UDim2.new(0, 5, 0, 0)
                NG960.Size = UDim2.new(1, -10, 1, 0)
                NG960.Font = Enum.Font.ArialBold
                NG960.FontSize = Enum.FontSize.Size10
                NG960.Text = dCD('255')
                NG960.TextColor3 = Color3.new(1, 1, 1)
                NG960.Parent = NG956
                NG961 = Instance.new('Frame')
                NG961.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG961.BackgroundTransparency = 1
                NG961.BorderSizePixel = 0
                NG961.Name = dCD('TVachg')
                NG961.Position = UDim2.new(0, 72, 0, 0)
                NG961.Size = UDim2.new(0, 38, 0, 25)
                NG961.Parent = NG954
                NG962 = Instance.new('TextButton')
                NG962.Active = true
                NG962.AutoButtonColor = false
                NG962.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG962.BackgroundTransparency = 1
                NG962.BorderSizePixel = 0
                NG962.Selectable = true
                NG962.Size = UDim2.new(1, 0, 1, 0)
                NG962.Style = Enum.ButtonStyle.Custom
                NG962.ZIndex = 2
                NG962.Font = Enum.Font.Legacy
                NG962.FontSize = Enum.FontSize.Size8
                NG962.Text = dCD('')
                NG962.Parent = NG961
                NG963 = Instance.new('ImageLabel')
                NG963.Active = false
                NG963.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG963.BackgroundTransparency = 1
                NG963.BorderSizePixel = 0
                NG963.Name = dCD('Onpxtebhaq')
                NG963.Selectable = false
                NG963.Size = UDim2.new(1, 0, 1, 0)
                NG963.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG963.Parent = NG961
                NG964 = Instance.new('Frame')
                NG964.BackgroundColor3 = Color3.new(0, 1, 0)
                NG964.BorderSizePixel = 0
                NG964.Name = dCD('FryrpgrqVaqvpngbe')
                NG964.Position = UDim2.new(0, 3, 0, -2)
                NG964.Size = UDim2.new(1, -3, 0, 2)
                NG964.Parent = NG961
                NG965 = Instance.new('TextBox')
                NG965.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG965.BackgroundTransparency = 1
                NG965.BorderSizePixel = 0
                NG965.Position = UDim2.new(0, 5, 0, 0)
                NG965.Size = UDim2.new(1, -10, 1, 0)
                NG965.Font = Enum.Font.ArialBold
                NG965.FontSize = Enum.FontSize.Size10
                NG965.Text = dCD('255')
                NG965.TextColor3 = Color3.new(1, 1, 1)
                NG965.Parent = NG961
                NG966 = Instance.new('Frame')
                NG966.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG966.BackgroundTransparency = 1
                NG966.BorderSizePixel = 0
                NG966.Name = dCD('OVachg')
                NG966.Position = UDim2.new(0, 109, 0, 0)
                NG966.Size = UDim2.new(0, 38, 0, 25)
                NG966.Parent = NG954
                NG967 = Instance.new('TextButton')
                NG967.Active = true
                NG967.AutoButtonColor = false
                NG967.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG967.BackgroundTransparency = 1
                NG967.BorderSizePixel = 0
                NG967.Selectable = true
                NG967.Size = UDim2.new(1, 0, 1, 0)
                NG967.Style = Enum.ButtonStyle.Custom
                NG967.ZIndex = 2
                NG967.Font = Enum.Font.Legacy
                NG967.FontSize = Enum.FontSize.Size8
                NG967.Text = dCD('')
                NG967.Parent = NG966
                NG968 = Instance.new('ImageLabel')
                NG968.Active = false
                NG968.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG968.BackgroundTransparency = 1
                NG968.BorderSizePixel = 0
                NG968.Name = dCD('Onpxtebhaq')
                NG968.Selectable = false
                NG968.Size = UDim2.new(1, 0, 1, 0)
                NG968.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG968.Parent = NG966
                NG969 = Instance.new('Frame')
                NG969.BackgroundColor3 = Color3.new(0, 0, 1)
                NG969.BorderSizePixel = 0
                NG969.Name = dCD('FryrpgrqVaqvpngbe')
                NG969.Position = UDim2.new(0, 3, 0, -2)
                NG969.Size = UDim2.new(1, -3, 0, 2)
                NG969.Parent = NG966
                NG970 = Instance.new('TextBox')
                NG970.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG970.BackgroundTransparency = 1
                NG970.BorderSizePixel = 0
                NG970.Position = UDim2.new(0, 5, 0, 0)
                NG970.Size = UDim2.new(1, -10, 1, 0)
                NG970.Font = Enum.Font.ArialBold
                NG970.FontSize = Enum.FontSize.Size10
                NG970.Text = dCD('255')
                NG970.TextColor3 = Color3.new(1, 1, 1)
                NG970.Parent = NG966
                NG971 = Instance.new('ImageButton')
                NG971.BackgroundColor3 = Color3.new(0, 0, 0)
                NG971.BackgroundTransparency = 0.40000000596046
                NG971.BorderSizePixel = 0
                NG971.Name = dCD('UFICvpxre')
                NG971.Position = UDim2.new(0, 160, 0, -2)
                NG971.Size = UDim2.new(0, 27, 0, 27)
                NG971.Style = Enum.ButtonStyle.Custom
                NG971.ZIndex = 2
                NG971.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141313631')
                NG971.Parent = NG954
                NG972 = Instance.new('Frame')
                NG972.BackgroundColor3 = Color3.new(0, 0, 0)
                NG972.BackgroundTransparency = 0.75
                NG972.BorderSizePixel = 0
                NG972.Name = dCD('Funqbj')
                NG972.Position = UDim2.new(0, 0, 1, -2)
                NG972.Size = UDim2.new(1, 0, 0, 2)
                NG972.Parent = NG971
                NG973 = Instance.new('Frame')
                NG973.BackgroundColor3 = Color3.new(0, 0, 0)
                NG973.BackgroundTransparency = 0.5
                NG973.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG973.BorderSizePixel = 0
                NG973.Name = dCD('Frcnengbe')
                NG973.Position = UDim2.new(0, 151, 0, 4)
                NG973.Size = UDim2.new(0, 4, 0, 4)
                NG973.Parent = NG954
                NG974 = Instance.new('Frame')
                NG974.BackgroundColor3 = Color3.new(0, 0, 0)
                NG974.BackgroundTransparency = 0.5
                NG974.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG974.BorderSizePixel = 0
                NG974.Name = dCD('Frcnengbe')
                NG974.Position = UDim2.new(0, 151, 0, 16)
                NG974.Size = UDim2.new(0, 4, 0, 4)
                NG974.Parent = NG954
                NG975 = Instance.new('Frame')
                NG975.BackgroundColor3 = Color3.new(0, 0, 0)
                NG975.BackgroundTransparency = 0.5
                NG975.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG975.BorderSizePixel = 0
                NG975.Name = dCD('Frcnengbe')
                NG975.Position = UDim2.new(0, 151, 0, 10)
                NG975.Size = UDim2.new(0, 4, 0, 4)
                NG975.Parent = NG954
                NG976 = Instance.new('Frame')
                NG976.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG976.BackgroundTransparency = 1
                NG976.BorderSizePixel = 0
                NG976.Name = dCD('UrngBcgvba')
                NG976.Position = UDim2.new(0, 0, 0, 80)
                NG976.Size = UDim2.new(1, 0, 0, 25)
                NG976.Parent = NG953
                NG977 = Instance.new('TextLabel')
                NG977.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG977.BackgroundTransparency = 1
                NG977.BorderSizePixel = 0
                NG977.Name = dCD('Ynory')
                NG977.Size = UDim2.new(0, 70, 0, 25)
                NG977.Font = Enum.Font.ArialBold
                NG977.FontSize = Enum.FontSize.Size10
                NG977.Text = dCD('Urng')
                NG977.TextColor3 = Color3.new(1, 1, 1)
                NG977.TextStrokeTransparency = 0
                NG977.TextWrapped = true
                NG977.TextXAlignment = Enum.TextXAlignment.Left
                NG977.Parent = NG976
                NG978 = Instance.new('Frame')
                NG978.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG978.BackgroundTransparency = 1
                NG978.BorderSizePixel = 0
                NG978.Name = dCD('Vachg')
                NG978.Position = UDim2.new(0, 34, 0, 0)
                NG978.Size = UDim2.new(0, 38, 0, 25)
                NG978.Parent = NG976
                NG979 = Instance.new('TextButton')
                NG979.Active = true
                NG979.AutoButtonColor = false
                NG979.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG979.BackgroundTransparency = 1
                NG979.BorderSizePixel = 0
                NG979.Selectable = true
                NG979.Size = UDim2.new(1, 0, 1, 0)
                NG979.Style = Enum.ButtonStyle.Custom
                NG979.ZIndex = 2
                NG979.Font = Enum.Font.Legacy
                NG979.FontSize = Enum.FontSize.Size8
                NG979.Text = dCD('')
                NG979.Parent = NG978
                NG980 = Instance.new('ImageLabel')
                NG980.Active = false
                NG980.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG980.BackgroundTransparency = 1
                NG980.BorderSizePixel = 0
                NG980.Name = dCD('Onpxtebhaq')
                NG980.Selectable = false
                NG980.Size = UDim2.new(1, 0, 1, 0)
                NG980.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG980.Parent = NG978
                NG981 = Instance.new('Frame')
                NG981.BorderSizePixel = 0
                NG981.Name = dCD('FryrpgrqVaqvpngbe')
                NG981.Position = UDim2.new(0, 3, 0, -2)
                NG981.Size = UDim2.new(1, -3, 0, 2)
                NG981.Parent = NG978
                NG982 = Instance.new('TextBox')
                NG982.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG982.BackgroundTransparency = 1
                NG982.BorderSizePixel = 0
                NG982.Position = UDim2.new(0, 5, 0, 0)
                NG982.Size = UDim2.new(1, -10, 1, 0)
                NG982.Font = Enum.Font.ArialBold
                NG982.FontSize = Enum.FontSize.Size10
                NG982.Text = dCD('1')
                NG982.TextColor3 = Color3.new(1, 1, 1)
                NG982.Parent = NG978
                NG983 = Instance.new('Frame')
                NG983.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG983.BackgroundTransparency = 1
                NG983.BorderSizePixel = 0
                NG983.Name = dCD('FvmrBcgvba')
                NG983.Position = UDim2.new(0, 90, 0, 80)
                NG983.Size = UDim2.new(1, 0, 0, 25)
                NG983.Parent = NG953
                NG984 = Instance.new('TextLabel')
                NG984.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG984.BackgroundTransparency = 1
                NG984.BorderSizePixel = 0
                NG984.Name = dCD('Ynory')
                NG984.Size = UDim2.new(0, 70, 0, 25)
                NG984.Font = Enum.Font.ArialBold
                NG984.FontSize = Enum.FontSize.Size10
                NG984.Text = dCD('Fvmr')
                NG984.TextColor3 = Color3.new(1, 1, 1)
                NG984.TextStrokeTransparency = 0
                NG984.TextWrapped = true
                NG984.TextXAlignment = Enum.TextXAlignment.Left
                NG984.Parent = NG983
                NG985 = Instance.new('Frame')
                NG985.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG985.BackgroundTransparency = 1
                NG985.BorderSizePixel = 0
                NG985.Name = dCD('Vachg')
                NG985.Position = UDim2.new(0, 30, 0, 0)
                NG985.Size = UDim2.new(0, 38, 0, 25)
                NG985.Parent = NG983
                NG986 = Instance.new('TextButton')
                NG986.Active = true
                NG986.AutoButtonColor = false
                NG986.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG986.BackgroundTransparency = 1
                NG986.BorderSizePixel = 0
                NG986.Selectable = true
                NG986.Size = UDim2.new(1, 0, 1, 0)
                NG986.Style = Enum.ButtonStyle.Custom
                NG986.ZIndex = 2
                NG986.Font = Enum.Font.Legacy
                NG986.FontSize = Enum.FontSize.Size8
                NG986.Text = dCD('')
                NG986.Parent = NG985
                NG987 = Instance.new('ImageLabel')
                NG987.Active = false
                NG987.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG987.BackgroundTransparency = 1
                NG987.BorderSizePixel = 0
                NG987.Name = dCD('Onpxtebhaq')
                NG987.Selectable = false
                NG987.Size = UDim2.new(1, 0, 1, 0)
                NG987.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG987.Parent = NG985
                NG988 = Instance.new('Frame')
                NG988.BorderSizePixel = 0
                NG988.Name = dCD('FryrpgrqVaqvpngbe')
                NG988.Position = UDim2.new(0, 3, 0, -2)
                NG988.Size = UDim2.new(1, -3, 0, 2)
                NG988.Parent = NG985
                NG989 = Instance.new('TextBox')
                NG989.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG989.BackgroundTransparency = 1
                NG989.BorderSizePixel = 0
                NG989.Position = UDim2.new(0, 5, 0, 0)
                NG989.Size = UDim2.new(1, -10, 1, 0)
                NG989.Font = Enum.Font.ArialBold
                NG989.FontSize = Enum.FontSize.Size10
                NG989.Text = dCD('16')
                NG989.TextColor3 = Color3.new(1, 1, 1)
                NG989.Parent = NG985
                NG990 = Instance.new('Frame')
                NG990.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG990.BackgroundTransparency = 1
                NG990.BorderSizePixel = 0
                NG990.Name = dCD('FrpbaqPbybeBcgvba')
                NG990.Position = UDim2.new(0, 0, 0, 45)
                NG990.Size = UDim2.new(1, 0, 0, 25)
                NG990.Parent = NG953
                NG991 = Instance.new('TextLabel')
                NG991.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG991.BackgroundTransparency = 1
                NG991.BorderSizePixel = 0
                NG991.Name = dCD('Ynory')
                NG991.Size = UDim2.new(0, 40, 0, 25)
                NG991.Font = Enum.Font.ArialBold
                NG991.FontSize = Enum.FontSize.Size10
                NG991.Text = dCD('2aq Pbybe')
                NG991.TextColor3 = Color3.new(1, 1, 1)
                NG991.TextStrokeTransparency = 0
                NG991.TextWrapped = true
                NG991.TextXAlignment = Enum.TextXAlignment.Left
                NG991.Parent = NG990
                NG992 = Instance.new('Frame')
                NG992.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG992.BackgroundTransparency = 1
                NG992.BorderSizePixel = 0
                NG992.Name = dCD('EVachg')
                NG992.Position = UDim2.new(0, 35, 0, 0)
                NG992.Size = UDim2.new(0, 38, 0, 25)
                NG992.Parent = NG990
                NG993 = Instance.new('TextButton')
                NG993.Active = true
                NG993.AutoButtonColor = false
                NG993.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG993.BackgroundTransparency = 1
                NG993.BorderSizePixel = 0
                NG993.Selectable = true
                NG993.Size = UDim2.new(1, 0, 1, 0)
                NG993.Style = Enum.ButtonStyle.Custom
                NG993.ZIndex = 2
                NG993.Font = Enum.Font.Legacy
                NG993.FontSize = Enum.FontSize.Size8
                NG993.Text = dCD('')
                NG993.Parent = NG992
                NG994 = Instance.new('ImageLabel')
                NG994.Active = false
                NG994.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG994.BackgroundTransparency = 1
                NG994.BorderSizePixel = 0
                NG994.Name = dCD('Onpxtebhaq')
                NG994.Selectable = false
                NG994.Size = UDim2.new(1, 0, 1, 0)
                NG994.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG994.Parent = NG992
                NG995 = Instance.new('Frame')
                NG995.BackgroundColor3 = Color3.new(1, 0, 0)
                NG995.BorderSizePixel = 0
                NG995.Name = dCD('FryrpgrqVaqvpngbe')
                NG995.Position = UDim2.new(0, 3, 0, -2)
                NG995.Size = UDim2.new(1, -3, 0, 2)
                NG995.Parent = NG992
                NG996 = Instance.new('TextBox')
                NG996.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG996.BackgroundTransparency = 1
                NG996.BorderSizePixel = 0
                NG996.Position = UDim2.new(0, 5, 0, 0)
                NG996.Size = UDim2.new(1, -10, 1, 0)
                NG996.Font = Enum.Font.ArialBold
                NG996.FontSize = Enum.FontSize.Size10
                NG996.Text = dCD('255')
                NG996.TextColor3 = Color3.new(1, 1, 1)
                NG996.Parent = NG992
                NG997 = Instance.new('Frame')
                NG997.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG997.BackgroundTransparency = 1
                NG997.BorderSizePixel = 0
                NG997.Name = dCD('TVachg')
                NG997.Position = UDim2.new(0, 72, 0, 0)
                NG997.Size = UDim2.new(0, 38, 0, 25)
                NG997.Parent = NG990
                NG998 = Instance.new('TextButton')
                NG998.Active = true
                NG998.AutoButtonColor = false
                NG998.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG998.BackgroundTransparency = 1
                NG998.BorderSizePixel = 0
                NG998.Selectable = true
                NG998.Size = UDim2.new(1, 0, 1, 0)
                NG998.Style = Enum.ButtonStyle.Custom
                NG998.ZIndex = 2
                NG998.Font = Enum.Font.Legacy
                NG998.FontSize = Enum.FontSize.Size8
                NG998.Text = dCD('')
                NG998.Parent = NG997
                NG999 = Instance.new('ImageLabel')
                NG999.Active = false
                NG999.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG999.BackgroundTransparency = 1
                NG999.BorderSizePixel = 0
                NG999.Name = dCD('Onpxtebhaq')
                NG999.Selectable = false
                NG999.Size = UDim2.new(1, 0, 1, 0)
                NG999.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG999.Parent = NG997
                NG1000 = Instance.new('Frame')
                NG1000.BackgroundColor3 = Color3.new(0, 1, 0)
                NG1000.BorderSizePixel = 0
                NG1000.Name = dCD('FryrpgrqVaqvpngbe')
                NG1000.Position = UDim2.new(0, 3, 0, -2)
                NG1000.Size = UDim2.new(1, -3, 0, 2)
                NG1000.Parent = NG997
                NG1001 = Instance.new('TextBox')
                NG1001.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1001.BackgroundTransparency = 1
                NG1001.BorderSizePixel = 0
                NG1001.Position = UDim2.new(0, 5, 0, 0)
                NG1001.Size = UDim2.new(1, -10, 1, 0)
                NG1001.Font = Enum.Font.ArialBold
                NG1001.FontSize = Enum.FontSize.Size10
                NG1001.Text = dCD('255')
                NG1001.TextColor3 = Color3.new(1, 1, 1)
                NG1001.Parent = NG997
                NG1002 = Instance.new('Frame')
                NG1002.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1002.BackgroundTransparency = 1
                NG1002.BorderSizePixel = 0
                NG1002.Name = dCD('OVachg')
                NG1002.Position = UDim2.new(0, 109, 0, 0)
                NG1002.Size = UDim2.new(0, 38, 0, 25)
                NG1002.Parent = NG990
                NG1003 = Instance.new('TextButton')
                NG1003.Active = true
                NG1003.AutoButtonColor = false
                NG1003.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1003.BackgroundTransparency = 1
                NG1003.BorderSizePixel = 0
                NG1003.Selectable = true
                NG1003.Size = UDim2.new(1, 0, 1, 0)
                NG1003.Style = Enum.ButtonStyle.Custom
                NG1003.ZIndex = 2
                NG1003.Font = Enum.Font.Legacy
                NG1003.FontSize = Enum.FontSize.Size8
                NG1003.Text = dCD('')
                NG1003.Parent = NG1002
                NG1004 = Instance.new('ImageLabel')
                NG1004.Active = false
                NG1004.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1004.BackgroundTransparency = 1
                NG1004.BorderSizePixel = 0
                NG1004.Name = dCD('Onpxtebhaq')
                NG1004.Selectable = false
                NG1004.Size = UDim2.new(1, 0, 1, 0)
                NG1004.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1004.Parent = NG1002
                NG1005 = Instance.new('Frame')
                NG1005.BackgroundColor3 = Color3.new(0, 0, 1)
                NG1005.BorderSizePixel = 0
                NG1005.Name = dCD('FryrpgrqVaqvpngbe')
                NG1005.Position = UDim2.new(0, 3, 0, -2)
                NG1005.Size = UDim2.new(1, -3, 0, 2)
                NG1005.Parent = NG1002
                NG1006 = Instance.new('TextBox')
                NG1006.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1006.BackgroundTransparency = 1
                NG1006.BorderSizePixel = 0
                NG1006.Position = UDim2.new(0, 5, 0, 0)
                NG1006.Size = UDim2.new(1, -10, 1, 0)
                NG1006.Font = Enum.Font.ArialBold
                NG1006.FontSize = Enum.FontSize.Size10
                NG1006.Text = dCD('255')
                NG1006.TextColor3 = Color3.new(1, 1, 1)
                NG1006.Parent = NG1002
                NG1007 = Instance.new('ImageButton')
                NG1007.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1007.BackgroundTransparency = 0.40000000596046
                NG1007.BorderSizePixel = 0
                NG1007.Name = dCD('UFICvpxre')
                NG1007.Position = UDim2.new(0, 160, 0, -2)
                NG1007.Size = UDim2.new(0, 27, 0, 27)
                NG1007.Style = Enum.ButtonStyle.Custom
                NG1007.ZIndex = 2
                NG1007.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141313631')
                NG1007.Parent = NG990
                NG1008 = Instance.new('Frame')
                NG1008.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1008.BackgroundTransparency = 0.75
                NG1008.BorderSizePixel = 0
                NG1008.Name = dCD('Funqbj')
                NG1008.Position = UDim2.new(0, 0, 1, -2)
                NG1008.Size = UDim2.new(1, 0, 0, 2)
                NG1008.Parent = NG1007
                NG1009 = Instance.new('Frame')
                NG1009.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1009.BackgroundTransparency = 0.5
                NG1009.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1009.BorderSizePixel = 0
                NG1009.Name = dCD('Frcnengbe')
                NG1009.Position = UDim2.new(0, 151, 0, 4)
                NG1009.Size = UDim2.new(0, 4, 0, 4)
                NG1009.Parent = NG990
                NG1010 = Instance.new('Frame')
                NG1010.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1010.BackgroundTransparency = 0.5
                NG1010.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1010.BorderSizePixel = 0
                NG1010.Name = dCD('Frcnengbe')
                NG1010.Position = UDim2.new(0, 151, 0, 16)
                NG1010.Size = UDim2.new(0, 4, 0, 4)
                NG1010.Parent = NG990
                NG1011 = Instance.new('Frame')
                NG1011.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1011.BackgroundTransparency = 0.5
                NG1011.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1011.BorderSizePixel = 0
                NG1011.Name = dCD('Frcnengbe')
                NG1011.Position = UDim2.new(0, 151, 0, 10)
                NG1011.Size = UDim2.new(0, 4, 0, 4)
                NG1011.Parent = NG990
                NG1012 = Instance.new('Frame')
                NG1012.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1012.BackgroundTransparency = 0.67500001192093
                NG1012.BorderSizePixel = 0
                NG1012.Name = dCD('Fcnexyrf')
                NG1012.Position = UDim2.new(0, 10, 0, 90)
                NG1012.Size = UDim2.new(1, -10, 0, 25)
                NG1012.Parent = NG888
                NG1013 = Instance.new('TextLabel')
                NG1013.BackgroundTransparency = 1
                NG1013.BorderSizePixel = 0
                NG1013.Name = dCD('Ynory')
                NG1013.Position = UDim2.new(0, 35, 0, 0)
                NG1013.Size = UDim2.new(0, 60, 0, 25)
                NG1013.Font = Enum.Font.ArialBold
                NG1013.FontSize = Enum.FontSize.Size10
                NG1013.Text = dCD('Fcnexyrf')
                NG1013.TextColor3 = Color3.new(1, 1, 1)
                NG1013.TextStrokeTransparency = 0.5
                NG1013.TextWrapped = true
                NG1013.TextXAlignment = Enum.TextXAlignment.Left
                NG1013.Parent = NG1012
                NG1014 = Instance.new('ImageButton')
                NG1014.BackgroundTransparency = 1
                NG1014.BorderSizePixel = 0
                NG1014.Name = dCD('NeebjOhggba')
                NG1014.Position = UDim2.new(0, 10, 0, 3)
                NG1014.Size = UDim2.new(0, 20, 0, 20)
                NG1014.Style = Enum.ButtonStyle.Custom
                NG1014.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=134367382')
                NG1014.Parent = NG1012
                NG1015 = Instance.new('Frame')
                NG1015.BackgroundColor3 = Color3.new(0.0196078, 0.396078, 1)
                NG1015.BorderSizePixel = 0
                NG1015.Name = dCD('PbybeOne')
                NG1015.Size = UDim2.new(0, 3, 1, 0)
                NG1015.Parent = NG1012
                NG1016 = Instance.new('TextButton')
                NG1016.Active = true
                NG1016.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1016.BackgroundTransparency = 0.75
                NG1016.BorderColor3 = Color3.new(0, 0, 0)
                NG1016.BorderSizePixel = 0
                NG1016.Name = dCD('NqqOhggba')
                NG1016.Position = UDim2.new(1, -40, 0, 3)
                NG1016.Selectable = true
                NG1016.Size = UDim2.new(0, 35, 0, 19)
                NG1016.Style = Enum.ButtonStyle.Custom
                NG1016.ZIndex = 2
                NG1016.Font = Enum.Font.ArialBold
                NG1016.FontSize = Enum.FontSize.Size10
                NG1016.Text = dCD('NQQ')
                NG1016.TextColor3 = Color3.new(1, 1, 1)
                NG1016.Parent = NG1012
                NG1017 = Instance.new('TextButton')
                NG1017.Active = true
                NG1017.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1017.BackgroundTransparency = 0.75
                NG1017.BorderColor3 = Color3.new(0, 0, 0)
                NG1017.BorderSizePixel = 0
                NG1017.Name = dCD('ErzbirOhggba')
                NG1017.Position = UDim2.new(0, 90, 0, 3)
                NG1017.Selectable = true
                NG1017.Size = UDim2.new(0, 58, 0, 19)
                NG1017.Style = Enum.ButtonStyle.Custom
                NG1017.Visible = false
                NG1017.ZIndex = 2
                NG1017.Font = Enum.Font.ArialBold
                NG1017.FontSize = Enum.FontSize.Size10
                NG1017.Text = dCD('ERZBIR')
                NG1017.TextColor3 = Color3.new(1, 1, 1)
                NG1017.Parent = NG1012
                NG1018 = Instance.new('Frame')
                NG1018.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1018.BackgroundTransparency = 0.75
                NG1018.BorderSizePixel = 0
                NG1018.Name = dCD('Funqbj')
                NG1018.Position = UDim2.new(0, 0, 1, -1)
                NG1018.Size = UDim2.new(1, 0, 0, 1)
                NG1018.Parent = NG1012
                NG1019 = Instance.new('Frame')
                NG1019.BackgroundTransparency = 1
                NG1019.BorderSizePixel = 0
                NG1019.Name = dCD('Bcgvbaf')
                NG1019.Position = UDim2.new(0, 3, 1, 0)
                NG1019.Size = UDim2.new(1, -3, 0, 0)
                NG1019.ClipsDescendants = true
                NG1019.Parent = NG1012
                NG1020 = Instance.new('Frame')
                NG1020.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1020.BackgroundTransparency = 1
                NG1020.BorderSizePixel = 0
                NG1020.Name = dCD('PbybeBcgvba')
                NG1020.Position = UDim2.new(0, 0, 0, 10)
                NG1020.Size = UDim2.new(1, 0, 0, 25)
                NG1020.Parent = NG1019
                NG1021 = Instance.new('TextLabel')
                NG1021.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1021.BackgroundTransparency = 1
                NG1021.BorderSizePixel = 0
                NG1021.Name = dCD('Ynory')
                NG1021.Size = UDim2.new(0, 70, 0, 25)
                NG1021.Font = Enum.Font.ArialBold
                NG1021.FontSize = Enum.FontSize.Size10
                NG1021.Text = dCD('Pbybe')
                NG1021.TextColor3 = Color3.new(1, 1, 1)
                NG1021.TextStrokeTransparency = 0
                NG1021.TextWrapped = true
                NG1021.TextXAlignment = Enum.TextXAlignment.Left
                NG1021.Parent = NG1020
                NG1022 = Instance.new('Frame')
                NG1022.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1022.BackgroundTransparency = 1
                NG1022.BorderSizePixel = 0
                NG1022.Name = dCD('EVachg')
                NG1022.Position = UDim2.new(0, 35, 0, 0)
                NG1022.Size = UDim2.new(0, 38, 0, 25)
                NG1022.Parent = NG1020
                NG1023 = Instance.new('TextButton')
                NG1023.Active = true
                NG1023.AutoButtonColor = false
                NG1023.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1023.BackgroundTransparency = 1
                NG1023.BorderSizePixel = 0
                NG1023.Selectable = true
                NG1023.Size = UDim2.new(1, 0, 1, 0)
                NG1023.Style = Enum.ButtonStyle.Custom
                NG1023.ZIndex = 2
                NG1023.Font = Enum.Font.Legacy
                NG1023.FontSize = Enum.FontSize.Size8
                NG1023.Text = dCD('')
                NG1023.Parent = NG1022
                NG1024 = Instance.new('ImageLabel')
                NG1024.Active = false
                NG1024.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1024.BackgroundTransparency = 1
                NG1024.BorderSizePixel = 0
                NG1024.Name = dCD('Onpxtebhaq')
                NG1024.Selectable = false
                NG1024.Size = UDim2.new(1, 0, 1, 0)
                NG1024.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1024.Parent = NG1022
                NG1025 = Instance.new('Frame')
                NG1025.BackgroundColor3 = Color3.new(1, 0, 0)
                NG1025.BorderSizePixel = 0
                NG1025.Name = dCD('FryrpgrqVaqvpngbe')
                NG1025.Position = UDim2.new(0, 3, 0, -2)
                NG1025.Size = UDim2.new(1, -3, 0, 2)
                NG1025.Parent = NG1022
                NG1026 = Instance.new('TextBox')
                NG1026.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1026.BackgroundTransparency = 1
                NG1026.BorderSizePixel = 0
                NG1026.Position = UDim2.new(0, 5, 0, 0)
                NG1026.Size = UDim2.new(1, -10, 1, 0)
                NG1026.Font = Enum.Font.ArialBold
                NG1026.FontSize = Enum.FontSize.Size10
                NG1026.Text = dCD('255')
                NG1026.TextColor3 = Color3.new(1, 1, 1)
                NG1026.Parent = NG1022
                NG1027 = Instance.new('Frame')
                NG1027.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1027.BackgroundTransparency = 1
                NG1027.BorderSizePixel = 0
                NG1027.Name = dCD('TVachg')
                NG1027.Position = UDim2.new(0, 72, 0, 0)
                NG1027.Size = UDim2.new(0, 38, 0, 25)
                NG1027.Parent = NG1020
                NG1028 = Instance.new('TextButton')
                NG1028.Active = true
                NG1028.AutoButtonColor = false
                NG1028.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1028.BackgroundTransparency = 1
                NG1028.BorderSizePixel = 0
                NG1028.Selectable = true
                NG1028.Size = UDim2.new(1, 0, 1, 0)
                NG1028.Style = Enum.ButtonStyle.Custom
                NG1028.ZIndex = 2
                NG1028.Font = Enum.Font.Legacy
                NG1028.FontSize = Enum.FontSize.Size8
                NG1028.Text = dCD('')
                NG1028.Parent = NG1027
                NG1029 = Instance.new('ImageLabel')
                NG1029.Active = false
                NG1029.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1029.BackgroundTransparency = 1
                NG1029.BorderSizePixel = 0
                NG1029.Name = dCD('Onpxtebhaq')
                NG1029.Selectable = false
                NG1029.Size = UDim2.new(1, 0, 1, 0)
                NG1029.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1029.Parent = NG1027
                NG1030 = Instance.new('Frame')
                NG1030.BackgroundColor3 = Color3.new(0, 1, 0)
                NG1030.BorderSizePixel = 0
                NG1030.Name = dCD('FryrpgrqVaqvpngbe')
                NG1030.Position = UDim2.new(0, 3, 0, -2)
                NG1030.Size = UDim2.new(1, -3, 0, 2)
                NG1030.Parent = NG1027
                NG1031 = Instance.new('TextBox')
                NG1031.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1031.BackgroundTransparency = 1
                NG1031.BorderSizePixel = 0
                NG1031.Position = UDim2.new(0, 5, 0, 0)
                NG1031.Size = UDim2.new(1, -10, 1, 0)
                NG1031.Font = Enum.Font.ArialBold
                NG1031.FontSize = Enum.FontSize.Size10
                NG1031.Text = dCD('255')
                NG1031.TextColor3 = Color3.new(1, 1, 1)
                NG1031.Parent = NG1027
                NG1032 = Instance.new('Frame')
                NG1032.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1032.BackgroundTransparency = 1
                NG1032.BorderSizePixel = 0
                NG1032.Name = dCD('OVachg')
                NG1032.Position = UDim2.new(0, 109, 0, 0)
                NG1032.Size = UDim2.new(0, 38, 0, 25)
                NG1032.Parent = NG1020
                NG1033 = Instance.new('TextButton')
                NG1033.Active = true
                NG1033.AutoButtonColor = false
                NG1033.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1033.BackgroundTransparency = 1
                NG1033.BorderSizePixel = 0
                NG1033.Selectable = true
                NG1033.Size = UDim2.new(1, 0, 1, 0)
                NG1033.Style = Enum.ButtonStyle.Custom
                NG1033.ZIndex = 2
                NG1033.Font = Enum.Font.Legacy
                NG1033.FontSize = Enum.FontSize.Size8
                NG1033.Text = dCD('')
                NG1033.Parent = NG1032
                NG1034 = Instance.new('ImageLabel')
                NG1034.Active = false
                NG1034.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1034.BackgroundTransparency = 1
                NG1034.BorderSizePixel = 0
                NG1034.Name = dCD('Onpxtebhaq')
                NG1034.Selectable = false
                NG1034.Size = UDim2.new(1, 0, 1, 0)
                NG1034.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1034.Parent = NG1032
                NG1035 = Instance.new('Frame')
                NG1035.BackgroundColor3 = Color3.new(0, 0, 1)
                NG1035.BorderSizePixel = 0
                NG1035.Name = dCD('FryrpgrqVaqvpngbe')
                NG1035.Position = UDim2.new(0, 3, 0, -2)
                NG1035.Size = UDim2.new(1, -3, 0, 2)
                NG1035.Parent = NG1032
                NG1036 = Instance.new('TextBox')
                NG1036.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1036.BackgroundTransparency = 1
                NG1036.BorderSizePixel = 0
                NG1036.Position = UDim2.new(0, 5, 0, 0)
                NG1036.Size = UDim2.new(1, -10, 1, 0)
                NG1036.Font = Enum.Font.ArialBold
                NG1036.FontSize = Enum.FontSize.Size10
                NG1036.Text = dCD('255')
                NG1036.TextColor3 = Color3.new(1, 1, 1)
                NG1036.Parent = NG1032
                NG1037 = Instance.new('ImageButton')
                NG1037.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1037.BackgroundTransparency = 0.40000000596046
                NG1037.BorderSizePixel = 0
                NG1037.Name = dCD('UFICvpxre')
                NG1037.Position = UDim2.new(0, 160, 0, -2)
                NG1037.Size = UDim2.new(0, 27, 0, 27)
                NG1037.Style = Enum.ButtonStyle.Custom
                NG1037.ZIndex = 2
                NG1037.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141313631')
                NG1037.Parent = NG1020
                NG1038 = Instance.new('Frame')
                NG1038.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1038.BackgroundTransparency = 0.75
                NG1038.BorderSizePixel = 0
                NG1038.Name = dCD('Funqbj')
                NG1038.Position = UDim2.new(0, 0, 1, -2)
                NG1038.Size = UDim2.new(1, 0, 0, 2)
                NG1038.Parent = NG1037
                NG1039 = Instance.new('Frame')
                NG1039.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1039.BackgroundTransparency = 0.5
                NG1039.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1039.BorderSizePixel = 0
                NG1039.Name = dCD('Frcnengbe')
                NG1039.Position = UDim2.new(0, 151, 0, 4)
                NG1039.Size = UDim2.new(0, 4, 0, 4)
                NG1039.Parent = NG1020
                NG1040 = Instance.new('Frame')
                NG1040.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1040.BackgroundTransparency = 0.5
                NG1040.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1040.BorderSizePixel = 0
                NG1040.Name = dCD('Frcnengbe')
                NG1040.Position = UDim2.new(0, 151, 0, 16)
                NG1040.Size = UDim2.new(0, 4, 0, 4)
                NG1040.Parent = NG1020
                NG1041 = Instance.new('Frame')
                NG1041.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1041.BackgroundTransparency = 0.5
                NG1041.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1041.BorderSizePixel = 0
                NG1041.Name = dCD('Frcnengbe')
                NG1041.Position = UDim2.new(0, 151, 0, 10)
                NG1041.Size = UDim2.new(0, 4, 0, 4)
                NG1041.Parent = NG1020
                NG1042 = Instance.new('Frame')
                NG1042.Active = true
                NG1042.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1042.BackgroundTransparency = 1
                NG1042.BorderSizePixel = 0
                NG1042.Name = dCD('OGNapubeGbbyTHV')
                NG1042.Position = UDim2.new(0, 0, 0, 280)
                NG1042.Size = UDim2.new(0, 245, 0, 90)
                NG1042.Draggable = true
                NG1042.Parent = NG1
                NG1043 = Instance.new('Frame')
                NG1043.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1043.BackgroundTransparency = 1
                NG1043.BorderSizePixel = 0
                NG1043.Name = dCD('Gvgyr')
                NG1043.Size = UDim2.new(1, 0, 0, 20)
                NG1043.Parent = NG1042
                NG1044 = Instance.new('Frame')
                NG1044.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG1044.BorderSizePixel = 0
                NG1044.Name = dCD('PbybeOne')
                NG1044.Position = UDim2.new(0, 5, 0, -3)
                NG1044.Size = UDim2.new(1, -5, 0, 2)
                NG1044.Parent = NG1043
                NG1045 = Instance.new('TextLabel')
                NG1045.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1045.BackgroundTransparency = 1
                NG1045.BorderSizePixel = 0
                NG1045.Name = dCD('Ynory')
                NG1045.Position = UDim2.new(0, 10, 0, 1)
                NG1045.Size = UDim2.new(1, -10, 1, 0)
                NG1045.Font = Enum.Font.ArialBold
                NG1045.FontSize = Enum.FontSize.Size10
                NG1045.Text = dCD('NAPUBE GBBY')
                NG1045.TextColor3 = Color3.new(1, 1, 1)
                NG1045.TextStrokeTransparency = 0
                NG1045.TextWrapped = true
                NG1045.TextXAlignment = Enum.TextXAlignment.Left
                NG1045.Parent = NG1043
                NG1046 = Instance.new('TextLabel')
                NG1046.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1046.BackgroundTransparency = 1
                NG1046.BorderSizePixel = 0
                NG1046.Name = dCD('S3KFvtangher')
                NG1046.Position = UDim2.new(0, 10, 0, 1)
                NG1046.Size = UDim2.new(1, -10, 1, 0)
                NG1046.Font = Enum.Font.ArialBold
                NG1046.FontSize = Enum.FontSize.Size14
                NG1046.Text = dCD('S3K')
                NG1046.TextColor3 = Color3.new(1, 1, 1)
                NG1046.TextStrokeTransparency = 0.89999997615814
                NG1046.TextWrapped = true
                NG1046.TextXAlignment = Enum.TextXAlignment.Right
                NG1046.Parent = NG1043
                NG1047 = Instance.new('Frame')
                NG1047.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1047.BackgroundTransparency = 1
                NG1047.BorderSizePixel = 0
                NG1047.Name = dCD('Fgnghf')
                NG1047.Position = UDim2.new(0, 0, 0, 30)
                NG1047.Size = UDim2.new(0, 0, 0, 0)
                NG1047.Parent = NG1042
                NG1048 = Instance.new('TextLabel')
                NG1048.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1048.BackgroundTransparency = 1
                NG1048.BorderSizePixel = 0
                NG1048.Name = dCD('Ynory')
                NG1048.Position = UDim2.new(0, 14, 0, 0)
                NG1048.Size = UDim2.new(0, 40, 0, 25)
                NG1048.Font = Enum.Font.ArialBold
                NG1048.FontSize = Enum.FontSize.Size10
                NG1048.Text = dCD('Fgnghf')
                NG1048.TextColor3 = Color3.new(1, 1, 1)
                NG1048.TextStrokeTransparency = 0
                NG1048.TextWrapped = true
                NG1048.TextXAlignment = Enum.TextXAlignment.Left
                NG1048.Parent = NG1047
                NG1049 = Instance.new('Frame')
                NG1049.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1049.BackgroundTransparency = 1
                NG1049.BorderSizePixel = 0
                NG1049.Name = dCD('Napuberq')
                NG1049.Position = UDim2.new(0, 55, 0, 0)
                NG1049.Size = UDim2.new(0, 90, 0, 25)
                NG1049.Parent = NG1047
                NG1050 = Instance.new('Frame')
                NG1050.BackgroundTransparency = 1
                NG1050.BorderSizePixel = 0
                NG1050.Name = dCD('FryrpgrqVaqvpngbe')
                NG1050.Position = UDim2.new(0, 9, 0, -2)
                NG1050.Size = UDim2.new(1, -9, 0, 2)
                NG1050.Parent = NG1049
                NG1051 = Instance.new('TextButton')
                NG1051.Active = true
                NG1051.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1051.BackgroundTransparency = 1
                NG1051.BorderSizePixel = 0
                NG1051.Name = dCD('Ohggba')
                NG1051.Position = UDim2.new(0, 5, 0, 0)
                NG1051.Selectable = true
                NG1051.Size = UDim2.new(1, -10, 1, 0)
                NG1051.Style = Enum.ButtonStyle.Custom
                NG1051.ZIndex = 2
                NG1051.Font = Enum.Font.Legacy
                NG1051.FontSize = Enum.FontSize.Size8
                NG1051.Text = dCD('')
                NG1051.TextTransparency = 1
                NG1051.Parent = NG1049
                NG1052 = Instance.new('ImageLabel')
                NG1052.Active = false
                NG1052.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1052.BackgroundTransparency = 1
                NG1052.BorderSizePixel = 0
                NG1052.Name = dCD('Onpxtebhaq')
                NG1052.Selectable = false
                NG1052.Size = UDim2.new(1, 0, 1, 0)
                NG1052.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1052.Parent = NG1049
                NG1053 = Instance.new('TextLabel')
                NG1053.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1053.BackgroundTransparency = 1
                NG1053.BorderSizePixel = 0
                NG1053.Name = dCD('Ynory')
                NG1053.Size = UDim2.new(1, 0, 1, 0)
                NG1053.Font = Enum.Font.ArialBold
                NG1053.FontSize = Enum.FontSize.Size10
                NG1053.Text = dCD('NAPUBERQ')
                NG1053.TextColor3 = Color3.new(1, 1, 1)
                NG1053.Parent = NG1049
                NG1054 = Instance.new('Frame')
                NG1054.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1054.BackgroundTransparency = 1
                NG1054.BorderSizePixel = 0
                NG1054.Name = dCD('Hanapuberq')
                NG1054.Position = UDim2.new(0, 140, 0, 0)
                NG1054.Size = UDim2.new(0, 90, 0, 25)
                NG1054.Parent = NG1047
                NG1055 = Instance.new('Frame')
                NG1055.BackgroundTransparency = 1
                NG1055.BorderSizePixel = 0
                NG1055.Name = dCD('FryrpgrqVaqvpngbe')
                NG1055.Position = UDim2.new(0, 9, 0, -2)
                NG1055.Size = UDim2.new(1, -9, 0, 2)
                NG1055.Parent = NG1054
                NG1056 = Instance.new('TextButton')
                NG1056.Active = true
                NG1056.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1056.BackgroundTransparency = 1
                NG1056.BorderSizePixel = 0
                NG1056.Name = dCD('Ohggba')
                NG1056.Position = UDim2.new(0, 5, 0, 0)
                NG1056.Selectable = true
                NG1056.Size = UDim2.new(1, -10, 1, 0)
                NG1056.Style = Enum.ButtonStyle.Custom
                NG1056.ZIndex = 2
                NG1056.Font = Enum.Font.ArialBold
                NG1056.FontSize = Enum.FontSize.Size8
                NG1056.Text = dCD('')
                NG1056.TextTransparency = 1
                NG1056.Parent = NG1054
                NG1057 = Instance.new('ImageLabel')
                NG1057.Active = false
                NG1057.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1057.BackgroundTransparency = 1
                NG1057.BorderSizePixel = 0
                NG1057.Name = dCD('Onpxtebhaq')
                NG1057.Selectable = false
                NG1057.Size = UDim2.new(1, 0, 1, 0)
                NG1057.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1057.Parent = NG1054
                NG1058 = Instance.new('TextLabel')
                NG1058.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1058.BackgroundTransparency = 1
                NG1058.BorderSizePixel = 0
                NG1058.Name = dCD('Ynory')
                NG1058.Size = UDim2.new(1, 0, 1, 0)
                NG1058.Font = Enum.Font.ArialBold
                NG1058.FontSize = Enum.FontSize.Size10
                NG1058.Text = dCD('HANAPUBERQ')
                NG1058.TextColor3 = Color3.new(1, 1, 1)
                NG1058.Parent = NG1054
                NG1059 = Instance.new('Frame')
                NG1059.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1059.BackgroundTransparency = 1
                NG1059.BorderSizePixel = 0
                NG1059.Name = dCD('Gvc')
                NG1059.Position = UDim2.new(0, 5, 0, 70)
                NG1059.Size = UDim2.new(1, -5, 0, 20)
                NG1059.Parent = NG1042
                NG1060 = Instance.new('Frame')
                NG1060.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG1060.BorderSizePixel = 0
                NG1060.Name = dCD('PbybeOne')
                NG1060.Size = UDim2.new(1, 0, 0, 2)
                NG1060.Parent = NG1059
                NG1061 = Instance.new('TextLabel')
                NG1061.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1061.BackgroundTransparency = 1
                NG1061.BorderSizePixel = 0
                NG1061.Name = dCD('Grkg')
                NG1061.Position = UDim2.new(0, 0, 0, 2)
                NG1061.Size = UDim2.new(1, 0, 0, 20)
                NG1061.Font = Enum.Font.ArialBold
                NG1061.FontSize = Enum.FontSize.Size10
                NG1061.Text = dCD('GVC: Cerff Ragre gb dhvpxyl gbttyr gur napube.')
                NG1061.TextColor3 = Color3.new(1, 1, 1)
                NG1061.TextStrokeTransparency = 0.5
                NG1061.TextWrapped = true
                NG1061.Parent = NG1059
                NG1062 = Instance.new('Frame')
                NG1062.Active = true
                NG1062.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1062.BackgroundTransparency = 1
                NG1062.BorderSizePixel = 0
                NG1062.Name = dCD('OGPbyyvfvbaGbbyTHV')
                NG1062.Position = UDim2.new(0, 0, 0, 280)
                NG1062.Size = UDim2.new(0, 200, 0, 90)
                NG1062.Draggable = true
                NG1062.Parent = NG1
                NG1063 = Instance.new('Frame')
                NG1063.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1063.BackgroundTransparency = 1
                NG1063.BorderSizePixel = 0
                NG1063.Name = dCD('Gvgyr')
                NG1063.Size = UDim2.new(1, 0, 0, 20)
                NG1063.Parent = NG1062
                NG1064 = Instance.new('Frame')
                NG1064.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG1064.BorderSizePixel = 0
                NG1064.Name = dCD('PbybeOne')
                NG1064.Position = UDim2.new(0, 5, 0, -3)
                NG1064.Size = UDim2.new(1, -5, 0, 2)
                NG1064.Parent = NG1063
                NG1065 = Instance.new('TextLabel')
                NG1065.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1065.BackgroundTransparency = 1
                NG1065.BorderSizePixel = 0
                NG1065.Name = dCD('Ynory')
                NG1065.Position = UDim2.new(0, 10, 0, 1)
                NG1065.Size = UDim2.new(1, -10, 1, 0)
                NG1065.Font = Enum.Font.ArialBold
                NG1065.FontSize = Enum.FontSize.Size10
                NG1065.Text = dCD('PBYYVFVBA GBBY')
                NG1065.TextColor3 = Color3.new(1, 1, 1)
                NG1065.TextStrokeTransparency = 0
                NG1065.TextWrapped = true
                NG1065.TextXAlignment = Enum.TextXAlignment.Left
                NG1065.Parent = NG1063
                NG1066 = Instance.new('TextLabel')
                NG1066.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1066.BackgroundTransparency = 1
                NG1066.BorderSizePixel = 0
                NG1066.Name = dCD('S3KFvtangher')
                NG1066.Position = UDim2.new(0, 10, 0, 1)
                NG1066.Size = UDim2.new(1, -10, 1, 0)
                NG1066.Font = Enum.Font.ArialBold
                NG1066.FontSize = Enum.FontSize.Size14
                NG1066.Text = dCD('S3K')
                NG1066.TextColor3 = Color3.new(1, 1, 1)
                NG1066.TextStrokeTransparency = 0.89999997615814
                NG1066.TextWrapped = true
                NG1066.TextXAlignment = Enum.TextXAlignment.Right
                NG1066.Parent = NG1063
                NG1067 = Instance.new('Frame')
                NG1067.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1067.BackgroundTransparency = 1
                NG1067.BorderSizePixel = 0
                NG1067.Name = dCD('Fgnghf')
                NG1067.Position = UDim2.new(0, 0, 0, 30)
                NG1067.Size = UDim2.new(0, 0, 0, 0)
                NG1067.Parent = NG1062
                NG1068 = Instance.new('TextLabel')
                NG1068.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1068.BackgroundTransparency = 1
                NG1068.BorderSizePixel = 0
                NG1068.Name = dCD('Ynory')
                NG1068.Position = UDim2.new(0, 14, 0, 0)
                NG1068.Size = UDim2.new(0, 50, 0, 25)
                NG1068.Font = Enum.Font.ArialBold
                NG1068.FontSize = Enum.FontSize.Size10
                NG1068.Text = dCD('Pbyyvfvba')
                NG1068.TextColor3 = Color3.new(1, 1, 1)
                NG1068.TextStrokeTransparency = 0
                NG1068.TextWrapped = true
                NG1068.TextXAlignment = Enum.TextXAlignment.Left
                NG1068.Parent = NG1067
                NG1069 = Instance.new('Frame')
                NG1069.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1069.BackgroundTransparency = 1
                NG1069.BorderSizePixel = 0
                NG1069.Name = dCD('Ba')
                NG1069.Position = UDim2.new(0, 70, 0, 0)
                NG1069.Size = UDim2.new(0, 50, 0, 25)
                NG1069.Parent = NG1067
                NG1070 = Instance.new('Frame')
                NG1070.BackgroundTransparency = 1
                NG1070.BorderSizePixel = 0
                NG1070.Name = dCD('FryrpgrqVaqvpngbe')
                NG1070.Position = UDim2.new(0, 5, 0, -2)
                NG1070.Size = UDim2.new(1, -5, 0, 2)
                NG1070.Parent = NG1069
                NG1071 = Instance.new('TextButton')
                NG1071.Active = true
                NG1071.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1071.BackgroundTransparency = 1
                NG1071.BorderSizePixel = 0
                NG1071.Name = dCD('Ohggba')
                NG1071.Position = UDim2.new(0, 5, 0, 0)
                NG1071.Selectable = true
                NG1071.Size = UDim2.new(1, -10, 1, 0)
                NG1071.Style = Enum.ButtonStyle.Custom
                NG1071.ZIndex = 2
                NG1071.Font = Enum.Font.Legacy
                NG1071.FontSize = Enum.FontSize.Size8
                NG1071.Text = dCD('')
                NG1071.TextTransparency = 1
                NG1071.Parent = NG1069
                NG1072 = Instance.new('ImageLabel')
                NG1072.Active = false
                NG1072.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1072.BackgroundTransparency = 1
                NG1072.BorderSizePixel = 0
                NG1072.Name = dCD('Onpxtebhaq')
                NG1072.Selectable = false
                NG1072.Size = UDim2.new(1, 0, 1, 0)
                NG1072.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1072.Parent = NG1069
                NG1073 = Instance.new('TextLabel')
                NG1073.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1073.BackgroundTransparency = 1
                NG1073.BorderSizePixel = 0
                NG1073.Name = dCD('Ynory')
                NG1073.Size = UDim2.new(1, 0, 1, 0)
                NG1073.Font = Enum.Font.ArialBold
                NG1073.FontSize = Enum.FontSize.Size10
                NG1073.Text = dCD('BA')
                NG1073.TextColor3 = Color3.new(1, 1, 1)
                NG1073.Parent = NG1069
                NG1074 = Instance.new('Frame')
                NG1074.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1074.BackgroundTransparency = 1
                NG1074.BorderSizePixel = 0
                NG1074.Name = dCD('Bss')
                NG1074.Position = UDim2.new(0, 118, 0, 0)
                NG1074.Size = UDim2.new(0, 50, 0, 25)
                NG1074.Parent = NG1067
                NG1075 = Instance.new('Frame')
                NG1075.BackgroundTransparency = 1
                NG1075.BorderSizePixel = 0
                NG1075.Name = dCD('FryrpgrqVaqvpngbe')
                NG1075.Position = UDim2.new(0, 5, 0, -2)
                NG1075.Size = UDim2.new(1, -5, 0, 2)
                NG1075.Parent = NG1074
                NG1076 = Instance.new('TextButton')
                NG1076.Active = true
                NG1076.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1076.BackgroundTransparency = 1
                NG1076.BorderSizePixel = 0
                NG1076.Name = dCD('Ohggba')
                NG1076.Position = UDim2.new(0, 5, 0, 0)
                NG1076.Selectable = true
                NG1076.Size = UDim2.new(1, -10, 1, 0)
                NG1076.Style = Enum.ButtonStyle.Custom
                NG1076.ZIndex = 2
                NG1076.Font = Enum.Font.Legacy
                NG1076.FontSize = Enum.FontSize.Size8
                NG1076.Text = dCD('')
                NG1076.TextTransparency = 1
                NG1076.Parent = NG1074
                NG1077 = Instance.new('ImageLabel')
                NG1077.Active = false
                NG1077.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1077.BackgroundTransparency = 1
                NG1077.BorderSizePixel = 0
                NG1077.Name = dCD('Onpxtebhaq')
                NG1077.Selectable = false
                NG1077.Size = UDim2.new(1, 0, 1, 0)
                NG1077.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1077.Parent = NG1074
                NG1078 = Instance.new('TextLabel')
                NG1078.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1078.BackgroundTransparency = 1
                NG1078.BorderSizePixel = 0
                NG1078.Name = dCD('Ynory')
                NG1078.Size = UDim2.new(1, 0, 1, 0)
                NG1078.Font = Enum.Font.ArialBold
                NG1078.FontSize = Enum.FontSize.Size10
                NG1078.Text = dCD('BSS')
                NG1078.TextColor3 = Color3.new(1, 1, 1)
                NG1078.Parent = NG1074
                NG1079 = Instance.new('Frame')
                NG1079.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1079.BackgroundTransparency = 1
                NG1079.BorderSizePixel = 0
                NG1079.Name = dCD('Gvc')
                NG1079.Position = UDim2.new(0, 5, 0, 70)
                NG1079.Size = UDim2.new(1, -5, 0, 20)
                NG1079.Parent = NG1062
                NG1080 = Instance.new('Frame')
                NG1080.BackgroundColor3 = Color3.new(0.0666667, 0.0666667, 0.0666667)
                NG1080.BorderSizePixel = 0
                NG1080.Name = dCD('PbybeOne')
                NG1080.Size = UDim2.new(1, 0, 0, 2)
                NG1080.Parent = NG1079
                NG1081 = Instance.new('TextLabel')
                NG1081.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1081.BackgroundTransparency = 1
                NG1081.BorderSizePixel = 0
                NG1081.Name = dCD('Grkg')
                NG1081.Position = UDim2.new(0, 0, 0, 2)
                NG1081.Size = UDim2.new(1, 0, 0, 20)
                NG1081.Font = Enum.Font.ArialBold
                NG1081.FontSize = Enum.FontSize.Size10
                NG1081.Text = dCD('GVC: Cerff Ragre gb gbttyr pbyyvfvba.')
                NG1081.TextColor3 = Color3.new(1, 1, 1)
                NG1081.TextStrokeTransparency = 0.5
                NG1081.TextWrapped = true
                NG1081.Parent = NG1079
                NG1082 = Instance.new('Frame')
                NG1082.Active = true
                NG1082.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1082.BackgroundTransparency = 1
                NG1082.BorderSizePixel = 0
                NG1082.Name = dCD('OGQrpbengrGbbyTHV')
                NG1082.Position = UDim2.new(0, 0, 0, 172)
                NG1082.Size = UDim2.new(0, 200, 0, 125)
                NG1082.Draggable = true
                NG1082.Parent = NG1
                NG1083 = Instance.new('Frame')
                NG1083.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1083.BorderSizePixel = 0
                NG1083.Name = dCD('ObggbzPbybeOne')
                NG1083.Position = UDim2.new(0, 5, 1, -2)
                NG1083.Size = UDim2.new(1, 0, 0, 2)
                NG1083.Parent = NG1082
                NG1084 = Instance.new('Frame')
                NG1084.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1084.BackgroundTransparency = 1
                NG1084.BorderSizePixel = 0
                NG1084.Name = dCD('Gvgyr')
                NG1084.Size = UDim2.new(1, 0, 0, 20)
                NG1084.Parent = NG1082
                NG1085 = Instance.new('Frame')
                NG1085.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1085.BorderSizePixel = 0
                NG1085.Name = dCD('PbybeOne')
                NG1085.Position = UDim2.new(0, 5, 0, -3)
                NG1085.Size = UDim2.new(1, -5, 0, 2)
                NG1085.Parent = NG1084
                NG1086 = Instance.new('TextLabel')
                NG1086.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1086.BackgroundTransparency = 1
                NG1086.BorderSizePixel = 0
                NG1086.Name = dCD('Ynory')
                NG1086.Position = UDim2.new(0, 10, 0, 1)
                NG1086.Size = UDim2.new(1, -10, 1, 0)
                NG1086.Font = Enum.Font.ArialBold
                NG1086.FontSize = Enum.FontSize.Size10
                NG1086.Text = dCD('QRPBENGR GBBY')
                NG1086.TextColor3 = Color3.new(1, 1, 1)
                NG1086.TextStrokeTransparency = 0
                NG1086.TextWrapped = true
                NG1086.TextXAlignment = Enum.TextXAlignment.Left
                NG1086.Parent = NG1084
                NG1087 = Instance.new('TextLabel')
                NG1087.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1087.BackgroundTransparency = 1
                NG1087.BorderSizePixel = 0
                NG1087.Name = dCD('S3KFvtangher')
                NG1087.Position = UDim2.new(0, 10, 0, 1)
                NG1087.Size = UDim2.new(1, -10, 1, 0)
                NG1087.Font = Enum.Font.ArialBold
                NG1087.FontSize = Enum.FontSize.Size14
                NG1087.Text = dCD('S3K')
                NG1087.TextColor3 = Color3.new(1, 1, 1)
                NG1087.TextStrokeTransparency = 0.89999997615814
                NG1087.TextWrapped = true
                NG1087.TextXAlignment = Enum.TextXAlignment.Right
                NG1087.Parent = NG1084
                NG1088 = Instance.new('Frame')
                NG1088.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1088.BackgroundTransparency = 0.67500001192093
                NG1088.BorderSizePixel = 0
                NG1088.Name = dCD('Fzbxr')
                NG1088.Position = UDim2.new(0, 10, 0, 30)
                NG1088.Size = UDim2.new(1, -10, 0, 25)
                NG1088.Parent = NG1082
                NG1089 = Instance.new('TextLabel')
                NG1089.BackgroundTransparency = 1
                NG1089.BorderSizePixel = 0
                NG1089.Name = dCD('Ynory')
                NG1089.Position = UDim2.new(0, 35, 0, 0)
                NG1089.Size = UDim2.new(0, 60, 0, 25)
                NG1089.Font = Enum.Font.ArialBold
                NG1089.FontSize = Enum.FontSize.Size10
                NG1089.Text = dCD('Fzbxr')
                NG1089.TextColor3 = Color3.new(1, 1, 1)
                NG1089.TextStrokeTransparency = 0.5
                NG1089.TextWrapped = true
                NG1089.TextXAlignment = Enum.TextXAlignment.Left
                NG1089.Parent = NG1088
                NG1090 = Instance.new('ImageButton')
                NG1090.BackgroundTransparency = 1
                NG1090.BorderSizePixel = 0
                NG1090.Name = dCD('NeebjOhggba')
                NG1090.Position = UDim2.new(0, 10, 0, 3)
                NG1090.Size = UDim2.new(0, 20, 0, 20)
                NG1090.Style = Enum.ButtonStyle.Custom
                NG1090.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=134367382')
                NG1090.Parent = NG1088
                NG1091 = Instance.new('Frame')
                NG1091.BackgroundColor3 = Color3.new(1, 0.682353, 0.235294)
                NG1091.BorderSizePixel = 0
                NG1091.Name = dCD('PbybeOne')
                NG1091.Size = UDim2.new(0, 3, 1, 0)
                NG1091.Parent = NG1088
                NG1092 = Instance.new('TextButton')
                NG1092.Active = true
                NG1092.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1092.BackgroundTransparency = 0.75
                NG1092.BorderColor3 = Color3.new(0, 0, 0)
                NG1092.BorderSizePixel = 0
                NG1092.Name = dCD('NqqOhggba')
                NG1092.Position = UDim2.new(1, -40, 0, 3)
                NG1092.Selectable = true
                NG1092.Size = UDim2.new(0, 35, 0, 19)
                NG1092.Style = Enum.ButtonStyle.Custom
                NG1092.Font = Enum.Font.ArialBold
                NG1092.FontSize = Enum.FontSize.Size10
                NG1092.Text = dCD('NQQ')
                NG1092.TextColor3 = Color3.new(1, 1, 1)
                NG1092.Parent = NG1088
                NG1093 = Instance.new('TextButton')
                NG1093.Active = true
                NG1093.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1093.BackgroundTransparency = 0.75
                NG1093.BorderColor3 = Color3.new(0, 0, 0)
                NG1093.BorderSizePixel = 0
                NG1093.Name = dCD('ErzbirOhggba')
                NG1093.Position = UDim2.new(0, 127, 0, 3)
                NG1093.Selectable = true
                NG1093.Size = UDim2.new(0, 58, 0, 19)
                NG1093.Style = Enum.ButtonStyle.Custom
                NG1093.Visible = false
                NG1093.Font = Enum.Font.ArialBold
                NG1093.FontSize = Enum.FontSize.Size10
                NG1093.Text = dCD('ERZBIR')
                NG1093.TextColor3 = Color3.new(1, 1, 1)
                NG1093.Parent = NG1088
                NG1094 = Instance.new('Frame')
                NG1094.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1094.BackgroundTransparency = 0.75
                NG1094.BorderSizePixel = 0
                NG1094.Name = dCD('Funqbj')
                NG1094.Position = UDim2.new(0, 0, 1, -1)
                NG1094.Size = UDim2.new(1, 0, 0, 1)
                NG1094.Parent = NG1088
                NG1095 = Instance.new('Frame')
                NG1095.BackgroundTransparency = 1
                NG1095.BorderSizePixel = 0
                NG1095.Name = dCD('Bcgvbaf')
                NG1095.Position = UDim2.new(0, 3, 1, 0)
                NG1095.Size = UDim2.new(1, -3, 0, 0)
                NG1095.ClipsDescendants = true
                NG1095.Parent = NG1088
                NG1096 = Instance.new('Frame')
                NG1096.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1096.BackgroundTransparency = 1
                NG1096.BorderSizePixel = 0
                NG1096.Name = dCD('PbybeBcgvba')
                NG1096.Position = UDim2.new(0, 0, 0, 10)
                NG1096.Size = UDim2.new(1, 0, 0, 25)
                NG1096.Parent = NG1095
                NG1097 = Instance.new('TextLabel')
                NG1097.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1097.BackgroundTransparency = 1
                NG1097.BorderSizePixel = 0
                NG1097.Name = dCD('Ynory')
                NG1097.Size = UDim2.new(0, 70, 0, 25)
                NG1097.Font = Enum.Font.ArialBold
                NG1097.FontSize = Enum.FontSize.Size10
                NG1097.Text = dCD('Pbybe')
                NG1097.TextColor3 = Color3.new(1, 1, 1)
                NG1097.TextStrokeTransparency = 0
                NG1097.TextWrapped = true
                NG1097.TextXAlignment = Enum.TextXAlignment.Left
                NG1097.Parent = NG1096
                NG1098 = Instance.new('Frame')
                NG1098.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1098.BackgroundTransparency = 1
                NG1098.BorderSizePixel = 0
                NG1098.Name = dCD('EVachg')
                NG1098.Position = UDim2.new(0, 35, 0, 0)
                NG1098.Size = UDim2.new(0, 38, 0, 25)
                NG1098.Parent = NG1096
                NG1099 = Instance.new('TextButton')
                NG1099.Active = true
                NG1099.AutoButtonColor = false
                NG1099.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1099.BackgroundTransparency = 1
                NG1099.BorderSizePixel = 0
                NG1099.Selectable = true
                NG1099.Size = UDim2.new(1, 0, 1, 0)
                NG1099.Style = Enum.ButtonStyle.Custom
                NG1099.ZIndex = 2
                NG1099.Font = Enum.Font.Legacy
                NG1099.FontSize = Enum.FontSize.Size8
                NG1099.Text = dCD('')
                NG1099.Parent = NG1098
                NG1100 = Instance.new('ImageLabel')
                NG1100.Active = false
                NG1100.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1100.BackgroundTransparency = 1
                NG1100.BorderSizePixel = 0
                NG1100.Name = dCD('Onpxtebhaq')
                NG1100.Selectable = false
                NG1100.Size = UDim2.new(1, 0, 1, 0)
                NG1100.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1100.Parent = NG1098
                NG1101 = Instance.new('Frame')
                NG1101.BackgroundColor3 = Color3.new(1, 0, 0)
                NG1101.BorderSizePixel = 0
                NG1101.Name = dCD('FryrpgrqVaqvpngbe')
                NG1101.Position = UDim2.new(0, 3, 0, -2)
                NG1101.Size = UDim2.new(1, -3, 0, 2)
                NG1101.Parent = NG1098
                NG1102 = Instance.new('TextBox')
                NG1102.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1102.BackgroundTransparency = 1
                NG1102.BorderSizePixel = 0
                NG1102.Position = UDim2.new(0, 5, 0, 0)
                NG1102.Size = UDim2.new(1, -10, 1, 0)
                NG1102.Font = Enum.Font.ArialBold
                NG1102.FontSize = Enum.FontSize.Size10
                NG1102.Text = dCD('255')
                NG1102.TextColor3 = Color3.new(1, 1, 1)
                NG1102.Parent = NG1098
                NG1103 = Instance.new('Frame')
                NG1103.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1103.BackgroundTransparency = 1
                NG1103.BorderSizePixel = 0
                NG1103.Name = dCD('TVachg')
                NG1103.Position = UDim2.new(0, 72, 0, 0)
                NG1103.Size = UDim2.new(0, 38, 0, 25)
                NG1103.Parent = NG1096
                NG1104 = Instance.new('TextButton')
                NG1104.Active = true
                NG1104.AutoButtonColor = false
                NG1104.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1104.BackgroundTransparency = 1
                NG1104.BorderSizePixel = 0
                NG1104.Selectable = true
                NG1104.Size = UDim2.new(1, 0, 1, 0)
                NG1104.Style = Enum.ButtonStyle.Custom
                NG1104.ZIndex = 2
                NG1104.Font = Enum.Font.Legacy
                NG1104.FontSize = Enum.FontSize.Size8
                NG1104.Text = dCD('')
                NG1104.Parent = NG1103
                NG1105 = Instance.new('ImageLabel')
                NG1105.Active = false
                NG1105.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1105.BackgroundTransparency = 1
                NG1105.BorderSizePixel = 0
                NG1105.Name = dCD('Onpxtebhaq')
                NG1105.Selectable = false
                NG1105.Size = UDim2.new(1, 0, 1, 0)
                NG1105.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1105.Parent = NG1103
                NG1106 = Instance.new('Frame')
                NG1106.BackgroundColor3 = Color3.new(0, 1, 0)
                NG1106.BorderSizePixel = 0
                NG1106.Name = dCD('FryrpgrqVaqvpngbe')
                NG1106.Position = UDim2.new(0, 3, 0, -2)
                NG1106.Size = UDim2.new(1, -3, 0, 2)
                NG1106.Parent = NG1103
                NG1107 = Instance.new('TextBox')
                NG1107.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1107.BackgroundTransparency = 1
                NG1107.BorderSizePixel = 0
                NG1107.Position = UDim2.new(0, 5, 0, 0)
                NG1107.Size = UDim2.new(1, -10, 1, 0)
                NG1107.Font = Enum.Font.ArialBold
                NG1107.FontSize = Enum.FontSize.Size10
                NG1107.Text = dCD('255')
                NG1107.TextColor3 = Color3.new(1, 1, 1)
                NG1107.Parent = NG1103
                NG1108 = Instance.new('Frame')
                NG1108.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1108.BackgroundTransparency = 1
                NG1108.BorderSizePixel = 0
                NG1108.Name = dCD('OVachg')
                NG1108.Position = UDim2.new(0, 109, 0, 0)
                NG1108.Size = UDim2.new(0, 38, 0, 25)
                NG1108.Parent = NG1096
                NG1109 = Instance.new('TextButton')
                NG1109.Active = true
                NG1109.AutoButtonColor = false
                NG1109.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1109.BackgroundTransparency = 1
                NG1109.BorderSizePixel = 0
                NG1109.Selectable = true
                NG1109.Size = UDim2.new(1, 0, 1, 0)
                NG1109.Style = Enum.ButtonStyle.Custom
                NG1109.ZIndex = 2
                NG1109.Font = Enum.Font.Legacy
                NG1109.FontSize = Enum.FontSize.Size8
                NG1109.Text = dCD('')
                NG1109.Parent = NG1108
                NG1110 = Instance.new('ImageLabel')
                NG1110.Active = false
                NG1110.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1110.BackgroundTransparency = 1
                NG1110.BorderSizePixel = 0
                NG1110.Name = dCD('Onpxtebhaq')
                NG1110.Selectable = false
                NG1110.Size = UDim2.new(1, 0, 1, 0)
                NG1110.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1110.Parent = NG1108
                NG1111 = Instance.new('Frame')
                NG1111.BackgroundColor3 = Color3.new(0, 0, 1)
                NG1111.BorderSizePixel = 0
                NG1111.Name = dCD('FryrpgrqVaqvpngbe')
                NG1111.Position = UDim2.new(0, 3, 0, -2)
                NG1111.Size = UDim2.new(1, -3, 0, 2)
                NG1111.Parent = NG1108
                NG1112 = Instance.new('TextBox')
                NG1112.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1112.BackgroundTransparency = 1
                NG1112.BorderSizePixel = 0
                NG1112.Position = UDim2.new(0, 5, 0, 0)
                NG1112.Size = UDim2.new(1, -10, 1, 0)
                NG1112.Font = Enum.Font.ArialBold
                NG1112.FontSize = Enum.FontSize.Size10
                NG1112.Text = dCD('255')
                NG1112.TextColor3 = Color3.new(1, 1, 1)
                NG1112.Parent = NG1108
                NG1113 = Instance.new('ImageButton')
                NG1113.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1113.BackgroundTransparency = 0.40000000596046
                NG1113.BorderSizePixel = 0
                NG1113.Name = dCD('UFICvpxre')
                NG1113.Position = UDim2.new(0, 160, 0, -2)
                NG1113.Size = UDim2.new(0, 27, 0, 27)
                NG1113.Style = Enum.ButtonStyle.Custom
                NG1113.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141313631')
                NG1113.Parent = NG1096
                NG1114 = Instance.new('Frame')
                NG1114.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1114.BackgroundTransparency = 0.75
                NG1114.BorderSizePixel = 0
                NG1114.Name = dCD('Funqbj')
                NG1114.Position = UDim2.new(0, 0, 1, -2)
                NG1114.Size = UDim2.new(1, 0, 0, 2)
                NG1114.Parent = NG1113
                NG1115 = Instance.new('Frame')
                NG1115.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1115.BackgroundTransparency = 0.5
                NG1115.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1115.BorderSizePixel = 0
                NG1115.Name = dCD('Frcnengbe')
                NG1115.Position = UDim2.new(0, 151, 0, 4)
                NG1115.Size = UDim2.new(0, 4, 0, 4)
                NG1115.Parent = NG1096
                NG1116 = Instance.new('Frame')
                NG1116.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1116.BackgroundTransparency = 0.5
                NG1116.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1116.BorderSizePixel = 0
                NG1116.Name = dCD('Frcnengbe')
                NG1116.Position = UDim2.new(0, 151, 0, 16)
                NG1116.Size = UDim2.new(0, 4, 0, 4)
                NG1116.Parent = NG1096
                NG1117 = Instance.new('Frame')
                NG1117.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1117.BackgroundTransparency = 0.5
                NG1117.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1117.BorderSizePixel = 0
                NG1117.Name = dCD('Frcnengbe')
                NG1117.Position = UDim2.new(0, 151, 0, 10)
                NG1117.Size = UDim2.new(0, 4, 0, 4)
                NG1117.Parent = NG1096
                NG1118 = Instance.new('Frame')
                NG1118.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1118.BackgroundTransparency = 1
                NG1118.BorderSizePixel = 0
                NG1118.Name = dCD('BcnpvglBcgvba')
                NG1118.Position = UDim2.new(0, 0, 0, 45)
                NG1118.Size = UDim2.new(1, 0, 0, 25)
                NG1118.Parent = NG1095
                NG1119 = Instance.new('TextLabel')
                NG1119.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1119.BackgroundTransparency = 1
                NG1119.BorderSizePixel = 0
                NG1119.Name = dCD('Ynory')
                NG1119.Size = UDim2.new(0, 70, 0, 25)
                NG1119.Font = Enum.Font.ArialBold
                NG1119.FontSize = Enum.FontSize.Size10
                NG1119.Text = dCD('Bcnpvgl')
                NG1119.TextColor3 = Color3.new(1, 1, 1)
                NG1119.TextStrokeTransparency = 0
                NG1119.TextWrapped = true
                NG1119.TextXAlignment = Enum.TextXAlignment.Left
                NG1119.Parent = NG1118
                NG1120 = Instance.new('Frame')
                NG1120.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1120.BackgroundTransparency = 1
                NG1120.BorderSizePixel = 0
                NG1120.Name = dCD('Vachg')
                NG1120.Position = UDim2.new(0, 45, 0, 0)
                NG1120.Size = UDim2.new(0, 38, 0, 25)
                NG1120.Parent = NG1118
                NG1121 = Instance.new('TextButton')
                NG1121.Active = true
                NG1121.AutoButtonColor = false
                NG1121.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1121.BackgroundTransparency = 1
                NG1121.BorderSizePixel = 0
                NG1121.Selectable = true
                NG1121.Size = UDim2.new(1, 0, 1, 0)
                NG1121.Style = Enum.ButtonStyle.Custom
                NG1121.ZIndex = 2
                NG1121.Font = Enum.Font.Legacy
                NG1121.FontSize = Enum.FontSize.Size8
                NG1121.Text = dCD('')
                NG1121.Parent = NG1120
                NG1122 = Instance.new('ImageLabel')
                NG1122.Active = false
                NG1122.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1122.BackgroundTransparency = 1
                NG1122.BorderSizePixel = 0
                NG1122.Name = dCD('Onpxtebhaq')
                NG1122.Selectable = false
                NG1122.Size = UDim2.new(1, 0, 1, 0)
                NG1122.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1122.Parent = NG1120
                NG1123 = Instance.new('Frame')
                NG1123.BorderSizePixel = 0
                NG1123.Name = dCD('FryrpgrqVaqvpngbe')
                NG1123.Position = UDim2.new(0, 3, 0, -2)
                NG1123.Size = UDim2.new(1, -3, 0, 2)
                NG1123.Parent = NG1120
                NG1124 = Instance.new('TextBox')
                NG1124.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1124.BackgroundTransparency = 1
                NG1124.BorderSizePixel = 0
                NG1124.Position = UDim2.new(0, 5, 0, 0)
                NG1124.Size = UDim2.new(1, -10, 1, 0)
                NG1124.Font = Enum.Font.ArialBold
                NG1124.FontSize = Enum.FontSize.Size10
                NG1124.Text = dCD('1')
                NG1124.TextColor3 = Color3.new(1, 1, 1)
                NG1124.Parent = NG1120
                NG1125 = Instance.new('Frame')
                NG1125.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1125.BackgroundTransparency = 1
                NG1125.BorderSizePixel = 0
                NG1125.Name = dCD('IrybpvglBcgvba')
                NG1125.Position = UDim2.new(0, 100, 0, 45)
                NG1125.Size = UDim2.new(1, -115, 0, 25)
                NG1125.Parent = NG1095
                NG1126 = Instance.new('TextLabel')
                NG1126.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1126.BackgroundTransparency = 1
                NG1126.BorderSizePixel = 0
                NG1126.Name = dCD('Ynory')
                NG1126.Size = UDim2.new(0, 70, 0, 25)
                NG1126.Font = Enum.Font.ArialBold
                NG1126.FontSize = Enum.FontSize.Size10
                NG1126.Text = dCD('Irybpvgl')
                NG1126.TextColor3 = Color3.new(1, 1, 1)
                NG1126.TextStrokeTransparency = 0
                NG1126.TextWrapped = true
                NG1126.TextXAlignment = Enum.TextXAlignment.Left
                NG1126.Parent = NG1125
                NG1127 = Instance.new('Frame')
                NG1127.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1127.BackgroundTransparency = 1
                NG1127.BorderSizePixel = 0
                NG1127.Name = dCD('Vachg')
                NG1127.Position = UDim2.new(0, 45, 0, 0)
                NG1127.Size = UDim2.new(0, 38, 0, 25)
                NG1127.Parent = NG1125
                NG1128 = Instance.new('TextButton')
                NG1128.Active = true
                NG1128.AutoButtonColor = false
                NG1128.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1128.BackgroundTransparency = 1
                NG1128.BorderSizePixel = 0
                NG1128.Selectable = true
                NG1128.Size = UDim2.new(1, 0, 1, 0)
                NG1128.Style = Enum.ButtonStyle.Custom
                NG1128.ZIndex = 2
                NG1128.Font = Enum.Font.Legacy
                NG1128.FontSize = Enum.FontSize.Size8
                NG1128.Text = dCD('')
                NG1128.Parent = NG1127
                NG1129 = Instance.new('ImageLabel')
                NG1129.Active = false
                NG1129.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1129.BackgroundTransparency = 1
                NG1129.BorderSizePixel = 0
                NG1129.Name = dCD('Onpxtebhaq')
                NG1129.Selectable = false
                NG1129.Size = UDim2.new(1, 0, 1, 0)
                NG1129.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1129.Parent = NG1127
                NG1130 = Instance.new('Frame')
                NG1130.BorderSizePixel = 0
                NG1130.Name = dCD('FryrpgrqVaqvpngbe')
                NG1130.Position = UDim2.new(0, 3, 0, -2)
                NG1130.Size = UDim2.new(1, -3, 0, 2)
                NG1130.Parent = NG1127
                NG1131 = Instance.new('TextBox')
                NG1131.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1131.BackgroundTransparency = 1
                NG1131.BorderSizePixel = 0
                NG1131.Position = UDim2.new(0, 5, 0, 0)
                NG1131.Size = UDim2.new(1, -10, 1, 0)
                NG1131.Font = Enum.Font.ArialBold
                NG1131.FontSize = Enum.FontSize.Size10
                NG1131.Text = dCD('90')
                NG1131.TextColor3 = Color3.new(1, 1, 1)
                NG1131.Parent = NG1127
                NG1132 = Instance.new('Frame')
                NG1132.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1132.BackgroundTransparency = 1
                NG1132.BorderSizePixel = 0
                NG1132.Name = dCD('FvmrBcgvba')
                NG1132.Position = UDim2.new(0, 0, 0, 80)
                NG1132.Size = UDim2.new(1, 0, 0, 25)
                NG1132.Parent = NG1095
                NG1133 = Instance.new('TextLabel')
                NG1133.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1133.BackgroundTransparency = 1
                NG1133.BorderSizePixel = 0
                NG1133.Name = dCD('Ynory')
                NG1133.Size = UDim2.new(0, 70, 0, 25)
                NG1133.Font = Enum.Font.ArialBold
                NG1133.FontSize = Enum.FontSize.Size10
                NG1133.Text = dCD('Fvmr')
                NG1133.TextColor3 = Color3.new(1, 1, 1)
                NG1133.TextStrokeTransparency = 0
                NG1133.TextWrapped = true
                NG1133.TextXAlignment = Enum.TextXAlignment.Left
                NG1133.Parent = NG1132
                NG1134 = Instance.new('Frame')
                NG1134.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1134.BackgroundTransparency = 1
                NG1134.BorderSizePixel = 0
                NG1134.Name = dCD('Vachg')
                NG1134.Position = UDim2.new(0, 30, 0, 0)
                NG1134.Size = UDim2.new(0, 38, 0, 25)
                NG1134.Parent = NG1132
                NG1135 = Instance.new('TextButton')
                NG1135.Active = true
                NG1135.AutoButtonColor = false
                NG1135.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1135.BackgroundTransparency = 1
                NG1135.BorderSizePixel = 0
                NG1135.Selectable = true
                NG1135.Size = UDim2.new(1, 0, 1, 0)
                NG1135.Style = Enum.ButtonStyle.Custom
                NG1135.ZIndex = 2
                NG1135.Font = Enum.Font.Legacy
                NG1135.FontSize = Enum.FontSize.Size8
                NG1135.Text = dCD('')
                NG1135.Parent = NG1134
                NG1136 = Instance.new('ImageLabel')
                NG1136.Active = false
                NG1136.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1136.BackgroundTransparency = 1
                NG1136.BorderSizePixel = 0
                NG1136.Name = dCD('Onpxtebhaq')
                NG1136.Selectable = false
                NG1136.Size = UDim2.new(1, 0, 1, 0)
                NG1136.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1136.Parent = NG1134
                NG1137 = Instance.new('Frame')
                NG1137.BorderSizePixel = 0
                NG1137.Name = dCD('FryrpgrqVaqvpngbe')
                NG1137.Position = UDim2.new(0, 3, 0, -2)
                NG1137.Size = UDim2.new(1, -3, 0, 2)
                NG1137.Parent = NG1134
                NG1138 = Instance.new('TextBox')
                NG1138.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1138.BackgroundTransparency = 1
                NG1138.BorderSizePixel = 0
                NG1138.Position = UDim2.new(0, 5, 0, 0)
                NG1138.Size = UDim2.new(1, -10, 1, 0)
                NG1138.Font = Enum.Font.ArialBold
                NG1138.FontSize = Enum.FontSize.Size10
                NG1138.Text = dCD('16')
                NG1138.TextColor3 = Color3.new(1, 1, 1)
                NG1138.Parent = NG1134
                NG1139 = Instance.new('TextLabel')
                NG1139.BackgroundTransparency = 1
                NG1139.BorderSizePixel = 0
                NG1139.Name = dCD('FryrpgAbgr')
                NG1139.Position = UDim2.new(0, 10, 0, 27)
                NG1139.Size = UDim2.new(1, -10, 0, 15)
                NG1139.Visible = false
                NG1139.FontSize = Enum.FontSize.Size14
                NG1139.Text = dCD('Fryrpg fbzrguvat gb hfr guvf gbby.')
                NG1139.TextColor3 = Color3.new(1, 1, 1)
                NG1139.TextScaled = true
                NG1139.TextStrokeTransparency = 0.5
                NG1139.TextWrapped = true
                NG1139.TextXAlignment = Enum.TextXAlignment.Left
                NG1139.Parent = NG1082
                NG1140 = Instance.new('Frame')
                NG1140.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1140.BackgroundTransparency = 0.67500001192093
                NG1140.BorderSizePixel = 0
                NG1140.Name = dCD('Sver')
                NG1140.Position = UDim2.new(0, 10, 0, 60)
                NG1140.Size = UDim2.new(1, -10, 0, 25)
                NG1140.Parent = NG1082
                NG1141 = Instance.new('TextLabel')
                NG1141.BackgroundTransparency = 1
                NG1141.BorderSizePixel = 0
                NG1141.Name = dCD('Ynory')
                NG1141.Position = UDim2.new(0, 35, 0, 0)
                NG1141.Size = UDim2.new(0, 60, 0, 25)
                NG1141.Font = Enum.Font.ArialBold
                NG1141.FontSize = Enum.FontSize.Size10
                NG1141.Text = dCD('Sver')
                NG1141.TextColor3 = Color3.new(1, 1, 1)
                NG1141.TextStrokeTransparency = 0.5
                NG1141.TextWrapped = true
                NG1141.TextXAlignment = Enum.TextXAlignment.Left
                NG1141.Parent = NG1140
                NG1142 = Instance.new('ImageButton')
                NG1142.BackgroundTransparency = 1
                NG1142.BorderSizePixel = 0
                NG1142.Name = dCD('NeebjOhggba')
                NG1142.Position = UDim2.new(0, 10, 0, 3)
                NG1142.Size = UDim2.new(0, 20, 0, 20)
                NG1142.Style = Enum.ButtonStyle.Custom
                NG1142.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=134367382')
                NG1142.Parent = NG1140
                NG1143 = Instance.new('Frame')
                NG1143.BackgroundColor3 = Color3.new(0.85098, 0, 1)
                NG1143.BorderSizePixel = 0
                NG1143.Name = dCD('PbybeOne')
                NG1143.Size = UDim2.new(0, 3, 1, 0)
                NG1143.Parent = NG1140
                NG1144 = Instance.new('TextButton')
                NG1144.Active = true
                NG1144.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1144.BackgroundTransparency = 0.75
                NG1144.BorderColor3 = Color3.new(0, 0, 0)
                NG1144.BorderSizePixel = 0
                NG1144.Name = dCD('NqqOhggba')
                NG1144.Position = UDim2.new(1, -40, 0, 3)
                NG1144.Selectable = true
                NG1144.Size = UDim2.new(0, 35, 0, 19)
                NG1144.Style = Enum.ButtonStyle.Custom
                NG1144.Font = Enum.Font.ArialBold
                NG1144.FontSize = Enum.FontSize.Size10
                NG1144.Text = dCD('NQQ')
                NG1144.TextColor3 = Color3.new(1, 1, 1)
                NG1144.Parent = NG1140
                NG1145 = Instance.new('TextButton')
                NG1145.Active = true
                NG1145.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1145.BackgroundTransparency = 0.75
                NG1145.BorderColor3 = Color3.new(0, 0, 0)
                NG1145.BorderSizePixel = 0
                NG1145.Name = dCD('ErzbirOhggba')
                NG1145.Position = UDim2.new(0, 90, 0, 3)
                NG1145.Selectable = true
                NG1145.Size = UDim2.new(0, 58, 0, 19)
                NG1145.Style = Enum.ButtonStyle.Custom
                NG1145.Visible = false
                NG1145.Font = Enum.Font.ArialBold
                NG1145.FontSize = Enum.FontSize.Size10
                NG1145.Text = dCD('ERZBIR')
                NG1145.TextColor3 = Color3.new(1, 1, 1)
                NG1145.Parent = NG1140
                NG1146 = Instance.new('Frame')
                NG1146.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1146.BackgroundTransparency = 0.75
                NG1146.BorderSizePixel = 0
                NG1146.Name = dCD('Funqbj')
                NG1146.Position = UDim2.new(0, 0, 1, -1)
                NG1146.Size = UDim2.new(1, 0, 0, 1)
                NG1146.Parent = NG1140
                NG1147 = Instance.new('Frame')
                NG1147.BackgroundTransparency = 1
                NG1147.BorderSizePixel = 0
                NG1147.Name = dCD('Bcgvbaf')
                NG1147.Position = UDim2.new(0, 3, 1, 0)
                NG1147.Size = UDim2.new(1, -3, 0, 0)
                NG1147.ClipsDescendants = true
                NG1147.Parent = NG1140
                NG1148 = Instance.new('Frame')
                NG1148.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1148.BackgroundTransparency = 1
                NG1148.BorderSizePixel = 0
                NG1148.Name = dCD('PbybeBcgvba')
                NG1148.Position = UDim2.new(0, 0, 0, 10)
                NG1148.Size = UDim2.new(1, 0, 0, 25)
                NG1148.Parent = NG1147
                NG1149 = Instance.new('TextLabel')
                NG1149.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1149.BackgroundTransparency = 1
                NG1149.BorderSizePixel = 0
                NG1149.Name = dCD('Ynory')
                NG1149.Size = UDim2.new(0, 70, 0, 25)
                NG1149.Font = Enum.Font.ArialBold
                NG1149.FontSize = Enum.FontSize.Size10
                NG1149.Text = dCD('Pbybe')
                NG1149.TextColor3 = Color3.new(1, 1, 1)
                NG1149.TextStrokeTransparency = 0
                NG1149.TextWrapped = true
                NG1149.TextXAlignment = Enum.TextXAlignment.Left
                NG1149.Parent = NG1148
                NG1150 = Instance.new('Frame')
                NG1150.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1150.BackgroundTransparency = 1
                NG1150.BorderSizePixel = 0
                NG1150.Name = dCD('EVachg')
                NG1150.Position = UDim2.new(0, 35, 0, 0)
                NG1150.Size = UDim2.new(0, 38, 0, 25)
                NG1150.Parent = NG1148
                NG1151 = Instance.new('TextButton')
                NG1151.Active = true
                NG1151.AutoButtonColor = false
                NG1151.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1151.BackgroundTransparency = 1
                NG1151.BorderSizePixel = 0
                NG1151.Selectable = true
                NG1151.Size = UDim2.new(1, 0, 1, 0)
                NG1151.Style = Enum.ButtonStyle.Custom
                NG1151.ZIndex = 2
                NG1151.Font = Enum.Font.Legacy
                NG1151.FontSize = Enum.FontSize.Size8
                NG1151.Text = dCD('')
                NG1151.Parent = NG1150
                NG1152 = Instance.new('ImageLabel')
                NG1152.Active = false
                NG1152.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1152.BackgroundTransparency = 1
                NG1152.BorderSizePixel = 0
                NG1152.Name = dCD('Onpxtebhaq')
                NG1152.Selectable = false
                NG1152.Size = UDim2.new(1, 0, 1, 0)
                NG1152.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1152.Parent = NG1150
                NG1153 = Instance.new('Frame')
                NG1153.BackgroundColor3 = Color3.new(1, 0, 0)
                NG1153.BorderSizePixel = 0
                NG1153.Name = dCD('FryrpgrqVaqvpngbe')
                NG1153.Position = UDim2.new(0, 3, 0, -2)
                NG1153.Size = UDim2.new(1, -3, 0, 2)
                NG1153.Parent = NG1150
                NG1154 = Instance.new('TextBox')
                NG1154.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1154.BackgroundTransparency = 1
                NG1154.BorderSizePixel = 0
                NG1154.Position = UDim2.new(0, 5, 0, 0)
                NG1154.Size = UDim2.new(1, -10, 1, 0)
                NG1154.Font = Enum.Font.ArialBold
                NG1154.FontSize = Enum.FontSize.Size10
                NG1154.Text = dCD('255')
                NG1154.TextColor3 = Color3.new(1, 1, 1)
                NG1154.Parent = NG1150
                NG1155 = Instance.new('Frame')
                NG1155.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1155.BackgroundTransparency = 1
                NG1155.BorderSizePixel = 0
                NG1155.Name = dCD('TVachg')
                NG1155.Position = UDim2.new(0, 72, 0, 0)
                NG1155.Size = UDim2.new(0, 38, 0, 25)
                NG1155.Parent = NG1148
                NG1156 = Instance.new('TextButton')
                NG1156.Active = true
                NG1156.AutoButtonColor = false
                NG1156.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1156.BackgroundTransparency = 1
                NG1156.BorderSizePixel = 0
                NG1156.Selectable = true
                NG1156.Size = UDim2.new(1, 0, 1, 0)
                NG1156.Style = Enum.ButtonStyle.Custom
                NG1156.ZIndex = 2
                NG1156.Font = Enum.Font.Legacy
                NG1156.FontSize = Enum.FontSize.Size8
                NG1156.Text = dCD('')
                NG1156.Parent = NG1155
                NG1157 = Instance.new('ImageLabel')
                NG1157.Active = false
                NG1157.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1157.BackgroundTransparency = 1
                NG1157.BorderSizePixel = 0
                NG1157.Name = dCD('Onpxtebhaq')
                NG1157.Selectable = false
                NG1157.Size = UDim2.new(1, 0, 1, 0)
                NG1157.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1157.Parent = NG1155
                NG1158 = Instance.new('Frame')
                NG1158.BackgroundColor3 = Color3.new(0, 1, 0)
                NG1158.BorderSizePixel = 0
                NG1158.Name = dCD('FryrpgrqVaqvpngbe')
                NG1158.Position = UDim2.new(0, 3, 0, -2)
                NG1158.Size = UDim2.new(1, -3, 0, 2)
                NG1158.Parent = NG1155
                NG1159 = Instance.new('TextBox')
                NG1159.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1159.BackgroundTransparency = 1
                NG1159.BorderSizePixel = 0
                NG1159.Position = UDim2.new(0, 5, 0, 0)
                NG1159.Size = UDim2.new(1, -10, 1, 0)
                NG1159.Font = Enum.Font.ArialBold
                NG1159.FontSize = Enum.FontSize.Size10
                NG1159.Text = dCD('255')
                NG1159.TextColor3 = Color3.new(1, 1, 1)
                NG1159.Parent = NG1155
                NG1160 = Instance.new('Frame')
                NG1160.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1160.BackgroundTransparency = 1
                NG1160.BorderSizePixel = 0
                NG1160.Name = dCD('OVachg')
                NG1160.Position = UDim2.new(0, 109, 0, 0)
                NG1160.Size = UDim2.new(0, 38, 0, 25)
                NG1160.Parent = NG1148
                NG1161 = Instance.new('TextButton')
                NG1161.Active = true
                NG1161.AutoButtonColor = false
                NG1161.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1161.BackgroundTransparency = 1
                NG1161.BorderSizePixel = 0
                NG1161.Selectable = true
                NG1161.Size = UDim2.new(1, 0, 1, 0)
                NG1161.Style = Enum.ButtonStyle.Custom
                NG1161.ZIndex = 2
                NG1161.Font = Enum.Font.Legacy
                NG1161.FontSize = Enum.FontSize.Size8
                NG1161.Text = dCD('')
                NG1161.Parent = NG1160
                NG1162 = Instance.new('ImageLabel')
                NG1162.Active = false
                NG1162.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1162.BackgroundTransparency = 1
                NG1162.BorderSizePixel = 0
                NG1162.Name = dCD('Onpxtebhaq')
                NG1162.Selectable = false
                NG1162.Size = UDim2.new(1, 0, 1, 0)
                NG1162.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1162.Parent = NG1160
                NG1163 = Instance.new('Frame')
                NG1163.BackgroundColor3 = Color3.new(0, 0, 1)
                NG1163.BorderSizePixel = 0
                NG1163.Name = dCD('FryrpgrqVaqvpngbe')
                NG1163.Position = UDim2.new(0, 3, 0, -2)
                NG1163.Size = UDim2.new(1, -3, 0, 2)
                NG1163.Parent = NG1160
                NG1164 = Instance.new('TextBox')
                NG1164.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1164.BackgroundTransparency = 1
                NG1164.BorderSizePixel = 0
                NG1164.Position = UDim2.new(0, 5, 0, 0)
                NG1164.Size = UDim2.new(1, -10, 1, 0)
                NG1164.Font = Enum.Font.ArialBold
                NG1164.FontSize = Enum.FontSize.Size10
                NG1164.Text = dCD('255')
                NG1164.TextColor3 = Color3.new(1, 1, 1)
                NG1164.Parent = NG1160
                NG1165 = Instance.new('ImageButton')
                NG1165.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1165.BackgroundTransparency = 0.40000000596046
                NG1165.BorderSizePixel = 0
                NG1165.Name = dCD('UFICvpxre')
                NG1165.Position = UDim2.new(0, 160, 0, -2)
                NG1165.Size = UDim2.new(0, 27, 0, 27)
                NG1165.Style = Enum.ButtonStyle.Custom
                NG1165.ZIndex = 2
                NG1165.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141313631')
                NG1165.Parent = NG1148
                NG1166 = Instance.new('Frame')
                NG1166.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1166.BackgroundTransparency = 0.75
                NG1166.BorderSizePixel = 0
                NG1166.Name = dCD('Funqbj')
                NG1166.Position = UDim2.new(0, 0, 1, -2)
                NG1166.Size = UDim2.new(1, 0, 0, 2)
                NG1166.Parent = NG1165
                NG1167 = Instance.new('Frame')
                NG1167.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1167.BackgroundTransparency = 0.5
                NG1167.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1167.BorderSizePixel = 0
                NG1167.Name = dCD('Frcnengbe')
                NG1167.Position = UDim2.new(0, 151, 0, 4)
                NG1167.Size = UDim2.new(0, 4, 0, 4)
                NG1167.Parent = NG1148
                NG1168 = Instance.new('Frame')
                NG1168.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1168.BackgroundTransparency = 0.5
                NG1168.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1168.BorderSizePixel = 0
                NG1168.Name = dCD('Frcnengbe')
                NG1168.Position = UDim2.new(0, 151, 0, 16)
                NG1168.Size = UDim2.new(0, 4, 0, 4)
                NG1168.Parent = NG1148
                NG1169 = Instance.new('Frame')
                NG1169.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1169.BackgroundTransparency = 0.5
                NG1169.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1169.BorderSizePixel = 0
                NG1169.Name = dCD('Frcnengbe')
                NG1169.Position = UDim2.new(0, 151, 0, 10)
                NG1169.Size = UDim2.new(0, 4, 0, 4)
                NG1169.Parent = NG1148
                NG1170 = Instance.new('Frame')
                NG1170.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1170.BackgroundTransparency = 1
                NG1170.BorderSizePixel = 0
                NG1170.Name = dCD('UrngBcgvba')
                NG1170.Position = UDim2.new(0, 0, 0, 80)
                NG1170.Size = UDim2.new(1, 0, 0, 25)
                NG1170.Parent = NG1147
                NG1171 = Instance.new('TextLabel')
                NG1171.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1171.BackgroundTransparency = 1
                NG1171.BorderSizePixel = 0
                NG1171.Name = dCD('Ynory')
                NG1171.Size = UDim2.new(0, 70, 0, 25)
                NG1171.Font = Enum.Font.ArialBold
                NG1171.FontSize = Enum.FontSize.Size10
                NG1171.Text = dCD('Urng')
                NG1171.TextColor3 = Color3.new(1, 1, 1)
                NG1171.TextStrokeTransparency = 0
                NG1171.TextWrapped = true
                NG1171.TextXAlignment = Enum.TextXAlignment.Left
                NG1171.Parent = NG1170
                NG1172 = Instance.new('Frame')
                NG1172.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1172.BackgroundTransparency = 1
                NG1172.BorderSizePixel = 0
                NG1172.Name = dCD('Vachg')
                NG1172.Position = UDim2.new(0, 34, 0, 0)
                NG1172.Size = UDim2.new(0, 38, 0, 25)
                NG1172.Parent = NG1170
                NG1173 = Instance.new('TextButton')
                NG1173.Active = true
                NG1173.AutoButtonColor = false
                NG1173.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1173.BackgroundTransparency = 1
                NG1173.BorderSizePixel = 0
                NG1173.Selectable = true
                NG1173.Size = UDim2.new(1, 0, 1, 0)
                NG1173.Style = Enum.ButtonStyle.Custom
                NG1173.ZIndex = 2
                NG1173.Font = Enum.Font.Legacy
                NG1173.FontSize = Enum.FontSize.Size8
                NG1173.Text = dCD('')
                NG1173.Parent = NG1172
                NG1174 = Instance.new('ImageLabel')
                NG1174.Active = false
                NG1174.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1174.BackgroundTransparency = 1
                NG1174.BorderSizePixel = 0
                NG1174.Name = dCD('Onpxtebhaq')
                NG1174.Selectable = false
                NG1174.Size = UDim2.new(1, 0, 1, 0)
                NG1174.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1174.Parent = NG1172
                NG1175 = Instance.new('Frame')
                NG1175.BorderSizePixel = 0
                NG1175.Name = dCD('FryrpgrqVaqvpngbe')
                NG1175.Position = UDim2.new(0, 3, 0, -2)
                NG1175.Size = UDim2.new(1, -3, 0, 2)
                NG1175.Parent = NG1172
                NG1176 = Instance.new('TextBox')
                NG1176.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1176.BackgroundTransparency = 1
                NG1176.BorderSizePixel = 0
                NG1176.Position = UDim2.new(0, 5, 0, 0)
                NG1176.Size = UDim2.new(1, -10, 1, 0)
                NG1176.Font = Enum.Font.ArialBold
                NG1176.FontSize = Enum.FontSize.Size10
                NG1176.Text = dCD('1')
                NG1176.TextColor3 = Color3.new(1, 1, 1)
                NG1176.Parent = NG1172
                NG1177 = Instance.new('Frame')
                NG1177.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1177.BackgroundTransparency = 1
                NG1177.BorderSizePixel = 0
                NG1177.Name = dCD('FvmrBcgvba')
                NG1177.Position = UDim2.new(0, 90, 0, 80)
                NG1177.Size = UDim2.new(1, 0, 0, 25)
                NG1177.Parent = NG1147
                NG1178 = Instance.new('TextLabel')
                NG1178.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1178.BackgroundTransparency = 1
                NG1178.BorderSizePixel = 0
                NG1178.Name = dCD('Ynory')
                NG1178.Size = UDim2.new(0, 70, 0, 25)
                NG1178.Font = Enum.Font.ArialBold
                NG1178.FontSize = Enum.FontSize.Size10
                NG1178.Text = dCD('Fvmr')
                NG1178.TextColor3 = Color3.new(1, 1, 1)
                NG1178.TextStrokeTransparency = 0
                NG1178.TextWrapped = true
                NG1178.TextXAlignment = Enum.TextXAlignment.Left
                NG1178.Parent = NG1177
                NG1179 = Instance.new('Frame')
                NG1179.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1179.BackgroundTransparency = 1
                NG1179.BorderSizePixel = 0
                NG1179.Name = dCD('Vachg')
                NG1179.Position = UDim2.new(0, 30, 0, 0)
                NG1179.Size = UDim2.new(0, 38, 0, 25)
                NG1179.Parent = NG1177
                NG1180 = Instance.new('TextButton')
                NG1180.Active = true
                NG1180.AutoButtonColor = false
                NG1180.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1180.BackgroundTransparency = 1
                NG1180.BorderSizePixel = 0
                NG1180.Selectable = true
                NG1180.Size = UDim2.new(1, 0, 1, 0)
                NG1180.Style = Enum.ButtonStyle.Custom
                NG1180.ZIndex = 2
                NG1180.Font = Enum.Font.Legacy
                NG1180.FontSize = Enum.FontSize.Size8
                NG1180.Text = dCD('')
                NG1180.Parent = NG1179
                NG1181 = Instance.new('ImageLabel')
                NG1181.Active = false
                NG1181.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1181.BackgroundTransparency = 1
                NG1181.BorderSizePixel = 0
                NG1181.Name = dCD('Onpxtebhaq')
                NG1181.Selectable = false
                NG1181.Size = UDim2.new(1, 0, 1, 0)
                NG1181.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1181.Parent = NG1179
                NG1182 = Instance.new('Frame')
                NG1182.BorderSizePixel = 0
                NG1182.Name = dCD('FryrpgrqVaqvpngbe')
                NG1182.Position = UDim2.new(0, 3, 0, -2)
                NG1182.Size = UDim2.new(1, -3, 0, 2)
                NG1182.Parent = NG1179
                NG1183 = Instance.new('TextBox')
                NG1183.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1183.BackgroundTransparency = 1
                NG1183.BorderSizePixel = 0
                NG1183.Position = UDim2.new(0, 5, 0, 0)
                NG1183.Size = UDim2.new(1, -10, 1, 0)
                NG1183.Font = Enum.Font.ArialBold
                NG1183.FontSize = Enum.FontSize.Size10
                NG1183.Text = dCD('16')
                NG1183.TextColor3 = Color3.new(1, 1, 1)
                NG1183.Parent = NG1179
                NG1184 = Instance.new('Frame')
                NG1184.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1184.BackgroundTransparency = 1
                NG1184.BorderSizePixel = 0
                NG1184.Name = dCD('FrpbaqPbybeBcgvba')
                NG1184.Position = UDim2.new(0, 0, 0, 45)
                NG1184.Size = UDim2.new(1, 0, 0, 25)
                NG1184.Parent = NG1147
                NG1185 = Instance.new('TextLabel')
                NG1185.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1185.BackgroundTransparency = 1
                NG1185.BorderSizePixel = 0
                NG1185.Name = dCD('Ynory')
                NG1185.Size = UDim2.new(0, 40, 0, 25)
                NG1185.Font = Enum.Font.ArialBold
                NG1185.FontSize = Enum.FontSize.Size10
                NG1185.Text = dCD('2aq Pbybe')
                NG1185.TextColor3 = Color3.new(1, 1, 1)
                NG1185.TextStrokeTransparency = 0
                NG1185.TextWrapped = true
                NG1185.TextXAlignment = Enum.TextXAlignment.Left
                NG1185.Parent = NG1184
                NG1186 = Instance.new('Frame')
                NG1186.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1186.BackgroundTransparency = 1
                NG1186.BorderSizePixel = 0
                NG1186.Name = dCD('EVachg')
                NG1186.Position = UDim2.new(0, 35, 0, 0)
                NG1186.Size = UDim2.new(0, 38, 0, 25)
                NG1186.Parent = NG1184
                NG1187 = Instance.new('TextButton')
                NG1187.Active = true
                NG1187.AutoButtonColor = false
                NG1187.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1187.BackgroundTransparency = 1
                NG1187.BorderSizePixel = 0
                NG1187.Selectable = true
                NG1187.Size = UDim2.new(1, 0, 1, 0)
                NG1187.Style = Enum.ButtonStyle.Custom
                NG1187.ZIndex = 2
                NG1187.Font = Enum.Font.Legacy
                NG1187.FontSize = Enum.FontSize.Size8
                NG1187.Text = dCD('')
                NG1187.Parent = NG1186
                NG1188 = Instance.new('ImageLabel')
                NG1188.Active = false
                NG1188.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1188.BackgroundTransparency = 1
                NG1188.BorderSizePixel = 0
                NG1188.Name = dCD('Onpxtebhaq')
                NG1188.Selectable = false
                NG1188.Size = UDim2.new(1, 0, 1, 0)
                NG1188.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1188.Parent = NG1186
                NG1189 = Instance.new('Frame')
                NG1189.BackgroundColor3 = Color3.new(1, 0, 0)
                NG1189.BorderSizePixel = 0
                NG1189.Name = dCD('FryrpgrqVaqvpngbe')
                NG1189.Position = UDim2.new(0, 3, 0, -2)
                NG1189.Size = UDim2.new(1, -3, 0, 2)
                NG1189.Parent = NG1186
                NG1190 = Instance.new('TextBox')
                NG1190.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1190.BackgroundTransparency = 1
                NG1190.BorderSizePixel = 0
                NG1190.Position = UDim2.new(0, 5, 0, 0)
                NG1190.Size = UDim2.new(1, -10, 1, 0)
                NG1190.Font = Enum.Font.ArialBold
                NG1190.FontSize = Enum.FontSize.Size10
                NG1190.Text = dCD('255')
                NG1190.TextColor3 = Color3.new(1, 1, 1)
                NG1190.Parent = NG1186
                NG1191 = Instance.new('Frame')
                NG1191.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1191.BackgroundTransparency = 1
                NG1191.BorderSizePixel = 0
                NG1191.Name = dCD('TVachg')
                NG1191.Position = UDim2.new(0, 72, 0, 0)
                NG1191.Size = UDim2.new(0, 38, 0, 25)
                NG1191.Parent = NG1184
                NG1192 = Instance.new('TextButton')
                NG1192.Active = true
                NG1192.AutoButtonColor = false
                NG1192.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1192.BackgroundTransparency = 1
                NG1192.BorderSizePixel = 0
                NG1192.Selectable = true
                NG1192.Size = UDim2.new(1, 0, 1, 0)
                NG1192.Style = Enum.ButtonStyle.Custom
                NG1192.ZIndex = 2
                NG1192.Font = Enum.Font.Legacy
                NG1192.FontSize = Enum.FontSize.Size8
                NG1192.Text = dCD('')
                NG1192.Parent = NG1191
                NG1193 = Instance.new('ImageLabel')
                NG1193.Active = false
                NG1193.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1193.BackgroundTransparency = 1
                NG1193.BorderSizePixel = 0
                NG1193.Name = dCD('Onpxtebhaq')
                NG1193.Selectable = false
                NG1193.Size = UDim2.new(1, 0, 1, 0)
                NG1193.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1193.Parent = NG1191
                NG1194 = Instance.new('Frame')
                NG1194.BackgroundColor3 = Color3.new(0, 1, 0)
                NG1194.BorderSizePixel = 0
                NG1194.Name = dCD('FryrpgrqVaqvpngbe')
                NG1194.Position = UDim2.new(0, 3, 0, -2)
                NG1194.Size = UDim2.new(1, -3, 0, 2)
                NG1194.Parent = NG1191
                NG1195 = Instance.new('TextBox')
                NG1195.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1195.BackgroundTransparency = 1
                NG1195.BorderSizePixel = 0
                NG1195.Position = UDim2.new(0, 5, 0, 0)
                NG1195.Size = UDim2.new(1, -10, 1, 0)
                NG1195.Font = Enum.Font.ArialBold
                NG1195.FontSize = Enum.FontSize.Size10
                NG1195.Text = dCD('255')
                NG1195.TextColor3 = Color3.new(1, 1, 1)
                NG1195.Parent = NG1191
                NG1196 = Instance.new('Frame')
                NG1196.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1196.BackgroundTransparency = 1
                NG1196.BorderSizePixel = 0
                NG1196.Name = dCD('OVachg')
                NG1196.Position = UDim2.new(0, 109, 0, 0)
                NG1196.Size = UDim2.new(0, 38, 0, 25)
                NG1196.Parent = NG1184
                NG1197 = Instance.new('TextButton')
                NG1197.Active = true
                NG1197.AutoButtonColor = false
                NG1197.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1197.BackgroundTransparency = 1
                NG1197.BorderSizePixel = 0
                NG1197.Selectable = true
                NG1197.Size = UDim2.new(1, 0, 1, 0)
                NG1197.Style = Enum.ButtonStyle.Custom
                NG1197.ZIndex = 2
                NG1197.Font = Enum.Font.Legacy
                NG1197.FontSize = Enum.FontSize.Size8
                NG1197.Text = dCD('')
                NG1197.Parent = NG1196
                NG1198 = Instance.new('ImageLabel')
                NG1198.Active = false
                NG1198.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1198.BackgroundTransparency = 1
                NG1198.BorderSizePixel = 0
                NG1198.Name = dCD('Onpxtebhaq')
                NG1198.Selectable = false
                NG1198.Size = UDim2.new(1, 0, 1, 0)
                NG1198.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1198.Parent = NG1196
                NG1199 = Instance.new('Frame')
                NG1199.BackgroundColor3 = Color3.new(0, 0, 1)
                NG1199.BorderSizePixel = 0
                NG1199.Name = dCD('FryrpgrqVaqvpngbe')
                NG1199.Position = UDim2.new(0, 3, 0, -2)
                NG1199.Size = UDim2.new(1, -3, 0, 2)
                NG1199.Parent = NG1196
                NG1200 = Instance.new('TextBox')
                NG1200.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1200.BackgroundTransparency = 1
                NG1200.BorderSizePixel = 0
                NG1200.Position = UDim2.new(0, 5, 0, 0)
                NG1200.Size = UDim2.new(1, -10, 1, 0)
                NG1200.Font = Enum.Font.ArialBold
                NG1200.FontSize = Enum.FontSize.Size10
                NG1200.Text = dCD('255')
                NG1200.TextColor3 = Color3.new(1, 1, 1)
                NG1200.Parent = NG1196
                NG1201 = Instance.new('ImageButton')
                NG1201.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1201.BackgroundTransparency = 0.40000000596046
                NG1201.BorderSizePixel = 0
                NG1201.Name = dCD('UFICvpxre')
                NG1201.Position = UDim2.new(0, 160, 0, -2)
                NG1201.Size = UDim2.new(0, 27, 0, 27)
                NG1201.Style = Enum.ButtonStyle.Custom
                NG1201.ZIndex = 2
                NG1201.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141313631')
                NG1201.Parent = NG1184
                NG1202 = Instance.new('Frame')
                NG1202.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1202.BackgroundTransparency = 0.75
                NG1202.BorderSizePixel = 0
                NG1202.Name = dCD('Funqbj')
                NG1202.Position = UDim2.new(0, 0, 1, -2)
                NG1202.Size = UDim2.new(1, 0, 0, 2)
                NG1202.Parent = NG1201
                NG1203 = Instance.new('Frame')
                NG1203.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1203.BackgroundTransparency = 0.5
                NG1203.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1203.BorderSizePixel = 0
                NG1203.Name = dCD('Frcnengbe')
                NG1203.Position = UDim2.new(0, 151, 0, 4)
                NG1203.Size = UDim2.new(0, 4, 0, 4)
                NG1203.Parent = NG1184
                NG1204 = Instance.new('Frame')
                NG1204.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1204.BackgroundTransparency = 0.5
                NG1204.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1204.BorderSizePixel = 0
                NG1204.Name = dCD('Frcnengbe')
                NG1204.Position = UDim2.new(0, 151, 0, 16)
                NG1204.Size = UDim2.new(0, 4, 0, 4)
                NG1204.Parent = NG1184
                NG1205 = Instance.new('Frame')
                NG1205.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1205.BackgroundTransparency = 0.5
                NG1205.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1205.BorderSizePixel = 0
                NG1205.Name = dCD('Frcnengbe')
                NG1205.Position = UDim2.new(0, 151, 0, 10)
                NG1205.Size = UDim2.new(0, 4, 0, 4)
                NG1205.Parent = NG1184
                NG1206 = Instance.new('Frame')
                NG1206.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1206.BackgroundTransparency = 0.67500001192093
                NG1206.BorderSizePixel = 0
                NG1206.Name = dCD('Fcnexyrf')
                NG1206.Position = UDim2.new(0, 10, 0, 90)
                NG1206.Size = UDim2.new(1, -10, 0, 25)
                NG1206.Parent = NG1082
                NG1207 = Instance.new('TextLabel')
                NG1207.BackgroundTransparency = 1
                NG1207.BorderSizePixel = 0
                NG1207.Name = dCD('Ynory')
                NG1207.Position = UDim2.new(0, 35, 0, 0)
                NG1207.Size = UDim2.new(0, 60, 0, 25)
                NG1207.Font = Enum.Font.ArialBold
                NG1207.FontSize = Enum.FontSize.Size10
                NG1207.Text = dCD('Fcnexyrf')
                NG1207.TextColor3 = Color3.new(1, 1, 1)
                NG1207.TextStrokeTransparency = 0.5
                NG1207.TextWrapped = true
                NG1207.TextXAlignment = Enum.TextXAlignment.Left
                NG1207.Parent = NG1206
                NG1208 = Instance.new('ImageButton')
                NG1208.BackgroundTransparency = 1
                NG1208.BorderSizePixel = 0
                NG1208.Name = dCD('NeebjOhggba')
                NG1208.Position = UDim2.new(0, 10, 0, 3)
                NG1208.Size = UDim2.new(0, 20, 0, 20)
                NG1208.Style = Enum.ButtonStyle.Custom
                NG1208.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=134367382')
                NG1208.Parent = NG1206
                NG1209 = Instance.new('Frame')
                NG1209.BackgroundColor3 = Color3.new(0.0196078, 0.396078, 1)
                NG1209.BorderSizePixel = 0
                NG1209.Name = dCD('PbybeOne')
                NG1209.Size = UDim2.new(0, 3, 1, 0)
                NG1209.Parent = NG1206
                NG1210 = Instance.new('TextButton')
                NG1210.Active = true
                NG1210.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1210.BackgroundTransparency = 0.75
                NG1210.BorderColor3 = Color3.new(0, 0, 0)
                NG1210.BorderSizePixel = 0
                NG1210.Name = dCD('NqqOhggba')
                NG1210.Position = UDim2.new(1, -40, 0, 3)
                NG1210.Selectable = true
                NG1210.Size = UDim2.new(0, 35, 0, 19)
                NG1210.Style = Enum.ButtonStyle.Custom
                NG1210.ZIndex = 2
                NG1210.Font = Enum.Font.ArialBold
                NG1210.FontSize = Enum.FontSize.Size10
                NG1210.Text = dCD('NQQ')
                NG1210.TextColor3 = Color3.new(1, 1, 1)
                NG1210.Parent = NG1206
                NG1211 = Instance.new('TextButton')
                NG1211.Active = true
                NG1211.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1211.BackgroundTransparency = 0.75
                NG1211.BorderColor3 = Color3.new(0, 0, 0)
                NG1211.BorderSizePixel = 0
                NG1211.Name = dCD('ErzbirOhggba')
                NG1211.Position = UDim2.new(0, 90, 0, 3)
                NG1211.Selectable = true
                NG1211.Size = UDim2.new(0, 58, 0, 19)
                NG1211.Style = Enum.ButtonStyle.Custom
                NG1211.Visible = false
                NG1211.ZIndex = 2
                NG1211.Font = Enum.Font.ArialBold
                NG1211.FontSize = Enum.FontSize.Size10
                NG1211.Text = dCD('ERZBIR')
                NG1211.TextColor3 = Color3.new(1, 1, 1)
                NG1211.Parent = NG1206
                NG1212 = Instance.new('Frame')
                NG1212.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1212.BackgroundTransparency = 0.75
                NG1212.BorderSizePixel = 0
                NG1212.Name = dCD('Funqbj')
                NG1212.Position = UDim2.new(0, 0, 1, -1)
                NG1212.Size = UDim2.new(1, 0, 0, 1)
                NG1212.Parent = NG1206
                NG1213 = Instance.new('Frame')
                NG1213.BackgroundTransparency = 1
                NG1213.BorderSizePixel = 0
                NG1213.Name = dCD('Bcgvbaf')
                NG1213.Position = UDim2.new(0, 3, 1, 0)
                NG1213.Size = UDim2.new(1, -3, 0, 0)
                NG1213.ClipsDescendants = true
                NG1213.Parent = NG1206
                NG1214 = Instance.new('Frame')
                NG1214.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1214.BackgroundTransparency = 1
                NG1214.BorderSizePixel = 0
                NG1214.Name = dCD('PbybeBcgvba')
                NG1214.Position = UDim2.new(0, 0, 0, 10)
                NG1214.Size = UDim2.new(1, 0, 0, 25)
                NG1214.Parent = NG1213
                NG1215 = Instance.new('TextLabel')
                NG1215.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1215.BackgroundTransparency = 1
                NG1215.BorderSizePixel = 0
                NG1215.Name = dCD('Ynory')
                NG1215.Size = UDim2.new(0, 70, 0, 25)
                NG1215.Font = Enum.Font.ArialBold
                NG1215.FontSize = Enum.FontSize.Size10
                NG1215.Text = dCD('Pbybe')
                NG1215.TextColor3 = Color3.new(1, 1, 1)
                NG1215.TextStrokeTransparency = 0
                NG1215.TextWrapped = true
                NG1215.TextXAlignment = Enum.TextXAlignment.Left
                NG1215.Parent = NG1214
                NG1216 = Instance.new('Frame')
                NG1216.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1216.BackgroundTransparency = 1
                NG1216.BorderSizePixel = 0
                NG1216.Name = dCD('EVachg')
                NG1216.Position = UDim2.new(0, 35, 0, 0)
                NG1216.Size = UDim2.new(0, 38, 0, 25)
                NG1216.Parent = NG1214
                NG1217 = Instance.new('TextButton')
                NG1217.Active = true
                NG1217.AutoButtonColor = false
                NG1217.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1217.BackgroundTransparency = 1
                NG1217.BorderSizePixel = 0
                NG1217.Selectable = true
                NG1217.Size = UDim2.new(1, 0, 1, 0)
                NG1217.Style = Enum.ButtonStyle.Custom
                NG1217.ZIndex = 2
                NG1217.Font = Enum.Font.Legacy
                NG1217.FontSize = Enum.FontSize.Size8
                NG1217.Text = dCD('')
                NG1217.Parent = NG1216
                NG1218 = Instance.new('ImageLabel')
                NG1218.Active = false
                NG1218.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1218.BackgroundTransparency = 1
                NG1218.BorderSizePixel = 0
                NG1218.Name = dCD('Onpxtebhaq')
                NG1218.Selectable = false
                NG1218.Size = UDim2.new(1, 0, 1, 0)
                NG1218.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1218.Parent = NG1216
                NG1219 = Instance.new('Frame')
                NG1219.BackgroundColor3 = Color3.new(1, 0, 0)
                NG1219.BorderSizePixel = 0
                NG1219.Name = dCD('FryrpgrqVaqvpngbe')
                NG1219.Position = UDim2.new(0, 3, 0, -2)
                NG1219.Size = UDim2.new(1, -3, 0, 2)
                NG1219.Parent = NG1216
                NG1220 = Instance.new('TextBox')
                NG1220.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1220.BackgroundTransparency = 1
                NG1220.BorderSizePixel = 0
                NG1220.Position = UDim2.new(0, 5, 0, 0)
                NG1220.Size = UDim2.new(1, -10, 1, 0)
                NG1220.Font = Enum.Font.ArialBold
                NG1220.FontSize = Enum.FontSize.Size10
                NG1220.Text = dCD('255')
                NG1220.TextColor3 = Color3.new(1, 1, 1)
                NG1220.Parent = NG1216
                NG1221 = Instance.new('Frame')
                NG1221.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1221.BackgroundTransparency = 1
                NG1221.BorderSizePixel = 0
                NG1221.Name = dCD('TVachg')
                NG1221.Position = UDim2.new(0, 72, 0, 0)
                NG1221.Size = UDim2.new(0, 38, 0, 25)
                NG1221.Parent = NG1214
                NG1222 = Instance.new('TextButton')
                NG1222.Active = true
                NG1222.AutoButtonColor = false
                NG1222.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1222.BackgroundTransparency = 1
                NG1222.BorderSizePixel = 0
                NG1222.Selectable = true
                NG1222.Size = UDim2.new(1, 0, 1, 0)
                NG1222.Style = Enum.ButtonStyle.Custom
                NG1222.ZIndex = 2
                NG1222.Font = Enum.Font.Legacy
                NG1222.FontSize = Enum.FontSize.Size8
                NG1222.Text = dCD('')
                NG1222.Parent = NG1221
                NG1223 = Instance.new('ImageLabel')
                NG1223.Active = false
                NG1223.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1223.BackgroundTransparency = 1
                NG1223.BorderSizePixel = 0
                NG1223.Name = dCD('Onpxtebhaq')
                NG1223.Selectable = false
                NG1223.Size = UDim2.new(1, 0, 1, 0)
                NG1223.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1223.Parent = NG1221
                NG1224 = Instance.new('Frame')
                NG1224.BackgroundColor3 = Color3.new(0, 1, 0)
                NG1224.BorderSizePixel = 0
                NG1224.Name = dCD('FryrpgrqVaqvpngbe')
                NG1224.Position = UDim2.new(0, 3, 0, -2)
                NG1224.Size = UDim2.new(1, -3, 0, 2)
                NG1224.Parent = NG1221
                NG1225 = Instance.new('TextBox')
                NG1225.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1225.BackgroundTransparency = 1
                NG1225.BorderSizePixel = 0
                NG1225.Position = UDim2.new(0, 5, 0, 0)
                NG1225.Size = UDim2.new(1, -10, 1, 0)
                NG1225.Font = Enum.Font.ArialBold
                NG1225.FontSize = Enum.FontSize.Size10
                NG1225.Text = dCD('255')
                NG1225.TextColor3 = Color3.new(1, 1, 1)
                NG1225.Parent = NG1221
                NG1226 = Instance.new('Frame')
                NG1226.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1226.BackgroundTransparency = 1
                NG1226.BorderSizePixel = 0
                NG1226.Name = dCD('OVachg')
                NG1226.Position = UDim2.new(0, 109, 0, 0)
                NG1226.Size = UDim2.new(0, 38, 0, 25)
                NG1226.Parent = NG1214
                NG1227 = Instance.new('TextButton')
                NG1227.Active = true
                NG1227.AutoButtonColor = false
                NG1227.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1227.BackgroundTransparency = 1
                NG1227.BorderSizePixel = 0
                NG1227.Selectable = true
                NG1227.Size = UDim2.new(1, 0, 1, 0)
                NG1227.Style = Enum.ButtonStyle.Custom
                NG1227.ZIndex = 2
                NG1227.Font = Enum.Font.Legacy
                NG1227.FontSize = Enum.FontSize.Size8
                NG1227.Text = dCD('')
                NG1227.Parent = NG1226
                NG1228 = Instance.new('ImageLabel')
                NG1228.Active = false
                NG1228.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1228.BackgroundTransparency = 1
                NG1228.BorderSizePixel = 0
                NG1228.Name = dCD('Onpxtebhaq')
                NG1228.Selectable = false
                NG1228.Size = UDim2.new(1, 0, 1, 0)
                NG1228.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1228.Parent = NG1226
                NG1229 = Instance.new('Frame')
                NG1229.BackgroundColor3 = Color3.new(0, 0, 1)
                NG1229.BorderSizePixel = 0
                NG1229.Name = dCD('FryrpgrqVaqvpngbe')
                NG1229.Position = UDim2.new(0, 3, 0, -2)
                NG1229.Size = UDim2.new(1, -3, 0, 2)
                NG1229.Parent = NG1226
                NG1230 = Instance.new('TextBox')
                NG1230.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1230.BackgroundTransparency = 1
                NG1230.BorderSizePixel = 0
                NG1230.Position = UDim2.new(0, 5, 0, 0)
                NG1230.Size = UDim2.new(1, -10, 1, 0)
                NG1230.Font = Enum.Font.ArialBold
                NG1230.FontSize = Enum.FontSize.Size10
                NG1230.Text = dCD('255')
                NG1230.TextColor3 = Color3.new(1, 1, 1)
                NG1230.Parent = NG1226
                NG1231 = Instance.new('ImageButton')
                NG1231.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1231.BackgroundTransparency = 0.40000000596046
                NG1231.BorderSizePixel = 0
                NG1231.Name = dCD('UFICvpxre')
                NG1231.Position = UDim2.new(0, 160, 0, -2)
                NG1231.Size = UDim2.new(0, 27, 0, 27)
                NG1231.Style = Enum.ButtonStyle.Custom
                NG1231.ZIndex = 2
                NG1231.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=141313631')
                NG1231.Parent = NG1214
                NG1232 = Instance.new('Frame')
                NG1232.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1232.BackgroundTransparency = 0.75
                NG1232.BorderSizePixel = 0
                NG1232.Name = dCD('Funqbj')
                NG1232.Position = UDim2.new(0, 0, 1, -2)
                NG1232.Size = UDim2.new(1, 0, 0, 2)
                NG1232.Parent = NG1231
                NG1233 = Instance.new('Frame')
                NG1233.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1233.BackgroundTransparency = 0.5
                NG1233.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1233.BorderSizePixel = 0
                NG1233.Name = dCD('Frcnengbe')
                NG1233.Position = UDim2.new(0, 151, 0, 4)
                NG1233.Size = UDim2.new(0, 4, 0, 4)
                NG1233.Parent = NG1214
                NG1234 = Instance.new('Frame')
                NG1234.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1234.BackgroundTransparency = 0.5
                NG1234.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1234.BorderSizePixel = 0
                NG1234.Name = dCD('Frcnengbe')
                NG1234.Position = UDim2.new(0, 151, 0, 16)
                NG1234.Size = UDim2.new(0, 4, 0, 4)
                NG1234.Parent = NG1214
                NG1235 = Instance.new('Frame')
                NG1235.BackgroundColor3 = Color3.new(0, 0, 0)
                NG1235.BackgroundTransparency = 0.5
                NG1235.BorderColor3 = Color3.new(0.380392, 0.380392, 0.380392)
                NG1235.BorderSizePixel = 0
                NG1235.Name = dCD('Frcnengbe')
                NG1235.Position = UDim2.new(0, 151, 0, 10)
                NG1235.Size = UDim2.new(0, 4, 0, 4)
                NG1235.Parent = NG1214
                NG1236 = Instance.new('Frame')
                NG1236.Active = true
                NG1236.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1236.BackgroundTransparency = 1
                NG1236.BorderSizePixel = 0
                NG1236.Name = dCD('OGEbgngrGbbyTHV')
                NG1236.Position = UDim2.new(0, 0, 0, 280)
                NG1236.Size = UDim2.new(0, 245, 0, 90)
                NG1236.Draggable = true
                NG1236.Parent = NG1
                NG1237 = Instance.new('Frame')
                NG1237.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1237.BackgroundTransparency = 1
                NG1237.BorderSizePixel = 0
                NG1237.Name = dCD('CvibgBcgvba')
                NG1237.Position = UDim2.new(0, 0, 0, 30)
                NG1237.Size = UDim2.new(0, 0, 0, 0)
                NG1237.Parent = NG1236
                NG1238 = Instance.new('Frame')
                NG1238.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1238.BackgroundTransparency = 1
                NG1238.BorderSizePixel = 0
                NG1238.Name = dCD('Pragre')
                NG1238.Position = UDim2.new(0, 50, 0, 0)
                NG1238.Size = UDim2.new(0, 70, 0, 25)
                NG1238.Parent = NG1237
                NG1239 = Instance.new('Frame')
                NG1239.BorderSizePixel = 0
                NG1239.Name = dCD('FryrpgrqVaqvpngbe')
                NG1239.Position = UDim2.new(0, 6, 0, -2)
                NG1239.Size = UDim2.new(1, -5, 0, 2)
                NG1239.Parent = NG1238
                NG1240 = Instance.new('TextButton')
                NG1240.Active = true
                NG1240.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1240.BackgroundTransparency = 1
                NG1240.BorderSizePixel = 0
                NG1240.Name = dCD('Ohggba')
                NG1240.Position = UDim2.new(0, 5, 0, 0)
                NG1240.Selectable = true
                NG1240.Size = UDim2.new(1, -10, 1, 0)
                NG1240.Style = Enum.ButtonStyle.Custom
                NG1240.ZIndex = 2
                NG1240.Font = Enum.Font.Legacy
                NG1240.FontSize = Enum.FontSize.Size8
                NG1240.Text = dCD('')
                NG1240.TextTransparency = 1
                NG1240.Parent = NG1238
                NG1241 = Instance.new('ImageLabel')
                NG1241.Active = false
                NG1241.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1241.BackgroundTransparency = 1
                NG1241.BorderSizePixel = 0
                NG1241.Name = dCD('Onpxtebhaq')
                NG1241.Selectable = false
                NG1241.Size = UDim2.new(1, 0, 1, 0)
                NG1241.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127774197')
                NG1241.Parent = NG1238
                NG1242 = Instance.new('TextLabel')
                NG1242.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1242.BackgroundTransparency = 1
                NG1242.BorderSizePixel = 0
                NG1242.Name = dCD('Ynory')
                NG1242.Size = UDim2.new(1, 0, 1, 0)
                NG1242.Font = Enum.Font.ArialBold
                NG1242.FontSize = Enum.FontSize.Size10
                NG1242.Text = dCD('PRAGRE')
                NG1242.TextColor3 = Color3.new(1, 1, 1)
                NG1242.Parent = NG1238
                NG1243 = Instance.new('Frame')
                NG1243.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1243.BackgroundTransparency = 1
                NG1243.BorderSizePixel = 0
                NG1243.Name = dCD('Ybpny')
                NG1243.Position = UDim2.new(0, 115, 0, 0)
                NG1243.Size = UDim2.new(0, 70, 0, 25)
                NG1243.Parent = NG1237
                NG1244 = Instance.new('Frame')
                NG1244.BackgroundTransparency = 1
                NG1244.BorderSizePixel = 0
                NG1244.Name = dCD('FryrpgrqVaqvpngbe')
                NG1244.Position = UDim2.new(0, 6, 0, -2)
                NG1244.Size = UDim2.new(1, -5, 0, 2)
                NG1244.Parent = NG1243
                NG1245 = Instance.new('TextButton')
                NG1245.Active = true
                NG1245.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1245.BackgroundTransparency = 1
                NG1245.BorderSizePixel = 0
                NG1245.Name = dCD('Ohggba')
                NG1245.Position = UDim2.new(0, 5, 0, 0)
                NG1245.Selectable = true
                NG1245.Size = UDim2.new(1, -10, 1, 0)
                NG1245.Style = Enum.ButtonStyle.Custom
                NG1245.ZIndex = 2
                NG1245.Font = Enum.Font.Legacy
                NG1245.FontSize = Enum.FontSize.Size8
                NG1245.Text = dCD('')
                NG1245.TextTransparency = 1
                NG1245.Parent = NG1243
                NG1246 = Instance.new('ImageLabel')
                NG1246.Active = false
                NG1246.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1246.BackgroundTransparency = 1
                NG1246.BorderSizePixel = 0
                NG1246.Name = dCD('Onpxtebhaq')
                NG1246.Selectable = false
                NG1246.Size = UDim2.new(1, 0, 1, 0)
                NG1246.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1246.Parent = NG1243
                NG1247 = Instance.new('TextLabel')
                NG1247.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1247.BackgroundTransparency = 1
                NG1247.BorderSizePixel = 0
                NG1247.Name = dCD('Ynory')
                NG1247.Size = UDim2.new(1, 0, 1, 0)
                NG1247.Font = Enum.Font.ArialBold
                NG1247.FontSize = Enum.FontSize.Size10
                NG1247.Text = dCD('YBPNY')
                NG1247.TextColor3 = Color3.new(1, 1, 1)
                NG1247.Parent = NG1243
                NG1248 = Instance.new('Frame')
                NG1248.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1248.BackgroundTransparency = 1
                NG1248.BorderSizePixel = 0
                NG1248.Name = dCD('Ynfg')
                NG1248.Position = UDim2.new(0, 180, 0, 0)
                NG1248.Size = UDim2.new(0, 70, 0, 25)
                NG1248.Parent = NG1237
                NG1249 = Instance.new('Frame')
                NG1249.BackgroundTransparency = 1
                NG1249.BorderSizePixel = 0
                NG1249.Name = dCD('FryrpgrqVaqvpngbe')
                NG1249.Position = UDim2.new(0, 6, 0, -2)
                NG1249.Size = UDim2.new(1, -5, 0, 2)
                NG1249.Parent = NG1248
                NG1250 = Instance.new('TextButton')
                NG1250.Active = true
                NG1250.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1250.BackgroundTransparency = 1
                NG1250.BorderSizePixel = 0
                NG1250.Name = dCD('Ohggba')
                NG1250.Position = UDim2.new(0, 5, 0, 0)
                NG1250.Selectable = true
                NG1250.Size = UDim2.new(1, -10, 1, 0)
                NG1250.Style = Enum.ButtonStyle.Custom
                NG1250.ZIndex = 2
                NG1250.Font = Enum.Font.Legacy
                NG1250.FontSize = Enum.FontSize.Size8
                NG1250.Text = dCD('')
                NG1250.TextTransparency = 1
                NG1250.Parent = NG1248
                NG1251 = Instance.new('ImageLabel')
                NG1251.Active = false
                NG1251.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1251.BackgroundTransparency = 1
                NG1251.BorderSizePixel = 0
                NG1251.Name = dCD('Onpxtebhaq')
                NG1251.Selectable = false
                NG1251.Size = UDim2.new(1, 0, 1, 0)
                NG1251.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1251.Parent = NG1248
                NG1252 = Instance.new('TextLabel')
                NG1252.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1252.BackgroundTransparency = 1
                NG1252.BorderSizePixel = 0
                NG1252.Name = dCD('Ynory')
                NG1252.Size = UDim2.new(1, 0, 1, 0)
                NG1252.Font = Enum.Font.ArialBold
                NG1252.FontSize = Enum.FontSize.Size10
                NG1252.Text = dCD('YNFG')
                NG1252.TextColor3 = Color3.new(1, 1, 1)
                NG1252.Parent = NG1248
                NG1253 = Instance.new('Frame')
                NG1253.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1253.BackgroundTransparency = 1
                NG1253.BorderSizePixel = 0
                NG1253.Name = dCD('Ynory')
                NG1253.Size = UDim2.new(0, 50, 0, 25)
                NG1253.Parent = NG1237
                NG1254 = Instance.new('TextLabel')
                NG1254.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1254.BackgroundTransparency = 1
                NG1254.BorderSizePixel = 0
                NG1254.Size = UDim2.new(1, 0, 1, 0)
                NG1254.Font = Enum.Font.ArialBold
                NG1254.FontSize = Enum.FontSize.Size10
                NG1254.Text = dCD('Cvibg')
                NG1254.TextColor3 = Color3.new(1, 1, 1)
                NG1254.TextStrokeTransparency = 0
                NG1254.TextWrapped = true
                NG1254.Parent = NG1253
                NG1255 = Instance.new('Frame')
                NG1255.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1255.BackgroundTransparency = 1
                NG1255.BorderSizePixel = 0
                NG1255.Name = dCD('Gvgyr')
                NG1255.Size = UDim2.new(1, 0, 0, 20)
                NG1255.Parent = NG1236
                NG1256 = Instance.new('Frame')
                NG1256.BackgroundColor3 = Color3.new(0.294118, 0.592157, 0.294118)
                NG1256.BorderSizePixel = 0
                NG1256.Name = dCD('PbybeOne')
                NG1256.Position = UDim2.new(0, 5, 0, -3)
                NG1256.Size = UDim2.new(1, -5, 0, 2)
                NG1256.Parent = NG1255
                NG1257 = Instance.new('TextLabel')
                NG1257.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1257.BackgroundTransparency = 1
                NG1257.BorderSizePixel = 0
                NG1257.Name = dCD('Ynory')
                NG1257.Position = UDim2.new(0, 10, 0, 1)
                NG1257.Size = UDim2.new(1, -10, 1, 0)
                NG1257.Font = Enum.Font.ArialBold
                NG1257.FontSize = Enum.FontSize.Size10
                NG1257.Text = dCD('EBGNGR GBBY')
                NG1257.TextColor3 = Color3.new(1, 1, 1)
                NG1257.TextStrokeTransparency = 0
                NG1257.TextWrapped = true
                NG1257.TextXAlignment = Enum.TextXAlignment.Left
                NG1257.Parent = NG1255
                NG1258 = Instance.new('TextLabel')
                NG1258.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1258.BackgroundTransparency = 1
                NG1258.BorderSizePixel = 0
                NG1258.Name = dCD('S3KFvtangher')
                NG1258.Position = UDim2.new(0, 10, 0, 1)
                NG1258.Size = UDim2.new(1, -10, 1, 0)
                NG1258.Font = Enum.Font.ArialBold
                NG1258.FontSize = Enum.FontSize.Size14
                NG1258.Text = dCD('S3K')
                NG1258.TextColor3 = Color3.new(1, 1, 1)
                NG1258.TextStrokeTransparency = 0.89999997615814
                NG1258.TextWrapped = true
                NG1258.TextXAlignment = Enum.TextXAlignment.Right
                NG1258.Parent = NG1255
                NG1259 = Instance.new('Frame')
                NG1259.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1259.BackgroundTransparency = 1
                NG1259.BorderSizePixel = 0
                NG1259.Name = dCD('VaperzragBcgvba')
                NG1259.Position = UDim2.new(0, 0, 0, 65)
                NG1259.Size = UDim2.new(0, 0, 0, 0)
                NG1259.Parent = NG1236
                NG1260 = Instance.new('Frame')
                NG1260.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1260.BackgroundTransparency = 1
                NG1260.BorderSizePixel = 0
                NG1260.Name = dCD('Vaperzrag')
                NG1260.Position = UDim2.new(0, 70, 0, 0)
                NG1260.Size = UDim2.new(0, 50, 0, 25)
                NG1260.Parent = NG1259
                NG1261 = Instance.new('Frame')
                NG1261.BorderSizePixel = 0
                NG1261.Name = dCD('FryrpgrqVaqvpngbe')
                NG1261.Position = UDim2.new(0, 5, 0, -2)
                NG1261.Size = UDim2.new(1, -4, 0, 2)
                NG1261.Parent = NG1260
                NG1262 = Instance.new('TextBox')
                NG1262.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1262.BackgroundTransparency = 1
                NG1262.BorderSizePixel = 0
                NG1262.Position = UDim2.new(0, 5, 0, 0)
                NG1262.Size = UDim2.new(1, -10, 1, 0)
                NG1262.ZIndex = 2
                NG1262.Font = Enum.Font.ArialBold
                NG1262.FontSize = Enum.FontSize.Size10
                NG1262.Text = dCD('15')
                NG1262.TextColor3 = Color3.new(1, 1, 1)
                NG1262.Parent = NG1260
                NG1263 = Instance.new('ImageLabel')
                NG1263.Active = false
                NG1263.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1263.BackgroundTransparency = 1
                NG1263.BorderSizePixel = 0
                NG1263.Name = dCD('Onpxtebhaq')
                NG1263.Selectable = false
                NG1263.Size = UDim2.new(1, 0, 1, 0)
                NG1263.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1263.Parent = NG1260
                NG1264 = Instance.new('Frame')
                NG1264.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1264.BackgroundTransparency = 1
                NG1264.BorderSizePixel = 0
                NG1264.Name = dCD('Ynory')
                NG1264.Size = UDim2.new(0, 75, 0, 25)
                NG1264.Parent = NG1259
                NG1265 = Instance.new('TextLabel')
                NG1265.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1265.BackgroundTransparency = 1
                NG1265.BorderSizePixel = 0
                NG1265.Size = UDim2.new(1, 0, 1, 0)
                NG1265.Font = Enum.Font.ArialBold
                NG1265.FontSize = Enum.FontSize.Size10
                NG1265.Text = dCD('Vaperzrag')
                NG1265.TextColor3 = Color3.new(1, 1, 1)
                NG1265.TextStrokeTransparency = 0
                NG1265.TextWrapped = true
                NG1265.Parent = NG1264
                NG1266 = Instance.new('Frame')
                NG1266.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1266.BackgroundTransparency = 1
                NG1266.BorderSizePixel = 0
                NG1266.Name = dCD('Vasb')
                NG1266.Position = UDim2.new(0, 5, 0, 100)
                NG1266.Size = UDim2.new(1, -5, 0, 60)
                NG1266.Visible = false
                NG1266.Parent = NG1236
                NG1267 = Instance.new('Frame')
                NG1267.BackgroundColor3 = Color3.new(0.294118, 0.592157, 0.294118)
                NG1267.BorderSizePixel = 0
                NG1267.Name = dCD('PbybeOne')
                NG1267.Size = UDim2.new(1, 0, 0, 2)
                NG1267.Parent = NG1266
                NG1268 = Instance.new('TextLabel')
                NG1268.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1268.BackgroundTransparency = 1
                NG1268.BorderSizePixel = 0
                NG1268.Name = dCD('Ynory')
                NG1268.Position = UDim2.new(0, 10, 0, 2)
                NG1268.Size = UDim2.new(1, -10, 0, 20)
                NG1268.Font = Enum.Font.ArialBold
                NG1268.FontSize = Enum.FontSize.Size10
                NG1268.Text = dCD('FRYRPGVBA VASB')
                NG1268.TextColor3 = Color3.new(1, 1, 1)
                NG1268.TextStrokeTransparency = 0
                NG1268.TextWrapped = true
                NG1268.TextXAlignment = Enum.TextXAlignment.Left
                NG1268.Parent = NG1266
                NG1269 = Instance.new('Frame')
                NG1269.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1269.BackgroundTransparency = 1
                NG1269.BorderSizePixel = 0
                NG1269.Name = dCD('EbgngvbaVasb')
                NG1269.Position = UDim2.new(0, 0, 0, 30)
                NG1269.Size = UDim2.new(0, 0, 0, 0)
                NG1269.Parent = NG1266
                NG1270 = Instance.new('TextLabel')
                NG1270.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1270.BackgroundTransparency = 1
                NG1270.BorderSizePixel = 0
                NG1270.Size = UDim2.new(0, 75, 0, 25)
                NG1270.Font = Enum.Font.ArialBold
                NG1270.FontSize = Enum.FontSize.Size10
                NG1270.Text = dCD('Ebgngvba')
                NG1270.TextColor3 = Color3.new(1, 1, 1)
                NG1270.TextStrokeTransparency = 0
                NG1270.TextWrapped = true
                NG1270.Parent = NG1269
                NG1271 = Instance.new('Frame')
                NG1271.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1271.BackgroundTransparency = 1
                NG1271.BorderSizePixel = 0
                NG1271.Name = dCD('K')
                NG1271.Position = UDim2.new(0, 70, 0, 0)
                NG1271.Size = UDim2.new(0, 50, 0, 25)
                NG1271.Parent = NG1269
                NG1272 = Instance.new('TextBox')
                NG1272.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1272.BackgroundTransparency = 1
                NG1272.BorderSizePixel = 0
                NG1272.Position = UDim2.new(0, 5, 0, 0)
                NG1272.Size = UDim2.new(1, -10, 1, 0)
                NG1272.ZIndex = 2
                NG1272.Font = Enum.Font.ArialBold
                NG1272.FontSize = Enum.FontSize.Size10
                NG1272.Text = dCD('')
                NG1272.TextColor3 = Color3.new(1, 1, 1)
                NG1272.Parent = NG1271
                NG1273 = Instance.new('TextButton')
                NG1273.Active = true
                NG1273.AutoButtonColor = false
                NG1273.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1273.BackgroundTransparency = 1
                NG1273.BorderSizePixel = 0
                NG1273.Selectable = true
                NG1273.Size = UDim2.new(1, 0, 1, 0)
                NG1273.Style = Enum.ButtonStyle.Custom
                NG1273.ZIndex = 3
                NG1273.Font = Enum.Font.Legacy
                NG1273.FontSize = Enum.FontSize.Size8
                NG1273.Text = dCD('')
                NG1273.Parent = NG1271
                NG1274 = Instance.new('ImageLabel')
                NG1274.Active = false
                NG1274.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1274.BackgroundTransparency = 1
                NG1274.BorderSizePixel = 0
                NG1274.Name = dCD('Onpxtebhaq')
                NG1274.Selectable = false
                NG1274.Size = UDim2.new(1, 0, 1, 0)
                NG1274.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1274.Parent = NG1271
                NG1275 = Instance.new('Frame')
                NG1275.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1275.BackgroundTransparency = 1
                NG1275.BorderSizePixel = 0
                NG1275.Name = dCD('L')
                NG1275.Position = UDim2.new(0, 117, 0, 0)
                NG1275.Size = UDim2.new(0, 50, 0, 25)
                NG1275.Parent = NG1269
                NG1276 = Instance.new('TextBox')
                NG1276.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1276.BackgroundTransparency = 1
                NG1276.BorderSizePixel = 0
                NG1276.Position = UDim2.new(0, 5, 0, 0)
                NG1276.Size = UDim2.new(1, -10, 1, 0)
                NG1276.ZIndex = 2
                NG1276.Font = Enum.Font.ArialBold
                NG1276.FontSize = Enum.FontSize.Size10
                NG1276.Text = dCD('')
                NG1276.TextColor3 = Color3.new(1, 1, 1)
                NG1276.Parent = NG1275
                NG1277 = Instance.new('TextButton')
                NG1277.Active = true
                NG1277.AutoButtonColor = false
                NG1277.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1277.BackgroundTransparency = 1
                NG1277.BorderSizePixel = 0
                NG1277.Selectable = true
                NG1277.Size = UDim2.new(1, 0, 1, 0)
                NG1277.Style = Enum.ButtonStyle.Custom
                NG1277.ZIndex = 3
                NG1277.Font = Enum.Font.Legacy
                NG1277.FontSize = Enum.FontSize.Size8
                NG1277.Text = dCD('')
                NG1277.Parent = NG1275
                NG1278 = Instance.new('ImageLabel')
                NG1278.Active = false
                NG1278.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1278.BackgroundTransparency = 1
                NG1278.BorderSizePixel = 0
                NG1278.Name = dCD('Onpxtebhaq')
                NG1278.Selectable = false
                NG1278.Size = UDim2.new(1, 0, 1, 0)
                NG1278.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1278.Parent = NG1275
                NG1279 = Instance.new('Frame')
                NG1279.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1279.BackgroundTransparency = 1
                NG1279.BorderSizePixel = 0
                NG1279.Name = dCD('M')
                NG1279.Position = UDim2.new(0, 164, 0, 0)
                NG1279.Size = UDim2.new(0, 50, 0, 25)
                NG1279.Parent = NG1269
                NG1280 = Instance.new('TextBox')
                NG1280.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1280.BackgroundTransparency = 1
                NG1280.BorderSizePixel = 0
                NG1280.Position = UDim2.new(0, 5, 0, 0)
                NG1280.Size = UDim2.new(1, -10, 1, 0)
                NG1280.ZIndex = 2
                NG1280.Font = Enum.Font.ArialBold
                NG1280.FontSize = Enum.FontSize.Size10
                NG1280.Text = dCD('')
                NG1280.TextColor3 = Color3.new(1, 1, 1)
                NG1280.Parent = NG1279
                NG1281 = Instance.new('TextButton')
                NG1281.Active = true
                NG1281.AutoButtonColor = false
                NG1281.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1281.BackgroundTransparency = 1
                NG1281.BorderSizePixel = 0
                NG1281.Selectable = true
                NG1281.Size = UDim2.new(1, 0, 1, 0)
                NG1281.Style = Enum.ButtonStyle.Custom
                NG1281.ZIndex = 3
                NG1281.Font = Enum.Font.Legacy
                NG1281.FontSize = Enum.FontSize.Size8
                NG1281.Text = dCD('')
                NG1281.Parent = NG1279
                NG1282 = Instance.new('ImageLabel')
                NG1282.Active = false
                NG1282.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1282.BackgroundTransparency = 1
                NG1282.BorderSizePixel = 0
                NG1282.Name = dCD('Onpxtebhaq')
                NG1282.Selectable = false
                NG1282.Size = UDim2.new(1, 0, 1, 0)
                NG1282.Image = dCD('uggc://jjj.eboybk.pbz/nffrg/?vq=127772502')
                NG1282.Parent = NG1279
                NG1283 = Instance.new('Frame')
                NG1283.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1283.BackgroundTransparency = 1
                NG1283.BorderSizePixel = 0
                NG1283.Name = dCD('Punatrf')
                NG1283.Position = UDim2.new(0, 5, 0, 100)
                NG1283.Size = UDim2.new(1, -5, 0, 20)
                NG1283.Parent = NG1236
                NG1284 = Instance.new('Frame')
                NG1284.BackgroundColor3 = Color3.new(0.294118, 0.592157, 0.294118)
                NG1284.BorderSizePixel = 0
                NG1284.Name = dCD('PbybeOne')
                NG1284.Size = UDim2.new(1, 0, 0, 2)
                NG1284.Parent = NG1283
                NG1285 = Instance.new('TextLabel')
                NG1285.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1285.BackgroundTransparency = 1
                NG1285.BorderSizePixel = 0
                NG1285.Name = dCD('Grkg')
                NG1285.Position = UDim2.new(0, 10, 0, 2)
                NG1285.Size = UDim2.new(1, -10, 0, 20)
                NG1285.Font = Enum.Font.ArialBold
                NG1285.FontSize = Enum.FontSize.Size10
                NG1285.Text = dCD('ebgngrq 0 qrterrf')
                NG1285.TextColor3 = Color3.new(1, 1, 1)
                NG1285.TextStrokeTransparency = 0.5
                NG1285.TextWrapped = true
                NG1285.TextXAlignment = Enum.TextXAlignment.Right
                NG1285.Parent = NG1283
                NG1286 = Instance.new('TextLabel')
                NG1286.BackgroundColor3 = Color3.new(0.639216, 0.635294, 0.647059)
                NG1286.BackgroundTransparency = 1
                NG1286.BorderSizePixel = 0
                NG1286.Name = dCD('RqtrFryrpgvbaGvc')
                NG1286.Position = UDim2.new(0, 10, 0, 2)
                NG1286.Size = UDim2.new(1, -10, 0, 20)
                NG1286.Font = Enum.Font.ArialBold
                NG1286.FontSize = Enum.FontSize.Size10
                NG1286.Text = dCD('Cerff G sbe rqtr fryrpgvba.')
                NG1286.TextColor3 = Color3.new(1, 1, 1)
                NG1286.TextStrokeTransparency = 0.5
                NG1286.TextWrapped = true
                NG1286.TextXAlignment = Enum.TextXAlignment.Left
                NG1286.Parent = NG1283
                DFb100j = NG1
            end

            wait(0.1)

            ActiveKeys = {}
            CurrentTool = nil
            equipTool = function(Enu)
                if CurrentTool ~= Enu then
                    if CurrentTool and CurrentTool.Listeners.Unequipped then
                        CurrentTool.Listeners.Unequipped()
                    end

                    CurrentTool = Enu

                    if ToolType == 'tool' then
                        Tool.Handle.BrickColor = Enu.Color
                    end

                    for fChy5, DNPo4Wqt in pairs(Dock.ToolButtons:GetChildren())do
                        DNPo4Wqt.BackgroundTransparency = 1
                    end

                    local YJ31A6_ = Dock.ToolButtons:FindFirstChild(getToolName(Enu) .. 'Button')

                    if YJ31A6_ then
                        YJ31A6_.BackgroundTransparency = 0
                    end
                    if Enu.Listeners.Equipped then
                        Enu.Listeners.Equipped()
                    end
                end
            end
            cloneSelection = function()
                if #Selection.Items > 0 then
                    local S8Kb = {}

                    for P32, xj1 in pairs(Selection.Items)do
                        local rd = xj1.Clone(xj1)

                        rd.Parent = Workspace

                        table.insert(S8Kb, rd)
                    end

                    Selection.clear(Selection)

                    for wtX, Y in pairs(S8Kb)do
                        Selection.add(Selection, Y)
                    end

                    local UMeQ = {
                        copies = S8Kb,
                        unapply = function(EHSv)
                            for Ati7Oq, Tqo2jko in pairs(EHSv.copies)do
                                if Tqo2jko then
                                    Tqo2jko.Parent = nil
                                end
                            end
                        end,
                        apply = function(uJz)
                            Selection.clear(Selection)

                            for qVvlt, aGkESg in pairs(uJz.copies)do
                                if aGkESg then
                                    aGkESg.Parent = Workspace

                                    aGkESg.MakeJoints(aGkESg)
                                    Selection.add(Selection, aGkESg)
                                end
                            end
                        end,
                    }

                    History.add(History, UMeQ)

                    local AGhdl3 = RbxUtility.Create'Sound'{
                        Name = 'BTActionCompletionSound',
                        Pitch = 1.5,
                        SoundId = Assets.ActionCompletionSound,
                        Volume = 1,
                        Parent = Player or SoundService,
                    }

                    AGhdl3.Play(AGhdl3)
                    AGhdl3.Destroy(AGhdl3)
                    coroutine.wrap(function()
                        for KXnNMI7S = 1, 0.5, -0.1 do
                            for fL, Oj in pairs(SelectionBoxes)do
                                Oj.Transparency = KXnNMI7S
                            end

                            wait(0.1)
                        end
                    end)()
                end
            end
            deleteSelection = function()
                if #Selection.Items == 0 then
                    return
                end

                local pGR0Ig = Support.CloneTable(Selection.Items)
                local bBq = {
                    targets = pGR0Ig,
                    parents = {},
                    apply = function(i)
                        for yCkt, irs579 in pairs(i.targets)do
                            if irs579 then
                                irs579.Parent = nil
                            end
                        end
                    end,
                    unapply = function(ptD)
                        Selection.clear(Selection)

                        for mj_P, w in pairs(ptD.targets)do
                            if w then
                                w.Parent = ptD.parents[w]

                                w.MakeJoints(w)
                                Selection.add(Selection, w)
                            end
                        end
                    end,
                }

                for Nge6L, aWnFL1 in pairs(pGR0Ig)do
                    bBq.parents[aWnFL1] = aWnFL1.Parent
                    aWnFL1.Parent = nil
                end

                History.add(History, bBq)
            end
            prismSelect = function()
                if #Selection.Items == 0 then
                    return
                end

                local D = {}
                local R = {}
                local u51 = Support.GetAllDescendants(Workspace)

                for WSlpP, xSMd in pairs(u51)do
                    if xSMd.IsA(xSMd, 'BasePart') and not Selection.find(Selection, xSMd) then
                        table.insert(R, xSMd)
                    end
                end

                local O0NUxa = {}

                for vYmD9ed, Cez in pairs(R)do
                    O0NUxa[Cez] = 0

                    for vYmD9ed, NvSMm in pairs(Selection.Items)do
                        local wRpQf = NvSMm.CFrame:toObjectSpace(Cez.CFrame)
                        local ed9P = NvSMm.Size / 2

                        if (math.abs(wRpQf.x) <= ed9P.x) and (math.abs(wRpQf.y) <= ed9P.y) and (math.abs(wRpQf.z) <= ed9P.z) then
                            O0NUxa[Cez] = O0NUxa[Cez] + 1
                        end
                    end
                end

                local RngfRQ6g = Support.CloneTable(Selection.Items)
                local F = {}

                for NJ5, bpAJ in pairs(RngfRQ6g)do
                    F[bpAJ] = bpAJ.Parent
                    bpAJ.Parent = nil
                end
                for UdPyHc, SciVUxEq in pairs(R)do
                    if O0NUxa[SciVUxEq] > 0 then
                        Selection.add(Selection, SciVUxEq)
                    end
                end

                History.add(History, {
                    selection_parts = RngfRQ6g,
                    selection_part_parents = F,
                    new_selection = Support.CloneTable(Selection.Items),
                    apply = function(Te)
                        Selection.clear(Selection)

                        for WN, f in pairs(Te.selection_parts)do
                            f.Parent = nil
                        end
                        for FleDs3, LP in pairs(Te.new_selection)do
                            Selection.add(Selection, LP)
                        end
                    end,
                    unapply = function(RLovoVo)
                        Selection.clear(Selection)

                        for Je6Srpf8, p in pairs(RLovoVo.selection_parts)do
                            p.Parent = RLovoVo.selection_part_parents[p]

                            Selection.add(Selection, p)
                        end
                    end,
                })
            end
            toggleHelp = function()
                if not Dock then
                    return
                end

                Dock.HelpInfo.Visible = not Dock.HelpInfo.Visible
            end
            getToolName = function(Z0RFr5F)
                local _Myb = Support.FindTableOccurrences(Tools, Z0RFr5F)

                if #_Myb > 0 then
                    return _Myb[1]
                end
            end
            isSelectable = function(Zq)
                if not Zq or not Zq.Parent or not Zq.IsA(Zq, 'BasePart') or Zq.Locked or Selection.find(Selection, Zq) or Groups.IsPartIgnored(Groups, Zq) then
                    return false
                end

                return true
            end
            IsVersionOutdated = function()
                local TKS = MarketplaceService.GetProductInfo(MarketplaceService, ToolAssetID, Enum.InfoType.Asset)
                local DUSiwPZm = TKS.Description:match('%[Version: (.+)%]')
                local QSjpjN5 = '1.4.5'

                if DUSiwPZm ~= QSjpjN5 then
                    return true
                end

                return false
            end
            HttpAvailable, HttpAvailabilityError = HttpInterface.Test()

            if ToolType == 'plugin' then
                HttpService.Changed:Connect(function()
                    HttpAvailable, HttpAvailabilityError = HttpInterface.WaitForChild(HttpInterface, 'Test'):InvokeServer()
                end)
            end

            local XL_ = false

            ShowStartupNotifications = function()
                if XL_ then
                    return
                end

                XL_ = true

                local M3ptD1Cf = DFb100j.BTStartupNotificationContainer:Clone()

                M3ptD1Cf.WelcomeFex.Visible = true

                if not HttpAvailable and HttpAvailabilityError == 'Http requests are not enabled' then
                    M3ptD1Cf.HttpDisabledWarning.Visible = true
                end
                if not HttpAvailable and HttpAvailabilityError == 'Http requests can only be executed by game server' then
                    M3ptD1Cf.SoloWarning.Visible = true
                end
                if HttpAvailable then
                    M3ptD1Cf.HttpEnabledWarning.Visible = true
                end
                if IsVersionOutdated() then
                    if ToolType == 'tool' then
                        M3ptD1Cf.ToolUpdateNotification.Visible = true
                    elseif ToolType == 'plugin' then
                        M3ptD1Cf.PluginUpdateNotification.Visible = true
                    end
                end

                local function B()
                    local d = 0
                    local z0 = M3ptD1Cf.GetChildren(M3ptD1Cf)

                    for I_bHR9bD, YJha in pairs(z0)do
                        YJha.Position = UDim2.new(YJha.Position.X.Scale, YJha.Position.X.Offset, YJha.Position.Y.Scale, (d == 0) and 0 or (d + 10))

                        local g9QyV = YJha.Position.Y.Offset + YJha.Size.Y.Offset

                        if YJha.Visible and g9QyV > d then
                            d = g9QyV
                        end
                    end

                    M3ptD1Cf.Size = UDim2.new(M3ptD1Cf.Size.X.Scale, M3ptD1Cf.Size.X.Offset, 0, d)
                end

                B()

                local jv = (UI.AbsoluteSize.x - M3ptD1Cf.Size.X.Offset) / 2
                local oTpq = UI.AbsoluteSize.y + M3ptD1Cf.Size.Y.Offset

                M3ptD1Cf.Position = UDim2.new(0, jv, 0, oTpq)
                M3ptD1Cf.Parent = UI

                local function CjPV()
                    local An_hQ3m = (UI.AbsoluteSize.y - M3ptD1Cf.Size.Y.Offset) / 2

                    M3ptD1Cf.TweenPosition(M3ptD1Cf, UDim2.new(0, jv, 0, An_hQ3m), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2)
                end

                CjPV()

                for S, eMj5b1DD in pairs(M3ptD1Cf.GetChildren(M3ptD1Cf))do
                    if eMj5b1DD.Visible then
                        eMj5b1DD.OKButton.MouseButton1Click:Connect(function()
                            eMj5b1DD.Destroy(eMj5b1DD)
                            B()
                            CjPV()
                        end)
                        eMj5b1DD.HelpButton.MouseButton1Click:Connect(function()
                            eMj5b1DD.HelpButton:Destroy()
                            eMj5b1DD.ButtonSeparator:Destroy()
                            eMj5b1DD.OKButton:TweenSize(UDim2.new(1, 0, 0, 22), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2)
                            eMj5b1DD.Notice:Destroy()

                            eMj5b1DD.Help.Visible = true

                            eMj5b1DD.TweenSize(eMj5b1DD, UDim2.new(eMj5b1DD.Size.X.Scale, eMj5b1DD.Size.X.Offset, eMj5b1DD.Size.Y.Scale, eMj5b1DD.Help.NotificationSize.Value), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true, function(
                            )
                                B()
                                CjPV()
                            end)
                        end)
                    end
                end

                if ToolType == 'tool' then
                    Tool.Unequipped:Connect(function()
                        if M3ptD1Cf.Visible then
                            M3ptD1Cf.Visible = false

                            M3ptD1Cf.Destroy(M3ptD1Cf)
                        end
                    end)
                end
            end
            clicking = false
            selecting = false
            click_x, click_y = 0, 0
            override_selection = false
            SelectionBoxes = {}
            SelectionExistenceListeners = {}
            SelectionBoxColor = BrickColor.new('Cyan')
            TargetBox = nil
            Connections = {}
            UI = RbxUtility.Create'ScreenGui'{
                Name = 'Building Tools by F3X (UI)',
            }

            if ToolType == 'tool' then
                UI.Parent = GUIContainer
            elseif ToolType == 'plugin' then
                UI.Parent = CoreGui
            end

            Dragger = nil
            updateSelectionBoxColor = function()
                for lDdmS, k1kp870h in pairs(SelectionBoxes)do
                    k1kp870h.Color = SelectionBoxColor
                end
            end
            Selection = {
                Items = {},
                Changed = RbxUtility.CreateSignal(),
                ItemAdded = RbxUtility.CreateSignal(),
                ItemRemoved = RbxUtility.CreateSignal(),
                Cleared = RbxUtility.CreateSignal(),
                find = function(Xfv1_F, F74YQ)
                    for SHlZ8Rw, FxP66 in pairs(Xfv1_F.Items)do
                        if FxP66 == F74YQ then
                            return SHlZ8Rw
                        end
                    end
                end,
                add = function(y, Ou)
                    if not isSelectable(Ou) then
                        return false
                    end
                    if #Support.FindTableOccurrences(y.Items, Ou) > 0 then
                        return false
                    end

                    table.insert(y.Items, Ou)

                    if ToolType == 'tool' then
                        SelectionBoxes[Ou] = Instance.new('SelectionBox', UI)
                        SelectionBoxes[Ou].Name = 'BTSelectionBox'
                        SelectionBoxes[Ou].Color = SelectionBoxColor
                        SelectionBoxes[Ou].Adornee = Ou
                        SelectionBoxes[Ou].LineThickness = 0.05
                        SelectionBoxes[Ou].Transparency = 0.5
                    end
                    if Ou == TargetBox.Adornee then
                        TargetBox.Adornee = nil
                    end

                    SelectionExistenceListeners[Ou] = Ou.AncestryChanged:Connect(function(
                        AbN,
                        lINgqxG1
                    )
                        if lINgqxG1 == nil then
                            Selection.remove(Selection, Ou)
                        end
                    end)

                    y.focus(y, Ou)
                    y.ItemAdded:fire(Ou)
                    y.Changed:fire()
                end,
                remove = function(Tz4j, vUctRT, ry0d9cxF)
                    if not Tz4j.find(Tz4j, vUctRT) then
                        return false
                    end

                    local fdMS0Bi = SelectionBoxes[vUctRT]

                    if fdMS0Bi then
                        fdMS0Bi.Destroy(fdMS0Bi)
                    end

                    SelectionBoxes[vUctRT] = nil

                    table.remove(Tz4j.Items, Tz4j.find(Tz4j, vUctRT))

                    if Tz4j.Last == vUctRT then
                        Tz4j.focus(Tz4j, (#Tz4j.Items > 0) and Tz4j.Items[#Tz4j.Items] or nil)
                    end

                    SelectionExistenceListeners[vUctRT]:disconnect()

                    SelectionExistenceListeners[vUctRT] = nil

                    Tz4j.ItemRemoved:fire(vUctRT, ry0d9cxF)
                    Tz4j.Changed:fire()
                end,
                clear = function(jUfRhXXt)
                    for bncqpLFj, c9P3 in pairs(Support.CloneTable(jUfRhXXt.Items))do
                        jUfRhXXt.remove(jUfRhXXt, c9P3, true)
                    end

                    jUfRhXXt.Cleared:fire()
                end,
                focus = function(D, A)
                    D.Last = A

                    D.Changed:fire()
                end,
            }

            local WYdR = CFrame.new
            local QKKks_zt = table.insert
            local Are7xU = CFrame.new().toWorldSpace
            local yxjl = math.min
            local ZG = math.max

            calculateExtents = function(cO3SXQC, qiw, bQRP)
                local K5
                local M = 0

                for gm, jwJufiF in pairs(cO3SXQC)do
                    M = M + 1
                    K5 = jwJufiF
                end

                if M == 0 then
                    return
                end

                local ZubW5sf = qiw and qiw.Minimum or K5.Position
                local VLlBaUgt = qiw and qiw.Maximum or K5.Position
                local QniH, j, x_BU2 = ZubW5sf.x, ZubW5sf.y, ZubW5sf.z
                local AFii, Au, fgK = VLlBaUgt.x, VLlBaUgt.y, VLlBaUgt.z

                for YogtAPf, q7h in pairs(cO3SXQC)do
                    if not (q7h.Anchored and qiw) then
                        local WS = q7h.CFrame
                        local Uee8Une = q7h.Size / 2
                        local UtI, L, qx27 = Uee8Une.x, Uee8Une.y, Uee8Une.z
                        local whvO
                        local kpbY, m_gHw, RFOr = {}, {}, {}

                        whvO = Are7xU(WS, WYdR(UtI, L, qx27))

                        QKKks_zt(kpbY, whvO.x)
                        QKKks_zt(m_gHw, whvO.y)
                        QKKks_zt(RFOr, whvO.z)

                        whvO = Are7xU(WS, WYdR(-UtI, L, qx27))

                        QKKks_zt(kpbY, whvO.x)
                        QKKks_zt(m_gHw, whvO.y)
                        QKKks_zt(RFOr, whvO.z)

                        whvO = Are7xU(WS, WYdR(UtI, -L, qx27))

                        QKKks_zt(kpbY, whvO.x)
                        QKKks_zt(m_gHw, whvO.y)
                        QKKks_zt(RFOr, whvO.z)

                        whvO = Are7xU(WS, WYdR(UtI, L, -qx27))

                        QKKks_zt(kpbY, whvO.x)
                        QKKks_zt(m_gHw, whvO.y)
                        QKKks_zt(RFOr, whvO.z)

                        whvO = Are7xU(WS, WYdR(-UtI, L, -qx27))

                        QKKks_zt(kpbY, whvO.x)
                        QKKks_zt(m_gHw, whvO.y)
                        QKKks_zt(RFOr, whvO.z)

                        whvO = Are7xU(WS, WYdR(-UtI, -L, qx27))

                        QKKks_zt(kpbY, whvO.x)
                        QKKks_zt(m_gHw, whvO.y)
                        QKKks_zt(RFOr, whvO.z)

                        whvO = Are7xU(WS, WYdR(UtI, -L, -qx27))

                        QKKks_zt(kpbY, whvO.x)
                        QKKks_zt(m_gHw, whvO.y)
                        QKKks_zt(RFOr, whvO.z)

                        whvO = Are7xU(WS, WYdR(-UtI, -L, -qx27))

                        QKKks_zt(kpbY, whvO.x)
                        QKKks_zt(m_gHw, whvO.y)
                        QKKks_zt(RFOr, whvO.z)

                        QniH = yxjl(QniH, unpack(kpbY))
                        j = yxjl(j, unpack(m_gHw))
                        x_BU2 = yxjl(x_BU2, unpack(RFOr))
                        AFii = ZG(AFii, unpack(kpbY))
                        Au = ZG(Au, unpack(m_gHw))
                        fgK = ZG(fgK, unpack(RFOr))
                    end
                end

                if bQRP then
                    return {
                        Minimum = {
                            x = QniH,
                            y = j,
                            z = x_BU2,
                        },
                        Maximum = {
                            x = AFii,
                            y = Au,
                            z = fgK,
                        },
                    }
                else
                    local NL, g0d1ms_, Xmu5 = AFii - QniH, Au - j, fgK - x_BU2
                    local lC3P = Vector3.new(NL, g0d1ms_, Xmu5)
                    local QwHnJ1MC = CFrame.new(QniH + (AFii - QniH) / 2, j + (Au - j) / 2, x_BU2 + (fgK - x_BU2) / 2)

                    return lC3P, QwHnJ1MC
                end
            end

            if ToolType == 'plugin' then
                Selection.Changed:Connect(function()
                    SelectionService.Set(SelectionService, Selection.Items)
                end)
            end

            Tools = {}
            createDropdown = function()
                local giqW = RbxUtility.Create'Frame'{
                    Name = 'Dropdown',
                    Size = UDim2.new(0, 20, 0, 20),
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    ClipsDescendants = true,
                }

                RbxUtility.Create'ImageLabel'{
                    Parent = giqW,
                    Name = 'Arrow',
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Image = Assets.ExpandArrow,
                    Position = UDim2.new(1, -21, 0, 3),
                    Size = UDim2.new(0, 20, 0, 20),
                    ZIndex = 3,
                }

                local UJP9j = {
                    Frame = giqW,
                    _options = {},
                    addOption = function(_nBsWM3x, D5)
                        table.insert(_nBsWM3x._options, D5)

                        local I = RbxUtility.Create'TextButton'{
                            Parent = _nBsWM3x.Frame,
                            BackgroundColor3 = Color3.new(0, 0, 0),
                            BackgroundTransparency = 0.3,
                            BorderColor3 = Color3.new(0.10588235294117647, 0.16470588235294117, 0.20784313725490197),
                            BorderSizePixel = 1,
                            Name = D5,
                            Position = UDim2.new(math.ceil(#_nBsWM3x._options / 9) - 1, 0, 0, 25 * ((#_nBsWM3x._options % 9 == 0) and 9 or (#_nBsWM3x._options % 9))),
                            Size = UDim2.new(1, 0, 0, 25),
                            ZIndex = 3,
                            Text = '',
                        }
                        local rgZln = RbxUtility.Create'TextLabel'{
                            Parent = I,
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                            Position = UDim2.new(0, 6, 0, 0),
                            Size = UDim2.new(1, -30, 1, 0),
                            ZIndex = 3,
                            Font = Enum.Font.ArialBold,
                            FontSize = Enum.FontSize.Size10,
                            Text = D5,
                            TextColor3 = Color3.new(1, 1, 1),
                            TextXAlignment = Enum.TextXAlignment.Left,
                            TextYAlignment = Enum.TextYAlignment.Center,
                        }

                        return I
                    end,
                    selectOption = function(vB, vFea)
                        vB.Frame.MainButton.CurrentOption.Text = vFea
                    end,
                    open = false,
                    toggle = function(_T5)
                        if _T5.open then
                            _T5.Frame.MainButton.BackgroundTransparency = 0.3
                            _T5.Frame.ClipsDescendants = true
                            _T5.open = false
                        else
                            _T5.Frame.MainButton.BackgroundTransparency = 0
                            _T5.Frame.ClipsDescendants = false
                            _T5.open = true
                        end
                    end,
                }
                local SObxoJk = RbxUtility.Create'TextButton'{
                    Parent = giqW,
                    Name = 'MainButton',
                    BackgroundColor3 = Color3.new(0, 0, 0),
                    BackgroundTransparency = 0.3,
                    BorderColor3 = Color3.new(0.10588235294117647, 0.16470588235294117, 0.20784313725490197),
                    BorderSizePixel = 1,
                    Position = UDim2.new(0, 0, 0, 0),
                    Size = UDim2.new(1, 0, 0, 25),
                    ZIndex = 2,
                    Text = '',
                    [RbxUtility.Create.E'MouseButton1Up'] = function()
                        UJP9j.toggle(UJP9j)
                    end,
                }

                RbxUtility.Create'TextLabel'{
                    Parent = SObxoJk,
                    Name = 'CurrentOption',
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 6, 0, 0),
                    Size = UDim2.new(1, -30, 1, 0),
                    ZIndex = 3,
                    Font = Enum.Font.ArialBold,
                    FontSize = Enum.FontSize.Size10,
                    Text = '',
                    TextColor3 = Color3.new(1, 1, 1),
                    TextXAlignment = Enum.TextXAlignment.Left,
                    TextYAlignment = Enum.TextYAlignment.Center,
                }

                return UJP9j
            end
            Select2D = {
                enabled = false,
                GUI = nil,
                Connections = {},
                start = function(fx)
                    if fx.enabled then
                        return
                    end

                    fx.enabled = true
                    fx.GUI = RbxUtility.Create'ScreenGui'{
                        Name = 'BTSelectionRectangle',
                        Parent = UI,
                    }

                    local ZkXY = RbxUtility.Create'Frame'{
                        Name = 'Rectangle',
                        Active = false,
                        Parent = fx.GUI,
                        BackgroundColor3 = Color3.new(0, 0, 0),
                        BackgroundTransparency = 0.5,
                        BorderSizePixel = 0,
                        Position = UDim2.new(0, math.min(click_x, Mouse.X), 0, math.min(click_y, Mouse.Y)),
                        Size = UDim2.new(0, math.max(click_x, Mouse.X) - math.min(click_x, Mouse.X), 0, math.max(click_y, Mouse.Y) - math.min(click_y, Mouse.Y)),
                    }

                    fx.Connections.SelectionResize = Mouse.Move:Connect(function(
                    )
                        ZkXY.Position = UDim2.new(0, math.min(click_x, Mouse.X), 0, math.min(click_y, Mouse.Y))
                        ZkXY.Size = UDim2.new(0, math.max(click_x, Mouse.X) - math.min(click_x, Mouse.X), 0, math.max(click_y, Mouse.Y) - math.min(click_y, Mouse.Y))
                    end)
                    fx.Connections.SelectionEnd = UserInputService.InputEnded:Connect(function(
                        sWJA
                    )
                        if sWJA.UserInputType == Enum.UserInputType.MouseButton1 then
                            fx.select(fx)
                            fx.finish(fx)
                        end
                    end)
                end,
                select = function(NVvo)
                    if not NVvo.enabled then
                        return
                    end

                    for P2Kd8, asrUjwf in pairs(Support.GetAllDescendants(Workspace))do
                        if isSelectable(asrUjwf) then
                            local Q, ya253Ad = Workspace.CurrentCamera:WorldToScreenPoint(asrUjwf.Position)

                            if Q and ya253Ad then
                                local T49bAP = Q.x >= NVvo.GUI.Rectangle.AbsolutePosition.x
                                local bS5Jz = Q.x <= (NVvo.GUI.Rectangle.AbsolutePosition.x + NVvo.GUI.Rectangle.AbsoluteSize.x)
                                local yl = Q.y >= NVvo.GUI.Rectangle.AbsolutePosition.y
                                local srV = Q.y <= (NVvo.GUI.Rectangle.AbsolutePosition.y + NVvo.GUI.Rectangle.AbsoluteSize.y)

                                if T49bAP and bS5Jz and yl and srV then
                                    Selection.add(Selection, asrUjwf)
                                end
                            end
                        end
                    end
                end,
                finish = function(tSO4)
                    if not tSO4.enabled then
                        return
                    end

                    for ALU1Lf, odzL_ in pairs(tSO4.Connections)do
                        odzL_.disconnect(odzL_)

                        tSO4.Connections[ALU1Lf] = nil
                    end

                    tSO4.GUI:Destroy()

                    tSO4.GUI = nil
                    tSO4.enabled = false
                end,
            }
            SelectEdge = {
                enabled = false,
                started = false,
                Marker = nil,
                MarkerOutline = RbxUtility.Create'SelectionBox'{
                    Color = BrickColor.new('Institutional white'),
                    Parent = UI,
                    Name = 'BTEdgeSelectionMarkerOutline',
                },
                Connections = {},
                start = function(rHhv, DUv3)
                    if rHhv.started then
                        return
                    end

                    rHhv.Connections.KeyListener = Mouse.KeyDown:Connect(function(
                        qM23K
                    )
                        local qM23K = qM23K.lower(qM23K)
                        local HnNik4 = qM23K.byte(qM23K)

                        if qM23K == 't' and #Selection.Items > 0 then
                            rHhv.enable(rHhv, DUv3)
                        end
                    end)
                    rHhv.started = true
                end,
                enable = function(Tb, k)
                    if Tb.enabled then
                        return
                    end

                    Tb.Connections.MoveListener = Mouse.Move:Connect(function()
                        if not Selection.find(Selection, Mouse.Target) then
                            return
                        end

                        local g = {}
                        local mOxUSY = {}
                        local QKKks_zt = table.insert
                        local t = CFrame.new
                        local CY = Mouse.Target.CFrame
                        local Are7xU = CY.toWorldSpace
                        local EPz43s = Mouse.Target.Size / 2
                        local zR, ZiGUK4j, X5xyw_Y = EPz43s.x, EPz43s.y, EPz43s.z

                        QKKks_zt(mOxUSY, Are7xU(CY, t(zR, ZiGUK4j, X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(-zR, ZiGUK4j, X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(zR, -ZiGUK4j, X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(zR, ZiGUK4j, -X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(-zR, ZiGUK4j, -X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(-zR, -ZiGUK4j, X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(zR, -ZiGUK4j, -X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(-zR, -ZiGUK4j, -X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(zR, ZiGUK4j, 0)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(zR, 0, X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(0, ZiGUK4j, X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(zR, 0, 0)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(0, ZiGUK4j, 0)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(0, 0, X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(-zR, ZiGUK4j, 0)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(-zR, 0, X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(0, -ZiGUK4j, X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(-zR, 0, 0)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(0, -ZiGUK4j, 0)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(0, 0, -X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(zR, -ZiGUK4j, 0)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(zR, 0, -X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(0, ZiGUK4j, -X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(-zR, -ZiGUK4j, 0)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(-zR, 0, -X5xyw_Y)))
                        QKKks_zt(mOxUSY, Are7xU(CY, t(0, -ZiGUK4j, -X5xyw_Y)))

                        for y7AFV, BUtgk5wL in pairs(mOxUSY)do
                            g[y7AFV] = (Mouse.Hit.p - BUtgk5wL.p).magnitude
                        end

                        local Zb3oLBm1 = 1

                        for yvkTFEw, FPuu in pairs(g)do
                            if FPuu < g[Zb3oLBm1] then
                                Zb3oLBm1 = yvkTFEw
                            end
                        end

                        local gVS = mOxUSY[Zb3oLBm1]

                        if Tb.Marker then
                            Tb.Marker:Destroy()
                        end

                        Tb.Marker = RbxUtility.Create'Part'{
                            Name = 'BTEdgeSelectionMarker',
                            Anchored = true,
                            Locked = true,
                            CanCollide = false,
                            Transparency = 1,
                            FormFactor = Enum.FormFactor.Custom,
                            Size = Vector3.new(0.2, 0.2, 0.2),
                            CFrame = gVS,
                        }
                        Tb.MarkerOutline.Adornee = Tb.Marker
                    end)
                    Tb.Connections.ClickListener = Mouse.Button1Up:Connect(function(
                    )
                        override_selection = true

                        Tb.select(Tb, k)
                    end)
                    Tb.enabled = true
                end,
                select = function(IM6lQ1nN, cdRq)
                    if not IM6lQ1nN.enabled or not IM6lQ1nN.Marker then
                        return
                    end

                    IM6lQ1nN.MarkerOutline.Adornee = IM6lQ1nN.Marker

                    cdRq(IM6lQ1nN.Marker)

                    IM6lQ1nN.Marker = nil

                    IM6lQ1nN.disable(IM6lQ1nN)
                end,
                disable = function(rk6C)
                    if not rk6C.enabled then
                        return
                    end
                    if rk6C.Connections.ClickListener then
                        rk6C.Connections.ClickListener:disconnect()

                        rk6C.Connections.ClickListener = nil
                    end
                    if rk6C.Connections.MoveListener then
                        rk6C.Connections.MoveListener:disconnect()

                        rk6C.Connections.MoveListener = nil
                    end
                    if rk6C.Marker then
                        rk6C.Marker:Destroy()
                    end

                    rk6C.Marker = nil
                    rk6C.MarkerOutline.Adornee = nil
                    rk6C.enabled = false
                end,
                stop = function(a4EodrlS)
                    if not a4EodrlS.started then
                        return
                    end

                    a4EodrlS.disable(a4EodrlS)

                    for QDUH3, FZNkY in pairs(a4EodrlS.Connections)do
                        FZNkY.disconnect(FZNkY)

                        a4EodrlS.Connections[QDUH3] = nil
                    end

                    if a4EodrlS.Marker then
                        a4EodrlS.Marker:Destroy()
                    end

                    a4EodrlS.started = false
                end,
            }
            History = {
                Data = {},
                index = 0,
                Changed = RbxUtility.CreateSignal(),
                undo = function(AMQfXns)
                    if AMQfXns.index - 1 < 0 then
                        return
                    end

                    local N = AMQfXns.Data[AMQfXns.index]

                    N.unapply(N)

                    AMQfXns.index = AMQfXns.index - 1

                    AMQfXns.Changed:fire()
                end,
                redo = function(Zv1xWmbK)
                    if Zv1xWmbK.index + 1 > #Zv1xWmbK.Data then
                        return
                    end

                    Zv1xWmbK.index = Zv1xWmbK.index + 1

                    local usLtv = Zv1xWmbK.Data[Zv1xWmbK.index]

                    usLtv.apply(usLtv)
                    Zv1xWmbK.Changed:fire()
                end,
                add = function(D0WSWx, fI4Jq_JC)
                    D0WSWx.Data[D0WSWx.index + 1] = fI4Jq_JC
                    D0WSWx.index = D0WSWx.index + 1

                    for CK17 = D0WSWx.index + 1, #D0WSWx.Data do
                        D0WSWx.Data[CK17] = nil
                    end

                    D0WSWx.Changed:fire()
                end,
            }

            if ToolType == 'plugin' then
                History.Changed:Connect(function()
                    ChangeHistoryService.SetWaypoint(ChangeHistoryService, 'Building Tools by F3X')
                end)
            end

            ColorPicker = {
                enabled = false,
                callback = nil,
                track_mouse = nil,
                hue = 0,
                saturation = 1,
                value = 1,
                GUI = nil,
                Connections = {},
                start = function(EN6EGq, _Nz, Lsvt0Xp)
                    if EN6EGq.enabled then
                        EN6EGq.cancel(EN6EGq)
                    end

                    EN6EGq.enabled = true
                    EN6EGq.GUI = DFb100j.BTHSVColorPicker:Clone()
                    EN6EGq.GUI.Parent = UI
                    EN6EGq.callback = _Nz

                    local Lsvt0Xp = Lsvt0Xp or Color3.new(1, 0, 0)

                    EN6EGq._changeColor(EN6EGq, Support.RGBToHSV(Lsvt0Xp.r, Lsvt0Xp.g, Lsvt0Xp.b))
                    table.insert(EN6EGq.Connections, EN6EGq.GUI.HueSaturation.MouseButton1Down:Connect(function(
                        Js8fS1VE,
                        nfU
                    )
                        EN6EGq.track_mouse = 'hue-saturation'

                        EN6EGq._onMouseMove(EN6EGq, Js8fS1VE, nfU)
                    end))
                    table.insert(EN6EGq.Connections, EN6EGq.GUI.HueSaturation.MouseButton1Up:Connect(function(
                    )
                        EN6EGq.track_mouse = nil
                    end))
                    table.insert(EN6EGq.Connections, EN6EGq.GUI.MouseMoved:Connect(function(
                        Zt78U,
                        B_tZsz
                    )
                        EN6EGq._onMouseMove(EN6EGq, Zt78U, B_tZsz)
                    end))
                    table.insert(EN6EGq.Connections, EN6EGq.GUI.Value.MouseButton1Down:Connect(function(
                        NUeM,
                        DiSdlMR3
                    )
                        EN6EGq.track_mouse = 'value'

                        EN6EGq._onMouseMove(EN6EGq, NUeM, DiSdlMR3)
                    end))
                    table.insert(EN6EGq.Connections, EN6EGq.GUI.Value.MouseButton1Up:Connect(function(
                    )
                        EN6EGq.track_mouse = nil
                    end))
                    table.insert(EN6EGq.Connections, EN6EGq.GUI.OkButton.MouseButton1Up:Connect(function(
                    )
                        EN6EGq.finish(EN6EGq)
                    end))
                    table.insert(EN6EGq.Connections, EN6EGq.GUI.CancelButton.MouseButton1Up:Connect(function(
                    )
                        EN6EGq.cancel(EN6EGq)
                    end))
                    table.insert(EN6EGq.Connections, EN6EGq.GUI.HueOption.Input.TextButton.MouseButton1Down:Connect(function(
                    )
                        EN6EGq.GUI.HueOption.Input.TextBox:CaptureFocus()
                    end))
                    table.insert(EN6EGq.Connections, EN6EGq.GUI.HueOption.Input.TextBox.FocusLost:Connect(function(
                        nE
                    )
                        local CIkqRkzw = tonumber(EN6EGq.GUI.HueOption.Input.TextBox.Text)

                        if CIkqRkzw then
                            if CIkqRkzw > 360 then
                                CIkqRkzw = 360
                            elseif CIkqRkzw < 0 then
                                CIkqRkzw = 0
                            end

                            EN6EGq._changeColor(EN6EGq, CIkqRkzw, EN6EGq.saturation, EN6EGq.value)
                        else
                            EN6EGq._updateGUI(EN6EGq)
                        end
                    end))
                    table.insert(EN6EGq.Connections, EN6EGq.GUI.SaturationOption.Input.TextButton.MouseButton1Down:Connect(function(
                    )
                        EN6EGq.GUI.SaturationOption.Input.TextBox:CaptureFocus()
                    end))
                    table.insert(EN6EGq.Connections, EN6EGq.GUI.SaturationOption.Input.TextBox.FocusLost:Connect(function(
                        sBI
                    )
                        local vyewX = tonumber((EN6EGq.GUI.SaturationOption.Input.TextBox.Text:gsub('%%', '')))

                        if vyewX then
                            if vyewX > 100 then
                                vyewX = 100
                            elseif vyewX < 0 then
                                vyewX = 0
                            end

                            EN6EGq._changeColor(EN6EGq, EN6EGq.hue, vyewX / 100, EN6EGq.value)
                        else
                            EN6EGq._updateGUI(EN6EGq)
                        end
                    end))
                    table.insert(EN6EGq.Connections, EN6EGq.GUI.ValueOption.Input.TextButton.MouseButton1Down:Connect(function(
                    )
                        EN6EGq.GUI.ValueOption.Input.TextBox:CaptureFocus()
                    end))
                    table.insert(EN6EGq.Connections, EN6EGq.GUI.ValueOption.Input.TextBox.FocusLost:Connect(function(
                        ZXMlRMR
                    )
                        local CCo8Y = tonumber((EN6EGq.GUI.ValueOption.Input.TextBox.Text:gsub('%%', '')))

                        if CCo8Y then
                            if CCo8Y < 0 then
                                CCo8Y = 0
                            elseif CCo8Y > 100 then
                                CCo8Y = 100
                            end

                            EN6EGq._changeColor(EN6EGq, EN6EGq.hue, EN6EGq.saturation, CCo8Y / 100)
                        else
                            EN6EGq._updateGUI(EN6EGq)
                        end
                    end))
                end,
                _onMouseMove = function(hx1fY90, dt7v, HBjl)
                    if not hx1fY90.track_mouse then
                        return
                    end
                    if hx1fY90.track_mouse == 'hue-saturation' then
                        local tcVr, r = dt7v - hx1fY90.GUI.HueSaturation.AbsolutePosition.x, HBjl - hx1fY90.GUI.HueSaturation.AbsolutePosition.y

                        if tcVr < 0 then
                            tcVr = 0
                        elseif tcVr > hx1fY90.GUI.HueSaturation.AbsoluteSize.x then
                            tcVr = hx1fY90.GUI.HueSaturation.AbsoluteSize.x
                        end
                        if r < 0 then
                            r = 0
                        elseif r > hx1fY90.GUI.HueSaturation.AbsoluteSize.y then
                            r = hx1fY90.GUI.HueSaturation.AbsoluteSize.y
                        end

                        hx1fY90._changeColor(hx1fY90, 359 * tcVr / 209, 1 - r / 200, hx1fY90.value)
                    elseif hx1fY90.track_mouse == 'value' then
                        local htj = HBjl - hx1fY90.GUI.Value.AbsolutePosition.y

                        if htj < 0 then
                            htj = 0
                        elseif htj > hx1fY90.GUI.Value.AbsoluteSize.y then
                            htj = hx1fY90.GUI.Value.AbsoluteSize.y
                        end

                        hx1fY90._changeColor(hx1fY90, hx1fY90.hue, hx1fY90.saturation, 1 - htj / 200)
                    end
                end,
                _changeColor = function(Ltq_xgJ, Re, cG3HJLZ, LG)
                    if Re ~= Re then
                        Re = 359
                    end

                    Ltq_xgJ.hue = Re
                    Ltq_xgJ.saturation = cG3HJLZ == 0 and 0.01 or cG3HJLZ
                    Ltq_xgJ.value = LG

                    Ltq_xgJ._updateGUI(Ltq_xgJ)
                end,
                _updateGUI = function(x__e0OAv)
                    x__e0OAv.GUI.HueSaturation.Cursor.Position = UDim2.new(0, 209 * x__e0OAv.hue / 360 - 8, 0, (1 - x__e0OAv.saturation) * 200 - 8)
                    x__e0OAv.GUI.Value.Cursor.Position = UDim2.new(0, -2, 0, (1 - x__e0OAv.value) * 200 - 8)

                    local F9 = Color3.new(Support.HSVToRGB(x__e0OAv.hue, x__e0OAv.saturation, x__e0OAv.value))

                    x__e0OAv.GUI.ColorDisplay.BackgroundColor3 = F9
                    x__e0OAv.GUI.Value.ColorBG.BackgroundColor3 = Color3.new(Support.HSVToRGB(x__e0OAv.hue, x__e0OAv.saturation, 1))
                    x__e0OAv.GUI.HueOption.Bar.BackgroundColor3 = F9
                    x__e0OAv.GUI.SaturationOption.Bar.BackgroundColor3 = F9
                    x__e0OAv.GUI.ValueOption.Bar.BackgroundColor3 = F9
                    x__e0OAv.GUI.HueOption.Input.TextBox.Text = math.floor(x__e0OAv.hue)
                    x__e0OAv.GUI.SaturationOption.Input.TextBox.Text = math.floor(x__e0OAv.saturation * 100) .. '%'
                    x__e0OAv.GUI.ValueOption.Input.TextBox.Text = math.floor(x__e0OAv.value * 100) .. '%'
                end,
                finish = function(IbKWp)
                    if not IbKWp.enabled then
                        return
                    end
                    if IbKWp.GUI then
                        IbKWp.GUI:Destroy()
                    end

                    IbKWp.GUI = nil
                    IbKWp.track_mouse = nil

                    for j, nY4CweuF in pairs(IbKWp.Connections)do
                        nY4CweuF.disconnect(nY4CweuF)

                        IbKWp.Connections[j] = nil
                    end

                    IbKWp.callback(IbKWp.hue, IbKWp.saturation, IbKWp.value)

                    IbKWp.callback = nil
                    IbKWp.enabled = false
                end,
                cancel = function(Ttb)
                    if not Ttb.enabled then
                        return
                    end
                    if Ttb.GUI then
                        Ttb.GUI:Destroy()
                    end

                    Ttb.GUI = nil
                    Ttb.track_mouse = nil

                    for wIat2P0, m7M in pairs(Ttb.Connections)do
                        m7M.disconnect(m7M)

                        Ttb.Connections[wIat2P0] = nil
                    end

                    Ttb.callback()

                    Ttb.callback = nil
                    Ttb.enabled = false
                end,
            }
            ExportInterface = {}
            ExportInterface.Export = function(J8)
                print('preforming ExportInterface.Export')

                local VchN = {
                    Workspace = game.GetService(game, 'Workspace'),
                }
                local ws7lX6m_ = game.GetService(game, 'HttpService')
                local cXif = script.Parent
                local UV = script.Parent.Parent
                local o6kB = require(UV.WaitForChild(UV, 'SupportLibrary'))

                _generateSerializationID = function()
                    local la = {
                        '0',
                        '1',
                        '2',
                        '3',
                        '4',
                        '5',
                        '6',
                        '7',
                        '8',
                        '9',
                        'a',
                        'b',
                        'c',
                        'd',
                        'e',
                        'f',
                        'g',
                        'h',
                        'i',
                        'j',
                        'k',
                        'l',
                        'm',
                        'n',
                        'o',
                        'p',
                        'q',
                        'r',
                        's',
                        't',
                        'u',
                        'v',
                        'w',
                        'x',
                        'y',
                        'z',
                        'A',
                        'B',
                        'C',
                        'D',
                        'E',
                        'F',
                        'G',
                        'H',
                        'I',
                        'J',
                        'K',
                        'L',
                        'M',
                        'N',
                        'O',
                        'P',
                        'Q',
                        'R',
                        'S',
                        'T',
                        'U',
                        'V',
                        'W',
                        'X',
                        'Y',
                        'Z',
                    }
                    local W = ''

                    for Ihh6yjj = 1, 5 do
                        W = W .. (la[math.random(#la)])
                    end

                    return W
                end
                _splitNumberListString = function(q5)
                    local hgc6Q = o6kB.SplitString(q5, ', ')

                    for mIJ_kc4, J in pairs(hgc6Q)do
                        hgc6Q[mIJ_kc4] = tonumber(J)
                    end

                    return hgc6Q
                end
                _getSerializationPartType = function(uUw95D)
                    local KRLJOGI = {
                        Normal = 1,
                        Truss = 2,
                        Wedge = 3,
                        Corner = 4,
                        Cylinder = 5,
                        Ball = 6,
                        Seat = 7,
                        VehicleSeat = 8,
                        Spawn = 9,
                    }

                    if uUw95D.ClassName == 'Part' then
                        if uUw95D.Shape == Enum.PartType.Block then
                            return KRLJOGI.Normal
                        elseif uUw95D.Shape == Enum.PartType.Cylinder then
                            return KRLJOGI.Cylinder
                        elseif uUw95D.Shape == Enum.PartType.Ball then
                            return KRLJOGI.Ball
                        end
                    elseif uUw95D.ClassName == 'Seat' then
                        return KRLJOGI.Seat
                    elseif uUw95D.ClassName == 'VehicleSeat' then
                        return KRLJOGI.VehicleSeat
                    elseif uUw95D.ClassName == 'SpawnLocation' then
                        return KRLJOGI.Spawn
                    elseif uUw95D.ClassName == 'WedgePart' then
                        return KRLJOGI.Wedge
                    elseif uUw95D.ClassName == 'CornerWedgePart' then
                        return KRLJOGI.Corner
                    elseif uUw95D.ClassName == 'TrussPart' then
                        return KRLJOGI.Truss
                    end
                end
                _serializeParts = function(Gns3m_)
                    local f = {
                        version = 1,
                        parts = {},
                    }
                    local _zxBo = {}
                    local gN = {}
                    local oZs2khg = tick()

                    for Bu1tX_x3, m0 in pairs(Gns3m_)do
                        local n = _generateSerializationID()
                        local Q = {
                            _getSerializationPartType(m0),
                            _splitNumberListString(tostring(m0.Size)),
                            _splitNumberListString(tostring(m0.CFrame)),
                            m0.BrickColor.Number,
                            m0.Material.Value,
                            m0.Anchored,
                            m0.CanCollide,
                            m0.Reflectance,
                            m0.Transparency,
                            m0.TopSurface.Value,
                            m0.BottomSurface.Value,
                            m0.LeftSurface.Value,
                            m0.RightSurface.Value,
                            m0.FrontSurface.Value,
                            m0.BackSurface.Value,
                        }

                        f.parts[n] = Q
                        _zxBo[n] = m0
                        gN[m0] = n
                    end

                    local pSEIak = {}

                    for CoiGQD, KR7 in pairs(_zxBo)do
                        if KR7.IsA(KR7, 'BasePart') then
                            for a, P5 in pairs(KR7.GetChildren(KR7))do
                                if P5.Name == 'BTWeld' and P5.IsA(P5, 'Weld') and gN[P5.Part0] and gN[P5.Part1] then
                                    table.insert(pSEIak, P5)
                                end
                            end
                        end
                    end

                    if #pSEIak > 0 then
                        f.welds = {}

                        for h, TCVpKFp in pairs(pSEIak)do
                            local NY = _generateSerializationID()
                            local hEVRc = {
                                gN[TCVpKFp.Part0],
                                gN[TCVpKFp.Part1],
                                _splitNumberListString(tostring(TCVpKFp.C1)),
                            }

                            f.welds[NY] = hEVRc
                            _zxBo[NY] = TCVpKFp
                            gN[TCVpKFp] = NY
                        end
                    end

                    local AkjIt = {}

                    for BA6zaoJ, Y7 in pairs(Gns3m_)do
                        local g = o6kB.GetChildOfClass(Y7, 'SpecialMesh')

                        if g then
                            table.insert(AkjIt, g)
                        end
                    end

                    if #AkjIt > 0 then
                        f.meshes = {}

                        for jtL2, DA in pairs(AkjIt)do
                            local d7K3 = _generateSerializationID()
                            local Ozih058u = {
                                gN[DA.Parent],
                                DA.MeshType.Value,
                                _splitNumberListString(tostring(DA.Scale)),
                                DA.MeshId,
                                DA.TextureId,
                                _splitNumberListString(tostring(DA.VertexColor)),
                            }

                            f.meshes[d7K3] = Ozih058u
                            _zxBo[d7K3] = DA
                            gN[DA] = d7K3
                        end
                    end

                    local ox = {}

                    for oW9bf, u in pairs(Gns3m_)do
                        local rZrrL = o6kB.GetChildrenOfClass(u, 'Texture')

                        for oW9bf, QXFNNY in pairs(rZrrL)do
                            table.insert(ox, QXFNNY)
                        end

                        local E4a = o6kB.GetChildrenOfClass(u, 'Decal')

                        for oW9bf, e in pairs(E4a)do
                            table.insert(ox, e)
                        end
                    end

                    if #ox > 0 then
                        f.textures = {}

                        for BH, xD in pairs(ox)do
                            local fl

                            if xD.ClassName == 'Decal' then
                                fl = 1
                            elseif xD.ClassName == 'Texture' then
                                fl = 2
                            end

                            local QCv = _generateSerializationID()
                            local qd_HCf = {
                                gN[xD.Parent],
                                fl,
                                xD.Face.Value,
                                xD.Texture,
                                xD.Transparency,
                                fl == 2 and xD.StudsPerTileU or nil,
                                fl == 2 and xD.StudsPerTileV or nil,
                            }

                            f.textures[QCv] = qd_HCf
                            _zxBo[QCv] = xD
                            gN[xD] = QCv
                        end
                    end

                    local y5FoBZ5 = {}

                    for CU, M1ywSQ in pairs(Gns3m_)do
                        local g = o6kB.GetChildrenOfClass(M1ywSQ, 'Light', true)

                        for CU, hPc4e3hn in pairs(g)do
                            table.insert(y5FoBZ5, hPc4e3hn)
                        end
                    end

                    if #y5FoBZ5 > 0 then
                        f.lights = {}

                        for m, Rlb in pairs(y5FoBZ5)do
                            local KgX

                            if Rlb.IsA(Rlb, 'PointLight') then
                                KgX = 1
                            elseif Rlb.IsA(Rlb, 'SpotLight') then
                                KgX = 2
                            end

                            local SXr = _generateSerializationID()
                            local IZQg6shq = {
                                gN[Rlb.Parent],
                                KgX,
                                _splitNumberListString(tostring(Rlb.Color)),
                                Rlb.Brightness,
                                Rlb.Range,
                                Rlb.Shadows,
                                KgX == 2 and Rlb.Angle or nil,
                                KgX == 2 and Rlb.Face.Value or nil,
                            }

                            f.lights[SXr] = IZQg6shq
                            _zxBo[SXr] = Rlb
                            gN[Rlb] = SXr
                        end
                    end

                    local VXwusjUq = {}

                    for bz, wL in pairs(Gns3m_)do
                        table.insert(VXwusjUq, o6kB.GetChildOfClass(wL, 'Smoke'))
                        table.insert(VXwusjUq, o6kB.GetChildOfClass(wL, 'Fire'))
                        table.insert(VXwusjUq, o6kB.GetChildOfClass(wL, 'Sparkles'))
                    end

                    if #VXwusjUq > 0 then
                        f.decorations = {}

                        for BSDnLt_, vQ6pTDbn in pairs(VXwusjUq)do
                            local P

                            if vQ6pTDbn.IsA(vQ6pTDbn, 'Smoke') then
                                P = 1
                            elseif vQ6pTDbn.IsA(vQ6pTDbn, 'Fire') then
                                P = 2
                            elseif vQ6pTDbn.IsA(vQ6pTDbn, 'Sparkles') then
                                P = 3
                            end

                            local W = _generateSerializationID()
                            local CDG3os = {
                                gN[vQ6pTDbn.Parent],
                                P,
                            }

                            if P == 1 then
                                CDG3os[3] = _splitNumberListString(tostring(vQ6pTDbn.Color))
                                CDG3os[4] = vQ6pTDbn.Opacity
                                CDG3os[5] = vQ6pTDbn.RiseVelocity
                                CDG3os[6] = vQ6pTDbn.Size
                            elseif P == 2 then
                                CDG3os[3] = _splitNumberListString(tostring(vQ6pTDbn.Color))
                                CDG3os[4] = _splitNumberListString(tostring(vQ6pTDbn.SecondaryColor))
                                CDG3os[5] = vQ6pTDbn.Heat
                                CDG3os[6] = vQ6pTDbn.Size
                            elseif P == 3 then
                                CDG3os[3] = _splitNumberListString(tostring(vQ6pTDbn.SparkleColor))
                            end

                            f.decorations[W] = CDG3os
                            _zxBo[W] = vQ6pTDbn
                            gN[vQ6pTDbn] = W
                        end
                    end

                    local xP7ck = ws7lX6m_.JSONEncode(ws7lX6m_, f)

                    return xP7ck
                end

                local sdfJ = _serializeParts(J8)
                local uwuecWs
                local l, xhVT42E = ypcall(function()
                    uwuecWs = ws7lX6m_.PostAsync(ws7lX6m_, 'http://www.f3xteam.com/bt/export', sdfJ)
                end)
                local qX
                local A = ypcall(function()
                    qX = ws7lX6m_.JSONDecode(ws7lX6m_, uwuecWs)
                end)

                return l, xhVT42E, A, qX
            end
            IE = {
                export = function()
                    if #Selection.Items == 0 then
                        return
                    end

                    local MOd9uwnL = DFb100j.BTExportDialog:Clone()

                    MOd9uwnL.Loading.Size = UDim2.new(1, 0, 0, 0)
                    MOd9uwnL.Parent = UI

                    MOd9uwnL.Loading:TweenSize(UDim2.new(1, 0, 0, 80), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.25)
                    MOd9uwnL.Loading.CloseButton.MouseButton1Up:Connect(function(
                    )
                        MOd9uwnL.Destroy(MOd9uwnL)
                    end)

                    local JZDx8, _XR0EY1, z3J, ufXNV = ExportInterface.Export(Selection.Items)

                    if not JZDx8 and (_XR0EY1 == 'Http requests are not enabled' or _XR0EY1 == 'Http requests can only be executed by game server') then
                        MOd9uwnL.Loading.TextLabel.Text = 'Upload failed, see message(s)'
                        MOd9uwnL.Loading.CloseButton.Text = 'Okay!'
                        XL_ = false

                        ShowStartupNotifications()
                    elseif not JZDx8 then
                        MOd9uwnL.Loading.TextLabel.Text = 'Upload failed (unknown request error)'
                        MOd9uwnL.Loading.CloseButton.Text = 'Okay :('
                        XL_ = false

                        ShowStartupNotifications()
                    elseif JZDx8 and (not z3J or not ufXNV.success) then
                        MOd9uwnL.Loading.TextLabel.Text = 'Upload failed (unknown processing error)'
                        MOd9uwnL.Loading.CloseButton.Text = 'Okay :('
                        XL_ = false

                        ShowStartupNotifications()
                    elseif JZDx8 and z3J then
                        print('[Building Tools by F3X] Uploaded Export: ' .. ufXNV.id)

                        MOd9uwnL.Loading.Visible = false
                        MOd9uwnL.Info.Size = UDim2.new(1, 0, 0, 0)
                        MOd9uwnL.Info.CreationID.Text = ufXNV.id
                        MOd9uwnL.Info.Visible = true

                        MOd9uwnL.Info:TweenSize(UDim2.new(1, 0, 0, 75), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.25)

                        MOd9uwnL.Tip.Size = UDim2.new(1, 0, 0, 0)
                        MOd9uwnL.Tip.Visible = true

                        MOd9uwnL.Tip:TweenSize(UDim2.new(1, 0, 0, 30), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.25)

                        MOd9uwnL.Close.Size = UDim2.new(1, 0, 0, 0)
                        MOd9uwnL.Close.Visible = true

                        MOd9uwnL.Close:TweenSize(UDim2.new(1, 0, 0, 20), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.25)
                        MOd9uwnL.Close.Button.MouseButton1Up:Connect(function()
                            MOd9uwnL.Destroy(MOd9uwnL)
                        end)

                        local Vum8 = RbxUtility.Create'Sound'{
                            Name = 'BTActionCompletionSound',
                            Pitch = 1.5,
                            SoundId = Assets.ActionCompletionSound,
                            Volume = 1,
                            Parent = Player or SoundService,
                        }

                        Vum8.Play(Vum8)
                        Vum8.Destroy(Vum8)
                    end
                end,
            }
            Tooltips = {}
            Dock = DFb100j.BTDockGUI:Clone()
            Dock.Parent = UI
            Dock.Visible = false
            RegisterToolButton = function(NQSh)
                local Y1rSR = NQSh.Name:match('(.+)Button')

                if Y1rSR then
                    NQSh.MouseButton1Up:Connect(function()
                        local aqQh = Tools[Y1rSR]

                        if aqQh then
                            equipTool(aqQh)
                        end
                    end)
                    NQSh.MouseEnter:Connect(function()
                        local H_ = Tooltips[Y1rSR]

                        if H_ then
                            H_.focus(H_, 'button')
                        end
                    end)
                    NQSh.MouseLeave:Connect(function()
                        local EQaFI0gZ = Tooltips[Y1rSR]

                        if EQaFI0gZ then
                            EQaFI0gZ.unfocus(EQaFI0gZ, 'button')
                        end
                    end)
                end
            end

            for kKiLOav, XW8 in pairs(Dock.ToolButtons:GetChildren())do
                RegisterToolButton(XW8)
            end

            RegisterTooltip = function(_8Ls)
                local t_t7 = _8Ls.Name:match('(.+)Info')

                Tooltips[t_t7] = {
                    GUI = _8Ls,
                    button_focus = false,
                    tooltip_focus = false,
                    focus = function(o, ogi5Usg)
                        if Dock.HelpInfo.Visible then
                            return
                        end
                        if ogi5Usg == 'button' then
                            o.button_focus = true
                        elseif ogi5Usg == 'tooltip' then
                            o.tooltip_focus = true
                        end

                        for pA, _8Ls in pairs(Dock.Tooltips:GetChildren())do
                            _8Ls.Visible = false
                        end

                        o.GUI.Visible = true
                    end,
                    unfocus = function(DOIqPj09, RoKAkM)
                        if RoKAkM == 'button' then
                            DOIqPj09.button_focus = false
                        elseif RoKAkM == 'tooltip' then
                            DOIqPj09.tooltip_focus = false
                        end
                        if not DOIqPj09.button_focus and not DOIqPj09.tooltip_focus then
                            DOIqPj09.GUI.Visible = false
                        end
                    end,
                }

                _8Ls.MouseEnter:Connect(function()
                    Tooltips[t_t7]:focus('tooltip')
                end)
                _8Ls.MouseLeave:Connect(function()
                    Tooltips[t_t7]:unfocus('tooltip')
                end)

                local A_oCK8 = Gloo.ScrollingContainer(true, false, 15)

                A_oCK8.GUI.Parent = _8Ls

                for FETmJjQd, RK in pairs(_8Ls.Content:GetChildren())do
                    RK.Parent = A_oCK8.Container
                end

                A_oCK8.GUI.Size = Dock.Tooltips.Size
                A_oCK8.Container.Size = _8Ls.Content.Size
                A_oCK8.Boundary.Size = Dock.Tooltips.Size
                A_oCK8.Boundary.BackgroundTransparency = 1

                _8Ls.Content:Destroy()
            end

            for XAv, bdJvhbGA in pairs(Dock.Tooltips:GetChildren())do
                RegisterTooltip(bdJvhbGA)
            end

            local Vu0cCAf = Gloo.ScrollingContainer(true, false, 15)

            Vu0cCAf.GUI.Parent = Dock.HelpInfo

            for c9M, bcYXd in pairs(Dock.HelpInfo.Content:GetChildren())do
                bcYXd.Parent = Vu0cCAf.Container
            end

            Vu0cCAf.GUI.Size = Dock.HelpInfo.Size
            Vu0cCAf.Container.Size = Dock.HelpInfo.Content.Size
            Vu0cCAf.Boundary.Size = Dock.HelpInfo.Size
            Vu0cCAf.Boundary.BackgroundTransparency = 1

            Dock.HelpInfo.Content:Destroy()
            Dock.SelectionButtons.UndoButton.MouseButton1Up:Connect(function()
                History.undo(History)
            end)
            Dock.SelectionButtons.RedoButton.MouseButton1Up:Connect(function()
                History.redo(History)
            end)
            Dock.SelectionButtons.DeleteButton.MouseButton1Up:Connect(function()
                deleteSelection()
            end)
            Dock.SelectionButtons.CloneButton.MouseButton1Up:Connect(function()
                cloneSelection()
            end)
            Dock.SelectionButtons.ExportButton.MouseButton1Up:Connect(function()
                IE.export(IE)
            end)
            Dock.SelectionButtons.GroupsButton.MouseButton1Up:Connect(function()
                Groups.ToggleUI(Groups)
            end)
            Dock.InfoButtons.HelpButton.MouseButton1Up:Connect(function()
                toggleHelp()
            end)
            Selection.Changed:Connect(function()
                if #Selection.Items > 0 then
                    Dock.SelectionButtons.DeleteButton.Image = Assets.DeleteActiveDecal
                    Dock.SelectionButtons.CloneButton.Image = Assets.CloneActiveDecal
                    Dock.SelectionButtons.ExportButton.Image = Assets.ExportActiveDecal
                else
                    Dock.SelectionButtons.DeleteButton.Image = Assets.DeleteInactiveDecal
                    Dock.SelectionButtons.CloneButton.Image = Assets.CloneInactiveDecal
                    Dock.SelectionButtons.ExportButton.Image = Assets.ExportInactiveDecal
                end
            end)

            for wbw9, jFg in pairs(Dock.SelectionButtons:GetChildren())do
                jFg.MouseEnter:Connect(function()
                    if jFg.FindFirstChild(jFg, 'Tooltip') then
                        jFg.Tooltip.Visible = true
                    end
                end)
                jFg.MouseLeave:Connect(function()
                    if jFg.FindFirstChild(jFg, 'Tooltip') then
                        jFg.Tooltip.Visible = false
                    end
                end)
            end

            Dock.InfoButtons.HelpButton.MouseEnter:Connect(function()
                Dock.InfoButtons.HelpButton.Tooltip.Visible = true
            end)
            Dock.InfoButtons.HelpButton.MouseLeave:Connect(function()
                Dock.InfoButtons.HelpButton.Tooltip.Visible = false
            end)
            History.Changed:Connect(function()
                if #History.Data > 0 then
                    if History.index == 0 then
                        Dock.SelectionButtons.UndoButton.Image = Assets.UndoInactiveDecal
                        Dock.SelectionButtons.RedoButton.Image = Assets.RedoActiveDecal
                    elseif History.index == #History.Data then
                        Dock.SelectionButtons.UndoButton.Image = Assets.UndoActiveDecal
                        Dock.SelectionButtons.RedoButton.Image = Assets.RedoInactiveDecal
                    else
                        Dock.SelectionButtons.UndoButton.Image = Assets.UndoActiveDecal
                        Dock.SelectionButtons.RedoButton.Image = Assets.RedoActiveDecal
                    end
                else
                    Dock.SelectionButtons.UndoButton.Image = Assets.UndoInactiveDecal
                    Dock.SelectionButtons.RedoButton.Image = Assets.RedoInactiveDecal
                end
            end)

            Groups = {
                Data = {},
                UI = DFb100j.BTGroupsGUI:Clone(),
                GroupAdded = Support.CreateSignal(),
                NewGroup = function(_3BxMtBx)
                    local j5rH = {
                        Name = 'Group ' .. (#_3BxMtBx.Data + 1),
                        Items = {},
                        Ignoring = false,
                        Changed = Support.CreateSignal(),
                        Updated = Support.CreateSignal(),
                        Rename = function(mKQv1MD, XvjCso)
                            mKQv1MD.Name = XvjCso

                            mKQv1MD.Changed:Fire()
                        end,
                        SetIgnore = function(_R3NsF, I)
                            _R3NsF.Ignoring = I

                            _R3NsF.Changed:Fire()
                        end,
                        Update = function(luJe, oJ)
                            luJe.Items = Support.CloneTable(oJ)

                            luJe.Updated:Fire()
                        end,
                        Select = function(XRK37sBn, W6W)
                            if not W6W then
                                Selection.clear(Selection)
                            end

                            for HUwZ2ikl, trUgnCUz in pairs(XRK37sBn.Items)do
                                Selection.add(Selection, trUgnCUz)
                            end
                        end,
                    }

                    table.insert(_3BxMtBx.Data, j5rH)
                    _3BxMtBx.GroupAdded:Fire(j5rH)

                    return j5rH
                end,
                ToggleUI = function(CTJB)
                    CTJB.UI.Visible = not CTJB.UI.Visible
                end,
                IsPartIgnored = function(PK9, hd)
                    for l8vftvD, xb in pairs(PK9.Data)do
                        if xb.Ignoring and #Support.FindTableOccurrences(xb.Items, hd) > 0 then
                            return true
                        end
                    end

                    return false
                end,
            }
            Groups.UI.Visible = false
            Groups.UI.Parent = Dock

            Groups.UI.Title.CreateButton.MouseButton1Click:Connect(function()
                local KHB = Groups.NewGroup(Groups)

                KHB.Update(KHB, Selection.Items)
            end)
            Groups.GroupAdded:Connect(function(RZ8IqF)
                local FasBerA = Groups.UI.Templates.GroupButton:Clone()

                FasBerA.Position = UDim2.new(0, 0, 0, 26 * #Groups.UI.GroupList:GetChildren())
                FasBerA.Parent = Groups.UI.GroupList
                FasBerA.GroupName.Text = RZ8IqF.Name
                FasBerA.GroupNamer.Text = RZ8IqF.Name
                Groups.UI.GroupList.CanvasSize = UDim2.new(1, -10, 0, 26 * #Groups.UI.GroupList:GetChildren())
                FasBerA.IgnoreButton.RightTooltip.Text.Text = RZ8IqF.Ignoring and 'UNIGNORE' or 'IGNORE'

                FasBerA.GroupName.MouseButton1Click:Connect(function()
                    RZ8IqF.Select(RZ8IqF, selecting)
                end)
                RZ8IqF.Changed:Connect(function()
                    FasBerA.GroupName.Text = RZ8IqF.Name
                    FasBerA.GroupNamer.Text = RZ8IqF.Name
                    FasBerA.IgnoreButton.Image = RZ8IqF.Ignoring and Assets.GroupLockIcon or Assets.GroupUnlockIcon
                    FasBerA.IgnoreButton.RightTooltip.Text.Text = RZ8IqF.Ignoring and 'UNIGNORE' or 'IGNORE'
                end)
                RZ8IqF.Updated:Connect(function()
                    FasBerA.UpdateButton.Image = Assets.GroupUpdateOKIcon

                    coroutine.wrap(function()
                        wait(1)

                        FasBerA.UpdateButton.Image = Assets.GroupUpdateIcon
                    end)()
                end)
                FasBerA.EditButton.MouseButton1Click:Connect(function()
                    FasBerA.GroupName.Visible = false
                    FasBerA.GroupNamer.Visible = true

                    FasBerA.GroupNamer:CaptureFocus()
                end)
                FasBerA.GroupNamer.FocusLost:Connect(function(ayR7Lua6)
                    if ayR7Lua6 then
                        RZ8IqF.Rename(RZ8IqF, FasBerA.GroupNamer.Text)
                    end

                    FasBerA.GroupNamer.Visible = false
                    FasBerA.GroupNamer.Text = RZ8IqF.Name
                    FasBerA.GroupName.Visible = true
                end)
                FasBerA.IgnoreButton.MouseButton1Click:Connect(function()
                    RZ8IqF.SetIgnore(RZ8IqF, not RZ8IqF.Ignoring)
                end)
                FasBerA.UpdateButton.MouseButton1Click:Connect(function()
                    RZ8IqF.Update(RZ8IqF, Selection.Items)
                end)

                local pf = {
                    FasBerA.UpdateButton,
                    FasBerA.EditButton,
                    FasBerA.IgnoreButton,
                    FasBerA.GroupNameArea,
                }

                for Ini5SE, PyZ2PUy0 in pairs(pf)do
                    local ZiDK = PyZ2PUy0.FindFirstChild(PyZ2PUy0, 'LeftTooltip') or PyZ2PUy0.FindFirstChild(PyZ2PUy0, 'RightTooltip')

                    if ZiDK then
                        PyZ2PUy0.InputBegan:Connect(function(HfV)
                            if HfV.UserInputType == Enum.UserInputType.MouseMovement then
                                ZiDK.Visible = true
                            end
                        end)
                        PyZ2PUy0.InputEnded:Connect(function(kYK3PhRd)
                            if kYK3PhRd.UserInputType == Enum.UserInputType.MouseMovement then
                                ZiDK.Visible = false
                            end
                        end)
                    end
                end
            end)

            equipBT = function(O)
                Mouse = O

                if not CurrentTool then
                    equipTool(Tools.Move)
                end
                if not TargetBox then
                    TargetBox = Instance.new('SelectionBox', UI)
                    TargetBox.Name = 'BTTargetBox'
                    TargetBox.Color = BrickColor.new('Institutional white')
                    TargetBox.Transparency = 0.5
                end

                for xme2_Bb, ccqzSAU in pairs(SelectionBoxes)do
                    ccqzSAU.Parent = UI
                end

                if ToolType == 'plugin' then
                    for N, Rl1JVg in pairs(SelectionService.Get(SelectionService))do
                        Selection.add(Selection, Rl1JVg)
                    end
                end
                if CurrentTool and CurrentTool.Listeners.Equipped then
                    CurrentTool.Listeners.Equipped()
                end

                Dock.Visible = true

                coroutine.wrap(ShowStartupNotifications)()

                Connections.SelectionModeStart = Support.AddUserInputListener('Began', 'Keyboard', false, function(
                    h
                )
                    if h.KeyCode == Enum.KeyCode.LeftShift or h.KeyCode == Enum.KeyCode.RightShift or h.KeyCode == Enum.KeyCode.LeftControl or h.KeyCode == Enum.KeyCode.RightControl then
                        selecting = true
                    end
                end)
                Connections.SelectionModeEnd = Support.AddUserInputListener('Ended', 'Keyboard', true, function(
                    nwlg80aZ
                )
                    if nwlg80aZ.KeyCode == Enum.KeyCode.LeftShift or nwlg80aZ.KeyCode == Enum.KeyCode.RightShift or nwlg80aZ.KeyCode == Enum.KeyCode.LeftControl or nwlg80aZ.KeyCode == Enum.KeyCode.RightControl then
                        selecting = false
                    end
                end)

                table.insert(Connections, Mouse.KeyDown:Connect(function(B)
                    local B = B.lower(B)
                    local PDGF = B.byte(B)
                    local x_gZS_6x = selecting

                    if B == 'x' and x_gZS_6x then
                        deleteSelection()

                        return
                    end
                    if B == 'c' and x_gZS_6x then
                        wait(0)
                        cloneSelection()

                        return
                    end
                    if B == 'z' and x_gZS_6x then
                        History.undo(History)

                        return
                    elseif B == 'y' and x_gZS_6x then
                        History.redo(History)

                        return
                    end
                    if B == 'p' and x_gZS_6x then
                        IE.export(IE)

                        return
                    end
                    if B == 'k' and x_gZS_6x then
                        prismSelect()

                        return
                    end
                    if B == 'r' and x_gZS_6x then
                        Selection.clear(Selection)

                        return
                    end
                    if B == 'g' and x_gZS_6x then
                        Groups.ToggleUI(Groups)

                        return
                    end
                    if B == '[' then
                        local cG = Selection.Last

                        if not cG then
                            return
                        end
                        if cG.Parent == Workspace then
                            return
                        end
                        if not (x_gZS_6x) then
                            Selection.clear(Selection)
                        end

                        local L9PPA2e = Support.GetAllDescendants(cG.Parent)

                        for JwAi, wjgKmwQJ in pairs(L9PPA2e)do
                            Selection.add(Selection, wjgKmwQJ)
                        end

                        Selection.add(Selection, cG)

                        return
                    end
                    if B == 'z' then
                        equipTool(Tools.Move)
                    elseif B == 'x' then
                        equipTool(Tools.Resize)
                    elseif B == 'c' then
                        equipTool(Tools.Rotate)
                    elseif B == 'v' then
                        equipTool(Tools.Paint)
                    elseif B == 'b' then
                        equipTool(Tools.Surface)
                    elseif B == 'n' then
                        equipTool(Tools.Material)
                    elseif B == 'm' then
                        equipTool(Tools.Anchor)
                    elseif B == 'k' then
                        equipTool(Tools.Collision)
                    elseif B == 'j' then
                        equipTool(Tools.NewPart)
                    elseif B == 'h' then
                        equipTool(Tools.Mesh)
                    elseif B == 'g' then
                        equipTool(Tools.Texture)
                    elseif B == 'f' then
                        equipTool(Tools.Weld)
                    elseif B == 'u' then
                        equipTool(Tools.Lighting)
                    elseif B == 'p' then
                        equipTool(Tools.Decorate)
                    end

                    ActiveKeys[PDGF] = PDGF
                    ActiveKeys[B] = B
                end))
                table.insert(Connections, Mouse.KeyUp:Connect(function(Sq5Mc)
                    local Sq5Mc = Sq5Mc.lower(Sq5Mc)
                    local iAXm7_ = Sq5Mc.byte(Sq5Mc)

                    ActiveKeys[iAXm7_] = nil
                    ActiveKeys[Sq5Mc] = nil

                    if not selecting then
                        if Select2D.enabled then
                            Select2D.select(Select2D)
                            Select2D.finish(Select2D)
                        end
                    end
                    if CurrentTool and CurrentTool.Listeners.KeyUp then
                        CurrentTool.Listeners.KeyUp(Sq5Mc)
                    end
                end))
                table.insert(Connections, UserInputService.InputEnded:Connect(function(
                    fJ
                )
                    if fJ.UserInputType == Enum.UserInputType.MouseButton1 then
                        clicking = false

                        if Select2D.enabled then
                            Select2D.select(Select2D)
                            Select2D.finish(Select2D)
                        end
                    end
                end))
                table.insert(Connections, Mouse.Button1Down:Connect(function()
                    clicking = true
                    click_x, click_y = Mouse.X, Mouse.Y

                    if selecting then
                        return
                    end
                    if CurrentTool and CurrentTool.Listeners.Button1Down then
                        CurrentTool.Listeners.Button1Down()
                    end
                end))
                table.insert(Connections, Mouse.Move:Connect(function()
                    if not override_selection and not Select2D.enabled and clicking and selecting and (click_x ~= Mouse.X or click_y ~= Mouse.Y) then
                        Select2D.start(Select2D)
                    end
                    if not override_selection and isSelectable(Mouse.Target) and TargetBox.Adornee ~= Mouse.Target then
                        TargetBox.Adornee = Mouse.Target
                    end
                    if not override_selection and not isSelectable(Mouse.Target) then
                        TargetBox.Adornee = nil
                    end
                    if CurrentTool and CurrentTool.Listeners.Move then
                        CurrentTool.Listeners.Move()
                    end
                    if override_selection then
                        override_selection = false
                    end
                end))
                table.insert(Connections, Mouse.Button1Up:Connect(function()
                    clicking = false

                    if not Select2D.enabled and (Mouse.X ~= click_x or Mouse.Y ~= click_y) then
                        override_selection = true
                    end
                    if not override_selection and not selecting and not isSelectable(Mouse.Target) then
                        Selection.clear(Selection)
                    end
                    if not override_selection and selecting then
                        if not Selection.find(Selection, Mouse.Target) then
                            if isSelectable(Mouse.Target) then
                                Selection.add(Selection, Mouse.Target)
                            end
                        else
                            if (Mouse.X == click_x and Mouse.Y == click_y) and Selection.find(Selection, Mouse.Target) then
                                Selection.remove(Selection, Mouse.Target)
                            end
                        end
                    else
                        if not override_selection and isSelectable(Mouse.Target) then
                            Selection.clear(Selection)
                            Selection.add(Selection, Mouse.Target)
                        end
                    end
                    if CurrentTool and CurrentTool.Listeners.Button1Up then
                        CurrentTool.Listeners.Button1Up()
                    end
                    if override_selection then
                        override_selection = false
                    end
                end))
                table.insert(Connections, Mouse.Button2Down:Connect(function()
                    if CurrentTool and CurrentTool.Listeners.Button2Down then
                        CurrentTool.Listeners.Button2Down()
                    end
                end))
                table.insert(Connections, Mouse.Button2Up:Connect(function()
                    if CurrentTool and CurrentTool.Listeners.Button2Up then
                        CurrentTool.Listeners.Button2Up()
                    end
                end))
            end
            unequipBT = function()
                Mouse = nil

                if TargetBox then
                    TargetBox.Destroy(TargetBox)

                    TargetBox = nil
                end

                for aG3O, M6IbY in pairs(SelectionBoxes)do
                    M6IbY.Parent = nil
                end

                Dock.Visible = false

                for vxWBA, is in pairs(Connections)do
                    is.disconnect(is)

                    Connections[vxWBA] = nil
                end

                if CurrentTool and CurrentTool.Listeners.Unequipped then
                    CurrentTool.Listeners.Unequipped()
                end
            end

            print('Starting Tool List')

            local q = {
                {
                    'Anchor',
                    function()
                        repeat
                            wait()
                            print("I'm hooked")
                        until (_G.BTCoreEnv and _G.BTCoreEnv.tool and _G.BTCoreEnv.tool.CoreReady)

                        setfenv(1, _G.BTCoreEnv.tool)

                        Tools.Anchor = {}
                        Tools.Anchor.Connections = {}
                        Tools.Anchor.State = {anchored = nil}
                        Tools.Anchor.Listeners = {}
                        Tools.Anchor.Color = BrickColor.new('Really black')
                        Tools.Anchor.Listeners.Equipped = function()
                            local _l = Tools.Anchor

                            _l.State.PreviousSelectionBoxColor = SelectionBoxColor
                            SelectionBoxColor = _l.Color

                            updateSelectionBoxColor()
                            _l.showGUI(_l)
                            coroutine.wrap(function()
                                updater_on = true
                                _l.Updater = function()
                                    updater_on = false
                                end

                                while wait(0.1) and updater_on do
                                    if CurrentTool == _l then
                                        local IVdNQHj

                                        for l, icedjl in pairs(Selection.Items)do
                                            if l == 1 then
                                                IVdNQHj = icedjl.Anchored
                                            else
                                                if IVdNQHj ~= icedjl.Anchored then
                                                    IVdNQHj = nil
                                                end
                                            end
                                        end

                                        _l.State.anchored = IVdNQHj

                                        if _l.GUI and _l.GUI.Visible then
                                            _l.updateGUI(_l)
                                        end
                                    end
                                end
                            end)()

                            _l.Connections.EnterButtonListener = Mouse.KeyDown:Connect(function(
                                H
                            )
                                local H = H.lower(H)
                                local d1J = H.byte(H)

                                if d1J == 13 then
                                    if _l.State.anchored == true then
                                        _l.unanchor(_l)
                                    elseif _l.State.anchored == false then
                                        _l.anchor(_l)
                                    elseif _l.State.anchored == nil then
                                        _l.anchor(_l)
                                    end
                                end
                            end)
                        end
                        Tools.Anchor.startHistoryRecord = function(zVUtED)
                            if zVUtED.State.HistoryRecord then
                                zVUtED.State.HistoryRecord = nil
                            end

                            zVUtED.State.HistoryRecord = {
                                targets = Support.CloneTable(Selection.Items),
                                initial_positions = {},
                                terminal_positions = {},
                                initial_anchors = {},
                                terminal_anchors = {},
                                unapply = function(zVUtED)
                                    Selection.clear(Selection)

                                    for d_UB9, FysQC in pairs(zVUtED.targets)do
                                        if FysQC then
                                            FysQC.RotVelocity = Vector3.new(0, 0, 0)
                                            FysQC.Velocity = Vector3.new(0, 0, 0)
                                            FysQC.CFrame = zVUtED.initial_positions[FysQC]
                                            FysQC.Anchored = zVUtED.initial_anchors[FysQC]

                                            FysQC.MakeJoints(FysQC)
                                            Selection.add(Selection, FysQC)
                                        end
                                    end
                                end,
                                apply = function(zVUtED)
                                    Selection.clear(Selection)

                                    for AnG, yV8C in pairs(zVUtED.targets)do
                                        if yV8C then
                                            yV8C.RotVelocity = Vector3.new(0, 0, 0)
                                            yV8C.Velocity = Vector3.new(0, 0, 0)
                                            yV8C.CFrame = zVUtED.terminal_positions[yV8C]
                                            yV8C.Anchored = zVUtED.terminal_anchors[yV8C]

                                            yV8C.MakeJoints(yV8C)
                                            Selection.add(Selection, yV8C)
                                        end
                                    end
                                end,
                            }

                            for bt4Y, sZNR in pairs(zVUtED.State.HistoryRecord.targets)do
                                if sZNR then
                                    zVUtED.State.HistoryRecord.initial_anchors[sZNR] = sZNR.Anchored
                                    zVUtED.State.HistoryRecord.initial_positions[sZNR] = sZNR.CFrame
                                end
                            end
                        end
                        Tools.Anchor.finishHistoryRecord = function(WAIOz7)
                            if not WAIOz7.State.HistoryRecord then
                                return
                            end

                            for ICLcYduB, oXFiMbj in pairs(WAIOz7.State.HistoryRecord.targets)do
                                if oXFiMbj then
                                    WAIOz7.State.HistoryRecord.terminal_anchors[oXFiMbj] = oXFiMbj.Anchored
                                    WAIOz7.State.HistoryRecord.terminal_positions[oXFiMbj] = oXFiMbj.CFrame
                                end
                            end

                            History.add(History, WAIOz7.State.HistoryRecord)

                            WAIOz7.State.HistoryRecord = nil
                        end
                        Tools.Anchor.anchor = function(i5L)
                            i5L.startHistoryRecord(i5L)

                            for vYC4bdrc, QAFVQu14 in pairs(Selection.Items)do
                                QAFVQu14.Anchored = true

                                QAFVQu14.MakeJoints(QAFVQu14)
                            end

                            i5L.finishHistoryRecord(i5L)
                        end
                        Tools.Anchor.unanchor = function(DVx)
                            DVx.startHistoryRecord(DVx)

                            for r, Knh56 in pairs(Selection.Items)do
                                Knh56.Anchored = false
                                Knh56.Velocity = Vector3.new(0, 0, 0)
                                Knh56.RotVelocity = Vector3.new(0, 0, 0)

                                Knh56.MakeJoints(Knh56)
                            end

                            DVx.finishHistoryRecord(DVx)
                        end
                        Tools.Anchor.showGUI = function(DG90Rh)
                            if not DG90Rh.GUI then
                                local mBxSp8y2 = DFb100j.BTAnchorToolGUI:Clone()

                                mBxSp8y2.Parent = UI

                                mBxSp8y2.Status.Anchored.Button.MouseButton1Down:Connect(function(
                                )
                                    DG90Rh.anchor(DG90Rh)
                                end)
                                mBxSp8y2.Status.Unanchored.Button.MouseButton1Down:Connect(function(
                                )
                                    DG90Rh.unanchor(DG90Rh)
                                end)

                                DG90Rh.GUI = mBxSp8y2
                            end

                            DG90Rh.GUI.Visible = true
                        end
                        Tools.Anchor.updateGUI = function(W09NOBin)
                            if not W09NOBin.GUI then
                                return
                            end

                            local Tek7X = W09NOBin.GUI

                            if W09NOBin.State.anchored == nil then
                                Tek7X.Status.Anchored.Background.Image = Assets.LightSlantedRectangle
                                Tek7X.Status.Anchored.SelectedIndicator.BackgroundTransparency = 1
                                Tek7X.Status.Unanchored.Background.Image = Assets.LightSlantedRectangle
                                Tek7X.Status.Unanchored.SelectedIndicator.BackgroundTransparency = 1
                            elseif W09NOBin.State.anchored == true then
                                Tek7X.Status.Anchored.Background.Image = Assets.DarkSlantedRectangle
                                Tek7X.Status.Anchored.SelectedIndicator.BackgroundTransparency = 0
                                Tek7X.Status.Unanchored.Background.Image = Assets.LightSlantedRectangle
                                Tek7X.Status.Unanchored.SelectedIndicator.BackgroundTransparency = 1
                            elseif W09NOBin.State.anchored == false then
                                Tek7X.Status.Anchored.Background.Image = Assets.LightSlantedRectangle
                                Tek7X.Status.Anchored.SelectedIndicator.BackgroundTransparency = 1
                                Tek7X.Status.Unanchored.Background.Image = Assets.DarkSlantedRectangle
                                Tek7X.Status.Unanchored.SelectedIndicator.BackgroundTransparency = 0
                            end
                        end
                        Tools.Anchor.hideGUI = function(Wzzgk)
                            if Wzzgk.GUI then
                                Wzzgk.GUI.Visible = false
                            end
                        end
                        Tools.Anchor.Listeners.Unequipped = function()
                            local anaV = Tools.Anchor

                            if anaV.Updater then
                                anaV.Updater()

                                anaV.Updater = nil
                            end

                            anaV.hideGUI(anaV)

                            for gwxp, Qf in pairs(anaV.Connections)do
                                Qf.disconnect(Qf)

                                anaV.Connections[gwxp] = nil
                            end

                            SelectionBoxColor = anaV.State.PreviousSelectionBoxColor

                            updateSelectionBoxColor()
                        end
                        Tools.Anchor.Loaded = true
                    end,
                },
                {
                    'Collision',
                    function()
                        repeat
                            wait()
                        until (_G.BTCoreEnv and _G.BTCoreEnv.tool and _G.BTCoreEnv.tool.CoreReady)

                        setfenv(1, _G.BTCoreEnv.tool)

                        Tools.Collision = {}
                        Tools.Collision.Connections = {}
                        Tools.Collision.State = {colliding = nil}
                        Tools.Collision.Listeners = {}
                        Tools.Collision.Color = BrickColor.new('Really black')
                        Tools.Collision.Listeners.Equipped = function()
                            local sRf = Tools.Collision

                            sRf.State.PreviousSelectionBoxColor = SelectionBoxColor
                            SelectionBoxColor = sRf.Color

                            updateSelectionBoxColor()
                            sRf.showGUI(sRf)
                            coroutine.wrap(function()
                                updater_on = true
                                sRf.Updater = function()
                                    updater_on = false
                                end

                                while wait(0.1) and updater_on do
                                    if CurrentTool == sRf then
                                        local Ir

                                        for On7i, GAQjek in pairs(Selection.Items)do
                                            if On7i == 1 then
                                                Ir = GAQjek.CanCollide
                                            else
                                                if Ir ~= GAQjek.CanCollide then
                                                    Ir = nil
                                                end
                                            end
                                        end

                                        sRf.State.colliding = Ir

                                        if sRf.GUI and sRf.GUI.Visible then
                                            sRf.updateGUI(sRf)
                                        end
                                    end
                                end
                            end)()

                            sRf.Connections.EnterButtonListener = Mouse.KeyDown:Connect(function(
                                b
                            )
                                local b = b.lower(b)
                                local t = b.byte(b)

                                if t == 13 then
                                    if sRf.State.colliding == true then
                                        sRf.disable(sRf)
                                    elseif sRf.State.colliding == false then
                                        sRf.enable(sRf)
                                    elseif sRf.State.colliding == nil then
                                        sRf.enable(sRf)
                                    end
                                end
                            end)
                        end
                        Tools.Collision.startHistoryRecord = function(nUqS)
                            if nUqS.State.HistoryRecord then
                                nUqS.State.HistoryRecord = nil
                            end

                            nUqS.State.HistoryRecord = {
                                targets = Support.CloneTable(Selection.Items),
                                initial_collide = {},
                                terminal_collide = {},
                                initial_cframe = {},
                                terminal_cframe = {},
                                unapply = function(nUqS)
                                    Selection.clear(Selection)

                                    for wTVytu, VZjB in pairs(nUqS.targets)do
                                        if VZjB then
                                            VZjB.CanCollide = nUqS.initial_collide[VZjB]
                                            VZjB.CFrame = nUqS.initial_cframe[VZjB]

                                            VZjB.MakeJoints(VZjB)
                                            Selection.add(Selection, VZjB)
                                        end
                                    end
                                end,
                                apply = function(nUqS)
                                    Selection.clear(Selection)

                                    for Qv_pumH, Rm in pairs(nUqS.targets)do
                                        if Rm then
                                            Rm.CanCollide = nUqS.terminal_collide[Rm]
                                            Rm.CFrame = nUqS.terminal_cframe[Rm]

                                            Rm.MakeJoints(Rm)
                                            Selection.add(Selection, Rm)
                                        end
                                    end
                                end,
                            }

                            for Wq2v, G in pairs(nUqS.State.HistoryRecord.targets)do
                                if G then
                                    nUqS.State.HistoryRecord.initial_collide[G] = G.CanCollide
                                    nUqS.State.HistoryRecord.initial_cframe[G] = G.CFrame
                                end
                            end
                        end
                        Tools.Collision.finishHistoryRecord = function(e5kmv)
                            if not e5kmv.State.HistoryRecord then
                                return
                            end

                            for PSNhu, mAaO3eJ in pairs(e5kmv.State.HistoryRecord.targets)do
                                if mAaO3eJ then
                                    e5kmv.State.HistoryRecord.terminal_collide[mAaO3eJ] = mAaO3eJ.CanCollide
                                    e5kmv.State.HistoryRecord.terminal_cframe[mAaO3eJ] = mAaO3eJ.CFrame
                                end
                            end

                            History.add(History, e5kmv.State.HistoryRecord)

                            e5kmv.State.HistoryRecord = nil
                        end
                        Tools.Collision.enable = function(EO)
                            EO.startHistoryRecord(EO)

                            for Qw9, GMgV5kh in pairs(Selection.Items)do
                                GMgV5kh.CanCollide = true

                                GMgV5kh.MakeJoints(GMgV5kh)
                            end

                            EO.finishHistoryRecord(EO)
                        end
                        Tools.Collision.disable = function(Shm)
                            Shm.startHistoryRecord(Shm)

                            for iIKY5x, fLF in pairs(Selection.Items)do
                                fLF.CanCollide = false

                                fLF.MakeJoints(fLF)
                            end

                            Shm.finishHistoryRecord(Shm)
                        end
                        Tools.Collision.showGUI = function(eQ)
                            if not eQ.GUI then
                                local yGT7hv6 = DFb100j.BTCollisionToolGUI:Clone()

                                yGT7hv6.Parent = UI

                                yGT7hv6.Status.On.Button.MouseButton1Down:Connect(function(
                                )
                                    eQ.enable(eQ)
                                end)
                                yGT7hv6.Status.Off.Button.MouseButton1Down:Connect(function(
                                )
                                    eQ.disable(eQ)
                                end)

                                eQ.GUI = yGT7hv6
                            end

                            eQ.GUI.Visible = true
                        end
                        Tools.Collision.updateGUI = function(qG4fWn4a)
                            if not qG4fWn4a.GUI then
                                return
                            end

                            local Zkf = qG4fWn4a.GUI

                            if qG4fWn4a.State.colliding == nil then
                                Zkf.Status.On.Background.Image = Assets.LightSlantedRectangle
                                Zkf.Status.On.SelectedIndicator.BackgroundTransparency = 1
                                Zkf.Status.Off.Background.Image = Assets.LightSlantedRectangle
                                Zkf.Status.Off.SelectedIndicator.BackgroundTransparency = 1
                            elseif qG4fWn4a.State.colliding == true then
                                Zkf.Status.On.Background.Image = Assets.DarkSlantedRectangle
                                Zkf.Status.On.SelectedIndicator.BackgroundTransparency = 0
                                Zkf.Status.Off.Background.Image = Assets.LightSlantedRectangle
                                Zkf.Status.Off.SelectedIndicator.BackgroundTransparency = 1
                            elseif qG4fWn4a.State.colliding == false then
                                Zkf.Status.On.Background.Image = Assets.LightSlantedRectangle
                                Zkf.Status.On.SelectedIndicator.BackgroundTransparency = 1
                                Zkf.Status.Off.Background.Image = Assets.DarkSlantedRectangle
                                Zkf.Status.Off.SelectedIndicator.BackgroundTransparency = 0
                            end
                        end
                        Tools.Collision.hideGUI = function(N)
                            if N.GUI then
                                N.GUI.Visible = false
                            end
                        end
                        Tools.Collision.Listeners.Unequipped = function()
                            local Bh = Tools.Collision

                            if Bh.Updater then
                                Bh.Updater()

                                Bh.Updater = nil
                            end

                            Bh.hideGUI(Bh)

                            for r42joJ, zl1g in pairs(Bh.Connections)do
                                zl1g.disconnect(zl1g)

                                Bh.Connections[r42joJ] = nil
                            end

                            SelectionBoxColor = Bh.State.PreviousSelectionBoxColor

                            updateSelectionBoxColor()
                        end
                        Tools.Collision.Loaded = true
                    end,
                },
                {
                    'Material',
                    function()
                        repeat
                            wait()
                        until (_G.BTCoreEnv and _G.BTCoreEnv.tool and _G.BTCoreEnv.tool.CoreReady)

                        setfenv(1, _G.BTCoreEnv.tool)

                        Tools.Material = {}
                        Tools.Material.Color = BrickColor.new('Bright violet')
                        Tools.Material.Connections = {}
                        Tools.Material.State = {
                            material = nil,
                            reflectance_focused = false,
                            transparency_focused = false,
                        }
                        Tools.Material.Listeners = {}
                        Tools.Material.SpecialMaterialNames = {
                            CorrodedMetal = 'CORRODED METAL',
                            DiamondPlate = 'DIAMOND PLATE',
                            SmoothPlastic = 'SMOOTH PLASTIC',
                            WoodPlanks = 'WOOD PLANKS',
                        }
                        Tools.Material.Listeners.Equipped = function()
                            local Cx = Tools.Material

                            Cx.State.PreviousSelectionBoxColor = SelectionBoxColor
                            SelectionBoxColor = Cx.Color

                            updateSelectionBoxColor()
                            Cx.showGUI(Cx)
                            coroutine.wrap(function()
                                updater_on = true
                                Cx.Updater = function()
                                    updater_on = false
                                end

                                while wait(0.1) and updater_on do
                                    if CurrentTool == Cx then
                                        local A6o, s2_, i6j

                                        for oKC, Xzi2KU in pairs(Selection.Items)do
                                            if oKC == 1 then
                                                A6o = Xzi2KU.Material
                                                s2_ = Xzi2KU.Transparency
                                                i6j = Xzi2KU.Reflectance
                                            else
                                                if A6o ~= Xzi2KU.Material then
                                                    A6o = nil
                                                end
                                                if i6j ~= Xzi2KU.Reflectance then
                                                    i6j = nil
                                                end
                                                if s2_ ~= Xzi2KU.Transparency then
                                                    s2_ = nil
                                                end
                                            end
                                        end

                                        Cx.State.material = A6o
                                        Cx.State.transparency = s2_
                                        Cx.State.reflectance = i6j

                                        if Cx.GUI and Cx.GUI.Visible then
                                            Cx.updateGUI(Cx)
                                        end
                                    end
                                end
                            end)()
                        end
                        Tools.Material.Listeners.Unequipped = function()
                            local _c = Tools.Material

                            if _c.Updater then
                                _c.Updater()

                                _c.Updater = nil
                            end

                            _c.hideGUI(_c)

                            for S, pI1x in pairs(_c.Connections)do
                                pI1x.disconnect(pI1x)

                                _c.Connections[S] = nil
                            end

                            SelectionBoxColor = _c.State.PreviousSelectionBoxColor

                            updateSelectionBoxColor()
                        end
                        Tools.Material.startHistoryRecord = function(NgDx9_)
                            if NgDx9_.State.HistoryRecord then
                                NgDx9_.State.HistoryRecord = nil
                            end

                            NgDx9_.State.HistoryRecord = {
                                targets = Support.CloneTable(Selection.Items),
                                initial_material = {},
                                terminal_material = {},
                                initial_transparency = {},
                                terminal_transparency = {},
                                initial_reflectance = {},
                                terminal_reflectance = {},
                                unapply = function(NgDx9_)
                                    Selection.clear(Selection)

                                    for KzYaixt, i in pairs(NgDx9_.targets)do
                                        if i then
                                            i.Material = NgDx9_.initial_material[i]
                                            i.Transparency = NgDx9_.initial_transparency[i]
                                            i.Reflectance = NgDx9_.initial_reflectance[i]

                                            Selection.add(Selection, i)
                                        end
                                    end
                                end,
                                apply = function(NgDx9_)
                                    Selection.clear(Selection)

                                    for DM7, sBDh6v in pairs(NgDx9_.targets)do
                                        if sBDh6v then
                                            sBDh6v.Material = NgDx9_.terminal_material[sBDh6v]
                                            sBDh6v.Transparency = NgDx9_.terminal_transparency[sBDh6v]
                                            sBDh6v.Reflectance = NgDx9_.terminal_reflectance[sBDh6v]

                                            Selection.add(Selection, sBDh6v)
                                        end
                                    end
                                end,
                            }

                            for siy_21f, wkUEOv in pairs(NgDx9_.State.HistoryRecord.targets)do
                                if wkUEOv then
                                    NgDx9_.State.HistoryRecord.initial_material[wkUEOv] = wkUEOv.Material
                                    NgDx9_.State.HistoryRecord.initial_transparency[wkUEOv] = wkUEOv.Transparency
                                    NgDx9_.State.HistoryRecord.initial_reflectance[wkUEOv] = wkUEOv.Reflectance
                                end
                            end
                        end
                        Tools.Material.finishHistoryRecord = function(b)
                            if not b.State.HistoryRecord then
                                return
                            end

                            for s1sExxI, qR in pairs(b.State.HistoryRecord.targets)do
                                if qR then
                                    b.State.HistoryRecord.terminal_material[qR] = qR.Material
                                    b.State.HistoryRecord.terminal_transparency[qR] = qR.Transparency
                                    b.State.HistoryRecord.terminal_reflectance[qR] = qR.Reflectance
                                end
                            end

                            History.add(History, b.State.HistoryRecord)

                            b.State.HistoryRecord = nil
                        end
                        Tools.Material.changeMaterial = function(KMeqP, y3tk)
                            KMeqP.startHistoryRecord(KMeqP)

                            for A, Iysi_9UF in pairs(Selection.Items)do
                                Iysi_9UF.Material = y3tk
                            end

                            KMeqP.finishHistoryRecord(KMeqP)

                            if KMeqP.MaterialDropdown.open then
                                KMeqP.MaterialDropdown:toggle()
                            end
                        end
                        Tools.Material.changeTransparency = function(joAA, w)
                            joAA.startHistoryRecord(joAA)

                            for ta59, b_knq in pairs(Selection.Items)do
                                b_knq.Transparency = w
                            end

                            joAA.finishHistoryRecord(joAA)
                        end
                        Tools.Material.changeReflectance = function(
                            J_AlR,
                            _dqQ8fSw
                        )
                            J_AlR.startHistoryRecord(J_AlR)

                            for onKnnPCx, WytqKWPI in pairs(Selection.Items)do
                                WytqKWPI.Reflectance = _dqQ8fSw
                            end

                            J_AlR.finishHistoryRecord(J_AlR)
                        end
                        Tools.Material.updateGUI = function(M)
                            if not M.GUI then
                                return
                            end
                            if #Selection.Items > 0 then
                                M.GUI.Size = UDim2.new(0, 200, 0, 145)
                                M.GUI.MaterialOption.Visible = true
                                M.GUI.ReflectanceOption.Visible = true
                                M.GUI.TransparencyOption.Visible = true
                                M.GUI.SelectNote.Visible = false

                                M.MaterialDropdown:selectOption(M.State.material and (M.SpecialMaterialNames[M.State.material.Name] or M.State.material.Name:upper()) or '*')

                                if not M.State.transparency_focused then
                                    M.GUI.TransparencyOption.TransparencyInput.TextBox.Text = M.State.transparency and tostring(Support.Round(M.State.transparency, 2)) or '*'
                                end
                                if not M.State.reflectance_focused then
                                    M.GUI.ReflectanceOption.ReflectanceInput.TextBox.Text = M.State.reflectance and tostring(Support.Round(M.State.reflectance, 2)) or '*'
                                end
                            else
                                M.GUI.Size = UDim2.new(0, 200, 0, 62)
                                M.GUI.MaterialOption.Visible = false
                                M.GUI.ReflectanceOption.Visible = false
                                M.GUI.TransparencyOption.Visible = false
                                M.GUI.SelectNote.Visible = true

                                M.MaterialDropdown:selectOption('')

                                M.GUI.TransparencyOption.TransparencyInput.TextBox.Text = ''
                                M.GUI.ReflectanceOption.ReflectanceInput.TextBox.Text = ''
                            end
                        end
                        Tools.Material.showGUI = function(K4o_AriB)
                            if not K4o_AriB.GUI then
                                local MXcdGX = DFb100j.BTMaterialToolGUI:Clone()

                                MXcdGX.Parent = UI

                                local R9 = createDropdown()

                                K4o_AriB.MaterialDropdown = R9
                                R9.Frame.Parent = MXcdGX.MaterialOption
                                R9.Frame.Position = UDim2.new(0, 50, 0, 0)
                                R9.Frame.Size = UDim2.new(0, 130, 0, 25)

                                R9.addOption(R9, 'SMOOTH PLASTIC').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.SmoothPlastic)
                                end)
                                R9.addOption(R9, 'PLASTIC').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Plastic)
                                end)
                                R9.addOption(R9, 'BRICK').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Brick)
                                end)
                                R9.addOption(R9, 'COBBLESTONE').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Cobblestone)
                                end)
                                R9.addOption(R9, 'CONCRETE').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Concrete)
                                end)
                                R9.addOption(R9, 'CORRODED METAL').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.CorrodedMetal)
                                end)
                                R9.addOption(R9, 'DIAMOND PLATE').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.DiamondPlate)
                                end)
                                R9.addOption(R9, 'FABRIC').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Fabric)
                                end)
                                R9.addOption(R9, 'FOIL').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Foil)
                                end)
                                R9.addOption(R9, 'GRANITE').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Granite)
                                end)
                                R9.addOption(R9, 'GRASS').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Grass)
                                end)
                                R9.addOption(R9, 'ICE').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Ice)
                                end)
                                R9.addOption(R9, 'MARBLE').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Marble)
                                end)
                                R9.addOption(R9, 'METAL').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Metal)
                                end)
                                R9.addOption(R9, 'NEON').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Neon)
                                end)
                                R9.addOption(R9, 'PEBBLE').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Pebble)
                                end)
                                R9.addOption(R9, 'SAND').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Sand)
                                end)
                                R9.addOption(R9, 'SLATE').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Slate)
                                end)
                                R9.addOption(R9, 'WOOD').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.Wood)
                                end)
                                R9.addOption(R9, 'WOOD PLANKS').MouseButton1Up:Connect(function(
                                )
                                    K4o_AriB.changeMaterial(K4o_AriB, Enum.Material.WoodPlanks)
                                end)
                                MXcdGX.TransparencyOption.TransparencyInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    K4o_AriB.State.transparency_focused = true

                                    MXcdGX.TransparencyOption.TransparencyInput.TextBox:CaptureFocus()
                                end)
                                MXcdGX.TransparencyOption.TransparencyInput.TextBox.FocusLost:Connect(function(
                                    n9zj
                                )
                                    local sWU = tonumber(MXcdGX.TransparencyOption.TransparencyInput.TextBox.Text)

                                    if sWU then
                                        if sWU > 1 then
                                            sWU = 1
                                        elseif sWU < 0 then
                                            sWU = 0
                                        end

                                        K4o_AriB.changeTransparency(K4o_AriB, sWU)
                                    end

                                    K4o_AriB.State.transparency_focused = false
                                end)
                                MXcdGX.ReflectanceOption.ReflectanceInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    K4o_AriB.State.reflectance_focused = true

                                    MXcdGX.ReflectanceOption.ReflectanceInput.TextBox:CaptureFocus()
                                end)
                                MXcdGX.ReflectanceOption.ReflectanceInput.TextBox.FocusLost:Connect(function(
                                    JoZ28
                                )
                                    local hBfySU = tonumber(MXcdGX.ReflectanceOption.ReflectanceInput.TextBox.Text)

                                    if hBfySU then
                                        if hBfySU > 1 then
                                            hBfySU = 1
                                        elseif hBfySU < 0 then
                                            hBfySU = 0
                                        end

                                        K4o_AriB.changeReflectance(K4o_AriB, hBfySU)
                                    end

                                    K4o_AriB.State.reflectance_focused = false
                                end)

                                K4o_AriB.GUI = MXcdGX
                            end

                            K4o_AriB.GUI.Visible = true
                        end
                        Tools.Material.hideGUI = function(Uvmu)
                            if Uvmu.GUI then
                                Uvmu.GUI.Visible = false
                            end
                        end
                        Tools.Material.Loaded = true
                    end,
                },
                {
                    'Mesh',
                    function()
                        repeat
                            wait()
                        until (_G.BTCoreEnv and _G.BTCoreEnv.tool and _G.BTCoreEnv.tool.CoreReady)

                        setfenv(1, _G.BTCoreEnv.tool)

                        Tools.Mesh = {}
                        Tools.Mesh.Color = BrickColor.new('Bright violet')
                        Tools.Mesh.State = {}
                        Tools.Mesh.Connections = {}
                        Tools.Mesh.Listeners = {}
                        Tools.Mesh.Listeners.Equipped = function()
                            local _ = Tools.Mesh

                            _.State.PreviousSelectionBoxColor = SelectionBoxColor
                            SelectionBoxColor = _.Color

                            updateSelectionBoxColor()
                            _.showGUI(_)
                            coroutine.wrap(function()
                                updater_on = true
                                _.Updater = function()
                                    updater_on = false
                                end

                                while wait(0.1) and updater_on do
                                    if CurrentTool == _ then
                                        if _.GUI and _.GUI.Visible then
                                            _.updateGUI(_)
                                        end
                                    end
                                end
                            end)()
                        end
                        Tools.Mesh.Listeners.Unequipped = function()
                            local SeHRNaX = Tools.Mesh

                            if SeHRNaX.Updater then
                                SeHRNaX.Updater()

                                SeHRNaX.Updater = nil
                            end

                            SeHRNaX.hideGUI(SeHRNaX)

                            for kH7r, HOB in pairs(SeHRNaX.Connections)do
                                HOB.disconnect(HOB)

                                SeHRNaX.Connections[kH7r] = nil
                            end

                            SelectionBoxColor = SeHRNaX.State.PreviousSelectionBoxColor

                            updateSelectionBoxColor()
                        end
                        Tools.Mesh.TypeDropdownLabels = {
                            [Enum.MeshType.Brick] = 'BLOCK',
                            [Enum.MeshType.Cylinder] = 'CYLINDER',
                            [Enum.MeshType.FileMesh] = 'FILE',
                            [Enum.MeshType.Head] = 'HEAD',
                            [Enum.MeshType.Sphere] = 'SPHERE',
                            [Enum.MeshType.Torso] = 'TRAPEZOID',
                            [Enum.MeshType.Wedge] = 'WEDGE',
                        }
                        Tools.Mesh.changeType = function(RCc, vLr4f)
                            local Pad5yPd = {}

                            for GAeGfl, TYRl in pairs(Selection.Items)do
                                local uoRdE7k = Support.GetChildOfClass(TYRl, 'SpecialMesh')

                                if uoRdE7k then
                                    table.insert(Pad5yPd, uoRdE7k)
                                end
                            end

                            RCc.startHistoryRecord(RCc, Pad5yPd)

                            for k5, F_cOghKV in pairs(Pad5yPd)do
                                F_cOghKV.MeshType = vLr4f
                            end

                            RCc.finishHistoryRecord(RCc)

                            if RCc.TypeDropdown.open then
                                RCc.TypeDropdown:toggle()
                            end

                            RCc.finishHistoryRecord(RCc)
                        end
                        Tools.Mesh.updateGUI = function(Ytf)
                            if not Ytf.GUI then
                                return
                            end

                            local VAKgo = Ytf.GUI

                            if #Selection.Items > 0 then
                                local QB = {}

                                for cMk1b62p, iAIf in pairs(Selection.Items)do
                                    local Am0WLx = Support.GetChildOfClass(iAIf, 'SpecialMesh')

                                    if Am0WLx then
                                        table.insert(QB, Am0WLx)
                                    end
                                end

                                local y8zF, T, fT1
                                local lMKfa, P25nFo1, MwI, t, rcbgP, nwoQ, pazH2Fh, GZ2PbO, y

                                if #QB == #Selection.Items then
                                    y8zF = false
                                    T = true
                                elseif #QB == 0 then
                                    y8zF = true
                                    T = false
                                else
                                    y8zF = true
                                    T = true
                                end
                                if #QB > 0 then
                                    show_type = true

                                    for TDJshmj, LTJy0 in pairs(QB)do
                                        if TDJshmj == 1 then
                                            lMKfa = LTJy0.MeshType
                                            P25nFo1, MwI, t = LTJy0.Scale.x, LTJy0.Scale.y, LTJy0.Scale.z
                                            rcbgP = LTJy0.MeshId:lower()
                                            nwoQ = LTJy0.TextureId:lower()
                                            pazH2Fh, GZ2PbO, y = LTJy0.VertexColor.x, LTJy0.VertexColor.y, LTJy0.VertexColor.z
                                        else
                                            if lMKfa ~= LTJy0.MeshType then
                                                lMKfa = nil
                                            end
                                            if P25nFo1 ~= LTJy0.Scale.x then
                                                P25nFo1 = nil
                                            end
                                            if MwI ~= LTJy0.Scale.y then
                                                MwI = nil
                                            end
                                            if t ~= LTJy0.Scale.z then
                                                t = nil
                                            end
                                            if rcbgP ~= LTJy0.MeshId:lower() then
                                                rcbgP = nil
                                            end
                                            if nwoQ ~= LTJy0.TextureId:lower() then
                                                nwoQ = nil
                                            end
                                            if pazH2Fh ~= LTJy0.VertexColor.x then
                                                pazH2Fh = nil
                                            end
                                            if GZ2PbO ~= LTJy0.VertexColor.y then
                                                GZ2PbO = nil
                                            end
                                            if y ~= LTJy0.VertexColor.z then
                                                y = nil
                                            end
                                        end
                                        if LTJy0.MeshType == Enum.MeshType.FileMesh then
                                            fT1 = true
                                        end
                                    end

                                    Ytf.State.mesh_tint = (pazH2Fh and GZ2PbO and y) and Color3.new(pazH2Fh, GZ2PbO, y) or nil

                                    if fT1 and y8zF and T then
                                        Ytf.GUI.AddButton.Visible = true
                                        Ytf.GUI.RemoveButton.Visible = true
                                        Ytf.GUI.MeshIDOption.Visible = true
                                        Ytf.GUI.TextureIDOption.Visible = true
                                        Ytf.GUI.ScaleOption.Visible = true
                                        Ytf.GUI.TintOption.Visible = true
                                        Ytf.GUI.TypeOption.Visible = true
                                        Ytf.GUI.TypeOption.Position = UDim2.new(0, 14, 0, 65)
                                        Ytf.GUI.ScaleOption.Position = UDim2.new(0, 0, 0, 100)
                                        Ytf.GUI.MeshIDOption.Position = UDim2.new(0, 14, 0, 135)
                                        Ytf.GUI.TextureIDOption.Position = UDim2.new(0, 14, 0, 165)
                                        Ytf.GUI.TintOption.Position = UDim2.new(0, 0, 0, 200)
                                        Ytf.GUI.Size = UDim2.new(0, 200, 0, 265)
                                    elseif fT1 and not y8zF and T then
                                        Ytf.GUI.AddButton.Visible = false
                                        Ytf.GUI.RemoveButton.Visible = true
                                        Ytf.GUI.MeshIDOption.Visible = true
                                        Ytf.GUI.TextureIDOption.Visible = true
                                        Ytf.GUI.ScaleOption.Visible = true
                                        Ytf.GUI.TintOption.Visible = true
                                        Ytf.GUI.TypeOption.Visible = true
                                        Ytf.GUI.TypeOption.Position = UDim2.new(0, 14, 0, 30)
                                        Ytf.GUI.ScaleOption.Position = UDim2.new(0, 0, 0, 65)
                                        Ytf.GUI.MeshIDOption.Position = UDim2.new(0, 14, 0, 100)
                                        Ytf.GUI.TextureIDOption.Position = UDim2.new(0, 14, 0, 130)
                                        Ytf.GUI.TintOption.Position = UDim2.new(0, 0, 0, 165)
                                        Ytf.GUI.Size = UDim2.new(0, 200, 0, 230)
                                    elseif not fT1 and y8zF and T then
                                        Ytf.GUI.AddButton.Visible = true
                                        Ytf.GUI.RemoveButton.Visible = true
                                        Ytf.GUI.MeshIDOption.Visible = false
                                        Ytf.GUI.TextureIDOption.Visible = false
                                        Ytf.GUI.ScaleOption.Visible = true
                                        Ytf.GUI.TintOption.Visible = false
                                        Ytf.GUI.TypeOption.Visible = true
                                        Ytf.GUI.TypeOption.Position = UDim2.new(0, 14, 0, 65)
                                        Ytf.GUI.ScaleOption.Position = UDim2.new(0, 0, 0, 100)
                                        Ytf.GUI.Size = UDim2.new(0, 200, 0, 165)
                                    elseif not fT1 and not y8zF and T then
                                        Ytf.GUI.AddButton.Visible = false
                                        Ytf.GUI.RemoveButton.Visible = true
                                        Ytf.GUI.MeshIDOption.Visible = false
                                        Ytf.GUI.TextureIDOption.Visible = false
                                        Ytf.GUI.ScaleOption.Visible = true
                                        Ytf.GUI.TintOption.Visible = false
                                        Ytf.GUI.TypeOption.Visible = true
                                        Ytf.GUI.TypeOption.Position = UDim2.new(0, 14, 0, 30)
                                        Ytf.GUI.ScaleOption.Position = UDim2.new(0, 0, 0, 65)
                                        Ytf.GUI.Size = UDim2.new(0, 200, 0, 130)
                                    end
                                    if not Ytf.State.mesh_id_focused then
                                        Ytf.GUI.MeshIDOption.TextBox.Text = rcbgP and (rcbgP.match(rcbgP, '%?id=([0-9]+)') or '') or '*'
                                    end
                                    if not Ytf.State.texture_id_focused then
                                        Ytf.GUI.TextureIDOption.TextBox.Text = nwoQ and (nwoQ.match(nwoQ, '%?id=([0-9]+)') or '') or '*'
                                    end

                                    Ytf.TypeDropdown:selectOption(lMKfa and Ytf.TypeDropdownLabels[lMKfa] or '*')

                                    if not Ytf.State.scale_x_focused then
                                        Ytf.GUI.ScaleOption.XInput.TextBox.Text = P25nFo1 and Support.Round(P25nFo1, 2) or '*'
                                    end
                                    if not Ytf.State.scale_y_focused then
                                        Ytf.GUI.ScaleOption.YInput.TextBox.Text = MwI and Support.Round(MwI, 2) or '*'
                                    end
                                    if not Ytf.State.scale_z_focused then
                                        Ytf.GUI.ScaleOption.ZInput.TextBox.Text = t and Support.Round(t, 2) or '*'
                                    end
                                    if not Ytf.State.tint_r_focused then
                                        Ytf.GUI.TintOption.RInput.TextBox.Text = pazH2Fh and Support.Round(pazH2Fh * 255, 0) or '*'
                                    end
                                    if not Ytf.State.tint_g_focused then
                                        Ytf.GUI.TintOption.GInput.TextBox.Text = GZ2PbO and Support.Round(GZ2PbO * 255, 0) or '*'
                                    end
                                    if not Ytf.State.tint_b_focused then
                                        Ytf.GUI.TintOption.BInput.TextBox.Text = y and Support.Round(y * 255, 0) or '*'
                                    end
                                else
                                    Ytf.GUI.AddButton.Visible = true
                                    Ytf.GUI.RemoveButton.Visible = false
                                    Ytf.GUI.MeshIDOption.Visible = false
                                    Ytf.GUI.TextureIDOption.Visible = false
                                    Ytf.GUI.ScaleOption.Visible = false
                                    Ytf.GUI.TintOption.Visible = false
                                    Ytf.GUI.TypeOption.Visible = false
                                    Ytf.GUI.Size = UDim2.new(0, 200, 0, 62)
                                end

                                Ytf.GUI.SelectNote.Visible = false
                            else
                                Ytf.GUI.AddButton.Visible = false
                                Ytf.GUI.RemoveButton.Visible = false
                                Ytf.GUI.MeshIDOption.Visible = false
                                Ytf.GUI.TextureIDOption.Visible = false
                                Ytf.GUI.ScaleOption.Visible = false
                                Ytf.GUI.TintOption.Visible = false
                                Ytf.GUI.TypeOption.Visible = false
                                Ytf.GUI.SelectNote.Visible = true
                                Ytf.GUI.Size = UDim2.new(0, 200, 0, 55)
                            end
                        end
                        Tools.Mesh.showGUI = function(N)
                            if not N.GUI then
                                local Ns = DFb100j.BTMeshToolGUI:Clone()

                                Ns.Parent = UI

                                Ns.AddButton.Button.MouseButton1Up:Connect(function(
                                )
                                    N.addMesh(N)
                                end)
                                Ns.RemoveButton.Button.MouseButton1Up:Connect(function(
                                )
                                    N.removeMesh(N)
                                end)

                                local ZOvR1 = createDropdown()

                                N.TypeDropdown = ZOvR1
                                ZOvR1.Frame.Parent = Ns.TypeOption
                                ZOvR1.Frame.Position = UDim2.new(0, 40, 0, 0)
                                ZOvR1.Frame.Size = UDim2.new(1, -40, 0, 25)

                                ZOvR1.addOption(ZOvR1, 'BLOCK').MouseButton1Up:Connect(function(
                                )
                                    N.changeType(N, Enum.MeshType.Brick)
                                end)
                                ZOvR1.addOption(ZOvR1, 'CYLINDER').MouseButton1Up:Connect(function(
                                )
                                    N.changeType(N, Enum.MeshType.Cylinder)
                                end)
                                ZOvR1.addOption(ZOvR1, 'FILE').MouseButton1Up:Connect(function(
                                )
                                    N.changeType(N, Enum.MeshType.FileMesh)
                                end)
                                ZOvR1.addOption(ZOvR1, 'HEAD').MouseButton1Up:Connect(function(
                                )
                                    N.changeType(N, Enum.MeshType.Head)
                                end)
                                ZOvR1.addOption(ZOvR1, 'SPHERE').MouseButton1Up:Connect(function(
                                )
                                    N.changeType(N, Enum.MeshType.Sphere)
                                end)
                                ZOvR1.addOption(ZOvR1, 'TRAPEZOID').MouseButton1Up:Connect(function(
                                )
                                    N.changeType(N, Enum.MeshType.Torso)
                                end)
                                ZOvR1.addOption(ZOvR1, 'WEDGE').MouseButton1Up:Connect(function(
                                )
                                    N.changeType(N, Enum.MeshType.Wedge)
                                end)
                                Ns.ScaleOption.XInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    N.State.scale_x_focused = true

                                    Ns.ScaleOption.XInput.TextBox:CaptureFocus()
                                end)
                                Ns.ScaleOption.XInput.TextBox.FocusLost:Connect(function(
                                    L75
                                )
                                    local zh = tonumber(Ns.ScaleOption.XInput.TextBox.Text)

                                    if zh then
                                        N.changeScale(N, 'x', zh)
                                    end

                                    N.State.scale_x_focused = false
                                end)
                                Ns.ScaleOption.YInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    N.State.scale_y_focused = true

                                    Ns.ScaleOption.YInput.TextBox:CaptureFocus()
                                end)
                                Ns.ScaleOption.YInput.TextBox.FocusLost:Connect(function(
                                    v
                                )
                                    local Il05 = tonumber(Ns.ScaleOption.YInput.TextBox.Text)

                                    if Il05 then
                                        N.changeScale(N, 'y', Il05)
                                    end

                                    N.State.scale_y_focused = false
                                end)
                                Ns.ScaleOption.ZInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    N.State.scale_z_focused = true

                                    Ns.ScaleOption.ZInput.TextBox:CaptureFocus()
                                end)
                                Ns.ScaleOption.ZInput.TextBox.FocusLost:Connect(function(
                                    d0W
                                )
                                    local b = tonumber(Ns.ScaleOption.ZInput.TextBox.Text)

                                    if b then
                                        N.changeScale(N, 'z', b)
                                    end

                                    N.State.scale_z_focused = false
                                end)
                                Ns.MeshIDOption.TextButton.MouseButton1Down:Connect(function(
                                )
                                    N.State.mesh_id_focused = true

                                    Ns.MeshIDOption.TextBox:CaptureFocus()
                                end)
                                Ns.MeshIDOption.TextBox.FocusLost:Connect(function(
                                    dG
                                )
                                    local wF9WF = Ns.MeshIDOption.TextBox.Text
                                    local b097 = tonumber(wF9WF) or wF9WF.lower(wF9WF):match('%?id=([0-9]+)')

                                    if b097 then
                                        N.changeMesh(N, b097)
                                    end

                                    N.State.mesh_id_focused = false
                                end)
                                Ns.TextureIDOption.TextButton.MouseButton1Down:Connect(function(
                                )
                                    N.State.texture_id_focused = true

                                    Ns.TextureIDOption.TextBox:CaptureFocus()
                                end)
                                Ns.TextureIDOption.TextBox.FocusLost:Connect(function(
                                    Qu1
                                )
                                    local r6 = Ns.TextureIDOption.TextBox.Text
                                    local DOx = tonumber(r6) or r6.lower(r6):match('%?id=([0-9]+)')

                                    if DOx then
                                        N.changeTexture(N, DOx)
                                    end

                                    N.State.texture_id_focused = false
                                end)
                                Ns.TintOption.RInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    N.State.tint_r_focused = true

                                    Ns.TintOption.RInput.TextBox:CaptureFocus()
                                end)
                                Ns.TintOption.RInput.TextBox.FocusLost:Connect(function(
                                    sQe35a
                                )
                                    local p2 = tonumber(Ns.TintOption.RInput.TextBox.Text)

                                    if p2 then
                                        if p2 > 255 then
                                            p2 = 255
                                        elseif p2 < 0 then
                                            p2 = 0
                                        end

                                        N.changeTint(N, 'r', p2 / 255)
                                    end

                                    N.State.tint_r_focused = false
                                end)
                                Ns.TintOption.GInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    N.State.tint_g_focused = true

                                    Ns.TintOption.GInput.TextBox:CaptureFocus()
                                end)
                                Ns.TintOption.GInput.TextBox.FocusLost:Connect(function(
                                    TN
                                )
                                    local vtk = tonumber(Ns.TintOption.GInput.TextBox.Text)

                                    if vtk then
                                        if vtk > 255 then
                                            vtk = 255
                                        elseif vtk < 0 then
                                            vtk = 0
                                        end

                                        N.changeTint(N, 'g', vtk / 255)
                                    end

                                    N.State.tint_g_focused = false
                                end)
                                Ns.TintOption.BInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    N.State.tint_b_focused = true

                                    Ns.TintOption.BInput.TextBox:CaptureFocus()
                                end)
                                Ns.TintOption.BInput.TextBox.FocusLost:Connect(function(
                                    ENKi
                                )
                                    local HgWdXJXD = tonumber(Ns.TintOption.BInput.TextBox.Text)

                                    if HgWdXJXD then
                                        if HgWdXJXD > 255 then
                                            HgWdXJXD = 255
                                        elseif HgWdXJXD < 0 then
                                            HgWdXJXD = 0
                                        end

                                        N.changeTint(N, 'b', HgWdXJXD / 255)
                                    end

                                    N.State.tint_b_focused = false
                                end)
                                Ns.TintOption.HSVPicker.MouseButton1Up:Connect(function(
                                )
                                    ColorPicker.start(ColorPicker, function(...)
                                        local wiugbQS = {...}

                                        if #wiugbQS == 3 then
                                            local Cz5 = {}

                                            for UfgAV, LO0nqS in pairs(Selection.Items)do
                                                local PIht9 = Support.GetChildOfClass(LO0nqS, 'SpecialMesh')

                                                if PIht9 then
                                                    table.insert(Cz5, PIht9)
                                                end
                                            end

                                            N.startHistoryRecord(N, Cz5)

                                            for bn, A666l08 in pairs(Cz5)do
                                                A666l08.VertexColor = Vector3.new(Support.HSVToRGB(
...))
                                            end

                                            N.finishHistoryRecord(N)
                                        end
                                    end, N.State.mesh_tint)
                                end)

                                N.GUI = Ns
                            end

                            N.GUI.Visible = true
                        end
                        Tools.Mesh.addMesh = function(R02tO)
                            local oVO = {
                                apply = function(R02tO)
                                    Selection.clear(Selection)

                                    for r, sZyXLp in pairs(R02tO.meshes)do
                                        sZyXLp.Parent = R02tO.mesh_parents[sZyXLp]

                                        Selection.add(Selection, sZyXLp.Parent)
                                    end
                                end,
                                unapply = function(R02tO)
                                    Selection.clear(Selection)

                                    for nHUmh, VEw8 in pairs(R02tO.meshes)do
                                        Selection.add(Selection, VEw8.Parent)

                                        VEw8.Parent = nil
                                    end
                                end,
                            }
                            local X0NOlR5 = {}
                            local drv = {}

                            for QAD, R6Ky in pairs(Selection.Items)do
                                local vq5u9jrx = Support.GetChildOfClass(R6Ky, 'SpecialMesh')

                                if not vq5u9jrx then
                                    local vq5u9jrx = RbxUtility.Create'SpecialMesh'{
                                        Parent = R6Ky,
                                        MeshType = Enum.MeshType.Brick,
                                    }

                                    table.insert(X0NOlR5, vq5u9jrx)

                                    drv[vq5u9jrx] = R6Ky
                                end
                            end

                            oVO.meshes = X0NOlR5
                            oVO.mesh_parents = drv

                            History.add(History, oVO)
                        end
                        Tools.Mesh.removeMesh = function(kNsSSMzG)
                            local ZcV = {
                                apply = function(kNsSSMzG)
                                    Selection.clear(Selection)

                                    for y6z6ip, v in pairs(kNsSSMzG.meshes)do
                                        Selection.add(Selection, v.Parent)

                                        v.Parent = nil
                                    end
                                end,
                                unapply = function(kNsSSMzG)
                                    Selection.clear(Selection)

                                    for Bu, _TI in pairs(kNsSSMzG.meshes)do
                                        _TI.Parent = kNsSSMzG.mesh_parents[_TI]

                                        Selection.add(Selection, _TI.Parent)
                                    end
                                end,
                            }
                            local WiZA = {}
                            local K4SQ1h2e = {}

                            for YE7, Q2e in pairs(Selection.Items)do
                                local z = Support.GetChildrenOfClass(Q2e, 'SpecialMesh')

                                for YE7, Cy in pairs(z)do
                                    table.insert(WiZA, Cy)

                                    K4SQ1h2e[Cy] = Cy.Parent
                                    Cy.Parent = nil
                                end
                            end

                            ZcV.meshes = WiZA
                            ZcV.mesh_parents = K4SQ1h2e

                            History.add(History, ZcV)
                        end
                        Tools.Mesh.startHistoryRecord = function(ZhG, ARBIKz)
                            if ZhG.State.HistoryRecord then
                                ZhG.State.HistoryRecord = nil
                            end

                            ZhG.State.HistoryRecord = {
                                targets = Support.CloneTable(ARBIKz),
                                initial_type = {},
                                terminal_type = {},
                                initial_mesh = {},
                                terminal_mesh = {},
                                initial_texture = {},
                                terminal_texture = {},
                                initial_scale = {},
                                terminal_scale = {},
                                initial_tint = {},
                                terminal_tint = {},
                                unapply = function(ZhG)
                                    Selection.clear(Selection)

                                    for p7, j in pairs(ZhG.targets)do
                                        if j then
                                            Selection.add(Selection, j.Parent)

                                            j.MeshType = ZhG.initial_type[j]
                                            j.MeshId = ZhG.initial_mesh[j]
                                            j.TextureId = ZhG.initial_texture[j]
                                            j.Scale = ZhG.initial_scale[j]
                                            j.VertexColor = ZhG.initial_tint[j]
                                        end
                                    end
                                end,
                                apply = function(ZhG)
                                    Selection.clear(Selection)

                                    for zbC2yHd0, I in pairs(ZhG.targets)do
                                        if I then
                                            Selection.add(Selection, I.Parent)

                                            I.MeshType = ZhG.terminal_type[I]
                                            I.MeshId = ZhG.terminal_mesh[I]
                                            I.TextureId = ZhG.terminal_texture[I]
                                            I.Scale = ZhG.terminal_scale[I]
                                            I.VertexColor = ZhG.terminal_tint[I]
                                        end
                                    end
                                end,
                            }

                            for Jt, aUu in pairs(ZhG.State.HistoryRecord.targets)do
                                if aUu then
                                    ZhG.State.HistoryRecord.initial_type[aUu] = aUu.MeshType
                                    ZhG.State.HistoryRecord.initial_mesh[aUu] = aUu.MeshId
                                    ZhG.State.HistoryRecord.initial_texture[aUu] = aUu.TextureId
                                    ZhG.State.HistoryRecord.initial_scale[aUu] = aUu.Scale
                                    ZhG.State.HistoryRecord.initial_tint[aUu] = aUu.VertexColor
                                end
                            end
                        end
                        Tools.Mesh.finishHistoryRecord = function(We1INxkk)
                            if not We1INxkk.State.HistoryRecord then
                                return
                            end

                            for X37Nsx, eE in pairs(We1INxkk.State.HistoryRecord.targets)do
                                if eE then
                                    We1INxkk.State.HistoryRecord.terminal_type[eE] = eE.MeshType
                                    We1INxkk.State.HistoryRecord.terminal_mesh[eE] = eE.MeshId
                                    We1INxkk.State.HistoryRecord.terminal_texture[eE] = eE.TextureId
                                    We1INxkk.State.HistoryRecord.terminal_scale[eE] = eE.Scale
                                    We1INxkk.State.HistoryRecord.terminal_tint[eE] = eE.VertexColor
                                end
                            end

                            History.add(History, We1INxkk.State.HistoryRecord)

                            We1INxkk.State.HistoryRecord = nil
                        end
                        Tools.Mesh.changeMesh = function(pCWPYYE, g)
                            local kUNaj9 = {}

                            for Ewt, TzK in pairs(Selection.Items)do
                                local jjU = Support.GetChildOfClass(TzK, 'SpecialMesh')

                                if jjU then
                                    table.insert(kUNaj9, jjU)
                                end
                            end

                            local AiX, CzFcrl, X8Gpm3

                            if HttpAvailable then
                                local DGflu = 'http://www.f3xteam.com/bt/getFirstMeshData/%s'
                                local FF9q1AO = HttpInterface.GetAsync(DGflu.format(DGflu, g))

                                if FF9q1AO and FF9q1AO.len(FF9q1AO) > 0 then
                                    local FF9q1AO = RbxUtility.DecodeJSON(FF9q1AO)

                                    if FF9q1AO and FF9q1AO.success then
                                        if FF9q1AO.meshID then
                                            g = FF9q1AO.meshID
                                        end
                                        if FF9q1AO.textureID then
                                            AiX = FF9q1AO.textureID
                                        end

                                        CzFcrl = Vector3.new(FF9q1AO.tint.x, FF9q1AO.tint.y, FF9q1AO.tint.z)
                                        X8Gpm3 = Vector3.new(FF9q1AO.scale.x, FF9q1AO.scale.y, FF9q1AO.scale.z)
                                    end
                                end
                            end

                            pCWPYYE.startHistoryRecord(pCWPYYE, kUNaj9)

                            for pJWQ, DZJXU in pairs(kUNaj9)do
                                if g then
                                    DZJXU.MeshId = 'http://www.roblox.com/asset/?id=' .. g
                                end
                                if AiX then
                                    DZJXU.TextureId = 'http://www.roblox.com/asset/?id=' .. AiX
                                end
                                if CzFcrl then
                                    DZJXU.VertexColor = CzFcrl
                                end
                                if X8Gpm3 then
                                    DZJXU.Scale = X8Gpm3
                                end
                            end

                            pCWPYYE.finishHistoryRecord(pCWPYYE)
                        end
                        Tools.Mesh.changeTexture = function(Oo6w, hN)
                            local jz1uXDx = {}

                            for vTRoD0X, oX9O28J in pairs(Selection.Items)do
                                local sTbHW = Support.GetChildOfClass(oX9O28J, 'SpecialMesh')

                                if sTbHW then
                                    table.insert(jz1uXDx, sTbHW)
                                end
                            end

                            if HttpAvailable then
                                local upZW = 'http://www.f3xteam.com/bt/getDecalImageID/%s'
                                local AWQPjyxs = HttpInterface.GetAsync(upZW.format(upZW, hN))

                                if AWQPjyxs and AWQPjyxs.len(AWQPjyxs) > 0 then
                                    hN = AWQPjyxs
                                end
                            end

                            Oo6w.startHistoryRecord(Oo6w, jz1uXDx)

                            for V, M in pairs(jz1uXDx)do
                                M.TextureId = 'http://www.roblox.com/asset/?id=' .. hN
                            end

                            Oo6w.finishHistoryRecord(Oo6w)
                        end
                        Tools.Mesh.changeScale = function(sPh, RKD_1r, hnrLmi)
                            local Ea23 = {}

                            for gdet, x in pairs(Selection.Items)do
                                local KzXd = Support.GetChildOfClass(x, 'SpecialMesh')

                                if KzXd then
                                    table.insert(Ea23, KzXd)
                                end
                            end

                            sPh.startHistoryRecord(sPh, Ea23)

                            for gqa3M1, Z in pairs(Ea23)do
                                Z.Scale = Vector3.new(RKD_1r == 'x' and hnrLmi or Z.Scale.x, RKD_1r == 'y' and hnrLmi or Z.Scale.y, RKD_1r == 'z' and hnrLmi or Z.Scale.z)
                            end

                            sPh.finishHistoryRecord(sPh)
                        end
                        Tools.Mesh.changeTint = function(neYEY, H0, r)
                            local JF4a = {}

                            for HeQL, AuacAxlc in pairs(Selection.Items)do
                                local Bk = Support.GetChildOfClass(AuacAxlc, 'SpecialMesh')

                                if Bk then
                                    table.insert(JF4a, Bk)
                                end
                            end

                            neYEY.startHistoryRecord(neYEY, JF4a)

                            for IulFXIJ, b in pairs(JF4a)do
                                b.VertexColor = Vector3.new(H0 == 'r' and r or b.VertexColor.x, H0 == 'g' and r or b.VertexColor.y, H0 == 'b' and r or b.VertexColor.z)
                            end

                            neYEY.finishHistoryRecord(neYEY)
                        end
                        Tools.Mesh.hideGUI = function(xfxoXu)
                            if xfxoXu.GUI then
                                xfxoXu.GUI.Visible = false
                            end
                        end
                        Tools.Mesh.Loaded = true
                    end,
                },
                {
                    'Move',
                    function()
                        repeat
                            wait()
                        until (_G.BTCoreEnv and _G.BTCoreEnv.tool and _G.BTCoreEnv.tool.CoreReady)

                        setfenv(1, _G.BTCoreEnv.tool)

                        Tools.Move = {}
                        Tools.Move.Color = BrickColor.new('Deep orange')
                        Tools.Move.Connections = {}
                        Tools.Move.Options = {
                            increment = 1,
                            axes = 'global',
                        }
                        Tools.Move.State = {
                            distance_moved = 0,
                            moving = false,
                            PreMove = {},
                        }
                        Tools.Move.Listeners = {}
                        Tools.Move.Listeners.Equipped = function()
                            local KJ0Y6 = Tools.Move

                            if not Mouse then
                                return
                            end

                            KJ0Y6.State.PreviousSelectionBoxColor = SelectionBoxColor
                            SelectionBoxColor = KJ0Y6.Color

                            updateSelectionBoxColor()
                            KJ0Y6.showGUI(KJ0Y6)

                            if not KJ0Y6.BoundingBox then
                                KJ0Y6.BoundingBox = RbxUtility.Create'Part'{
                                    Name = 'BTBoundingBox',
                                    CanCollide = false,
                                    Transparency = 1,
                                    Anchored = true,
                                }
                            end

                            Mouse.TargetFilter = KJ0Y6.BoundingBox

                            KJ0Y6.changeAxes(KJ0Y6, KJ0Y6.Options.axes)

                            KJ0Y6.Connections.DraggerKeyListener = Mouse.KeyDown:Connect(function(
                                C
                            )
                                local C = C.lower(C)

                                if not KJ0Y6.Dragger then
                                    return
                                end
                                if C == 'r' then
                                    KJ0Y6.Dragger:AxisRotate(Enum.Axis.Z)
                                elseif C == 't' then
                                    KJ0Y6.Dragger:AxisRotate(Enum.Axis.X)
                                elseif C == 'y' then
                                    KJ0Y6.Dragger:AxisRotate(Enum.Axis.Y)
                                end

                                KJ0Y6.Dragger:MouseMove(Mouse.UnitRay)
                            end)
                            KJ0Y6.State.StaticItems = {}
                            KJ0Y6.State.StaticExtents = nil
                            KJ0Y6.State.RecalculateStaticExtents = true

                            local KPlOw = {}

                            AddStaticItem = function(BA)
                                if #Support.FindTableOccurrences(KJ0Y6.State.StaticItems, BA) > 0 then
                                    return
                                end

                                table.insert(KJ0Y6.State.StaticItems, BA)

                                KPlOw[BA] = BA.Changed:Connect(function(ybxsK)
                                    if ybxsK == 'CFrame' or ybxsK == 'Size' then
                                        KJ0Y6.State.RecalculateStaticExtents = true
                                    elseif ybxsK == 'Anchored' and not BA.Anchored then
                                        RemoveStaticItem(BA)
                                    end
                                end)
                                KJ0Y6.State.RecalculateStaticExtents = true
                            end
                            RemoveStaticItem = function(_0fP)
                                local l6 = Support.FindTableOccurrences(KJ0Y6.State.StaticItems, _0fP)[1]

                                if l6 then
                                    KJ0Y6.State.StaticItems[l6] = nil
                                end
                                if KPlOw[_0fP] then
                                    KPlOw[_0fP]:disconnect()

                                    KPlOw[_0fP] = nil
                                end

                                KJ0Y6.State.RecalculateStaticExtents = true
                            end

                            for rGOqO96U, odN0bo in pairs(Selection.Items)do
                                if odN0bo.Anchored then
                                    AddStaticItem(odN0bo)
                                end
                            end

                            table.insert(KJ0Y6.Connections, Selection.ItemAdded:Connect(function(
                                sn1BOCT5
                            )
                                if sn1BOCT5.Anchored then
                                    AddStaticItem(sn1BOCT5)
                                end
                            end))
                            table.insert(KJ0Y6.Connections, Selection.ItemRemoved:Connect(function(
                                k0iue,
                                J5
                            )
                                if J5 or not KPlOw[k0iue] then
                                    return
                                end

                                RemoveStaticItem(k0iue)
                            end))
                            table.insert(KJ0Y6.Connections, Selection.Cleared:Connect(function(
                            )
                                for d3, DAeG in pairs(KPlOw)do
                                    DAeG.disconnect(DAeG)

                                    KPlOw[d3] = nil
                                end

                                KJ0Y6.State.StaticExtents = nil
                                KJ0Y6.State.StaticItems = {}
                            end))
                            coroutine.wrap(function()
                                updater_on = true
                                KJ0Y6.Updater = function()
                                    updater_on = false
                                end

                                while wait(0.1) and updater_on do
                                    if CurrentTool == KJ0Y6 then
                                        if KJ0Y6.GUI and KJ0Y6.GUI.Visible then
                                            KJ0Y6.updateGUI(KJ0Y6)
                                        end
                                        if KJ0Y6.Options.axes == 'global' then
                                            KJ0Y6.updateBoundingBox(KJ0Y6)
                                        end
                                    end
                                end
                            end)()
                        end
                        Tools.Move.Listeners.Unequipped = function()
                            local eb6VK = Tools.Move

                            if eb6VK.Updater then
                                eb6VK.Updater()

                                eb6VK.Updater = nil
                            end

                            eb6VK.FinishDragging(eb6VK)
                            eb6VK.hideGUI(eb6VK)
                            eb6VK.hideHandles(eb6VK)

                            for U8PPAC, bK92X9wQ in pairs(eb6VK.Connections)do
                                bK92X9wQ.disconnect(bK92X9wQ)

                                eb6VK.Connections[U8PPAC] = nil
                            end

                            SelectionBoxColor = eb6VK.State.PreviousSelectionBoxColor

                            updateSelectionBoxColor()
                        end
                        Tools.Move.updateGUI = function(PZ)
                            if PZ.GUI then
                                local toG0 = PZ.GUI

                                if #Selection.Items > 0 then
                                    local EZ3qRhLq, E7Q, qts06Ch3

                                    for cBwDRgK, veqNhn in pairs(Selection.Items)do
                                        if cBwDRgK == 1 then
                                            EZ3qRhLq, E7Q, qts06Ch3 = Support.Round(veqNhn.Position.x, 2), Support.Round(veqNhn.Position.y, 2), Support.Round(veqNhn.Position.z, 2)
                                        else
                                            if EZ3qRhLq ~= Support.Round(veqNhn.Position.x, 2) then
                                                EZ3qRhLq = nil
                                            end
                                            if E7Q ~= Support.Round(veqNhn.Position.y, 2) then
                                                E7Q = nil
                                            end
                                            if qts06Ch3 ~= Support.Round(veqNhn.Position.z, 2) then
                                                qts06Ch3 = nil
                                            end
                                        end
                                    end

                                    if not PZ.State.pos_x_focused then
                                        toG0.Info.Center.X.TextBox.Text = EZ3qRhLq and tostring(EZ3qRhLq) or '*'
                                    end
                                    if not PZ.State.pos_y_focused then
                                        toG0.Info.Center.Y.TextBox.Text = E7Q and tostring(E7Q) or '*'
                                    end
                                    if not PZ.State.pos_z_focused then
                                        toG0.Info.Center.Z.TextBox.Text = qts06Ch3 and tostring(qts06Ch3) or '*'
                                    end

                                    toG0.Info.Visible = true
                                else
                                    toG0.Info.Visible = false
                                end
                                if PZ.State.distance_moved then
                                    toG0.Changes.Text.Text = 'moved ' .. tostring(PZ.State.distance_moved) .. ' studs'
                                    toG0.Changes.Position = toG0.Info.Visible and UDim2.new(0, 5, 0, 165) or UDim2.new(0, 5, 0, 100)
                                    toG0.Changes.Visible = true
                                else
                                    toG0.Changes.Text.Text = ''
                                    toG0.Changes.Visible = false
                                end
                            end
                        end
                        Tools.Move.changePosition = function(OiD, prw2Jl, oo)
                            OiD.startHistoryRecord(OiD)

                            for DYo, kcCL9hT in pairs(Selection.Items)do
                                kcCL9hT.CFrame = CFrame.new(prw2Jl == 'x' and oo or kcCL9hT.Position.x, prw2Jl == 'y' and oo or kcCL9hT.Position.y, prw2Jl == 'z' and oo or kcCL9hT.Position.z) * CFrame.Angles(kcCL9hT.CFrame:toEulerAnglesXYZ())
                            end

                            OiD.finishHistoryRecord(OiD)
                        end
                        Tools.Move.startHistoryRecord = function(pvg)
                            if pvg.State.HistoryRecord then
                                pvg.State.HistoryRecord = nil
                            end

                            pvg.State.HistoryRecord = {
                                targets = Support.CloneTable(Selection.Items),
                                initial_positions = {},
                                terminal_positions = {},
                                unapply = function(pvg)
                                    Selection.clear(Selection)

                                    for M, USR in pairs(pvg.targets)do
                                        if USR then
                                            USR.CFrame = pvg.initial_positions[USR]

                                            USR.MakeJoints(USR)
                                            Selection.add(Selection, USR)
                                        end
                                    end
                                end,
                                apply = function(pvg)
                                    Selection.clear(Selection)

                                    for Wxk9CBfb, V in pairs(pvg.targets)do
                                        if V then
                                            V.CFrame = pvg.terminal_positions[V]

                                            V.MakeJoints(V)
                                            Selection.add(Selection, V)
                                        end
                                    end
                                end,
                            }

                            for jWPa, d in pairs(pvg.State.HistoryRecord.targets)do
                                if d then
                                    pvg.State.HistoryRecord.initial_positions[d] = d.CFrame
                                end
                            end
                        end
                        Tools.Move.finishHistoryRecord = function(j3Fn)
                            if not j3Fn.State.HistoryRecord then
                                return
                            end

                            for oZ65m5, hQjlCjY in pairs(j3Fn.State.HistoryRecord.targets)do
                                if hQjlCjY then
                                    j3Fn.State.HistoryRecord.terminal_positions[hQjlCjY] = hQjlCjY.CFrame
                                end
                            end

                            History.add(History, j3Fn.State.HistoryRecord)

                            j3Fn.State.HistoryRecord = nil
                        end
                        Tools.Move.StartDragging = function(JDyNU5, cMv6ou)
                            for HPZKRJ, cn in pairs(Selection.Items)do
                                cn.RotVelocity = Vector3.new(0, 0, 0)
                                cn.Velocity = Vector3.new(0, 0, 0)
                            end

                            JDyNU5.startHistoryRecord(JDyNU5)

                            JDyNU5.State.dragging = true
                            override_selection = true
                            JDyNU5.Dragger = Instance.new('Dragger')

                            JDyNU5.Dragger:MouseDown(cMv6ou, cMv6ou.CFrame:toObjectSpace(CFrame.new(Mouse.Hit.p)).p, Selection.Items)

                            JDyNU5.Connections.DraggerConnection = UserInputService.InputEnded:Connect(function(
                                _Yf
                            )
                                if _Yf.UserInputType == Enum.UserInputType.MouseButton1 then
                                    JDyNU5.FinishDragging(JDyNU5)
                                end
                            end)
                        end
                        Tools.Move.FinishDragging = function(rl)
                            override_selection = true

                            if rl.Connections.DraggerConnection then
                                rl.Connections.DraggerConnection:disconnect()

                                rl.Connections.DraggerConnection = nil
                            end
                            if not rl.Dragger then
                                return
                            end

                            rl.Dragger:MouseUp()

                            rl.State.dragging = false

                            rl.Dragger:Destroy()

                            rl.Dragger = nil

                            rl.finishHistoryRecord(rl)
                        end
                        Tools.Move.Listeners.Button1Down = function()
                            local Z = Tools.Move
                            local jOFP = Z.ManualTarget or Mouse.Target

                            Z.ManualTarget = nil

                            if not Selection.find(Selection, jOFP) and isSelectable(jOFP) then
                                Selection.clear(Selection)
                                Selection.add(Selection, jOFP)
                            end
                            if not Selection.find(Selection, jOFP) then
                                return
                            end

                            Z.StartDragging(Z, jOFP)
                        end
                        Tools.Move.Listeners.Move = function()
                            local LCqNO = Tools.Move

                            if not LCqNO.Dragger then
                                return
                            end

                            override_selection = true

                            LCqNO.Dragger:MouseMove(Mouse.UnitRay)
                        end
                        Tools.Move.Listeners.KeyUp = function(jF4YoB)
                            local nROZ = Tools.Move

                            if jF4YoB == '-' and nROZ.GUI then
                                nROZ.GUI.IncrementOption.Increment.TextBox:CaptureFocus()
                            end
                        end
                        Tools.Move.showGUI = function(_GVROa)
                            if not _GVROa.GUI then
                                local bO3YuZv = DFb100j.BTMoveToolGUI:Clone()

                                bO3YuZv.Parent = UI

                                bO3YuZv.AxesOption.Global.Button.MouseButton1Down:Connect(function(
                                )
                                    _GVROa.changeAxes(_GVROa, 'global')

                                    bO3YuZv.AxesOption.Global.SelectedIndicator.BackgroundTransparency = 0
                                    bO3YuZv.AxesOption.Global.Background.Image = Assets.DarkSlantedRectangle
                                    bO3YuZv.AxesOption.Local.SelectedIndicator.BackgroundTransparency = 1
                                    bO3YuZv.AxesOption.Local.Background.Image = Assets.LightSlantedRectangle
                                    bO3YuZv.AxesOption.Last.SelectedIndicator.BackgroundTransparency = 1
                                    bO3YuZv.AxesOption.Last.Background.Image = Assets.LightSlantedRectangle
                                end)
                                bO3YuZv.AxesOption.Local.Button.MouseButton1Down:Connect(function(
                                )
                                    _GVROa.changeAxes(_GVROa, 'local')

                                    bO3YuZv.AxesOption.Global.SelectedIndicator.BackgroundTransparency = 1
                                    bO3YuZv.AxesOption.Global.Background.Image = Assets.LightSlantedRectangle
                                    bO3YuZv.AxesOption.Local.SelectedIndicator.BackgroundTransparency = 0
                                    bO3YuZv.AxesOption.Local.Background.Image = Assets.DarkSlantedRectangle
                                    bO3YuZv.AxesOption.Last.SelectedIndicator.BackgroundTransparency = 1
                                    bO3YuZv.AxesOption.Last.Background.Image = Assets.LightSlantedRectangle
                                end)
                                bO3YuZv.AxesOption.Last.Button.MouseButton1Down:Connect(function(
                                )
                                    _GVROa.changeAxes(_GVROa, 'last')

                                    bO3YuZv.AxesOption.Global.SelectedIndicator.BackgroundTransparency = 1
                                    bO3YuZv.AxesOption.Global.Background.Image = Assets.LightSlantedRectangle
                                    bO3YuZv.AxesOption.Local.SelectedIndicator.BackgroundTransparency = 1
                                    bO3YuZv.AxesOption.Local.Background.Image = Assets.LightSlantedRectangle
                                    bO3YuZv.AxesOption.Last.SelectedIndicator.BackgroundTransparency = 0
                                    bO3YuZv.AxesOption.Last.Background.Image = Assets.DarkSlantedRectangle
                                end)
                                bO3YuZv.IncrementOption.Increment.TextBox.FocusLost:Connect(function(
                                    Vq
                                )
                                    _GVROa.Options.increment = tonumber(bO3YuZv.IncrementOption.Increment.TextBox.Text) or _GVROa.Options.increment
                                    bO3YuZv.IncrementOption.Increment.TextBox.Text = tostring(_GVROa.Options.increment)
                                end)
                                bO3YuZv.Info.Center.X.TextButton.MouseButton1Down:Connect(function(
                                )
                                    _GVROa.State.pos_x_focused = true

                                    bO3YuZv.Info.Center.X.TextBox:CaptureFocus()
                                end)
                                bO3YuZv.Info.Center.X.TextBox.FocusLost:Connect(function(
                                    cW
                                )
                                    local c7GfSrtA = tonumber(bO3YuZv.Info.Center.X.TextBox.Text)

                                    if c7GfSrtA then
                                        _GVROa.changePosition(_GVROa, 'x', c7GfSrtA)
                                    end

                                    _GVROa.State.pos_x_focused = false
                                end)
                                bO3YuZv.Info.Center.Y.TextButton.MouseButton1Down:Connect(function(
                                )
                                    _GVROa.State.pos_y_focused = true

                                    bO3YuZv.Info.Center.Y.TextBox:CaptureFocus()
                                end)
                                bO3YuZv.Info.Center.Y.TextBox.FocusLost:Connect(function(
                                    lEP9VGU
                                )
                                    local xpKd = tonumber(bO3YuZv.Info.Center.Y.TextBox.Text)

                                    if xpKd then
                                        _GVROa.changePosition(_GVROa, 'y', xpKd)
                                    end

                                    _GVROa.State.pos_y_focused = false
                                end)
                                bO3YuZv.Info.Center.Z.TextButton.MouseButton1Down:Connect(function(
                                )
                                    _GVROa.State.pos_z_focused = true

                                    bO3YuZv.Info.Center.Z.TextBox:CaptureFocus()
                                end)
                                bO3YuZv.Info.Center.Z.TextBox.FocusLost:Connect(function(
                                    r
                                )
                                    local oa = tonumber(bO3YuZv.Info.Center.Z.TextBox.Text)

                                    if oa then
                                        _GVROa.changePosition(_GVROa, 'z', oa)
                                    end

                                    _GVROa.State.pos_z_focused = false
                                end)

                                _GVROa.GUI = bO3YuZv
                            end

                            _GVROa.GUI.Visible = true
                        end
                        Tools.Move.hideGUI = function(dT)
                            if dT.GUI then
                                dT.GUI.Visible = false
                            end
                        end
                        Tools.Move.showHandles = function(xa78yAit, s_CnSV)
                            if not xa78yAit.Handles then
                                xa78yAit.Handles = RbxUtility.Create'Handles'{
                                    Name = 'BTMovementHandles',
                                    Color = xa78yAit.Color,
                                    Parent = GUIContainer,
                                }

                                xa78yAit.Handles.MouseButton1Down:Connect(function(
                                )
                                    override_selection = true
                                    xa78yAit.State.moving = true
                                    xa78yAit.State.distance_moved = 0

                                    xa78yAit.startHistoryRecord(xa78yAit)

                                    for s, wqRzXIG7 in pairs(Selection.Items)do
                                        xa78yAit.State.PreMove[wqRzXIG7] = wqRzXIG7.Clone(wqRzXIG7)
                                        wqRzXIG7.Anchored = true
                                    end

                                    xa78yAit.Connections.HandleReleaseListener = UserInputService.InputEnded:Connect(function(
                                        w3nHh
                                    )
                                        if w3nHh.UserInputType ~= Enum.UserInputType.MouseButton1 then
                                            return
                                        end

                                        override_selection = true
                                        xa78yAit.State.moving = false

                                        if xa78yAit.Connections.HandleReleaseListener then
                                            xa78yAit.Connections.HandleReleaseListener:disconnect()

                                            xa78yAit.Connections.HandleReleaseListener = nil
                                        end

                                        xa78yAit.finishHistoryRecord(xa78yAit)

                                        for bo0I, lK5ogD in pairs(xa78yAit.State.PreMove)do
                                            bo0I.Anchored = lK5ogD.Anchored
                                            xa78yAit.State.PreMove[bo0I] = nil

                                            bo0I.MakeJoints(bo0I)

                                            bo0I.Velocity = Vector3.new(0, 0, 0)
                                            bo0I.RotVelocity = Vector3.new(0, 0, 0)
                                        end
                                    end)
                                end)
                                xa78yAit.Handles.MouseDrag:Connect(function(
                                    I8F,
                                    Y3NU
                                )
                                    local Avel7IrZ = Y3NU % xa78yAit.Options.increment
                                    local F = Y3NU - Avel7IrZ
                                    local _ = Y3NU - Avel7IrZ + xa78yAit.Options.increment
                                    local DpWpo7kA = math.abs(Y3NU - F)
                                    local LS = math.abs(Y3NU - _)

                                    if DpWpo7kA <= LS then
                                        Y3NU = F
                                    else
                                        Y3NU = _
                                    end

                                    local cQvh = Y3NU

                                    xa78yAit.State.distance_moved = Y3NU

                                    for llU3aki, HQrwQErj in pairs(Selection.Items)do
                                        HQrwQErj.BreakJoints(HQrwQErj)

                                        if I8F == Enum.NormalId.Top then
                                            if xa78yAit.Options.axes == 'global' then
                                                HQrwQErj.CFrame = CFrame.new(xa78yAit.State.PreMove[HQrwQErj].CFrame.p):toWorldSpace(CFrame.new(0, cQvh, 0)) * CFrame.Angles(xa78yAit.State.PreMove[HQrwQErj].CFrame:toEulerAnglesXYZ())
                                            elseif xa78yAit.Options.axes == 'local' then
                                                HQrwQErj.CFrame = xa78yAit.State.PreMove[HQrwQErj].CFrame:toWorldSpace(CFrame.new(0, cQvh, 0))
                                            elseif xa78yAit.Options.axes == 'last' then
                                                HQrwQErj.CFrame = xa78yAit.State.PreMove[Selection.Last].CFrame:toWorldSpace(CFrame.new(0, cQvh, 0)):toWorldSpace(xa78yAit.State.PreMove[HQrwQErj].CFrame:toObjectSpace(xa78yAit.State.PreMove[Selection.Last].CFrame):inverse())
                                            end
                                        elseif I8F == Enum.NormalId.Bottom then
                                            if xa78yAit.Options.axes == 'global' then
                                                HQrwQErj.CFrame = CFrame.new(xa78yAit.State.PreMove[HQrwQErj].CFrame.p):toWorldSpace(CFrame.new(0, 
-cQvh, 0)) * CFrame.Angles(xa78yAit.State.PreMove[HQrwQErj].CFrame:toEulerAnglesXYZ())
                                            elseif xa78yAit.Options.axes == 'local' then
                                                HQrwQErj.CFrame = xa78yAit.State.PreMove[HQrwQErj].CFrame:toWorldSpace(CFrame.new(0, 
-cQvh, 0))
                                            elseif xa78yAit.Options.axes == 'last' then
                                                HQrwQErj.CFrame = xa78yAit.State.PreMove[Selection.Last].CFrame:toWorldSpace(CFrame.new(0, 
-cQvh, 0)):toWorldSpace(xa78yAit.State.PreMove[HQrwQErj].CFrame:toObjectSpace(xa78yAit.State.PreMove[Selection.Last].CFrame):inverse())
                                            end
                                        elseif I8F == Enum.NormalId.Front then
                                            if xa78yAit.Options.axes == 'global' then
                                                HQrwQErj.CFrame = CFrame.new(xa78yAit.State.PreMove[HQrwQErj].CFrame.p):toWorldSpace(CFrame.new(0, 0, 
-cQvh)) * CFrame.Angles(xa78yAit.State.PreMove[HQrwQErj].CFrame:toEulerAnglesXYZ())
                                            elseif xa78yAit.Options.axes == 'local' then
                                                HQrwQErj.CFrame = xa78yAit.State.PreMove[HQrwQErj].CFrame:toWorldSpace(CFrame.new(0, 0, 
-cQvh))
                                            elseif xa78yAit.Options.axes == 'last' then
                                                HQrwQErj.CFrame = xa78yAit.State.PreMove[Selection.Last].CFrame:toWorldSpace(CFrame.new(0, 0, 
-cQvh)):toWorldSpace(xa78yAit.State.PreMove[HQrwQErj].CFrame:toObjectSpace(xa78yAit.State.PreMove[Selection.Last].CFrame):inverse())
                                            end
                                        elseif I8F == Enum.NormalId.Back then
                                            if xa78yAit.Options.axes == 'global' then
                                                HQrwQErj.CFrame = CFrame.new(xa78yAit.State.PreMove[HQrwQErj].CFrame.p):toWorldSpace(CFrame.new(0, 0, cQvh)) * CFrame.Angles(xa78yAit.State.PreMove[HQrwQErj].CFrame:toEulerAnglesXYZ())
                                            elseif xa78yAit.Options.axes == 'local' then
                                                HQrwQErj.CFrame = xa78yAit.State.PreMove[HQrwQErj].CFrame:toWorldSpace(CFrame.new(0, 0, cQvh))
                                            elseif xa78yAit.Options.axes == 'last' then
                                                HQrwQErj.CFrame = xa78yAit.State.PreMove[Selection.Last].CFrame:toWorldSpace(CFrame.new(0, 0, cQvh)):toWorldSpace(xa78yAit.State.PreMove[HQrwQErj].CFrame:toObjectSpace(xa78yAit.State.PreMove[Selection.Last].CFrame):inverse())
                                            end
                                        elseif I8F == Enum.NormalId.Right then
                                            if xa78yAit.Options.axes == 'global' then
                                                HQrwQErj.CFrame = CFrame.new(xa78yAit.State.PreMove[HQrwQErj].CFrame.p):toWorldSpace(CFrame.new(cQvh, 0, 0)) * CFrame.Angles(xa78yAit.State.PreMove[HQrwQErj].CFrame:toEulerAnglesXYZ())
                                            elseif xa78yAit.Options.axes == 'local' then
                                                HQrwQErj.CFrame = xa78yAit.State.PreMove[HQrwQErj].CFrame:toWorldSpace(CFrame.new(cQvh, 0, 0))
                                            elseif xa78yAit.Options.axes == 'last' then
                                                HQrwQErj.CFrame = xa78yAit.State.PreMove[Selection.Last].CFrame:toWorldSpace(CFrame.new(cQvh, 0, 0)):toWorldSpace(xa78yAit.State.PreMove[HQrwQErj].CFrame:toObjectSpace(xa78yAit.State.PreMove[Selection.Last].CFrame):inverse())
                                            end
                                        elseif I8F == Enum.NormalId.Left then
                                            if xa78yAit.Options.axes == 'global' then
                                                HQrwQErj.CFrame = CFrame.new(xa78yAit.State.PreMove[HQrwQErj].CFrame.p):toWorldSpace(CFrame.new(
-cQvh, 0, 0)) * CFrame.Angles(xa78yAit.State.PreMove[HQrwQErj].CFrame:toEulerAnglesXYZ())
                                            elseif xa78yAit.Options.axes == 'local' then
                                                HQrwQErj.CFrame = xa78yAit.State.PreMove[HQrwQErj].CFrame:toWorldSpace(CFrame.new(
-cQvh, 0, 0))
                                            elseif xa78yAit.Options.axes == 'last' then
                                                HQrwQErj.CFrame = xa78yAit.State.PreMove[Selection.Last].CFrame:toWorldSpace(CFrame.new(
-cQvh, 0, 0)):toWorldSpace(xa78yAit.State.PreMove[HQrwQErj].CFrame:toObjectSpace(xa78yAit.State.PreMove[Selection.Last].CFrame):inverse())
                                            end
                                        end
                                    end
                                end)
                            end
                            if xa78yAit.Connections.AdorneeExistenceListener then
                                xa78yAit.Connections.AdorneeExistenceListener:disconnect()

                                xa78yAit.Connections.AdorneeExistenceListener = nil
                            end

                            xa78yAit.Handles.Adornee = s_CnSV
                            xa78yAit.Connections.AdorneeExistenceListener = s_CnSV.AncestryChanged:Connect(function(
                                tu,
                                XSuzlcm
                            )
                                if tu ~= s_CnSV then
                                    return
                                end
                                if XSuzlcm == nil then
                                    xa78yAit.hideHandles(xa78yAit)
                                else
                                    xa78yAit.showHandles(xa78yAit, s_CnSV)
                                end
                            end)
                        end
                        Tools.Move.hideHandles = function(nbAjk49J)
                            if nbAjk49J.Handles then
                                nbAjk49J.Handles.Adornee = nil
                            end
                        end
                        Tools.Move.updateBoundingBox = function(cB0vBn)
                            if #Selection.Items > 0 and not cB0vBn.State.dragging then
                                if cB0vBn.State.RecalculateStaticExtents then
                                    cB0vBn.State.StaticExtents = calculateExtents(cB0vBn.State.StaticItems, nil, true)
                                    cB0vBn.State.RecalculateStaticExtents = false
                                end

                                local IccvGO, BNC = calculateExtents(Selection.Items, cB0vBn.State.StaticExtents)

                                cB0vBn.BoundingBox.Size = IccvGO
                                cB0vBn.BoundingBox.CFrame = BNC

                                cB0vBn.showHandles(cB0vBn, cB0vBn.BoundingBox)
                            else
                                cB0vBn.hideHandles(cB0vBn)
                            end
                        end
                        Tools.Move.changeAxes = function(s3, QXOjuVP)
                            local KOk = s3.GUI and s3.GUI.AxesOption or nil

                            if s3.Connections.HandleFocusChangeListener then
                                s3.Connections.HandleFocusChangeListener:disconnect()

                                s3.Connections.HandleFocusChangeListener = nil
                            end
                            if s3.Connections.HandleSelectionChangeListener then
                                s3.Connections.HandleSelectionChangeListener:disconnect()

                                s3.Connections.HandleSelectionChangeListener = nil
                            end
                            if QXOjuVP == 'global' then
                                s3.Options.axes = 'global'

                                s3.hideHandles(s3)
                                s3.showHandles(s3, s3.BoundingBox)

                                if s3.GUI then
                                    KOk.Global.SelectedIndicator.BackgroundTransparency = 0
                                    KOk.Global.Background.Image = Assets.DarkSlantedRectangle
                                    KOk.Local.SelectedIndicator.BackgroundTransparency = 1
                                    KOk.Local.Background.Image = Assets.LightSlantedRectangle
                                    KOk.Last.SelectedIndicator.BackgroundTransparency = 1
                                    KOk.Last.Background.Image = Assets.LightSlantedRectangle
                                end
                            end
                            if QXOjuVP == 'local' then
                                s3.Options.axes = 'local'
                                s3.Connections.HandleSelectionChangeListener = Selection.Changed:Connect(function(
                                )
                                    s3.hideHandles(s3)

                                    if Selection.Last then
                                        s3.showHandles(s3, Selection.Last)
                                    end
                                end)
                                s3.Connections.HandleFocusChangeListener = Mouse.Button2Up:Connect(function(
                                )
                                    override_selection = true

                                    if Selection.find(Selection, Mouse.Target) then
                                        Selection.focus(Selection, Mouse.Target)
                                        s3.showHandles(s3, Mouse.Target)
                                    end
                                end)

                                if Selection.Last then
                                    s3.showHandles(s3, Selection.Last)
                                end
                                if s3.GUI then
                                    KOk.Global.SelectedIndicator.BackgroundTransparency = 1
                                    KOk.Global.Background.Image = Assets.LightSlantedRectangle
                                    KOk.Local.SelectedIndicator.BackgroundTransparency = 0
                                    KOk.Local.Background.Image = Assets.DarkSlantedRectangle
                                    KOk.Last.SelectedIndicator.BackgroundTransparency = 1
                                    KOk.Last.Background.Image = Assets.LightSlantedRectangle
                                end
                            end
                            if QXOjuVP == 'last' then
                                s3.Options.axes = 'last'
                                s3.Connections.HandleSelectionChangeListener = Selection.Changed:Connect(function(
                                )
                                    s3.hideHandles(s3)

                                    if Selection.Last then
                                        s3.showHandles(s3, Selection.Last)
                                    end
                                end)
                                s3.Connections.HandleFocusChangeListener = Mouse.Button2Up:Connect(function(
                                )
                                    override_selection = true

                                    if Selection.find(Selection, Mouse.Target) then
                                        Selection.focus(Selection, Mouse.Target)
                                        s3.showHandles(s3, Mouse.Target)
                                    end
                                end)

                                if Selection.Last then
                                    s3.showHandles(s3, Selection.Last)
                                end
                                if s3.GUI then
                                    KOk.Global.SelectedIndicator.BackgroundTransparency = 1
                                    KOk.Global.Background.Image = Assets.LightSlantedRectangle
                                    KOk.Local.SelectedIndicator.BackgroundTransparency = 1
                                    KOk.Local.Background.Image = Assets.LightSlantedRectangle
                                    KOk.Last.SelectedIndicator.BackgroundTransparency = 0
                                    KOk.Last.Background.Image = Assets.DarkSlantedRectangle
                                end
                            end
                        end
                        Tools.Move.Loaded = true
                    end,
                },
                {
                    'NewPart',
                    function()
                        repeat
                            wait()
                        until (_G.BTCoreEnv and _G.BTCoreEnv.tool and _G.BTCoreEnv.tool.CoreReady)

                        setfenv(1, _G.BTCoreEnv.tool)

                        Tools.NewPart = {}
                        Tools.NewPart.Color = BrickColor.new('Really black')
                        Tools.NewPart.Connections = {}
                        Tools.NewPart.State = {Part = nil}
                        Tools.NewPart.Options = {
                            type = 'normal',
                        }
                        Tools.NewPart.Listeners = {}
                        Tools.NewPart.Listeners.Equipped = function()
                            local GQ8QsA = Tools.NewPart

                            GQ8QsA.State.PreviousSelectionBoxColor = SelectionBoxColor
                            SelectionBoxColor = GQ8QsA.Color

                            updateSelectionBoxColor()
                            GQ8QsA.showGUI(GQ8QsA)
                            GQ8QsA.changeType(GQ8QsA, GQ8QsA.Options.type)
                        end
                        Tools.NewPart.Listeners.Unequipped = function()
                            local B = Tools.NewPart

                            B.hideGUI(B)

                            for i, zmF in pairs(B.Connections)do
                                zmF.disconnect(zmF)

                                B.Connections[i] = nil
                            end

                            SelectionBoxColor = B.State.PreviousSelectionBoxColor

                            updateSelectionBoxColor()
                        end
                        Tools.NewPart.Listeners.Button1Down = function()
                            local RKBSOvv = Tools.NewPart
                            local GxQqHPYH

                            if RKBSOvv.Options.type == 'normal' then
                                GxQqHPYH = Instance.new('Part', Workspace)
                                GxQqHPYH.FormFactor = Enum.FormFactor.Custom
                                GxQqHPYH.Size = Vector3.new(4, 1, 2)
                            elseif RKBSOvv.Options.type == 'truss' then
                                GxQqHPYH = Instance.new('TrussPart', Workspace)
                            elseif RKBSOvv.Options.type == 'wedge' then
                                GxQqHPYH = Instance.new('WedgePart', Workspace)
                                GxQqHPYH.FormFactor = Enum.FormFactor.Custom
                                GxQqHPYH.Size = Vector3.new(4, 1, 2)
                            elseif RKBSOvv.Options.type == 'corner' then
                                GxQqHPYH = Instance.new('CornerWedgePart', Workspace)
                            elseif RKBSOvv.Options.type == 'cylinder' then
                                GxQqHPYH = Instance.new('Part', Workspace)
                                GxQqHPYH.Shape = 'Cylinder'
                                GxQqHPYH.FormFactor = Enum.FormFactor.Custom
                                GxQqHPYH.TopSurface = Enum.SurfaceType.Smooth
                                GxQqHPYH.BottomSurface = Enum.SurfaceType.Smooth
                            elseif RKBSOvv.Options.type == 'ball' then
                                GxQqHPYH = Instance.new('Part', Workspace)
                                GxQqHPYH.Shape = 'Ball'
                                GxQqHPYH.FormFactor = Enum.FormFactor.Custom
                                GxQqHPYH.TopSurface = Enum.SurfaceType.Smooth
                                GxQqHPYH.BottomSurface = Enum.SurfaceType.Smooth
                            elseif RKBSOvv.Options.type == 'seat' then
                                GxQqHPYH = Instance.new('Seat', Workspace)
                                GxQqHPYH.FormFactor = Enum.FormFactor.Custom
                                GxQqHPYH.Size = Vector3.new(4, 1, 2)
                            elseif RKBSOvv.Options.type == 'vehicle seat' then
                                GxQqHPYH = Instance.new('VehicleSeat', Workspace)
                                GxQqHPYH.Size = Vector3.new(4, 1, 2)
                            elseif RKBSOvv.Options.type == 'spawn' then
                                GxQqHPYH = Instance.new('SpawnLocation', Workspace)
                                GxQqHPYH.FormFactor = Enum.FormFactor.Custom
                                GxQqHPYH.Size = Vector3.new(4, 1, 2)
                            end

                            GxQqHPYH.Anchored = true

                            Selection.clear(Selection)
                            Selection.add(Selection, GxQqHPYH)

                            local KEhfU = {
                                target = GxQqHPYH,
                                apply = function(RKBSOvv)
                                    Selection.clear(Selection)

                                    if RKBSOvv.target then
                                        RKBSOvv.target.Parent = Workspace

                                        Selection.add(Selection, RKBSOvv.target)
                                    end
                                end,
                                unapply = function(RKBSOvv)
                                    if RKBSOvv.target then
                                        RKBSOvv.target.Parent = nil
                                    end
                                end,
                            }

                            History.add(History, KEhfU)
                            equipTool(Tools.Move)

                            Tools.Move.ManualTarget = GxQqHPYH
                            GxQqHPYH.CFrame = CFrame.new(Mouse.Hit.p)

                            Tools.Move.Listeners.Button1Down()
                            Tools.Move.Listeners.Move()
                        end
                        Tools.NewPart.changeType = function(zufQE, QwSnT)
                            zufQE.Options.type = QwSnT

                            zufQE.TypeDropdown:selectOption(QwSnT.upper(QwSnT))

                            if zufQE.TypeDropdown.open then
                                zufQE.TypeDropdown:toggle()
                            end
                        end
                        Tools.NewPart.showGUI = function(WrvmQJ6)
                            if not WrvmQJ6.GUI then
                                local rOMAEo = DFb100j.BTNewPartToolGUI:Clone()

                                rOMAEo.Parent = UI

                                local SFGo78 = createDropdown()

                                WrvmQJ6.TypeDropdown = SFGo78
                                SFGo78.Frame.Parent = rOMAEo.TypeOption
                                SFGo78.Frame.Position = UDim2.new(0, 70, 0, 0)
                                SFGo78.Frame.Size = UDim2.new(0, 140, 0, 25)

                                SFGo78.addOption(SFGo78, 'NORMAL').MouseButton1Up:Connect(function(
                                )
                                    WrvmQJ6.changeType(WrvmQJ6, 'normal')
                                end)
                                SFGo78.addOption(SFGo78, 'TRUSS').MouseButton1Up:Connect(function(
                                )
                                    WrvmQJ6.changeType(WrvmQJ6, 'truss')
                                end)
                                SFGo78.addOption(SFGo78, 'WEDGE').MouseButton1Up:Connect(function(
                                )
                                    WrvmQJ6.changeType(WrvmQJ6, 'wedge')
                                end)
                                SFGo78.addOption(SFGo78, 'CORNER').MouseButton1Up:Connect(function(
                                )
                                    WrvmQJ6.changeType(WrvmQJ6, 'corner')
                                end)
                                SFGo78.addOption(SFGo78, 'CYLINDER').MouseButton1Up:Connect(function(
                                )
                                    WrvmQJ6.changeType(WrvmQJ6, 'cylinder')
                                end)
                                SFGo78.addOption(SFGo78, 'BALL').MouseButton1Up:Connect(function(
                                )
                                    WrvmQJ6.changeType(WrvmQJ6, 'ball')
                                end)
                                SFGo78.addOption(SFGo78, 'SEAT').MouseButton1Up:Connect(function(
                                )
                                    WrvmQJ6.changeType(WrvmQJ6, 'seat')
                                end)
                                SFGo78.addOption(SFGo78, 'VEHICLE SEAT').MouseButton1Up:Connect(function(
                                )
                                    WrvmQJ6.changeType(WrvmQJ6, 'vehicle seat')
                                end)
                                SFGo78.addOption(SFGo78, 'SPAWN').MouseButton1Up:Connect(function(
                                )
                                    WrvmQJ6.changeType(WrvmQJ6, 'spawn')
                                end)

                                WrvmQJ6.GUI = rOMAEo
                            end

                            WrvmQJ6.GUI.Visible = true
                        end
                        Tools.NewPart.hideGUI = function(LTd5)
                            if LTd5.GUI then
                                LTd5.GUI.Visible = false
                            end
                        end
                        Tools.NewPart.Loaded = true
                    end,
                },
                {
                    'Paint',
                    function()
                        repeat
                            wait()
                        until (_G.BTCoreEnv and _G.BTCoreEnv.tool and _G.BTCoreEnv.tool.CoreReady)

                        setfenv(1, _G.BTCoreEnv.tool)

                        Tools.Paint = {}
                        Tools.Paint.Color = BrickColor.new('Really red')
                        Tools.Paint.Options = {Color = nil}
                        Tools.Paint.State = {}
                        Tools.Paint.Listeners = {}
                        Tools.Paint.Listeners.Equipped = function()
                            local JmrwaH = Tools.Paint

                            JmrwaH.State.PreviousSelectionBoxColor = SelectionBoxColor
                            SelectionBoxColor = JmrwaH.Color

                            updateSelectionBoxColor()
                            JmrwaH.showGUI(JmrwaH)
                            JmrwaH.changeColor(JmrwaH, JmrwaH.Options.Color)
                        end
                        Tools.Paint.Listeners.Unequipped = function()
                            local qqciA = Tools.Paint

                            qqciA.changeColor(qqciA, nil)
                            qqciA.hideGUI(qqciA)

                            SelectionBoxColor = qqciA.State.PreviousSelectionBoxColor

                            updateSelectionBoxColor()
                        end
                        Tools.Paint.startHistoryRecord = function(bgKb)
                            if bgKb.State.HistoryRecord then
                                bgKb.State.HistoryRecord = nil
                            end

                            bgKb.State.HistoryRecord = {
                                targets = Support.CloneTable(Selection.Items),
                                initial_colors = {},
                                terminal_colors = {},
                                unapply = function(bgKb)
                                    Selection.clear(Selection)

                                    for b0q, MRluMhh in pairs(bgKb.targets)do
                                        if MRluMhh then
                                            MRluMhh.BrickColor = bgKb.initial_colors[MRluMhh]

                                            Selection.add(Selection, MRluMhh)
                                        end
                                    end
                                end,
                                apply = function(bgKb)
                                    Selection.clear(Selection)

                                    for n0R1Mj, a4j6 in pairs(bgKb.targets)do
                                        if a4j6 then
                                            a4j6.BrickColor = bgKb.terminal_colors[a4j6]

                                            Selection.add(Selection, a4j6)
                                        end
                                    end
                                end,
                            }

                            for lg6u, ubseU in pairs(bgKb.State.HistoryRecord.targets)do
                                if ubseU then
                                    bgKb.State.HistoryRecord.initial_colors[ubseU] = ubseU.BrickColor
                                end
                            end
                        end
                        Tools.Paint.finishHistoryRecord = function(kfDX)
                            if not kfDX.State.HistoryRecord then
                                return
                            end

                            for g26, HDP in pairs(kfDX.State.HistoryRecord.targets)do
                                if HDP then
                                    kfDX.State.HistoryRecord.terminal_colors[HDP] = HDP.BrickColor
                                end
                            end

                            History.add(History, kfDX.State.HistoryRecord)

                            kfDX.State.HistoryRecord = nil
                        end
                        Tools.Paint.Listeners.Button1Up = function()
                            local c6nlekUb = Tools.Paint

                            if Selection.find(Selection, Mouse.Target) and not selecting and not selecting then
                                override_selection = true

                                c6nlekUb.startHistoryRecord(c6nlekUb)

                                if c6nlekUb.Options.Color then
                                    for NJQ0, o_v3 in pairs(Selection.Items)do
                                        o_v3.BrickColor = c6nlekUb.Options.Color
                                    end
                                end

                                c6nlekUb.finishHistoryRecord(c6nlekUb)
                            end
                        end
                        Tools.Paint.changeColor = function(zI, ET)
                            if ET then
                                zI.Options.Color = ET

                                zI.startHistoryRecord(zI)

                                for RPrsE2M, T2WO5I in pairs(Selection.Items)do
                                    T2WO5I.BrickColor = ET
                                end

                                zI.finishHistoryRecord(zI)

                                if zI.GUI then
                                    for f7pL, bHs in pairs(zI.GUI.Palette:GetChildren())do
                                        bHs.Text = ''
                                    end

                                    zI.GUI.Palette[ET.Name].Text = 'X'
                                end
                            else
                                zI.Options.Color = nil

                                if zI.GUI then
                                    for eThxHw, tJVrOA in pairs(zI.GUI.Palette:GetChildren())do
                                        tJVrOA.Text = ''
                                    end
                                end
                            end
                        end
                        Tools.Paint.showGUI = function(tqJFy)
                            if not tqJFy.GUI then
                                local EoFG = DFb100j.BTPaintToolGUI:Clone()

                                EoFG.Parent = UI

                                for DQsI, Cam in pairs(EoFG.Palette:GetChildren())do
                                    Cam.MouseButton1Click:Connect(function()
                                        tqJFy.changeColor(tqJFy, BrickColor.new(Cam.Name))
                                    end)
                                end

                                tqJFy.GUI = EoFG
                            end

                            tqJFy.GUI.Visible = true
                        end
                        Tools.Paint.hideGUI = function(wF77)
                            if wF77.GUI then
                                wF77.GUI.Visible = false
                            end
                        end
                        Tools.Paint.Loaded = true
                    end,
                },
                {
                    'Resize',
                    function()
                        repeat
                            wait()
                        until (_G.BTCoreEnv and _G.BTCoreEnv.tool and _G.BTCoreEnv.tool.CoreReady)

                        setfenv(1, _G.BTCoreEnv.tool)

                        Tools.Resize = {}
                        Tools.Resize.Connections = {}
                        Tools.Resize.Options = {
                            increment = 1,
                            directions = 'normal',
                        }
                        Tools.Resize.State = {
                            PreResize = {},
                            previous_distance = 0,
                            resizing = false,
                            length_resized = 0,
                        }
                        Tools.Resize.Listeners = {}
                        Tools.Resize.Color = BrickColor.new('Cyan')
                        Tools.Resize.Listeners.Equipped = function()
                            local A5pk0 = Tools.Resize

                            A5pk0.State.PreviousSelectionBoxColor = SelectionBoxColor
                            SelectionBoxColor = A5pk0.Color

                            updateSelectionBoxColor()
                            A5pk0.showGUI(A5pk0)
                            table.insert(A5pk0.Connections, Selection.Changed:Connect(function(
                            )
                                A5pk0.hideHandles(A5pk0)

                                if Selection.Last then
                                    A5pk0.showHandles(A5pk0, Selection.Last)
                                end
                            end))
                            table.insert(A5pk0.Connections, Mouse.Button2Up:Connect(function(
                            )
                                override_selection = true

                                if Selection.find(Selection, Mouse.Target) then
                                    Selection.focus(Selection, Mouse.Target)
                                end
                            end))

                            if Selection.Last then
                                A5pk0.showHandles(A5pk0, Selection.Last)
                            end

                            coroutine.wrap(function()
                                updater_on = true
                                A5pk0.Updater = function()
                                    updater_on = false
                                end

                                while wait(0.1) and updater_on do
                                    if CurrentTool == A5pk0 then
                                        if A5pk0.GUI and A5pk0.GUI.Visible then
                                            A5pk0.updateGUI(A5pk0)
                                        end
                                    end
                                end
                            end)()
                        end
                        Tools.Resize.Listeners.Unequipped = function()
                            local j = Tools.Resize

                            if j.Updater then
                                j.Updater()

                                j.Updater = nil
                            end

                            j.hideGUI(j)
                            j.hideHandles(j)

                            for XE, vtfBBQgI in pairs(j.Connections)do
                                vtfBBQgI.disconnect(vtfBBQgI)

                                j.Connections[XE] = nil
                            end

                            SelectionBoxColor = j.State.PreviousSelectionBoxColor

                            updateSelectionBoxColor()
                        end
                        Tools.Resize.Listeners.KeyUp = function(U1Ca2x)
                            local AM_2j6 = Tools.Resize

                            if U1Ca2x == '-' and AM_2j6.GUI then
                                AM_2j6.GUI.IncrementOption.Increment.TextBox:CaptureFocus()
                            end
                        end
                        Tools.Resize.showGUI = function(tqvqCh)
                            if not tqvqCh.GUI then
                                local wQb3 = DFb100j.BTResizeToolGUI:Clone()

                                wQb3.Parent = UI

                                wQb3.DirectionsOption.Normal.Button.MouseButton1Down:Connect(function(
                                )
                                    tqvqCh.Options.directions = 'normal'
                                    wQb3.DirectionsOption.Normal.SelectedIndicator.BackgroundTransparency = 0
                                    wQb3.DirectionsOption.Normal.Background.Image = Assets.DarkSlantedRectangle
                                    wQb3.DirectionsOption.Both.SelectedIndicator.BackgroundTransparency = 1
                                    wQb3.DirectionsOption.Both.Background.Image = Assets.LightSlantedRectangle
                                end)
                                wQb3.DirectionsOption.Both.Button.MouseButton1Down:Connect(function(
                                )
                                    tqvqCh.Options.directions = 'both'
                                    wQb3.DirectionsOption.Normal.SelectedIndicator.BackgroundTransparency = 1
                                    wQb3.DirectionsOption.Normal.Background.Image = Assets.LightSlantedRectangle
                                    wQb3.DirectionsOption.Both.SelectedIndicator.BackgroundTransparency = 0
                                    wQb3.DirectionsOption.Both.Background.Image = Assets.DarkSlantedRectangle
                                end)
                                wQb3.IncrementOption.Increment.TextBox.FocusLost:Connect(function(
                                    MV_ePmkQ
                                )
                                    tqvqCh.Options.increment = tonumber(wQb3.IncrementOption.Increment.TextBox.Text) or tqvqCh.Options.increment
                                    wQb3.IncrementOption.Increment.TextBox.Text = tostring(tqvqCh.Options.increment)
                                end)
                                wQb3.Info.SizeInfo.X.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tqvqCh.State.size_x_focused = true

                                    wQb3.Info.SizeInfo.X.TextBox:CaptureFocus()
                                end)
                                wQb3.Info.SizeInfo.X.TextBox.FocusLost:Connect(function(
                                    cX3Y
                                )
                                    local dOb = tonumber(wQb3.Info.SizeInfo.X.TextBox.Text)

                                    if dOb then
                                        tqvqCh.changeSize(tqvqCh, 'x', dOb)
                                    end

                                    tqvqCh.State.size_x_focused = false
                                end)
                                wQb3.Info.SizeInfo.Y.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tqvqCh.State.size_y_focused = true

                                    wQb3.Info.SizeInfo.Y.TextBox:CaptureFocus()
                                end)
                                wQb3.Info.SizeInfo.Y.TextBox.FocusLost:Connect(function(
                                    JTBnP
                                )
                                    local Nm = tonumber(wQb3.Info.SizeInfo.Y.TextBox.Text)

                                    if Nm then
                                        tqvqCh.changeSize(tqvqCh, 'y', Nm)
                                    end

                                    tqvqCh.State.size_y_focused = false
                                end)
                                wQb3.Info.SizeInfo.Z.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tqvqCh.State.size_z_focused = true

                                    wQb3.Info.SizeInfo.Z.TextBox:CaptureFocus()
                                end)
                                wQb3.Info.SizeInfo.Z.TextBox.FocusLost:Connect(function(
                                    sCwnNPE
                                )
                                    local J = tonumber(wQb3.Info.SizeInfo.Z.TextBox.Text)

                                    if J then
                                        tqvqCh.changeSize(tqvqCh, 'z', J)
                                    end

                                    tqvqCh.State.size_z_focused = false
                                end)

                                tqvqCh.GUI = wQb3
                            end

                            tqvqCh.GUI.Visible = true
                        end
                        Tools.Resize.startHistoryRecord = function(jUlV2)
                            if jUlV2.State.HistoryRecord then
                                jUlV2.State.HistoryRecord = nil
                            end

                            jUlV2.State.HistoryRecord = {
                                targets = Support.CloneTable(Selection.Items),
                                initial_positions = {},
                                terminal_positions = {},
                                initial_sizes = {},
                                terminal_sizes = {},
                                unapply = function(jUlV2)
                                    Selection.clear(Selection)

                                    for _WlOka, tFt48gVX in pairs(jUlV2.targets)do
                                        if tFt48gVX then
                                            tFt48gVX.Size = jUlV2.initial_sizes[tFt48gVX]
                                            tFt48gVX.CFrame = jUlV2.initial_positions[tFt48gVX]

                                            tFt48gVX.MakeJoints(tFt48gVX)
                                            Selection.add(Selection, tFt48gVX)
                                        end
                                    end
                                end,
                                apply = function(jUlV2)
                                    Selection.clear(Selection)

                                    for VcvWqUR, g9LOIN in pairs(jUlV2.targets)do
                                        if g9LOIN then
                                            g9LOIN.Size = jUlV2.terminal_sizes[g9LOIN]
                                            g9LOIN.CFrame = jUlV2.terminal_positions[g9LOIN]

                                            g9LOIN.MakeJoints(g9LOIN)
                                            Selection.add(Selection, g9LOIN)
                                        end
                                    end
                                end,
                            }

                            for Ldc7, OWMI6 in pairs(jUlV2.State.HistoryRecord.targets)do
                                if OWMI6 then
                                    jUlV2.State.HistoryRecord.initial_sizes[OWMI6] = OWMI6.Size
                                    jUlV2.State.HistoryRecord.initial_positions[OWMI6] = OWMI6.CFrame
                                end
                            end
                        end
                        Tools.Resize.finishHistoryRecord = function(y)
                            if not y.State.HistoryRecord then
                                return
                            end

                            for PN, D4 in pairs(y.State.HistoryRecord.targets)do
                                if D4 then
                                    y.State.HistoryRecord.terminal_sizes[D4] = D4.Size
                                    y.State.HistoryRecord.terminal_positions[D4] = D4.CFrame
                                end
                            end

                            History.add(History, y.State.HistoryRecord)

                            y.State.HistoryRecord = nil
                        end
                        Tools.Resize.changeSize = function(
                            bqUq2I19,
                            vfT16V9,
                            Idod8USP
                        )
                            bqUq2I19.startHistoryRecord(bqUq2I19)

                            for n, Enpu in pairs(Selection.Items)do
                                local F = Enpu.CFrame

                                if (pcall(function()
                                    local ed = Enpu.FormFactor
                                end)) then
                                    Enpu.FormFactor = Enum.FormFactor.Custom
                                end

                                Enpu.Size = Vector3.new(vfT16V9 == 'x' and Idod8USP or Enpu.Size.x, vfT16V9 == 'y' and Idod8USP or Enpu.Size.y, vfT16V9 == 'z' and Idod8USP or Enpu.Size.z)
                                Enpu.CFrame = F
                            end

                            bqUq2I19.finishHistoryRecord(bqUq2I19)
                        end
                        Tools.Resize.updateGUI = function(QamDb5OV)
                            if not QamDb5OV.GUI then
                                return
                            end

                            local Jz = QamDb5OV.GUI

                            if #Selection.Items > 0 then
                                local by73, lQlrrh, XQtO

                                for JefwEh, sbbJI in pairs(Selection.Items)do
                                    if JefwEh == 1 then
                                        by73, lQlrrh, XQtO = Support.Round(sbbJI.Size.x, 2), Support.Round(sbbJI.Size.y, 2), Support.Round(sbbJI.Size.z, 2)
                                    else
                                        if by73 ~= Support.Round(sbbJI.Size.x, 2) then
                                            by73 = nil
                                        end
                                        if lQlrrh ~= Support.Round(sbbJI.Size.y, 2) then
                                            lQlrrh = nil
                                        end
                                        if XQtO ~= Support.Round(sbbJI.Size.z, 2) then
                                            XQtO = nil
                                        end
                                    end
                                end

                                if not QamDb5OV.State.size_x_focused then
                                    Jz.Info.SizeInfo.X.TextBox.Text = by73 and tostring(by73) or '*'
                                end
                                if not QamDb5OV.State.size_y_focused then
                                    Jz.Info.SizeInfo.Y.TextBox.Text = lQlrrh and tostring(lQlrrh) or '*'
                                end
                                if not QamDb5OV.State.size_z_focused then
                                    Jz.Info.SizeInfo.Z.TextBox.Text = XQtO and tostring(XQtO) or '*'
                                end

                                Jz.Info.Visible = true
                            else
                                Jz.Info.Visible = false
                            end
                            if QamDb5OV.State.length_resized then
                                Jz.Changes.Text.Text = 'resized ' .. tostring(QamDb5OV.State.length_resized) .. ' studs'
                                Jz.Changes.Position = Jz.Info.Visible and UDim2.new(0, 5, 0, 165) or UDim2.new(0, 5, 0, 100)
                                Jz.Changes.Visible = true
                            else
                                Jz.Changes.Text.Text = ''
                                Jz.Changes.Visible = false
                            end
                        end
                        Tools.Resize.hideGUI = function(QYayh)
                            if QYayh.GUI then
                                QYayh.GUI.Visible = false
                            end
                        end
                        Tools.Resize.showHandles = function(nr6uCL, FQ1oRl_)
                            if not nr6uCL.Handles then
                                nr6uCL.Handles = RbxUtility.Create'Handles'{
                                    Name = 'BTResizeHandles',
                                    Style = Enum.HandlesStyle.Resize,
                                    Color = nr6uCL.Color,
                                    Parent = GUIContainer,
                                }

                                nr6uCL.Handles.MouseButton1Down:Connect(function(
                                )
                                    override_selection = true
                                    nr6uCL.State.resizing = true
                                    nr6uCL.State.length_resized = 0

                                    nr6uCL.startHistoryRecord(nr6uCL)

                                    for Q, sHA_0P in pairs(Selection.Items)do
                                        nr6uCL.State.PreResize[sHA_0P] = sHA_0P.Clone(sHA_0P)

                                        if (pcall(function()
                                            local zskX = sHA_0P.FormFactor
                                        end)) then
                                            sHA_0P.FormFactor = Enum.FormFactor.Custom
                                        end

                                        sHA_0P.Anchored = true
                                    end

                                    nr6uCL.Connections.HandleReleaseListener = Mouse.Button1Up:Connect(function(
                                    )
                                        override_selection = true
                                        nr6uCL.State.resizing = false

                                        if nr6uCL.Connections.HandleReleaseListener then
                                            nr6uCL.Connections.HandleReleaseListener:disconnect()

                                            nr6uCL.Connections.HandleReleaseListener = nil
                                        end

                                        nr6uCL.finishHistoryRecord(nr6uCL)

                                        for z37Qz, MUu in pairs(nr6uCL.State.PreResize)do
                                            z37Qz.Anchored = MUu.Anchored
                                            nr6uCL.State.PreResize[z37Qz] = nil

                                            z37Qz.MakeJoints(z37Qz)
                                        end
                                    end)
                                end)
                                nr6uCL.Handles.MouseDrag:Connect(function(
                                    rRNsXW,
                                    zslu25lH
                                )
                                    local K = zslu25lH % nr6uCL.Options.increment
                                    local dBzmP = zslu25lH - K
                                    local obk = zslu25lH - K + nr6uCL.Options.increment
                                    local MsipHD_w = math.abs(zslu25lH - dBzmP)
                                    local uBw1Z77 = math.abs(zslu25lH - obk)

                                    if MsipHD_w <= uBw1Z77 then
                                        zslu25lH = dBzmP
                                    else
                                        zslu25lH = obk
                                    end

                                    local bdJJE = zslu25lH

                                    nr6uCL.State.previous_distance = zslu25lH

                                    if nr6uCL.Options.directions == 'both' then
                                        bdJJE = zslu25lH * 2
                                    end

                                    nr6uCL.State.length_resized = bdJJE

                                    for spYT, lEPWTkAE in pairs(Selection.Items)do
                                        local S = lEPWTkAE.Clone(lEPWTkAE)

                                        lEPWTkAE.BreakJoints(lEPWTkAE)

                                        if rRNsXW == Enum.NormalId.Top then
                                            local Zbxec

                                            if (pcall(function()
                                                local ViHDT = lEPWTkAE.Shape
                                            end)) and (lEPWTkAE.Shape == Enum.PartType.Ball or lEPWTkAE.Shape == Enum.PartType.Cylinder) then
                                                Zbxec = Vector3.new(bdJJE, bdJJE, bdJJE)
                                            elseif not (pcall(function()
                                                local fcbl4H = lEPWTkAE.Shape
                                            end)) or (lEPWTkAE.Shape and lEPWTkAE.Shape == Enum.PartType.Block) then
                                                Zbxec = Vector3.new(0, bdJJE, 0)
                                            end

                                            lEPWTkAE.Size = nr6uCL.State.PreResize[lEPWTkAE].Size + Zbxec

                                            if lEPWTkAE.Size == nr6uCL.State.PreResize[lEPWTkAE].Size + Zbxec then
                                                lEPWTkAE.CFrame = (nr6uCL.Options.directions == 'normal' and nr6uCL.State.PreResize[lEPWTkAE].CFrame:toWorldSpace(CFrame.new(0, bdJJE / 2, 0))) or (nr6uCL.Options.directions == 'both' and nr6uCL.State.PreResize[lEPWTkAE].CFrame)
                                            else
                                                lEPWTkAE.Size = S.Size
                                                lEPWTkAE.CFrame = S.CFrame
                                            end
                                        elseif rRNsXW == Enum.NormalId.Bottom then
                                            local ora4Z

                                            if (pcall(function()
                                                local wmfjOlWH = lEPWTkAE.Shape
                                            end)) and (lEPWTkAE.Shape == Enum.PartType.Ball or lEPWTkAE.Shape == Enum.PartType.Cylinder) then
                                                ora4Z = Vector3.new(bdJJE, bdJJE, bdJJE)
                                            elseif not (pcall(function()
                                                local d = lEPWTkAE.Shape
                                            end)) or (lEPWTkAE.Shape and lEPWTkAE.Shape == Enum.PartType.Block) then
                                                ora4Z = Vector3.new(0, bdJJE, 0)
                                            end

                                            lEPWTkAE.Size = nr6uCL.State.PreResize[lEPWTkAE].Size + ora4Z

                                            if lEPWTkAE.Size == nr6uCL.State.PreResize[lEPWTkAE].Size + ora4Z then
                                                lEPWTkAE.CFrame = (nr6uCL.Options.directions == 'normal' and nr6uCL.State.PreResize[lEPWTkAE].CFrame:toWorldSpace(CFrame.new(0, 
-bdJJE / 2, 0))) or (nr6uCL.Options.directions == 'both' and nr6uCL.State.PreResize[lEPWTkAE].CFrame)
                                            else
                                                lEPWTkAE.Size = S.Size
                                                lEPWTkAE.CFrame = S.CFrame
                                            end
                                        elseif rRNsXW == Enum.NormalId.Front then
                                            local w60sb3_

                                            if (pcall(function()
                                                local MCm__CEC = lEPWTkAE.Shape
                                            end)) and (lEPWTkAE.Shape == Enum.PartType.Ball or lEPWTkAE.Shape == Enum.PartType.Cylinder) then
                                                w60sb3_ = Vector3.new(bdJJE, bdJJE, bdJJE)
                                            elseif not (pcall(function()
                                                local Jr9hz4jk = lEPWTkAE.Shape
                                            end)) or (lEPWTkAE.Shape and lEPWTkAE.Shape == Enum.PartType.Block) then
                                                w60sb3_ = Vector3.new(0, 0, bdJJE)
                                            end

                                            lEPWTkAE.Size = nr6uCL.State.PreResize[lEPWTkAE].Size + w60sb3_

                                            if lEPWTkAE.Size == nr6uCL.State.PreResize[lEPWTkAE].Size + w60sb3_ then
                                                lEPWTkAE.CFrame = (nr6uCL.Options.directions == 'normal' and nr6uCL.State.PreResize[lEPWTkAE].CFrame:toWorldSpace(CFrame.new(0, 0, 
-bdJJE / 2))) or (nr6uCL.Options.directions == 'both' and nr6uCL.State.PreResize[lEPWTkAE].CFrame)
                                            else
                                                lEPWTkAE.Size = S.Size
                                                lEPWTkAE.CFrame = S.CFrame
                                            end
                                        elseif rRNsXW == Enum.NormalId.Back then
                                            local Abv

                                            if (pcall(function()
                                                local aqOk = lEPWTkAE.Shape
                                            end)) and (lEPWTkAE.Shape == Enum.PartType.Ball or lEPWTkAE.Shape == Enum.PartType.Cylinder) then
                                                Abv = Vector3.new(bdJJE, bdJJE, bdJJE)
                                            elseif not (pcall(function()
                                                local A4ZSOV = lEPWTkAE.Shape
                                            end)) or (lEPWTkAE.Shape and lEPWTkAE.Shape == Enum.PartType.Block) then
                                                Abv = Vector3.new(0, 0, bdJJE)
                                            end

                                            lEPWTkAE.Size = nr6uCL.State.PreResize[lEPWTkAE].Size + Abv

                                            if lEPWTkAE.Size == nr6uCL.State.PreResize[lEPWTkAE].Size + Abv then
                                                lEPWTkAE.CFrame = (nr6uCL.Options.directions == 'normal' and nr6uCL.State.PreResize[lEPWTkAE].CFrame:toWorldSpace(CFrame.new(0, 0, bdJJE / 2))) or (nr6uCL.Options.directions == 'both' and nr6uCL.State.PreResize[lEPWTkAE].CFrame)
                                            else
                                                lEPWTkAE.Size = S.Size
                                                lEPWTkAE.CFrame = S.CFrame
                                            end
                                        elseif rRNsXW == Enum.NormalId.Left then
                                            local wtbkXqKs

                                            if (pcall(function()
                                                local vX_5TSFO = lEPWTkAE.Shape
                                            end)) and (lEPWTkAE.Shape == Enum.PartType.Ball or lEPWTkAE.Shape == Enum.PartType.Cylinder) then
                                                wtbkXqKs = Vector3.new(bdJJE, bdJJE, bdJJE)
                                            elseif not (pcall(function()
                                                local MFweCJ3 = lEPWTkAE.Shape
                                            end)) or (lEPWTkAE.Shape and lEPWTkAE.Shape == Enum.PartType.Block) then
                                                wtbkXqKs = Vector3.new(bdJJE, 0, 0)
                                            end

                                            lEPWTkAE.Size = nr6uCL.State.PreResize[lEPWTkAE].Size + wtbkXqKs

                                            if lEPWTkAE.Size == nr6uCL.State.PreResize[lEPWTkAE].Size + wtbkXqKs then
                                                lEPWTkAE.CFrame = (nr6uCL.Options.directions == 'normal' and nr6uCL.State.PreResize[lEPWTkAE].CFrame:toWorldSpace(CFrame.new(
-bdJJE / 2, 0, 0))) or (nr6uCL.Options.directions == 'both' and nr6uCL.State.PreResize[lEPWTkAE].CFrame)
                                            else
                                                lEPWTkAE.Size = S.Size
                                                lEPWTkAE.CFrame = S.CFrame
                                            end
                                        elseif rRNsXW == Enum.NormalId.Right then
                                            local z6

                                            if (pcall(function()
                                                local n0q2 = lEPWTkAE.Shape
                                            end)) and (lEPWTkAE.Shape == Enum.PartType.Ball or lEPWTkAE.Shape == Enum.PartType.Cylinder) then
                                                z6 = Vector3.new(bdJJE, bdJJE, bdJJE)
                                            elseif not (pcall(function()
                                                local X2UHF = lEPWTkAE.Shape
                                            end)) or (lEPWTkAE.Shape and lEPWTkAE.Shape == Enum.PartType.Block) then
                                                z6 = Vector3.new(bdJJE, 0, 0)
                                            end

                                            lEPWTkAE.Size = nr6uCL.State.PreResize[lEPWTkAE].Size + z6

                                            if lEPWTkAE.Size == nr6uCL.State.PreResize[lEPWTkAE].Size + z6 then
                                                lEPWTkAE.CFrame = (nr6uCL.Options.directions == 'normal' and nr6uCL.State.PreResize[lEPWTkAE].CFrame:toWorldSpace(CFrame.new(bdJJE / 2, 0, 0))) or (nr6uCL.Options.directions == 'both' and nr6uCL.State.PreResize[lEPWTkAE].CFrame)
                                            else
                                                lEPWTkAE.Size = S.Size
                                                lEPWTkAE.CFrame = S.CFrame
                                            end
                                        end

                                        lEPWTkAE.MakeJoints(lEPWTkAE)
                                    end
                                end)
                            end
                            if nr6uCL.Connections.AdorneeExistenceListener then
                                nr6uCL.Connections.AdorneeExistenceListener:disconnect()

                                nr6uCL.Connections.AdorneeExistenceListener = nil
                            end

                            nr6uCL.Handles.Adornee = FQ1oRl_
                            nr6uCL.Connections.AdorneeExistenceListener = FQ1oRl_.AncestryChanged:Connect(function(
                                uanm,
                                BJf2
                            )
                                if uanm ~= FQ1oRl_ then
                                    return
                                end
                                if BJf2 == nil then
                                    nr6uCL.hideHandles(nr6uCL)
                                else
                                    nr6uCL.showHandles(nr6uCL, FQ1oRl_)
                                end
                            end)
                        end
                        Tools.Resize.hideHandles = function(bV)
                            if bV.Handles then
                                bV.Handles.Adornee = nil
                            end
                        end
                        Tools.Resize.Loaded = true
                    end,
                },
                {
                    'Rotate',
                    function()
                        repeat
                            wait()
                        until (_G.BTCoreEnv and _G.BTCoreEnv.tool and _G.BTCoreEnv.tool.CoreReady)

                        setfenv(1, _G.BTCoreEnv.tool)

                        Tools.Rotate = {}
                        Tools.Rotate.Connections = {}
                        Tools.Rotate.Options = {
                            increment = 15,
                            pivot = 'center',
                        }
                        Tools.Rotate.State = {
                            PreRotation = {},
                            rotating = false,
                            previous_distance = 0,
                            degrees_rotated = 0,
                            rotation_size = 0,
                        }
                        Tools.Rotate.Listeners = {}
                        Tools.Rotate.Color = BrickColor.new('Bright green')
                        Tools.Rotate.Listeners.Equipped = function()
                            local hhe = Tools.Rotate

                            hhe.State.PreviousSelectionBoxColor = SelectionBoxColor
                            SelectionBoxColor = hhe.Color

                            updateSelectionBoxColor()
                            hhe.showGUI(hhe)

                            if not hhe.BoundingBox then
                                hhe.BoundingBox = RbxUtility.Create'Part'{
                                    Name = 'BTBoundingBox',
                                    CanCollide = false,
                                    Transparency = 1,
                                    Anchored = true,
                                }
                            end

                            Mouse.TargetFilter = hhe.BoundingBox

                            hhe.changePivot(hhe, hhe.Options.pivot)

                            hhe.State.StaticItems = {}
                            hhe.State.StaticExtents = nil
                            hhe.State.RecalculateStaticExtents = true

                            local hw = {}

                            AddStaticItem = function(Xjh2)
                                if #Support.FindTableOccurrences(hhe.State.StaticItems, Xjh2) > 0 then
                                    return
                                end

                                table.insert(hhe.State.StaticItems, Xjh2)

                                hw[Xjh2] = Xjh2.Changed:Connect(function(wS)
                                    if wS == 'CFrame' or wS == 'Size' then
                                        hhe.State.RecalculateStaticExtents = true
                                    elseif wS == 'Anchored' and not Xjh2.Anchored then
                                        RemoveStaticItem(Xjh2)
                                    end
                                end)
                                hhe.State.RecalculateStaticExtents = true
                            end
                            RemoveStaticItem = function(SxbR)
                                local G = Support.FindTableOccurrences(hhe.State.StaticItems, SxbR)[1]

                                if G then
                                    hhe.State.StaticItems[G] = nil
                                end
                                if hw[SxbR] then
                                    hw[SxbR]:disconnect()

                                    hw[SxbR] = nil
                                end

                                hhe.State.RecalculateStaticExtents = true
                            end

                            for ufs, rBbV5m in pairs(Selection.Items)do
                                if rBbV5m.Anchored then
                                    AddStaticItem(rBbV5m)
                                end
                            end

                            table.insert(hhe.Connections, Selection.ItemAdded:Connect(function(
                                v
                            )
                                if v.Anchored then
                                    AddStaticItem(v)
                                end
                            end))
                            table.insert(hhe.Connections, Selection.ItemRemoved:Connect(function(
                                L_4ez,
                                ILvdT1AO
                            )
                                if ILvdT1AO or not hw[L_4ez] then
                                    return
                                end

                                RemoveStaticItem(L_4ez)
                            end))
                            table.insert(hhe.Connections, Selection.Cleared:Connect(function(
                            )
                                for X, iiB in pairs(hw)do
                                    iiB.disconnect(iiB)

                                    hw[X] = nil
                                end

                                hhe.State.StaticExtents = nil
                                hhe.State.StaticItems = {}
                            end))
                            coroutine.wrap(function()
                                updater_on = true
                                hhe.Updater = function()
                                    updater_on = false
                                end

                                while wait(0.1) and updater_on do
                                    if CurrentTool == hhe then
                                        if hhe.GUI and hhe.GUI.Visible then
                                            hhe.updateGUI(hhe)
                                        end
                                        if hhe.Options.pivot == 'center' then
                                            hhe.updateBoundingBox(hhe)
                                        end
                                    end
                                end
                            end)()
                            SelectEdge.start(SelectEdge, function(Ai9ugkhp)
                                hhe.changePivot(hhe, 'last')

                                hhe.Options.PivotPoint = Ai9ugkhp.CFrame
                                hhe.Connections.EdgeSelectionRemover = Selection.Changed:Connect(function(
                                )
                                    hhe.Options.PivotPoint = nil

                                    if hhe.Connections.EdgeSelectionRemover then
                                        hhe.Connections.EdgeSelectionRemover:disconnect()

                                        hhe.Connections.EdgeSelectionRemover = nil
                                    end
                                end)

                                hhe.showHandles(hhe, Ai9ugkhp)
                            end)
                        end
                        Tools.Rotate.Listeners.Unequipped = function()
                            local vx0 = Tools.Rotate

                            if vx0.Updater then
                                vx0.Updater()

                                vx0.Updater = nil
                            end

                            SelectEdge.stop(SelectEdge)

                            if vx0.Options.PivotPoint then
                                vx0.Options.PivotPoint = nil
                            end

                            vx0.hideGUI(vx0)
                            vx0.hideHandles(vx0)

                            for oTT0I_tH, d in pairs(vx0.Connections)do
                                d.disconnect(d)

                                vx0.Connections[oTT0I_tH] = nil
                            end

                            SelectionBoxColor = vx0.State.PreviousSelectionBoxColor

                            updateSelectionBoxColor()
                        end
                        Tools.Rotate.Listeners.Button1Down = function()
                            local HF = Tools.Rotate

                            if not HF.State.rotating and HF.Options.PivotPoint then
                                HF.Options.PivotPoint = nil
                            end
                        end
                        Tools.Rotate.Listeners.KeyUp = function(ORg_K6y)
                            local Y0 = Tools.Rotate

                            if ORg_K6y == '-' and Y0.GUI then
                                Y0.GUI.IncrementOption.Increment.TextBox:CaptureFocus()
                            end
                        end
                        Tools.Rotate.showGUI = function(gwII)
                            if not gwII.GUI then
                                local ItMCtiyJ = DFb100j.BTRotateToolGUI:Clone()

                                ItMCtiyJ.Parent = UI

                                ItMCtiyJ.PivotOption.Center.Button.MouseButton1Down:Connect(function(
                                )
                                    gwII.changePivot(gwII, 'center')
                                end)
                                ItMCtiyJ.PivotOption.Local.Button.MouseButton1Down:Connect(function(
                                )
                                    gwII.changePivot(gwII, 'local')
                                end)
                                ItMCtiyJ.PivotOption.Last.Button.MouseButton1Down:Connect(function(
                                )
                                    gwII.changePivot(gwII, 'last')
                                end)
                                ItMCtiyJ.IncrementOption.Increment.TextBox.FocusLost:Connect(function(
                                    iXtk
                                )
                                    gwII.Options.increment = tonumber(ItMCtiyJ.IncrementOption.Increment.TextBox.Text) or gwII.Options.increment
                                    ItMCtiyJ.IncrementOption.Increment.TextBox.Text = tostring(gwII.Options.increment)
                                end)
                                ItMCtiyJ.Info.RotationInfo.X.TextButton.MouseButton1Down:Connect(function(
                                )
                                    gwII.State.rot_x_focused = true

                                    ItMCtiyJ.Info.RotationInfo.X.TextBox:CaptureFocus()
                                end)
                                ItMCtiyJ.Info.RotationInfo.X.TextBox.FocusLost:Connect(function(
                                    snG
                                )
                                    local V5j = tonumber(ItMCtiyJ.Info.RotationInfo.X.TextBox.Text)

                                    if V5j then
                                        gwII.changeRotation(gwII, 'x', math.rad(V5j))
                                    end

                                    gwII.State.rot_x_focused = false
                                end)
                                ItMCtiyJ.Info.RotationInfo.Y.TextButton.MouseButton1Down:Connect(function(
                                )
                                    gwII.State.rot_y_focused = true

                                    ItMCtiyJ.Info.RotationInfo.Y.TextBox:CaptureFocus()
                                end)
                                ItMCtiyJ.Info.RotationInfo.Y.TextBox.FocusLost:Connect(function(
                                    lItF
                                )
                                    local xq1bs = tonumber(ItMCtiyJ.Info.RotationInfo.Y.TextBox.Text)

                                    if xq1bs then
                                        gwII.changeRotation(gwII, 'y', math.rad(xq1bs))
                                    end

                                    gwII.State.rot_y_focused = false
                                end)
                                ItMCtiyJ.Info.RotationInfo.Z.TextButton.MouseButton1Down:Connect(function(
                                )
                                    gwII.State.rot_z_focused = true

                                    ItMCtiyJ.Info.RotationInfo.Z.TextBox:CaptureFocus()
                                end)
                                ItMCtiyJ.Info.RotationInfo.Z.TextBox.FocusLost:Connect(function(
                                    F
                                )
                                    local Oro89 = tonumber(ItMCtiyJ.Info.RotationInfo.Z.TextBox.Text)

                                    if Oro89 then
                                        gwII.changeRotation(gwII, 'z', math.rad(Oro89))
                                    end

                                    gwII.State.rot_z_focused = false
                                end)

                                gwII.GUI = ItMCtiyJ
                            end

                            gwII.GUI.Visible = true
                        end
                        Tools.Rotate.startHistoryRecord = function(O_dX)
                            if O_dX.State.HistoryRecord then
                                O_dX.State.HistoryRecord = nil
                            end

                            O_dX.State.HistoryRecord = {
                                targets = Support.CloneTable(Selection.Items),
                                initial_cframes = {},
                                terminal_cframes = {},
                                unapply = function(O_dX)
                                    Selection.clear(Selection)

                                    for k3U, p8 in pairs(O_dX.targets)do
                                        if p8 then
                                            p8.CFrame = O_dX.initial_cframes[p8]

                                            p8.MakeJoints(p8)
                                            Selection.add(Selection, p8)
                                        end
                                    end
                                end,
                                apply = function(O_dX)
                                    Selection.clear(Selection)

                                    for BLvFfZ, _ in pairs(O_dX.targets)do
                                        if _ then
                                            _.CFrame = O_dX.terminal_cframes[_]

                                            _.MakeJoints(_)
                                            Selection.add(Selection, _)
                                        end
                                    end
                                end,
                            }

                            for dAcD, e in pairs(O_dX.State.HistoryRecord.targets)do
                                if e then
                                    O_dX.State.HistoryRecord.initial_cframes[e] = e.CFrame
                                end
                            end
                        end
                        Tools.Rotate.finishHistoryRecord = function(RG)
                            if not RG.State.HistoryRecord then
                                return
                            end

                            for Y, htKd_R2 in pairs(RG.State.HistoryRecord.targets)do
                                if htKd_R2 then
                                    RG.State.HistoryRecord.terminal_cframes[htKd_R2] = htKd_R2.CFrame
                                end
                            end

                            History.add(History, RG.State.HistoryRecord)

                            RG.State.HistoryRecord = nil
                        end
                        Tools.Rotate.changeRotation = function(vr, ylrttgX, L)
                            vr.startHistoryRecord(vr)

                            for I, KYV in pairs(Selection.Items)do
                                local d, sBB, vvEDp5PM = KYV.CFrame:toEulerAnglesXYZ()

                                KYV.CFrame = CFrame.new(KYV.Position) * CFrame.Angles(ylrttgX == 'x' and L or d, ylrttgX == 'y' and L or sBB, ylrttgX == 'z' and L or vvEDp5PM)
                            end

                            vr.finishHistoryRecord(vr)
                        end
                        Tools.Rotate.updateGUI = function(EBzZ)
                            if not EBzZ.GUI then
                                return
                            end

                            local JnR5AeB = EBzZ.GUI

                            if #Selection.Items > 0 then
                                local vfXvA0O, OZRh, eNaZt

                                for eE49cc, n_Q69rHB in pairs(Selection.Items)do
                                    local h2_ty, zHG, FYzFO1 = n_Q69rHB.CFrame:toEulerAnglesXYZ()

                                    if eE49cc == 1 then
                                        vfXvA0O, OZRh, eNaZt = Support.Round(math.deg(h2_ty), 2), Support.Round(math.deg(zHG), 2), Support.Round(math.deg(FYzFO1), 2)
                                    else
                                        if vfXvA0O ~= Support.Round(math.deg(h2_ty), 2) then
                                            vfXvA0O = nil
                                        end
                                        if OZRh ~= Support.Round(math.deg(zHG), 2) then
                                            OZRh = nil
                                        end
                                        if eNaZt ~= Support.Round(math.deg(FYzFO1), 2) then
                                            eNaZt = nil
                                        end
                                    end
                                end

                                if not EBzZ.State.rot_x_focused then
                                    JnR5AeB.Info.RotationInfo.X.TextBox.Text = vfXvA0O and tostring(vfXvA0O) or '*'
                                end
                                if not EBzZ.State.rot_y_focused then
                                    JnR5AeB.Info.RotationInfo.Y.TextBox.Text = OZRh and tostring(OZRh) or '*'
                                end
                                if not EBzZ.State.rot_z_focused then
                                    JnR5AeB.Info.RotationInfo.Z.TextBox.Text = eNaZt and tostring(eNaZt) or '*'
                                end

                                JnR5AeB.Info.Visible = true
                            else
                                JnR5AeB.Info.Visible = false
                            end
                            if EBzZ.State.degrees_rotated then
                                JnR5AeB.Changes.Text.Text = 'rotated ' .. tostring(EBzZ.State.degrees_rotated) .. ' degrees'
                                JnR5AeB.Changes.Position = JnR5AeB.Info.Visible and UDim2.new(0, 5, 0, 165) or UDim2.new(0, 5, 0, 100)
                                JnR5AeB.Changes.Visible = true
                            else
                                JnR5AeB.Changes.Text.Text = ''
                                JnR5AeB.Changes.Visible = false
                            end
                        end
                        Tools.Rotate.hideGUI = function(gR48Oozb)
                            if gR48Oozb.GUI then
                                gR48Oozb.GUI.Visible = false
                            end
                        end
                        Tools.Rotate.updateBoundingBox = function(bK0bhdq)
                            if #Selection.Items > 0 then
                                if bK0bhdq.State.RecalculateStaticExtents then
                                    bK0bhdq.State.StaticExtents = calculateExtents(bK0bhdq.State.StaticItems, nil, true)
                                    bK0bhdq.State.RecalculateStaticExtents = false
                                end

                                local nP, eN5tc = calculateExtents(Selection.Items, bK0bhdq.State.StaticExtents)

                                bK0bhdq.BoundingBox.Size = nP
                                bK0bhdq.BoundingBox.CFrame = eN5tc

                                bK0bhdq.showHandles(bK0bhdq, bK0bhdq.BoundingBox)
                            else
                                bK0bhdq.hideHandles(bK0bhdq)
                            end
                        end
                        Tools.Rotate.changePivot = function(KehBOft6, R)
                            local ao5 = KehBOft6.GUI and KehBOft6.GUI.PivotOption or nil

                            if KehBOft6.Connections.HandleFocusChangeListener then
                                KehBOft6.Connections.HandleFocusChangeListener:disconnect()

                                KehBOft6.Connections.HandleFocusChangeListener = nil
                            end
                            if KehBOft6.Connections.HandleSelectionChangeListener then
                                KehBOft6.Connections.HandleSelectionChangeListener:disconnect()

                                KehBOft6.Connections.HandleSelectionChangeListener = nil
                            end
                            if KehBOft6.Options.PivotPoint then
                                KehBOft6.Options.PivotPoint = nil
                            end
                            if R == 'center' then
                                KehBOft6.Options.pivot = 'center'

                                KehBOft6.showHandles(KehBOft6, KehBOft6.BoundingBox)

                                if KehBOft6.GUI then
                                    ao5.Center.SelectedIndicator.BackgroundTransparency = 0
                                    ao5.Center.Background.Image = Assets.DarkSlantedRectangle
                                    ao5.Local.SelectedIndicator.BackgroundTransparency = 1
                                    ao5.Local.Background.Image = Assets.LightSlantedRectangle
                                    ao5.Last.SelectedIndicator.BackgroundTransparency = 1
                                    ao5.Last.Background.Image = Assets.LightSlantedRectangle
                                end
                            end
                            if R == 'local' then
                                KehBOft6.Options.pivot = 'local'
                                KehBOft6.Connections.HandleSelectionChangeListener = Selection.Changed:Connect(function(
                                )
                                    KehBOft6.hideHandles(KehBOft6)

                                    if Selection.Last then
                                        KehBOft6.showHandles(KehBOft6, Selection.Last)
                                    end
                                end)
                                KehBOft6.Connections.HandleFocusChangeListener = Mouse.Button2Up:Connect(function(
                                )
                                    override_selection = true

                                    if Selection.find(Selection, Mouse.Target) then
                                        Selection.focus(Selection, Mouse.Target)
                                        KehBOft6.showHandles(KehBOft6, Mouse.Target)
                                    end
                                end)

                                if Selection.Last then
                                    KehBOft6.showHandles(KehBOft6, Selection.Last)
                                end
                                if KehBOft6.GUI then
                                    ao5.Center.SelectedIndicator.BackgroundTransparency = 1
                                    ao5.Center.Background.Image = Assets.LightSlantedRectangle
                                    ao5.Local.SelectedIndicator.BackgroundTransparency = 0
                                    ao5.Local.Background.Image = Assets.DarkSlantedRectangle
                                    ao5.Last.SelectedIndicator.BackgroundTransparency = 1
                                    ao5.Last.Background.Image = Assets.LightSlantedRectangle
                                end
                            end
                            if R == 'last' then
                                KehBOft6.Options.pivot = 'last'
                                KehBOft6.Connections.HandleSelectionChangeListener = Selection.Changed:Connect(function(
                                )
                                    if not KehBOft6.Options.PivotPoint then
                                        KehBOft6.hideHandles(KehBOft6)
                                    end
                                    if Selection.Last and not KehBOft6.Options.PivotPoint then
                                        KehBOft6.showHandles(KehBOft6, Selection.Last)
                                    end
                                end)
                                KehBOft6.Connections.HandleFocusChangeListener = Mouse.Button2Up:Connect(function(
                                )
                                    override_selection = true

                                    if Selection.find(Selection, Mouse.Target) then
                                        Selection.focus(Selection, Mouse.Target)
                                        KehBOft6.showHandles(KehBOft6, Mouse.Target)
                                    end
                                end)

                                if Selection.Last then
                                    KehBOft6.showHandles(KehBOft6, Selection.Last)
                                end
                                if KehBOft6.GUI then
                                    ao5.Center.SelectedIndicator.BackgroundTransparency = 1
                                    ao5.Center.Background.Image = Assets.LightSlantedRectangle
                                    ao5.Local.SelectedIndicator.BackgroundTransparency = 1
                                    ao5.Local.Background.Image = Assets.LightSlantedRectangle
                                    ao5.Last.SelectedIndicator.BackgroundTransparency = 0
                                    ao5.Last.Background.Image = Assets.DarkSlantedRectangle
                                end
                            end
                        end
                        Tools.Rotate.showHandles = function(oZy, oZ)
                            if not oZy.Handles then
                                oZy.Handles = RbxUtility.Create'ArcHandles'{
                                    Name = 'BTRotationHandles',
                                    Color = oZy.Color,
                                    Parent = GUIContainer,
                                }

                                oZy.Handles.MouseButton1Down:Connect(function()
                                    override_selection = true
                                    oZy.State.rotating = true
                                    oZy.State.degrees_rotated = 0
                                    oZy.State.rotation_size = 0

                                    oZy.startHistoryRecord(oZy)

                                    for idRDAlB, tXR1E510 in pairs(Selection.Items)do
                                        oZy.State.PreRotation[tXR1E510] = tXR1E510.Clone(tXR1E510)
                                        tXR1E510.Anchored = true
                                    end

                                    local ndeNBp, o76bqPp = calculateExtents(oZy.State.PreRotation)

                                    oZy.State.PreRotationPosition = o76bqPp
                                    oZy.Connections.HandleReleaseListener = Mouse.Button1Up:Connect(function(
                                    )
                                        override_selection = true
                                        oZy.State.rotating = false

                                        if oZy.Connections.HandleReleaseListener then
                                            oZy.Connections.HandleReleaseListener:disconnect()

                                            oZy.Connections.HandleReleaseListener = nil
                                        end

                                        oZy.finishHistoryRecord(oZy)

                                        for ZawK6, bK in pairs(oZy.State.PreRotation)do
                                            ZawK6.Anchored = bK.Anchored
                                            oZy.State.PreRotation[ZawK6] = nil

                                            ZawK6.MakeJoints(ZawK6)
                                        end
                                    end)
                                end)
                                oZy.Handles.MouseDrag:Connect(function(
                                    OJGVLn,
                                    UzgoE5O
                                )
                                    local UzgoE5O = math.floor(math.deg(UzgoE5O))
                                    local RvHs = UzgoE5O % oZy.Options.increment
                                    local u = UzgoE5O - RvHs
                                    local Anrb = UzgoE5O - RvHs + oZy.Options.increment
                                    local C9lJAfo = math.abs(UzgoE5O - u)
                                    local NeSAkW = math.abs(UzgoE5O - Anrb)

                                    if C9lJAfo <= NeSAkW then
                                        UzgoE5O = u
                                    else
                                        UzgoE5O = Anrb
                                    end

                                    local Ccoa = oZy.Options.increment * math.floor(UzgoE5O / oZy.Options.increment)

                                    oZy.State.degrees_rotated = UzgoE5O

                                    for Y, zljPh in pairs(Selection.Items)do
                                        local C7mQfN = zljPh.Clone(zljPh)

                                        zljPh.BreakJoints(zljPh)

                                        if OJGVLn == Enum.Axis.Y then
                                            if oZy.Options.pivot == 'center' then
                                                zljPh.CFrame = oZy.State.PreRotationPosition:toWorldSpace(CFrame.new(0, 0, 0) * CFrame.Angles(0, math.rad(Ccoa), 0)):toWorldSpace(oZy.State.PreRotation[zljPh].CFrame:toObjectSpace(oZy.State.PreRotationPosition):inverse())
                                            elseif oZy.Options.pivot == 'local' then
                                                zljPh.CFrame = oZy.State.PreRotation[zljPh].CFrame:toWorldSpace(CFrame.new(0, 0, 0) * CFrame.Angles(0, math.rad(Ccoa), 0))
                                            elseif oZy.Options.pivot == 'last' then
                                                zljPh.CFrame = (oZy.Options.PivotPoint or oZy.State.PreRotation[Selection.Last].CFrame):toWorldSpace(CFrame.new(0, 0, 0) * CFrame.Angles(0, math.rad(Ccoa), 0)):toWorldSpace(oZy.State.PreRotation[zljPh].CFrame:toObjectSpace(oZy.Options.PivotPoint or oZy.State.PreRotation[Selection.Last].CFrame):inverse())
                                            end
                                        elseif OJGVLn == Enum.Axis.X then
                                            if oZy.Options.pivot == 'center' then
                                                zljPh.CFrame = oZy.State.PreRotationPosition:toWorldSpace(CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(Ccoa), 0, 0)):toWorldSpace(oZy.State.PreRotation[zljPh].CFrame:toObjectSpace(oZy.State.PreRotationPosition):inverse())
                                            elseif oZy.Options.pivot == 'local' then
                                                zljPh.CFrame = oZy.State.PreRotation[zljPh].CFrame:toWorldSpace(CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(Ccoa), 0, 0))
                                            elseif oZy.Options.pivot == 'last' then
                                                zljPh.CFrame = (oZy.Options.PivotPoint or oZy.State.PreRotation[Selection.Last].CFrame):toWorldSpace(CFrame.new(0, 0, 0) * CFrame.Angles(math.rad(Ccoa), 0, 0)):toWorldSpace(oZy.State.PreRotation[zljPh].CFrame:toObjectSpace(oZy.Options.PivotPoint or oZy.State.PreRotation[Selection.Last].CFrame):inverse())
                                            end
                                        elseif OJGVLn == Enum.Axis.Z then
                                            if oZy.Options.pivot == 'center' then
                                                zljPh.CFrame = oZy.State.PreRotationPosition:toWorldSpace(CFrame.new(0, 0, 0) * CFrame.Angles(0, 0, math.rad(Ccoa))):toWorldSpace(oZy.State.PreRotation[zljPh].CFrame:toObjectSpace(oZy.State.PreRotationPosition):inverse())
                                            elseif oZy.Options.pivot == 'local' then
                                                zljPh.CFrame = oZy.State.PreRotation[zljPh].CFrame:toWorldSpace(CFrame.new(0, 0, 0) * CFrame.Angles(0, 0, math.rad(Ccoa)))
                                            elseif oZy.Options.pivot == 'last' then
                                                zljPh.CFrame = (oZy.Options.PivotPoint or oZy.State.PreRotation[Selection.Last].CFrame):toWorldSpace(CFrame.new(0, 0, 0) * CFrame.Angles(0, 0, math.rad(Ccoa))):toWorldSpace(oZy.State.PreRotation[zljPh].CFrame:toObjectSpace(oZy.Options.PivotPoint or oZy.State.PreRotation[Selection.Last].CFrame):inverse())
                                            end
                                        end

                                        zljPh.MakeJoints(zljPh)
                                    end
                                end)
                            end
                            if oZy.Connections.AdorneeExistenceListener then
                                oZy.Connections.AdorneeExistenceListener:disconnect()

                                oZy.Connections.AdorneeExistenceListener = nil
                            end

                            oZy.Handles.Adornee = oZ
                            oZy.Connections.AdorneeExistenceListener = oZ.AncestryChanged:Connect(function(
                                hIkuxuG,
                                wSnPWSA8
                            )
                                if hIkuxuG ~= oZ then
                                    return
                                end
                                if wSnPWSA8 == nil then
                                    oZy.hideHandles(oZy)
                                else
                                    oZy.showHandles(oZy, oZ)
                                end
                            end)
                        end
                        Tools.Rotate.hideHandles = function(Ktu1)
                            if Ktu1.Handles then
                                Ktu1.Handles.Adornee = nil
                            end
                        end
                        Tools.Rotate.Loaded = true
                    end,
                },
                {
                    'Surface',
                    function()
                        repeat
                            wait()
                        until (_G.BTCoreEnv and _G.BTCoreEnv.tool and _G.BTCoreEnv.tool.CoreReady)

                        setfenv(1, _G.BTCoreEnv.tool)

                        Tools.Surface = {}
                        Tools.Surface.Color = BrickColor.new('Bright violet')
                        Tools.Surface.Connections = {}
                        Tools.Surface.State = {type = nil}
                        Tools.Surface.Options = {
                            side = Enum.NormalId.Front,
                        }
                        Tools.Surface.Listeners = {}
                        Tools.Surface.Listeners.Equipped = function()
                            local g = Tools.Surface

                            g.State.PreviousSelectionBoxColor = SelectionBoxColor
                            SelectionBoxColor = g.Color

                            updateSelectionBoxColor()
                            g.showGUI(g)
                            g.changeSurface(g, g.Options.side)
                            coroutine.wrap(function()
                                updater_on = true
                                g.Updater = function()
                                    updater_on = false
                                end

                                while wait(0.1) and updater_on do
                                    if CurrentTool == g then
                                        local R = {}

                                        if g.Options.side == '*' then
                                            for t, jYRxYT in pairs(Selection.Items)do
                                                table.insert(R, jYRxYT.TopSurface)
                                                table.insert(R, jYRxYT.BottomSurface)
                                                table.insert(R, jYRxYT.LeftSurface)
                                                table.insert(R, jYRxYT.RightSurface)
                                                table.insert(R, jYRxYT.FrontSurface)
                                                table.insert(R, jYRxYT.BackSurface)
                                            end
                                        else
                                            local kd = g.Options.side.Name .. 'Surface'

                                            for kalNjedc, b2Pn in pairs(Selection.Items)do
                                                table.insert(R, b2Pn[kd])
                                            end
                                        end

                                        local WiBcS8j = Support.IdentifyCommonItem(R)

                                        g.State.type = WiBcS8j

                                        if g.GUI and g.GUI.Visible then
                                            g.updateGUI(g)
                                        end
                                    end
                                end
                            end)()
                        end
                        Tools.Surface.Listeners.Unequipped = function()
                            local trdghrt = Tools.Surface

                            if trdghrt.Updater then
                                trdghrt.Updater()

                                trdghrt.Updater = nil
                            end

                            trdghrt.hideGUI(trdghrt)

                            for J, y1gHSu in pairs(trdghrt.Connections)do
                                y1gHSu.disconnect(y1gHSu)

                                trdghrt.Connections[J] = nil
                            end

                            SelectionBoxColor = trdghrt.State.PreviousSelectionBoxColor

                            updateSelectionBoxColor()
                        end
                        Tools.Surface.Listeners.Button2Down = function()
                            local lF3FR = Tools.Surface
                            local _HG, W, rEJdQN = Workspace.CurrentCamera.CoordinateFrame:toEulerAnglesXYZ()

                            lF3FR.State.PreB2DownCameraRotation = Vector3.new(_HG, W, rEJdQN)
                        end
                        Tools.Surface.Listeners.Button2Up = function()
                            local HF6Ag = Tools.Surface
                            local Y, TEM, jWvh = Workspace.CurrentCamera.CoordinateFrame:toEulerAnglesXYZ()
                            local YO_aE9lks = Vector3.new(Y, TEM, jWvh)

                            if Selection.find(Selection, Mouse.Target) and HF6Ag.State.PreB2DownCameraRotation == YO_aE9lks then
                                HF6Ag.changeSurface(HF6Ag, Mouse.TargetSurface)
                            end
                        end
                        Tools.Surface.startHistoryRecord = function(wuF)
                            if wuF.State.HistoryRecord then
                                wuF.State.HistoryRecord = nil
                            end

                            wuF.State.HistoryRecord = {
                                targets = Support.CloneTable(Selection.Items),
                                target_surface = wuF.Options.side,
                                initial_surfaces = {},
                                terminal_surfaces = {},
                                unapply = function(wuF)
                                    Selection.clear(Selection)

                                    for ipXc, EgbUS in pairs(wuF.targets)do
                                        if EgbUS then
                                            for XJ, RDsGq in pairs(wuF.initial_surfaces[EgbUS])do
                                                EgbUS[XJ] = RDsGq
                                            end

                                            EgbUS.MakeJoints(EgbUS)
                                            Selection.add(Selection, EgbUS)
                                        end
                                    end
                                end,
                                apply = function(wuF)
                                    Selection.clear(Selection)

                                    for wg6c1w, iPEJyOaN in pairs(wuF.targets)do
                                        if iPEJyOaN then
                                            for D0, a223 in pairs(wuF.terminal_surfaces[iPEJyOaN])do
                                                iPEJyOaN[D0] = a223
                                            end

                                            iPEJyOaN.MakeJoints(iPEJyOaN)
                                            Selection.add(Selection, iPEJyOaN)
                                        end
                                    end
                                end,
                            }

                            for px4R7I, a in pairs(wuF.State.HistoryRecord.targets)do
                                if a then
                                    wuF.State.HistoryRecord.initial_surfaces[a] = {}

                                    if wuF.State.HistoryRecord.target_surface == '*' then
                                        wuF.State.HistoryRecord.initial_surfaces[a].RightSurface = a.RightSurface
                                        wuF.State.HistoryRecord.initial_surfaces[a].LeftSurface = a.LeftSurface
                                        wuF.State.HistoryRecord.initial_surfaces[a].FrontSurface = a.FrontSurface
                                        wuF.State.HistoryRecord.initial_surfaces[a].BackSurface = a.BackSurface
                                        wuF.State.HistoryRecord.initial_surfaces[a].TopSurface = a.TopSurface
                                        wuF.State.HistoryRecord.initial_surfaces[a].BottomSurface = a.BottomSurface
                                    else
                                        wuF.State.HistoryRecord.initial_surfaces[a][wuF.State.HistoryRecord.target_surface.Name .. 'Surface'] = a[wuF.State.HistoryRecord.target_surface.Name .. 'Surface']
                                    end
                                end
                            end
                        end
                        Tools.Surface.finishHistoryRecord = function(I29)
                            if not I29.State.HistoryRecord then
                                return
                            end

                            for a, qji75cGk in pairs(I29.State.HistoryRecord.targets)do
                                if qji75cGk then
                                    I29.State.HistoryRecord.terminal_surfaces[qji75cGk] = {}

                                    if I29.State.HistoryRecord.target_surface == '*' then
                                        I29.State.HistoryRecord.terminal_surfaces[qji75cGk].RightSurface = qji75cGk.RightSurface
                                        I29.State.HistoryRecord.terminal_surfaces[qji75cGk].LeftSurface = qji75cGk.LeftSurface
                                        I29.State.HistoryRecord.terminal_surfaces[qji75cGk].FrontSurface = qji75cGk.FrontSurface
                                        I29.State.HistoryRecord.terminal_surfaces[qji75cGk].BackSurface = qji75cGk.BackSurface
                                        I29.State.HistoryRecord.terminal_surfaces[qji75cGk].TopSurface = qji75cGk.TopSurface
                                        I29.State.HistoryRecord.terminal_surfaces[qji75cGk].BottomSurface = qji75cGk.BottomSurface
                                    else
                                        I29.State.HistoryRecord.terminal_surfaces[qji75cGk][I29.State.HistoryRecord.target_surface.Name .. 'Surface'] = qji75cGk[I29.State.HistoryRecord.target_surface.Name .. 'Surface']
                                    end
                                end
                            end

                            History.add(History, I29.State.HistoryRecord)

                            I29.State.HistoryRecord = nil
                        end
                        Tools.Surface.SpecialTypeNames = {
                            SmoothNoOutlines = 'NO OUTLINE',
                            Inlet = 'INLETS',
                        }
                        Tools.Surface.changeType = function(BRk_bg, B97ZvZrX)
                            BRk_bg.startHistoryRecord(BRk_bg)

                            for DINB, rvLAm9 in pairs(Selection.Items)do
                                if BRk_bg.Options.side == '*' then
                                    rvLAm9.FrontSurface = B97ZvZrX
                                    rvLAm9.BackSurface = B97ZvZrX
                                    rvLAm9.RightSurface = B97ZvZrX
                                    rvLAm9.LeftSurface = B97ZvZrX
                                    rvLAm9.TopSurface = B97ZvZrX
                                    rvLAm9.BottomSurface = B97ZvZrX
                                else
                                    rvLAm9[BRk_bg.Options.side.Name .. 'Surface'] = B97ZvZrX
                                end

                                rvLAm9.MakeJoints(rvLAm9)
                            end

                            BRk_bg.finishHistoryRecord(BRk_bg)
                            BRk_bg.TypeDropdown:selectOption(BRk_bg.SpecialTypeNames[B97ZvZrX.Name] or B97ZvZrX.Name:upper())

                            if BRk_bg.TypeDropdown.open then
                                BRk_bg.TypeDropdown:toggle()
                            end
                        end
                        Tools.Surface.changeSurface = function(E, Im)
                            E.Options.side = Im

                            E.SideDropdown:selectOption(Im == '*' and 'ALL' or Im.Name:upper())

                            if E.SideDropdown.open then
                                E.SideDropdown:toggle()
                            end
                        end
                        Tools.Surface.updateGUI = function(yWsj)
                            if not yWsj.GUI then
                                return
                            end
                            if #Selection.Items > 0 then
                                yWsj.TypeDropdown:selectOption(yWsj.State.type and (yWsj.SpecialTypeNames[yWsj.State.type.Name] or yWsj.State.type.Name:upper()) or '*')
                            else
                                yWsj.TypeDropdown:selectOption('')
                            end
                        end
                        Tools.Surface.showGUI = function(MFbe)
                            if not MFbe.GUI then
                                local i = DFb100j.BTSurfaceToolGUI:Clone()

                                i.Parent = UI

                                local ayLU = createDropdown()

                                MFbe.SideDropdown = ayLU
                                ayLU.Frame.Parent = i.SideOption
                                ayLU.Frame.Position = UDim2.new(0, 30, 0, 0)
                                ayLU.Frame.Size = UDim2.new(0, 72, 0, 25)

                                ayLU.addOption(ayLU, 'ALL').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeSurface(MFbe, '*')
                                end)
                                ayLU.addOption(ayLU, 'TOP').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeSurface(MFbe, Enum.NormalId.Top)
                                end)
                                ayLU.addOption(ayLU, 'BOTTOM').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeSurface(MFbe, Enum.NormalId.Bottom)
                                end)
                                ayLU.addOption(ayLU, 'FRONT').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeSurface(MFbe, Enum.NormalId.Front)
                                end)
                                ayLU.addOption(ayLU, 'BACK').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeSurface(MFbe, Enum.NormalId.Back)
                                end)
                                ayLU.addOption(ayLU, 'LEFT').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeSurface(MFbe, Enum.NormalId.Left)
                                end)
                                ayLU.addOption(ayLU, 'RIGHT').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeSurface(MFbe, Enum.NormalId.Right)
                                end)

                                local T2y = createDropdown()

                                MFbe.TypeDropdown = T2y
                                T2y.Frame.Parent = i.TypeOption
                                T2y.Frame.Position = UDim2.new(0, 30, 0, 0)
                                T2y.Frame.Size = UDim2.new(0, 87, 0, 25)

                                T2y.addOption(T2y, 'STUDS').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeType(MFbe, Enum.SurfaceType.Studs)
                                end)
                                T2y.addOption(T2y, 'INLETS').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeType(MFbe, Enum.SurfaceType.Inlet)
                                end)
                                T2y.addOption(T2y, 'SMOOTH').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeType(MFbe, Enum.SurfaceType.Smooth)
                                end)
                                T2y.addOption(T2y, 'WELD').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeType(MFbe, Enum.SurfaceType.Weld)
                                end)
                                T2y.addOption(T2y, 'GLUE').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeType(MFbe, Enum.SurfaceType.Glue)
                                end)
                                T2y.addOption(T2y, 'UNIVERSAL').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeType(MFbe, Enum.SurfaceType.Universal)
                                end)
                                T2y.addOption(T2y, 'HINGE').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeType(MFbe, Enum.SurfaceType.Hinge)
                                end)
                                T2y.addOption(T2y, 'MOTOR').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeType(MFbe, Enum.SurfaceType.Motor)
                                end)
                                T2y.addOption(T2y, 'NO OUTLINE').MouseButton1Up:Connect(function(
                                )
                                    MFbe.changeType(MFbe, Enum.SurfaceType.SmoothNoOutlines)
                                end)

                                MFbe.GUI = i
                            end

                            MFbe.GUI.Visible = true
                        end
                        Tools.Surface.hideGUI = function(QgLdZF)
                            if QgLdZF.GUI then
                                QgLdZF.GUI.Visible = false
                            end
                        end
                        Tools.Surface.Loaded = true
                    end,
                },
                {
                    'Texture',
                    function()
                        repeat
                            wait()
                        until (_G.BTCoreEnv and _G.BTCoreEnv.tool and _G.BTCoreEnv.tool.CoreReady)

                        setfenv(1, _G.BTCoreEnv.tool)

                        Tools.Texture = {}
                        Tools.Texture.Color = BrickColor.new('Bright violet')
                        Tools.Texture.Options = {
                            side = Enum.NormalId.Front,
                            mode = 'decal',
                        }
                        Tools.Texture.State = {}
                        Tools.Texture.Connections = {}
                        Tools.Texture.Listeners = {}
                        Tools.Texture.Listeners.Equipped = function()
                            local XGyz6oE = Tools.Texture

                            XGyz6oE.State.PreviousSelectionBoxColor = SelectionBoxColor
                            SelectionBoxColor = XGyz6oE.Color

                            updateSelectionBoxColor()
                            XGyz6oE.showGUI(XGyz6oE)
                            XGyz6oE.changeSide(XGyz6oE, XGyz6oE.Options.side)
                            XGyz6oE.changeMode(XGyz6oE, XGyz6oE.Options.mode)
                            coroutine.wrap(function()
                                updater_on = true
                                XGyz6oE.Updater = function()
                                    updater_on = false
                                end

                                while wait(0.1) and updater_on do
                                    if CurrentTool == XGyz6oE then
                                        if XGyz6oE.GUI and XGyz6oE.GUI.Visible then
                                            XGyz6oE.updateGUI(XGyz6oE)
                                        end
                                    end
                                end
                            end)()
                        end
                        Tools.Texture.Listeners.Unequipped = function()
                            local i3NlQ94 = Tools.Texture

                            if i3NlQ94.Updater then
                                i3NlQ94.Updater()

                                i3NlQ94.Updater = nil
                            end

                            i3NlQ94.hideGUI(i3NlQ94)

                            for RnFNLp, wOOFocF in pairs(i3NlQ94.Connections)do
                                wOOFocF.disconnect(wOOFocF)

                                i3NlQ94.Connections[RnFNLp] = nil
                            end

                            SelectionBoxColor = i3NlQ94.State.PreviousSelectionBoxColor

                            updateSelectionBoxColor()
                        end
                        Tools.Texture.Listeners.Button2Down = function()
                            local cUoJ = Tools.Texture
                            local m3QdLvW, xv, H = Workspace.CurrentCamera.CoordinateFrame:toEulerAnglesXYZ()

                            cUoJ.State.PreB2DownCameraRotation = Vector3.new(m3QdLvW, xv, H)
                        end
                        Tools.Texture.Listeners.Button2Up = function()
                            local Gjvc = Tools.Texture
                            local u3iW5, MGaxDz, ezQ = Workspace.CurrentCamera.CoordinateFrame:toEulerAnglesXYZ()
                            local c = Vector3.new(u3iW5, MGaxDz, ezQ)

                            if Selection.find(Selection, Mouse.Target) and Gjvc.State.PreB2DownCameraRotation == c then
                                Gjvc.changeSide(Gjvc, Mouse.TargetSurface)
                            end
                        end
                        Tools.Texture.startHistoryRecord = function(
                            FVJlfw,
                            MwzzZ
                        )
                            if FVJlfw.State.HistoryRecord then
                                FVJlfw.State.HistoryRecord = nil
                            end

                            FVJlfw.State.HistoryRecord = {
                                targets = Support.CloneTable(MwzzZ),
                                initial_texture = {},
                                terminal_texture = {},
                                initial_transparency = {},
                                terminal_transparency = {},
                                initial_repeat = {},
                                terminal_repeat = {},
                                initial_side = {},
                                terminal_side = {},
                                unapply = function(FVJlfw)
                                    Selection.clear(Selection)

                                    for EQI, zdm in pairs(FVJlfw.targets)do
                                        if zdm then
                                            Selection.add(Selection, zdm.Parent)

                                            zdm.Texture = FVJlfw.initial_texture[zdm]
                                            zdm.Transparency = FVJlfw.initial_transparency[zdm]
                                            zdm.Face = FVJlfw.initial_side[zdm]

                                            if zdm.IsA(zdm, 'Texture') then
                                                zdm.StudsPerTileU = FVJlfw.initial_repeat[zdm].x
                                                zdm.StudsPerTileV = FVJlfw.initial_repeat[zdm].y
                                            end
                                        end
                                    end
                                end,
                                apply = function(FVJlfw)
                                    Selection.clear(Selection)

                                    for OQaP, V1AAbF in pairs(FVJlfw.targets)do
                                        if V1AAbF then
                                            Selection.add(Selection, V1AAbF.Parent)

                                            V1AAbF.Texture = FVJlfw.terminal_texture[V1AAbF]
                                            V1AAbF.Transparency = FVJlfw.terminal_transparency[V1AAbF]
                                            V1AAbF.Face = FVJlfw.terminal_side[V1AAbF]

                                            if V1AAbF.IsA(V1AAbF, 'Texture') then
                                                V1AAbF.StudsPerTileU = FVJlfw.terminal_repeat[V1AAbF].x
                                                V1AAbF.StudsPerTileV = FVJlfw.terminal_repeat[V1AAbF].y
                                            end
                                        end
                                    end
                                end,
                            }

                            for DVp, uMHoys in pairs(FVJlfw.State.HistoryRecord.targets)do
                                if uMHoys then
                                    FVJlfw.State.HistoryRecord.initial_texture[uMHoys] = uMHoys.Texture
                                    FVJlfw.State.HistoryRecord.initial_transparency[uMHoys] = uMHoys.Transparency
                                    FVJlfw.State.HistoryRecord.initial_side[uMHoys] = uMHoys.Face

                                    if uMHoys.IsA(uMHoys, 'Texture') then
                                        FVJlfw.State.HistoryRecord.initial_repeat[uMHoys] = Vector2.new(uMHoys.StudsPerTileU, uMHoys.StudsPerTileV)
                                    end
                                end
                            end
                        end
                        Tools.Texture.finishHistoryRecord = function(hebAWpv)
                            if not hebAWpv.State.HistoryRecord then
                                return
                            end

                            for iO, kQfTr6 in pairs(hebAWpv.State.HistoryRecord.targets)do
                                if kQfTr6 then
                                    hebAWpv.State.HistoryRecord.terminal_texture[kQfTr6] = kQfTr6.Texture
                                    hebAWpv.State.HistoryRecord.terminal_transparency[kQfTr6] = kQfTr6.Transparency
                                    hebAWpv.State.HistoryRecord.terminal_side[kQfTr6] = kQfTr6.Face

                                    if kQfTr6.IsA(kQfTr6, 'Texture') then
                                        hebAWpv.State.HistoryRecord.terminal_repeat[kQfTr6] = Vector2.new(kQfTr6.StudsPerTileU, kQfTr6.StudsPerTileV)
                                    end
                                end
                            end

                            History.add(History, hebAWpv.State.HistoryRecord)

                            hebAWpv.State.HistoryRecord = nil
                        end
                        Tools.Texture.changeMode = function(VF, qby)
                            VF.Options.mode = qby

                            if not VF.GUI then
                                return
                            end
                            if qby == 'decal' then
                                VF.GUI.ModeOption.Decal.SelectedIndicator.Transparency = 0
                                VF.GUI.ModeOption.Texture.SelectedIndicator.Transparency = 1
                                VF.GUI.ModeOption.Decal.Background.Image = Assets.DarkSlantedRectangle
                                VF.GUI.ModeOption.Texture.Background.Image = Assets.LightSlantedRectangle
                                VF.GUI.AddButton.Button.Text = 'ADD DECAL'
                                VF.GUI.RemoveButton.Button.Text = 'REMOVE DECAL'
                            elseif qby == 'texture' then
                                VF.GUI.ModeOption.Decal.SelectedIndicator.Transparency = 1
                                VF.GUI.ModeOption.Texture.SelectedIndicator.Transparency = 0
                                VF.GUI.ModeOption.Decal.Background.Image = Assets.LightSlantedRectangle
                                VF.GUI.ModeOption.Texture.Background.Image = Assets.DarkSlantedRectangle
                                VF.GUI.AddButton.Button.Text = 'ADD TEXTURE'
                                VF.GUI.RemoveButton.Button.Text = 'REMOVE TEXTURE'
                            end
                        end
                        Tools.Texture.changeSide = function(xocXyH, guNNjlMM)
                            xocXyH.Options.side = guNNjlMM

                            if xocXyH.SideDropdown then
                                xocXyH.SideDropdown:selectOption(guNNjlMM.Name:upper())

                                if xocXyH.SideDropdown.open then
                                    xocXyH.SideDropdown:toggle()
                                end
                            end
                        end
                        Tools.Texture.changeTexture = function(wvoHfla, UIgl)
                            local ij = {}

                            for m, TO857 in pairs(Selection.Items)do
                                local Uo5o = Support.GetChildrenOfClass(TO857, 'Texture')

                                for m, xX9 in pairs(Uo5o)do
                                    if xX9.Face == wvoHfla.Options.side then
                                        table.insert(ij, xX9)
                                    end
                                end
                            end

                            if HttpAvailable then
                                local pOltGg = 'http://www.f3xteam.com/bt/getDecalImageID/%s'
                                local aD = HttpInterface.GetAsync(pOltGg.format(pOltGg, UIgl))

                                if aD and aD.len(aD) > 0 then
                                    UIgl = aD
                                end
                            end

                            wvoHfla.startHistoryRecord(wvoHfla, ij)

                            for KO, Z in pairs(ij)do
                                Z.Texture = 'http://www.roblox.com/asset/?id=' .. UIgl
                            end

                            wvoHfla.finishHistoryRecord(wvoHfla)
                        end
                        Tools.Texture.changeDecal = function(kv6Rc, G8PtJug)
                            local RwGMa = {}

                            for wODtgBt, R83 in pairs(Selection.Items)do
                                local O3 = Support.GetChildrenOfClass(R83, 'Decal')

                                for wODtgBt, Y in pairs(O3)do
                                    if Y.Face == kv6Rc.Options.side then
                                        table.insert(RwGMa, Y)
                                    end
                                end
                            end

                            if HttpAvailable then
                                local Nau29CQd = 'http://www.f3xteam.com/bt/getDecalImageID/%s'
                                local rPWy4BIw = HttpInterface.GetAsync(Nau29CQd.format(Nau29CQd, G8PtJug))

                                if rPWy4BIw and rPWy4BIw.len(rPWy4BIw) > 0 then
                                    G8PtJug = rPWy4BIw
                                end
                            end

                            kv6Rc.startHistoryRecord(kv6Rc, RwGMa)

                            for FIDceK, h in pairs(RwGMa)do
                                h.Texture = 'http://www.roblox.com/asset/?id=' .. G8PtJug
                            end

                            kv6Rc.finishHistoryRecord(kv6Rc)
                        end
                        Tools.Texture.changeTransparency = function(lSW, kl)
                            local W = {}

                            for xtH, qujnE in pairs(Selection.Items)do
                                if lSW.Options.mode == 'texture' then
                                    local fX = Support.GetChildrenOfClass(qujnE, 'Texture')

                                    for xtH, Gu9cA in pairs(fX)do
                                        if Gu9cA.Face == lSW.Options.side then
                                            table.insert(W, Gu9cA)
                                        end
                                    end
                                elseif lSW.Options.mode == 'decal' then
                                    local qie86E6k = Support.GetChildrenOfClass(qujnE, 'Decal')

                                    for xtH, _7XdqeK in pairs(qie86E6k)do
                                        if _7XdqeK.Face == lSW.Options.side then
                                            table.insert(W, _7XdqeK)
                                        end
                                    end
                                end
                            end

                            lSW.startHistoryRecord(lSW, W)

                            for FUhqkm2, OmYbhPA in pairs(W)do
                                OmYbhPA.Transparency = kl
                            end

                            lSW.finishHistoryRecord(lSW)
                        end
                        Tools.Texture.changeFrequency = function(o1, cKy3Dt, y)
                            local zB6zO = {}

                            for C6, J09Np7H8 in pairs(Selection.Items)do
                                local tf = Support.GetChildrenOfClass(J09Np7H8, 'Texture')

                                for C6, VzDXmgRS in pairs(tf)do
                                    if VzDXmgRS.Face == o1.Options.side then
                                        table.insert(zB6zO, VzDXmgRS)
                                    end
                                end
                            end

                            o1.startHistoryRecord(o1, zB6zO)

                            for QHdb, dtRn in pairs(zB6zO)do
                                if cKy3Dt == 'x' then
                                    dtRn.StudsPerTileU = y
                                elseif cKy3Dt == 'y' then
                                    dtRn.StudsPerTileV = y
                                end
                            end

                            o1.finishHistoryRecord(o1)
                        end
                        Tools.Texture.addTexture = function(eHQcOZ4)
                            local Sd6s = {
                                apply = function(eHQcOZ4)
                                    Selection.clear(Selection)

                                    for KVcI5x, AHVxk8 in pairs(eHQcOZ4.textures)do
                                        AHVxk8.Parent = eHQcOZ4.texture_parents[AHVxk8]

                                        Selection.add(Selection, AHVxk8.Parent)
                                    end
                                end,
                                unapply = function(eHQcOZ4)
                                    Selection.clear(Selection)

                                    for ykIP, XQaA in pairs(eHQcOZ4.textures)do
                                        Selection.add(Selection, XQaA.Parent)

                                        XQaA.Parent = nil
                                    end
                                end,
                            }
                            local G4 = {}
                            local A = {}

                            for UFkKFj0, mj8vF in pairs(Selection.Items)do
                                local N = Support.GetChildrenOfClass(mj8vF, 'Texture')
                                local XN_r = false

                                for UFkKFj0, ihQKt in pairs(N)do
                                    if ihQKt.Face == eHQcOZ4.Options.side then
                                        XN_r = true

                                        break
                                    end
                                end

                                if not XN_r then
                                    local Nf = RbxUtility.Create'Texture'{
                                        Parent = mj8vF,
                                        Face = eHQcOZ4.Options.side,
                                    }

                                    table.insert(G4, Nf)

                                    A[Nf] = mj8vF
                                end
                            end

                            Sd6s.textures = G4
                            Sd6s.texture_parents = A

                            History.add(History, Sd6s)
                        end
                        Tools.Texture.addDecal = function(v0xXBtzp)
                            local Rh8dzZf_ = {
                                apply = function(v0xXBtzp)
                                    Selection.clear(Selection)

                                    for DQKzz7t, I in pairs(v0xXBtzp.decals)do
                                        I.Parent = v0xXBtzp.decal_parents[I]

                                        Selection.add(Selection, I.Parent)
                                    end
                                end,
                                unapply = function(v0xXBtzp)
                                    Selection.clear(Selection)

                                    for jvpPcK, s in pairs(v0xXBtzp.decals)do
                                        Selection.add(Selection, s.Parent)

                                        s.Parent = nil
                                    end
                                end,
                            }
                            local k6z = {}
                            local W = {}

                            for Tx, izebj in pairs(Selection.Items)do
                                local RioX = Support.GetChildrenOfClass(izebj, 'Decal')
                                local sgtu = false

                                for Tx, i3XH in pairs(RioX)do
                                    if i3XH.Face == v0xXBtzp.Options.side then
                                        sgtu = true

                                        break
                                    end
                                end

                                if not sgtu then
                                    local USt6PLe2 = RbxUtility.Create'Decal'{
                                        Parent = izebj,
                                        Face = v0xXBtzp.Options.side,
                                    }

                                    table.insert(k6z, USt6PLe2)

                                    W[USt6PLe2] = izebj
                                end
                            end

                            Rh8dzZf_.decals = k6z
                            Rh8dzZf_.decal_parents = W

                            History.add(History, Rh8dzZf_)
                        end
                        Tools.Texture.removeTexture = function(j)
                            local EHi = {
                                textures = {},
                                texture_parents = {},
                                apply = function(j)
                                    Selection.clear(Selection)

                                    for Du4PWm2, jEJClb in pairs(j.textures)do
                                        Selection.add(Selection, jEJClb.Parent)

                                        jEJClb.Parent = nil
                                    end
                                end,
                                unapply = function(j)
                                    Selection.clear(Selection)

                                    for np8JkPc, Rfao in pairs(j.textures)do
                                        Rfao.Parent = j.texture_parents[Rfao]

                                        Selection.add(Selection, Rfao.Parent)
                                    end
                                end,
                            }

                            for N6IWFa, Hr3mtiCq in pairs(Selection.Items)do
                                local mf1UO = Support.GetChildrenOfClass(Hr3mtiCq, 'Texture')

                                for N6IWFa, wykbGA84 in pairs(mf1UO)do
                                    if wykbGA84.Face == j.Options.side then
                                        table.insert(EHi.textures, wykbGA84)

                                        EHi.texture_parents[wykbGA84] = wykbGA84.Parent
                                        wykbGA84.Parent = nil
                                    end
                                end
                            end

                            History.add(History, EHi)
                        end
                        Tools.Texture.removeDecal = function(Pd)
                            local po2ff4F = {
                                decals = {},
                                decal_parents = {},
                                apply = function(Pd)
                                    Selection.clear(Selection)

                                    for f, a in pairs(Pd.decals)do
                                        Selection.add(Selection, a.Parent)

                                        a.Parent = nil
                                    end
                                end,
                                unapply = function(Pd)
                                    Selection.clear(Selection)

                                    for mBRe, Cb in pairs(Pd.decals)do
                                        Cb.Parent = Pd.decal_parents[Cb]

                                        Selection.add(Selection, Cb.Parent)
                                    end
                                end,
                            }

                            for QP, k in pairs(Selection.Items)do
                                local NTz6jdr = Support.GetChildrenOfClass(k, 'Decal')

                                for QP, cgIU3 in pairs(NTz6jdr)do
                                    if cgIU3.Face == Pd.Options.side then
                                        table.insert(po2ff4F.decals, cgIU3)

                                        po2ff4F.decal_parents[cgIU3] = cgIU3.Parent
                                        cgIU3.Parent = nil
                                    end
                                end
                            end

                            History.add(History, po2ff4F)
                        end
                        Tools.Texture.updateGUI = function(auV7A3JP)
                            if not auV7A3JP.GUI then
                                return
                            end

                            local FzJwZ = auV7A3JP.GUI

                            if #Selection.Items == 0 then
                                auV7A3JP.GUI.AddButton.Visible = false
                                auV7A3JP.GUI.RemoveButton.Visible = false
                                auV7A3JP.GUI.ImageIDOption.Visible = false
                                auV7A3JP.GUI.TransparencyOption.Visible = false
                                auV7A3JP.GUI.RepeatOption.Visible = false
                                auV7A3JP.GUI.Size = UDim2.new(0, 200, 0, 100)
                            else
                                if auV7A3JP.Options.mode == 'texture' then
                                    local Zb5 = {}

                                    for Ofe, TV4H8 in pairs(Selection.Items)do
                                        local HdS = Support.GetChildrenOfClass(TV4H8, 'Texture')

                                        for Ofe, bvGUlnl8 in pairs(HdS)do
                                            if bvGUlnl8.Face == auV7A3JP.Options.side then
                                                table.insert(Zb5, bvGUlnl8)

                                                break
                                            end
                                        end
                                    end

                                    if #Zb5 == 0 then
                                        auV7A3JP.GUI.AddButton.Visible = true
                                        auV7A3JP.GUI.RemoveButton.Visible = false
                                        auV7A3JP.GUI.ImageIDOption.Visible = false
                                        auV7A3JP.GUI.TransparencyOption.Visible = false
                                        auV7A3JP.GUI.RepeatOption.Visible = false
                                        auV7A3JP.GUI.Size = UDim2.new(0, 200, 0, 130)
                                    elseif #Zb5 ~= #Selection.Items then
                                        auV7A3JP.GUI.AddButton.Visible = true
                                        auV7A3JP.GUI.RemoveButton.Visible = true
                                        auV7A3JP.GUI.ImageIDOption.Visible = true
                                        auV7A3JP.GUI.TransparencyOption.Visible = true
                                        auV7A3JP.GUI.RepeatOption.Visible = true
                                        auV7A3JP.GUI.ImageIDOption.Position = UDim2.new(0, 14, 0, 135)
                                        auV7A3JP.GUI.TransparencyOption.Position = UDim2.new(0, 14, 0, 170)
                                        auV7A3JP.GUI.RepeatOption.Position = UDim2.new(0, 0, 0, 205)
                                        auV7A3JP.GUI.Size = UDim2.new(0, 200, 0, 280)
                                    elseif #Zb5 == #Selection.Items then
                                        auV7A3JP.GUI.AddButton.Visible = false
                                        auV7A3JP.GUI.RemoveButton.Visible = true
                                        auV7A3JP.GUI.ImageIDOption.Visible = true
                                        auV7A3JP.GUI.TransparencyOption.Visible = true
                                        auV7A3JP.GUI.RepeatOption.Visible = true
                                        auV7A3JP.GUI.ImageIDOption.Position = UDim2.new(0, 14, 0, 100)
                                        auV7A3JP.GUI.TransparencyOption.Position = UDim2.new(0, 14, 0, 135)
                                        auV7A3JP.GUI.RepeatOption.Position = UDim2.new(0, 0, 0, 170)
                                        auV7A3JP.GUI.Size = UDim2.new(0, 200, 0, 245)
                                    end

                                    local U, D1Bo4qP, CaGUl8h, zL

                                    for E2J9X, y in pairs(Zb5)do
                                        if E2J9X == 1 then
                                            U = y.Texture:lower()
                                            D1Bo4qP = y.Transparency
                                            CaGUl8h = y.StudsPerTileU
                                            zL = y.StudsPerTileV
                                        else
                                            if U ~= y.Texture:lower() then
                                                U = nil
                                            end
                                            if D1Bo4qP ~= y.Transparency then
                                                D1Bo4qP = nil
                                            end
                                            if CaGUl8h ~= y.StudsPerTileU then
                                                CaGUl8h = nil
                                            end
                                            if zL ~= y.StudsPerTileV then
                                                zL = nil
                                            end
                                        end
                                    end

                                    if not auV7A3JP.State.image_id_focused then
                                        auV7A3JP.GUI.ImageIDOption.TextBox.Text = U and (U.match(U, '%?id=([0-9]+)') or '') or '*'
                                    end
                                    if not auV7A3JP.State.transparency_focused then
                                        auV7A3JP.GUI.TransparencyOption.TransparencyInput.TextBox.Text = D1Bo4qP and Support.Round(D1Bo4qP, 2) or '*'
                                    end
                                    if not auV7A3JP.State.rep_x_focused then
                                        auV7A3JP.GUI.RepeatOption.XInput.TextBox.Text = CaGUl8h and Support.Round(CaGUl8h, 2) or '*'
                                    end
                                    if not auV7A3JP.State.rep_y_focused then
                                        auV7A3JP.GUI.RepeatOption.YInput.TextBox.Text = zL and Support.Round(zL, 2) or '*'
                                    end
                                elseif auV7A3JP.Options.mode == 'decal' then
                                    local _Sbcpg = {}

                                    for WO, dcu in pairs(Selection.Items)do
                                        local HR = Support.GetChildrenOfClass(dcu, 'Decal')

                                        for WO, P in pairs(HR)do
                                            if P.Face == auV7A3JP.Options.side then
                                                table.insert(_Sbcpg, P)

                                                break
                                            end
                                        end
                                    end

                                    if #_Sbcpg == 0 then
                                        auV7A3JP.GUI.AddButton.Visible = true
                                        auV7A3JP.GUI.RemoveButton.Visible = false
                                        auV7A3JP.GUI.ImageIDOption.Visible = false
                                        auV7A3JP.GUI.TransparencyOption.Visible = false
                                        auV7A3JP.GUI.RepeatOption.Visible = false
                                        auV7A3JP.GUI.Size = UDim2.new(0, 200, 0, 130)
                                    elseif #_Sbcpg ~= #Selection.Items then
                                        auV7A3JP.GUI.AddButton.Visible = true
                                        auV7A3JP.GUI.RemoveButton.Visible = true
                                        auV7A3JP.GUI.ImageIDOption.Visible = true
                                        auV7A3JP.GUI.TransparencyOption.Visible = true
                                        auV7A3JP.GUI.RepeatOption.Visible = false
                                        auV7A3JP.GUI.ImageIDOption.Position = UDim2.new(0, 14, 0, 135)
                                        auV7A3JP.GUI.TransparencyOption.Position = UDim2.new(0, 14, 0, 170)
                                        auV7A3JP.GUI.Size = UDim2.new(0, 200, 0, 245)
                                    elseif #_Sbcpg == #Selection.Items then
                                        auV7A3JP.GUI.AddButton.Visible = false
                                        auV7A3JP.GUI.RemoveButton.Visible = true
                                        auV7A3JP.GUI.ImageIDOption.Visible = true
                                        auV7A3JP.GUI.TransparencyOption.Visible = true
                                        auV7A3JP.GUI.RepeatOption.Visible = false
                                        auV7A3JP.GUI.ImageIDOption.Position = UDim2.new(0, 14, 0, 100)
                                        auV7A3JP.GUI.TransparencyOption.Position = UDim2.new(0, 14, 0, 135)
                                        auV7A3JP.GUI.Size = UDim2.new(0, 200, 0, 205)
                                    end

                                    local y99_, f7ZTY

                                    for y1jZqCcc, ARVZ in pairs(_Sbcpg)do
                                        if y1jZqCcc == 1 then
                                            y99_ = ARVZ.Texture:lower()
                                            f7ZTY = ARVZ.Transparency
                                        else
                                            if y99_ ~= ARVZ.Texture:lower() then
                                                y99_ = nil
                                            end
                                            if f7ZTY ~= ARVZ.Transparency then
                                                f7ZTY = nil
                                            end
                                        end
                                    end

                                    if not auV7A3JP.State.image_id_focused then
                                        auV7A3JP.GUI.ImageIDOption.TextBox.Text = y99_ and (y99_.match(y99_, '%?id=([0-9]+)') or '') or '*'
                                    end
                                    if not auV7A3JP.State.transparency_focused then
                                        auV7A3JP.GUI.TransparencyOption.TransparencyInput.TextBox.Text = f7ZTY and Support.Round(f7ZTY, 2) or '*'
                                    end
                                end
                            end
                        end
                        Tools.Texture.showGUI = function(ulU)
                            if not ulU.GUI then
                                local mkpyU5eh = DFb100j.BTTextureToolGUI:Clone()

                                mkpyU5eh.Parent = UI

                                mkpyU5eh.AddButton.Button.MouseButton1Up:Connect(function(
                                )
                                    if ulU.Options.mode == 'decal' then
                                        ulU.addDecal(ulU)
                                    elseif ulU.Options.mode == 'texture' then
                                        ulU.addTexture(ulU)
                                    end
                                end)
                                mkpyU5eh.RemoveButton.Button.MouseButton1Up:Connect(function(
                                )
                                    if ulU.Options.mode == 'decal' then
                                        ulU.removeDecal(ulU)
                                    elseif ulU.Options.mode == 'texture' then
                                        ulU.removeTexture(ulU)
                                    end
                                end)
                                mkpyU5eh.ModeOption.Decal.Button.MouseButton1Down:Connect(function(
                                )
                                    ulU.changeMode(ulU, 'decal')
                                end)
                                mkpyU5eh.ModeOption.Texture.Button.MouseButton1Down:Connect(function(
                                )
                                    ulU.changeMode(ulU, 'texture')
                                end)

                                local U9 = createDropdown()

                                ulU.SideDropdown = U9
                                U9.Frame.Parent = mkpyU5eh.SideOption
                                U9.Frame.Position = UDim2.new(0, 35, 0, 0)
                                U9.Frame.Size = UDim2.new(1, -50, 0, 25)

                                U9.addOption(U9, 'TOP').MouseButton1Up:Connect(function(
                                )
                                    ulU.changeSide(ulU, Enum.NormalId.Top)
                                end)
                                U9.addOption(U9, 'BOTTOM').MouseButton1Up:Connect(function(
                                )
                                    ulU.changeSide(ulU, Enum.NormalId.Bottom)
                                end)
                                U9.addOption(U9, 'FRONT').MouseButton1Up:Connect(function(
                                )
                                    ulU.changeSide(ulU, Enum.NormalId.Front)
                                end)
                                U9.addOption(U9, 'BACK').MouseButton1Up:Connect(function(
                                )
                                    ulU.changeSide(ulU, Enum.NormalId.Back)
                                end)
                                U9.addOption(U9, 'LEFT').MouseButton1Up:Connect(function(
                                )
                                    ulU.changeSide(ulU, Enum.NormalId.Left)
                                end)
                                U9.addOption(U9, 'RIGHT').MouseButton1Up:Connect(function(
                                )
                                    ulU.changeSide(ulU, Enum.NormalId.Right)
                                end)
                                mkpyU5eh.RepeatOption.XInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    ulU.State.rep_x_focused = true

                                    mkpyU5eh.RepeatOption.XInput.TextBox:CaptureFocus()
                                end)
                                mkpyU5eh.RepeatOption.XInput.TextBox.FocusLost:Connect(function(
                                    pzpDOr
                                )
                                    local yoo = tonumber(mkpyU5eh.RepeatOption.XInput.TextBox.Text)

                                    if yoo then
                                        ulU.changeFrequency(ulU, 'x', yoo)
                                    end

                                    ulU.State.rep_x_focused = false
                                end)
                                mkpyU5eh.RepeatOption.YInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    ulU.State.rep_y_focused = true

                                    mkpyU5eh.RepeatOption.YInput.TextBox:CaptureFocus()
                                end)
                                mkpyU5eh.RepeatOption.YInput.TextBox.FocusLost:Connect(function(
                                    MXzW
                                )
                                    local Uvqu6c5 = tonumber(mkpyU5eh.RepeatOption.YInput.TextBox.Text)

                                    if Uvqu6c5 then
                                        ulU.changeFrequency(ulU, 'y', Uvqu6c5)
                                    end

                                    ulU.State.rep_y_focused = false
                                end)
                                mkpyU5eh.ImageIDOption.TextButton.MouseButton1Down:Connect(function(
                                )
                                    ulU.State.image_id_focused = true

                                    mkpyU5eh.ImageIDOption.TextBox:CaptureFocus()
                                end)
                                mkpyU5eh.ImageIDOption.TextBox.FocusLost:Connect(function(
                                    MMXv
                                )
                                    local R = mkpyU5eh.ImageIDOption.TextBox.Text
                                    local u = tonumber(R) or R.lower(R):match('%?id=([0-9]+)')

                                    if u then
                                        if ulU.Options.mode == 'decal' then
                                            ulU.changeDecal(ulU, u)
                                        elseif ulU.Options.mode == 'texture' then
                                            ulU.changeTexture(ulU, u)
                                        end
                                    end

                                    ulU.State.image_id_focused = false
                                end)
                                mkpyU5eh.TransparencyOption.TransparencyInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    ulU.State.transparency_focused = true

                                    mkpyU5eh.TransparencyOption.TransparencyInput.TextBox:CaptureFocus()
                                end)
                                mkpyU5eh.TransparencyOption.TransparencyInput.TextBox.FocusLost:Connect(function(
                                    ipLsp
                                )
                                    local cpC = tonumber(mkpyU5eh.TransparencyOption.TransparencyInput.TextBox.Text)

                                    if cpC then
                                        if cpC > 1 then
                                            cpC = 1
                                        elseif cpC < 0 then
                                            cpC = 0
                                        end

                                        ulU.changeTransparency(ulU, cpC)
                                    end

                                    ulU.State.transparency_focused = false
                                end)

                                ulU.GUI = mkpyU5eh
                            end

                            ulU.GUI.Visible = true
                        end
                        Tools.Texture.hideGUI = function(k73bTK)
                            if k73bTK.GUI then
                                k73bTK.GUI.Visible = false
                            end
                        end
                        Tools.Texture.Loaded = true
                    end,
                },
                {
                    'Weld',
                    function()
                        repeat
                            wait()
                        until (_G.BTCoreEnv and _G.BTCoreEnv.tool and _G.BTCoreEnv.tool.CoreReady)

                        setfenv(1, _G.BTCoreEnv.tool)

                        Tools.Weld = {}
                        Tools.Weld.Color = BrickColor.new('Really black')
                        Tools.Weld.State = {}
                        Tools.Weld.Connections = {}
                        Tools.Weld.Listeners = {}
                        Tools.Weld.Listeners.Equipped = function()
                            local cqVt = Tools.Weld

                            cqVt.State.PreviousSelectionBoxColor = SelectionBoxColor
                            SelectionBoxColor = cqVt.Color

                            updateSelectionBoxColor()
                            cqVt.showGUI(cqVt)

                            if Selection.Last and SelectionBoxes[Selection.Last] then
                                SelectionBoxes[Selection.Last].Color = BrickColor.new('Pastel Blue')
                            end

                            cqVt.Connections.LastPartHighlighter = Selection.Changed:Connect(function(
                            )
                                updateSelectionBoxColor()

                                if Selection.Last and SelectionBoxes[Selection.Last] then
                                    SelectionBoxes[Selection.Last].Color = BrickColor.new('Pastel Blue')
                                end
                            end)
                        end
                        Tools.Weld.Listeners.Unequipped = function()
                            local ywq = Tools.Weld

                            ywq.hideGUI(ywq)

                            for lMF, WVA in pairs(ywq.Connections)do
                                WVA.disconnect(WVA)

                                ywq.Connections[lMF] = nil
                            end

                            SelectionBoxColor = ywq.State.PreviousSelectionBoxColor

                            updateSelectionBoxColor()
                        end
                        Tools.Weld.Listeners.Button2Down = function()
                            local iWh = Tools.Weld
                            local XG, Ts, K8jL8qZ = Workspace.CurrentCamera.CoordinateFrame:toEulerAnglesXYZ()

                            iWh.State.PreB2DownCameraRotation = Vector3.new(XG, Ts, K8jL8qZ)
                        end
                        Tools.Weld.Listeners.Button2Up = function()
                            local wucZH2qz = Tools.Weld
                            local Ox0yyMI3, hvw, ZFhe = Workspace.CurrentCamera.CoordinateFrame:toEulerAnglesXYZ()
                            local Kgpa = Vector3.new(Ox0yyMI3, hvw, ZFhe)

                            if Selection.find(Selection, Mouse.Target) and wucZH2qz.State.PreB2DownCameraRotation == Kgpa then
                                Selection.focus(Selection, Mouse.Target)
                            end
                        end
                        Tools.Weld.weld = function(TEz)
                            local AJJ1kZS = {
                                weld_parents = {},
                                unapply = function(TEz)
                                    Selection.clear(Selection)

                                    for Bd, e in pairs(TEz.welds)do
                                        Selection.add(Selection, e.Part0)
                                        Selection.add(Selection, e.Part1)

                                        e.Parent = nil
                                    end
                                end,
                                apply = function(TEz)
                                    Selection.clear(Selection)

                                    for tsGRH, U in pairs(TEz.welds)do
                                        U.Parent = TEz.weld_parents[U]

                                        Selection.add(Selection, U.Part0)
                                        Selection.add(Selection, U.Part1)
                                    end
                                end,
                            }
                            local B = {}

                            if #Selection.Items > 1 and Selection.Last then
                                for m, U84H37 in pairs(Selection.Items)do
                                    if U84H37 ~= Selection.Last then
                                        local C = RbxUtility.Create'Weld'{
                                            Name = 'BTWeld',
                                            Parent = Selection.Last,
                                            Part0 = Selection.Last,
                                            Part1 = U84H37,
                                            Archivable = false,
                                            C1 = U84H37.CFrame:toObjectSpace(Selection.Last.CFrame),
                                        }

                                        table.insert(B, C)

                                        AJJ1kZS.weld_parents[C] = C.Parent
                                    end
                                end
                            end

                            AJJ1kZS.welds = B

                            History.add(History, AJJ1kZS)

                            TEz.GUI.Changes.Text.Text = 'created ' .. #B .. ' weld' .. (#B ~= 1 and 's' or '')

                            local vZdI = RbxUtility.Create'Sound'{
                                Name = 'BTActionCompletionSound',
                                Pitch = 1.5,
                                SoundId = Assets.ActionCompletionSound,
                                Volume = 1,
                                Parent = Player,
                            }

                            vZdI.Play(vZdI)
                            vZdI.Destroy(vZdI)
                        end
                        Tools.Weld.breakWelds = function(f4fN)
                            local ODzAx = {
                                weld_parents = {},
                                apply = function(f4fN)
                                    Selection.clear(Selection)

                                    for SC, bWuOG in pairs(f4fN.welds)do
                                        Selection.add(Selection, bWuOG.Part0)
                                        Selection.add(Selection, bWuOG.Part1)

                                        bWuOG.Parent = nil
                                    end
                                end,
                                unapply = function(f4fN)
                                    Selection.clear(Selection)

                                    for jGg, x in pairs(f4fN.welds)do
                                        Selection.add(Selection, x.Part1)
                                        Selection.add(Selection, x.Part0)

                                        x.Parent = f4fN.weld_parents[x]
                                    end
                                end,
                            }
                            local IsAkf = {}
                            local Pwzq_Fj = Support.GetAllDescendants(Game.Workspace)

                            for vqs1_7, vLdk in pairs(Pwzq_Fj)do
                                if vLdk.IsA(vLdk, 'Weld') and vLdk.Name == 'BTWeld' then
                                    for vqs1_7, cU6JgXi in pairs(Selection.Items)do
                                        if vLdk.Part0 == cU6JgXi or vLdk.Part1 == cU6JgXi then
                                            if not ODzAx.weld_parents[vLdk] then
                                                table.insert(IsAkf, vLdk)

                                                ODzAx.weld_parents[vLdk] = vLdk.Parent
                                                vLdk.Parent = nil
                                            end
                                        end
                                    end
                                end
                            end

                            ODzAx.welds = IsAkf

                            History.add(History, ODzAx)

                            f4fN.GUI.Changes.Text.Text = 'broke ' .. #IsAkf .. ' weld' .. (#IsAkf ~= 1 and 's' or '')

                            local GKDMp = RbxUtility.Create'Sound'{
                                Name = 'BTActionCompletionSound',
                                Pitch = 1.5,
                                SoundId = Assets.ActionCompletionSound,
                                Volume = 1,
                                Parent = Player,
                            }

                            GKDMp.Play(GKDMp)
                            GKDMp.Destroy(GKDMp)
                        end
                        Tools.Weld.showGUI = function(tEiL)
                            if not tEiL.GUI then
                                local nWMi = DFb100j.BTWeldToolGUI:Clone()

                                nWMi.Parent = UI

                                nWMi.Interface.WeldButton.MouseButton1Up:Connect(function(
                                )
                                    tEiL.weld(tEiL)
                                end)
                                nWMi.Interface.BreakWeldsButton.MouseButton1Up:Connect(function(
                                )
                                    tEiL.breakWelds(tEiL)
                                end)

                                tEiL.GUI = nWMi
                            end

                            tEiL.GUI.Visible = true
                        end
                        Tools.Weld.hideGUI = function(gl9xJb)
                            if gl9xJb.GUI then
                                gl9xJb.GUI.Visible = false
                            end
                        end
                        Tools.Weld.Loaded = true
                    end,
                },
                {
                    'Lighting',
                    function()
                        repeat
                            wait()
                        until (_G.BTCoreEnv and _G.BTCoreEnv.tool and _G.BTCoreEnv.tool.CoreReady)

                        setfenv(1, _G.BTCoreEnv.tool)

                        Tools.Lighting = {}
                        Tools.Lighting.Color = BrickColor.new('Really black')
                        Tools.Lighting.State = {}
                        Tools.Lighting.Connections = {}
                        Tools.Lighting.Listeners = {}
                        Tools.Lighting.Listeners.Equipped = function()
                            local oHk5pUB = Tools.Lighting

                            oHk5pUB.State.PreviousSelectionBoxColor = SelectionBoxColor
                            SelectionBoxColor = oHk5pUB.Color

                            updateSelectionBoxColor()
                            oHk5pUB.showGUI(oHk5pUB)
                            coroutine.wrap(function()
                                updater_on = true
                                oHk5pUB.Updater = function()
                                    updater_on = false
                                end

                                while wait(0.1) and updater_on do
                                    if CurrentTool == oHk5pUB then
                                        if oHk5pUB.GUI and oHk5pUB.GUI.Visible then
                                            oHk5pUB.updateGUI(oHk5pUB)
                                        end
                                    end
                                end
                            end)()
                        end
                        Tools.Lighting.Listeners.Unequipped = function()
                            local Ltm = Tools.Lighting

                            if Ltm.Updater then
                                Ltm.Updater()

                                Ltm.Updater = nil
                            end

                            Ltm.hideGUI(Ltm)

                            for yW9GRj, QGXSL6 in pairs(Ltm.Connections)do
                                QGXSL6.disconnect(QGXSL6)

                                Ltm.Connections[yW9GRj] = nil
                            end

                            SelectionBoxColor = Ltm.State.PreviousSelectionBoxColor

                            updateSelectionBoxColor()
                        end
                        Tools.Lighting.Listeners.Button2Down = function()
                            local M = Tools.Lighting
                            local _X, eir, e = Workspace.CurrentCamera.CoordinateFrame:toEulerAnglesXYZ()

                            M.State.PreB2DownCameraRotation = Vector3.new(_X, eir, e)
                        end
                        Tools.Lighting.Listeners.Button2Up = function()
                            local XKqiVa3 = Tools.Lighting
                            local v4mltq, AIOtQ8e_, d = Workspace.CurrentCamera.CoordinateFrame:toEulerAnglesXYZ()
                            local l7 = Vector3.new(v4mltq, AIOtQ8e_, d)

                            if Selection.find(Selection, Mouse.Target) and XKqiVa3.State.PreB2DownCameraRotation == l7 then
                                XKqiVa3.changeSide(XKqiVa3, Mouse.TargetSurface)
                            end
                        end
                        Tools.Lighting.updateGUI = function(vtjp)
                            if not vtjp.GUI then
                                return
                            end
                            if #Selection.Items > 0 then
                                local qLEp2 = vtjp.getSpotlights(vtjp)
                                local XbIEI_3k = vtjp.getPointLights(vtjp)
                                local Ysuv, v, my19G, oO, zqYNA, XMzOvb, l8zYu, x17pq6s
                                local Cxc, G, dZty4, d, NQQjm0G, qeyvW

                                for fuJ, vBt in pairs(qLEp2)do
                                    if fuJ == 1 then
                                        Ysuv, v, my19G = vBt.Color.r, vBt.Color.g, vBt.Color.b
                                        oO = vBt.Brightness
                                        zqYNA = vBt.Range
                                        XMzOvb = vBt.Shadows
                                        l8zYu = vBt.Angle
                                        x17pq6s = vBt.Face
                                    else
                                        if Ysuv ~= vBt.Color.r then
                                            Ysuv = nil
                                        end
                                        if v ~= vBt.Color.g then
                                            v = nil
                                        end
                                        if my19G ~= vBt.Color.b then
                                            my19G = nil
                                        end
                                        if oO ~= vBt.Brightness then
                                            oO = nil
                                        end
                                        if zqYNA ~= vBt.Range then
                                            zqYNA = nil
                                        end
                                        if XMzOvb ~= vBt.Shadows then
                                            XMzOvb = nil
                                        end
                                        if l8zYu ~= vBt.Angle then
                                            l8zYu = nil
                                        end
                                        if x17pq6s ~= vBt.Face then
                                            x17pq6s = nil
                                        end
                                    end
                                end
                                for j6f, DhLDRM in pairs(XbIEI_3k)do
                                    if j6f == 1 then
                                        Cxc, G, dZty4 = DhLDRM.Color.r, DhLDRM.Color.g, DhLDRM.Color.b
                                        d = DhLDRM.Brightness
                                        NQQjm0G = DhLDRM.Range
                                        qeyvW = DhLDRM.Shadows
                                    else
                                        if Cxc ~= DhLDRM.Color.r then
                                            Cxc = nil
                                        end
                                        if G ~= DhLDRM.Color.g then
                                            G = nil
                                        end
                                        if dZty4 ~= DhLDRM.Color.b then
                                            dZty4 = nil
                                        end
                                        if d ~= DhLDRM.Brightness then
                                            d = nil
                                        end
                                        if NQQjm0G ~= DhLDRM.Range then
                                            NQQjm0G = nil
                                        end
                                        if qeyvW ~= DhLDRM.Shadows then
                                            qeyvW = nil
                                        end
                                    end
                                end

                                vtjp.State.sl_color = (Ysuv and v and my19G) and Color3.new(Ysuv, v, my19G) or nil
                                vtjp.State.pl_color = (Cxc and G and dZty4) and Color3.new(Cxc, G, dZty4) or nil

                                if not vtjp.State.sl_color_r_focused then
                                    vtjp.GUI.Spotlight.Options.ColorOption.RInput.TextBox.Text = Ysuv and Support.Round(Ysuv * 255, 0) or '*'
                                end
                                if not vtjp.State.sl_color_g_focused then
                                    vtjp.GUI.Spotlight.Options.ColorOption.GInput.TextBox.Text = v and Support.Round(v * 255, 0) or '*'
                                end
                                if not vtjp.State.sl_color_b_focused then
                                    vtjp.GUI.Spotlight.Options.ColorOption.BInput.TextBox.Text = my19G and Support.Round(my19G * 255, 0) or '*'
                                end
                                if not vtjp.State.sl_brightness_focused then
                                    vtjp.GUI.Spotlight.Options.BrightnessOption.Input.TextBox.Text = oO and Support.Round(oO, 2) or '*'
                                end
                                if not vtjp.State.sl_range_focused then
                                    vtjp.GUI.Spotlight.Options.RangeOption.Input.TextBox.Text = zqYNA and Support.Round(zqYNA, 2) or '*'
                                end
                                if XMzOvb == nil then
                                    vtjp.GUI.Spotlight.Options.ShadowsOption.On.Background.Image = Assets.LightSlantedRectangle
                                    vtjp.GUI.Spotlight.Options.ShadowsOption.On.SelectedIndicator.BackgroundTransparency = 1
                                    vtjp.GUI.Spotlight.Options.ShadowsOption.Off.Background.Image = Assets.LightSlantedRectangle
                                    vtjp.GUI.Spotlight.Options.ShadowsOption.Off.SelectedIndicator.BackgroundTransparency = 1
                                elseif XMzOvb == true then
                                    vtjp.GUI.Spotlight.Options.ShadowsOption.On.Background.Image = Assets.DarkSlantedRectangle
                                    vtjp.GUI.Spotlight.Options.ShadowsOption.On.SelectedIndicator.BackgroundTransparency = 0
                                    vtjp.GUI.Spotlight.Options.ShadowsOption.Off.Background.Image = Assets.LightSlantedRectangle
                                    vtjp.GUI.Spotlight.Options.ShadowsOption.Off.SelectedIndicator.BackgroundTransparency = 1
                                elseif XMzOvb == false then
                                    vtjp.GUI.Spotlight.Options.ShadowsOption.On.Background.Image = Assets.LightSlantedRectangle
                                    vtjp.GUI.Spotlight.Options.ShadowsOption.On.SelectedIndicator.BackgroundTransparency = 1
                                    vtjp.GUI.Spotlight.Options.ShadowsOption.Off.Background.Image = Assets.DarkSlantedRectangle
                                    vtjp.GUI.Spotlight.Options.ShadowsOption.Off.SelectedIndicator.BackgroundTransparency = 0
                                end
                                if not vtjp.State.sl_angle_focused then
                                    vtjp.GUI.Spotlight.Options.AngleOption.Input.TextBox.Text = l8zYu and Support.Round(l8zYu, 2) or '*'
                                end

                                vtjp.SideDropdown:selectOption(x17pq6s and x17pq6s.Name:upper() or '*')

                                if not vtjp.State.pl_color_r_focused then
                                    vtjp.GUI.PointLight.Options.ColorOption.RInput.TextBox.Text = Cxc and Support.Round(Cxc * 255, 0) or '*'
                                end
                                if not vtjp.State.pl_color_g_focused then
                                    vtjp.GUI.PointLight.Options.ColorOption.GInput.TextBox.Text = G and Support.Round(G * 255, 0) or '*'
                                end
                                if not vtjp.State.pl_color_b_focused then
                                    vtjp.GUI.PointLight.Options.ColorOption.BInput.TextBox.Text = dZty4 and Support.Round(dZty4 * 255, 0) or '*'
                                end
                                if not vtjp.State.pl_brightness_focused then
                                    vtjp.GUI.PointLight.Options.BrightnessOption.Input.TextBox.Text = d and Support.Round(d, 2) or '*'
                                end
                                if not vtjp.State.pl_range_focused then
                                    vtjp.GUI.PointLight.Options.RangeOption.Input.TextBox.Text = NQQjm0G and Support.Round(NQQjm0G, 2) or '*'
                                end
                                if qeyvW == nil then
                                    vtjp.GUI.PointLight.Options.ShadowsOption.On.Background.Image = Assets.LightSlantedRectangle
                                    vtjp.GUI.PointLight.Options.ShadowsOption.On.SelectedIndicator.BackgroundTransparency = 1
                                    vtjp.GUI.PointLight.Options.ShadowsOption.Off.Background.Image = Assets.LightSlantedRectangle
                                    vtjp.GUI.PointLight.Options.ShadowsOption.Off.SelectedIndicator.BackgroundTransparency = 1
                                elseif qeyvW == true then
                                    vtjp.GUI.PointLight.Options.ShadowsOption.On.Background.Image = Assets.DarkSlantedRectangle
                                    vtjp.GUI.PointLight.Options.ShadowsOption.On.SelectedIndicator.BackgroundTransparency = 0
                                    vtjp.GUI.PointLight.Options.ShadowsOption.Off.Background.Image = Assets.LightSlantedRectangle
                                    vtjp.GUI.PointLight.Options.ShadowsOption.Off.SelectedIndicator.BackgroundTransparency = 1
                                elseif qeyvW == false then
                                    vtjp.GUI.PointLight.Options.ShadowsOption.On.Background.Image = Assets.LightSlantedRectangle
                                    vtjp.GUI.PointLight.Options.ShadowsOption.On.SelectedIndicator.BackgroundTransparency = 1
                                    vtjp.GUI.PointLight.Options.ShadowsOption.Off.Background.Image = Assets.DarkSlantedRectangle
                                    vtjp.GUI.PointLight.Options.ShadowsOption.Off.SelectedIndicator.BackgroundTransparency = 0
                                end
                                if vtjp.GUI.SelectNote.Visible then
                                    vtjp.closePointLight(vtjp)
                                    vtjp.closeSpotlight(vtjp)
                                end

                                vtjp.GUI.Spotlight.Visible = true
                                vtjp.GUI.PointLight.Visible = true
                                vtjp.GUI.SelectNote.Visible = false

                                if not vtjp.State.spotlight_open and not vtjp.State.pointlight_open then
                                    vtjp.GUI:TweenSize(UDim2.new(0, 200, 0, 95), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                                end
                                if #qLEp2 == 0 then
                                    vtjp.GUI.Spotlight.Options.Size = UDim2.new(1, 
-3, 0, 0)
                                    vtjp.GUI.Spotlight.AddButton.Visible = true
                                    vtjp.GUI.Spotlight.RemoveButton.Visible = false

                                    if vtjp.State.spotlight_open then
                                        vtjp.closeSpotlight(vtjp)
                                    end
                                elseif #qLEp2 ~= #Selection.Items then
                                    vtjp.GUI.Spotlight.AddButton.Visible = true
                                    vtjp.GUI.Spotlight.RemoveButton.Position = UDim2.new(0, 90, 0, 3)
                                    vtjp.GUI.Spotlight.RemoveButton.Visible = true
                                elseif #qLEp2 == #Selection.Items then
                                    vtjp.GUI.Spotlight.AddButton.Visible = false
                                    vtjp.GUI.Spotlight.RemoveButton.Position = UDim2.new(0, 127, 0, 3)
                                    vtjp.GUI.Spotlight.RemoveButton.Visible = true

                                    if vtjp.GUI.Spotlight.Size == UDim2.new(0, 200, 0, 52) then
                                        vtjp.GUI.Spotlight.Size = UDim2.new(0, 200, 0, 95)
                                    end
                                end
                                if #XbIEI_3k == 0 then
                                    vtjp.GUI.PointLight.Options.Size = UDim2.new(1, 
-3, 0, 0)
                                    vtjp.GUI.PointLight.AddButton.Visible = true
                                    vtjp.GUI.PointLight.RemoveButton.Visible = false

                                    if vtjp.State.pointlight_open then
                                        vtjp.closePointLight(vtjp)
                                    end
                                elseif #XbIEI_3k ~= #Selection.Items then
                                    vtjp.GUI.PointLight.AddButton.Visible = true
                                    vtjp.GUI.PointLight.RemoveButton.Position = UDim2.new(0, 90, 0, 3)
                                    vtjp.GUI.PointLight.RemoveButton.Visible = true
                                elseif #XbIEI_3k == #Selection.Items then
                                    vtjp.GUI.PointLight.AddButton.Visible = false
                                    vtjp.GUI.PointLight.RemoveButton.Position = UDim2.new(0, 127, 0, 3)
                                    vtjp.GUI.PointLight.RemoveButton.Visible = true
                                end
                            else
                                vtjp.GUI.Spotlight.Visible = false
                                vtjp.GUI.PointLight.Visible = false
                                vtjp.GUI.SelectNote.Visible = true
                                vtjp.GUI.Size = UDim2.new(0, 200, 0, 52)
                            end
                        end
                        Tools.Lighting.openSpotlight = function(LgVwYh6)
                            LgVwYh6.State.spotlight_open = true

                            LgVwYh6.closePointLight(LgVwYh6)
                            LgVwYh6.GUI.Spotlight.Options:TweenSize(UDim2.new(1, 
-3, 0, 300), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            LgVwYh6.GUI.Spotlight:TweenPosition(UDim2.new(0, 10, 0, 30), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            LgVwYh6.GUI:TweenSize(UDim2.new(0, 200, 0, 275), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                        end
                        Tools.Lighting.openPointLight = function(tSBo)
                            tSBo.State.pointlight_open = true

                            tSBo.closeSpotlight(tSBo)
                            tSBo.GUI.PointLight.Options:TweenSize(UDim2.new(1, -3, 0, 110), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            tSBo.GUI.PointLight:TweenPosition(UDim2.new(0, 10, 0, 60), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            tSBo.GUI:TweenSize(UDim2.new(0, 200, 0, 200), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                        end
                        Tools.Lighting.closeSpotlight = function(FuIUnM)
                            FuIUnM.State.spotlight_open = false

                            FuIUnM.GUI.Spotlight.Options:TweenSize(UDim2.new(1, 
-3, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            FuIUnM.GUI.PointLight:TweenPosition(UDim2.new(0, 10, 0, 60), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)

                            if not FuIUnM.State.pointlight_open then
                                FuIUnM.GUI:TweenSize(UDim2.new(0, 200, 0, 95), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            end
                        end
                        Tools.Lighting.closePointLight = function(WtoMT)
                            WtoMT.State.pointlight_open = false

                            WtoMT.GUI.PointLight:TweenPosition(UDim2.new(0, 10, 0, WtoMT.State.spotlight_open and 240 or 60), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            WtoMT.GUI.PointLight.Options:TweenSize(UDim2.new(1, 
-3, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)

                            if not WtoMT.State.spotlight_open then
                                WtoMT.GUI:TweenSize(UDim2.new(0, 200, 0, 95), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            end
                        end
                        Tools.Lighting.showGUI = function(gTa7jfw)
                            if not gTa7jfw.GUI then
                                local d6RaDSY = DFb100j.BTLightingToolGUI:Clone()

                                d6RaDSY.Parent = UI

                                d6RaDSY.Spotlight.ArrowButton.MouseButton1Up:Connect(function(
                                )
                                    if not gTa7jfw.State.spotlight_open and #gTa7jfw.getSpotlights(gTa7jfw) > 0 then
                                        gTa7jfw.openSpotlight(gTa7jfw)
                                    else
                                        gTa7jfw.closeSpotlight(gTa7jfw)
                                    end
                                end)
                                d6RaDSY.PointLight.ArrowButton.MouseButton1Up:Connect(function(
                                )
                                    if not gTa7jfw.State.pointlight_open and #gTa7jfw.getPointLights(gTa7jfw) > 0 then
                                        gTa7jfw.openPointLight(gTa7jfw)
                                    else
                                        gTa7jfw.closePointLight(gTa7jfw)
                                    end
                                end)
                                d6RaDSY.Spotlight.AddButton.MouseButton1Up:Connect(function(
                                )
                                    gTa7jfw.addLight(gTa7jfw, 'SpotLight')
                                    gTa7jfw.openSpotlight(gTa7jfw)
                                end)
                                d6RaDSY.PointLight.AddButton.MouseButton1Up:Connect(function(
                                )
                                    gTa7jfw.addLight(gTa7jfw, 'PointLight')
                                    gTa7jfw.openPointLight(gTa7jfw)
                                end)
                                d6RaDSY.Spotlight.RemoveButton.MouseButton1Up:Connect(function(
                                )
                                    gTa7jfw.removeLight(gTa7jfw, 'spotlight')
                                    gTa7jfw.closeSpotlight(gTa7jfw)
                                end)
                                d6RaDSY.PointLight.RemoveButton.MouseButton1Up:Connect(function(
                                )
                                    gTa7jfw.removeLight(gTa7jfw, 'pointlight')
                                    gTa7jfw.closePointLight(gTa7jfw)
                                end)

                                local hJEr = createDropdown()

                                gTa7jfw.SideDropdown = hJEr
                                hJEr.Frame.Parent = d6RaDSY.Spotlight.Options.SideOption
                                hJEr.Frame.Position = UDim2.new(0, 35, 0, 0)
                                hJEr.Frame.Size = UDim2.new(0, 90, 0, 25)

                                hJEr.addOption(hJEr, 'TOP').MouseButton1Up:Connect(function(
                                )
                                    gTa7jfw.changeSide(gTa7jfw, Enum.NormalId.Top)
                                end)
                                hJEr.addOption(hJEr, 'BOTTOM').MouseButton1Up:Connect(function(
                                )
                                    gTa7jfw.changeSide(gTa7jfw, Enum.NormalId.Bottom)
                                end)
                                hJEr.addOption(hJEr, 'FRONT').MouseButton1Up:Connect(function(
                                )
                                    gTa7jfw.changeSide(gTa7jfw, Enum.NormalId.Front)
                                end)
                                hJEr.addOption(hJEr, 'BACK').MouseButton1Up:Connect(function(
                                )
                                    gTa7jfw.changeSide(gTa7jfw, Enum.NormalId.Back)
                                end)
                                hJEr.addOption(hJEr, 'LEFT').MouseButton1Up:Connect(function(
                                )
                                    gTa7jfw.changeSide(gTa7jfw, Enum.NormalId.Left)
                                end)
                                hJEr.addOption(hJEr, 'RIGHT').MouseButton1Up:Connect(function(
                                )
                                    gTa7jfw.changeSide(gTa7jfw, Enum.NormalId.Right)
                                end)

                                local deq_fwZ = d6RaDSY.Spotlight
                                local d4iuG = deq_fwZ.Options.ColorOption

                                d4iuG.RInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    gTa7jfw.State.sl_color_r_focused = true

                                    d4iuG.RInput.TextBox:CaptureFocus()
                                end)
                                d4iuG.RInput.TextBox.FocusLost:Connect(function(
                                    Lc4UCGl
                                )
                                    local lEoJniu = tonumber(d4iuG.RInput.TextBox.Text)

                                    if lEoJniu then
                                        if lEoJniu > 255 then
                                            lEoJniu = 255
                                        elseif lEoJniu < 0 then
                                            lEoJniu = 0
                                        end

                                        gTa7jfw.changeColor(gTa7jfw, 'spotlight', 'r', lEoJniu / 255)
                                    end

                                    gTa7jfw.State.sl_color_r_focused = false
                                end)
                                d4iuG.GInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    gTa7jfw.State.sl_color_g_focused = true

                                    d4iuG.GInput.TextBox:CaptureFocus()
                                end)
                                d4iuG.GInput.TextBox.FocusLost:Connect(function(
                                    sMV
                                )
                                    local HLkyy = tonumber(d4iuG.GInput.TextBox.Text)

                                    if HLkyy then
                                        if HLkyy > 255 then
                                            HLkyy = 255
                                        elseif HLkyy < 0 then
                                            HLkyy = 0
                                        end

                                        gTa7jfw.changeColor(gTa7jfw, 'spotlight', 'g', HLkyy / 255)
                                    end

                                    gTa7jfw.State.sl_color_g_focused = false
                                end)
                                d4iuG.BInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    gTa7jfw.State.sl_color_b_focused = true

                                    d4iuG.BInput.TextBox:CaptureFocus()
                                end)
                                d4iuG.BInput.TextBox.FocusLost:Connect(function(
                                    ttFi_l_
                                )
                                    local dSeSQ5 = tonumber(d4iuG.BInput.TextBox.Text)

                                    if dSeSQ5 then
                                        if dSeSQ5 > 255 then
                                            dSeSQ5 = 255
                                        elseif dSeSQ5 < 0 then
                                            dSeSQ5 = 0
                                        end

                                        gTa7jfw.changeColor(gTa7jfw, 'spotlight', 'b', dSeSQ5 / 255)
                                    end

                                    gTa7jfw.State.sl_color_b_focused = false
                                end)
                                d4iuG.HSVPicker.MouseButton1Up:Connect(function()
                                    ColorPicker.start(ColorPicker, function(...)
                                        local CHYkRQW6 = {...}

                                        if #CHYkRQW6 == 3 then
                                            gTa7jfw.changeColor(gTa7jfw, 'spotlight', Support.HSVToRGB(
...))
                                        end
                                    end, gTa7jfw.State.sl_color)
                                end)

                                local tn2 = deq_fwZ.Options.BrightnessOption.Input

                                tn2.TextButton.MouseButton1Down:Connect(function(
                                )
                                    gTa7jfw.State.sl_brightness_focused = true

                                    tn2.TextBox:CaptureFocus()
                                end)
                                tn2.TextBox.FocusLost:Connect(function(
                                    cZtDtN7N
                                )
                                    local Z7UyFJN = tonumber(tn2.TextBox.Text)

                                    if Z7UyFJN then
                                        if Z7UyFJN > 5 then
                                            Z7UyFJN = 5
                                        elseif Z7UyFJN < 0 then
                                            Z7UyFJN = 0
                                        end

                                        gTa7jfw.changeBrightness(gTa7jfw, 'spotlight', Z7UyFJN)
                                    end

                                    gTa7jfw.State.sl_brightness_focused = false
                                end)

                                local iFXPT_P = deq_fwZ.Options.AngleOption.Input

                                iFXPT_P.TextButton.MouseButton1Down:Connect(function(
                                )
                                    gTa7jfw.State.sl_angle_focused = true

                                    iFXPT_P.TextBox:CaptureFocus()
                                end)
                                iFXPT_P.TextBox.FocusLost:Connect(function(
                                    DYBqYM
                                )
                                    local s1 = tonumber(iFXPT_P.TextBox.Text)

                                    if s1 then
                                        gTa7jfw.changeAngle(gTa7jfw, s1)
                                    end

                                    gTa7jfw.State.sl_angle_focused = false
                                end)

                                local KY = deq_fwZ.Options.RangeOption.Input

                                KY.TextButton.MouseButton1Down:Connect(function()
                                    gTa7jfw.State.sl_range_focused = true

                                    KY.TextBox:CaptureFocus()
                                end)
                                KY.TextBox.FocusLost:Connect(function(v)
                                    local aFb6x0hg = tonumber(KY.TextBox.Text)

                                    if aFb6x0hg then
                                        if aFb6x0hg > 60 then
                                            aFb6x0hg = 60
                                        elseif aFb6x0hg < 0 then
                                            aFb6x0hg = 0
                                        end

                                        gTa7jfw.changeRange(gTa7jfw, 'spotlight', aFb6x0hg)
                                    end

                                    gTa7jfw.State.sl_range_focused = false
                                end)

                                local Vg7WM = deq_fwZ.Options.ShadowsOption

                                Vg7WM.On.Button.MouseButton1Down:Connect(function(
                                )
                                    gTa7jfw.changeShadows(gTa7jfw, 'spotlight', true)
                                end)
                                Vg7WM.Off.Button.MouseButton1Down:Connect(function(
                                )
                                    gTa7jfw.changeShadows(gTa7jfw, 'spotlight', false)
                                end)

                                local DPOHoac = d6RaDSY.PointLight
                                local HLe = DPOHoac.Options.ColorOption

                                HLe.RInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    gTa7jfw.State.pl_color_r_focused = true

                                    HLe.RInput.TextBox:CaptureFocus()
                                end)
                                HLe.RInput.TextBox.FocusLost:Connect(function(
                                    _KKTJh
                                )
                                    local Gikjz8_9 = tonumber(HLe.RInput.TextBox.Text)

                                    if Gikjz8_9 then
                                        if Gikjz8_9 > 255 then
                                            Gikjz8_9 = 255
                                        elseif Gikjz8_9 < 0 then
                                            Gikjz8_9 = 0
                                        end

                                        gTa7jfw.changeColor(gTa7jfw, 'pointlight', 'r', Gikjz8_9 / 255)
                                    end

                                    gTa7jfw.State.pl_color_r_focused = false
                                end)
                                HLe.GInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    gTa7jfw.State.pl_color_g_focused = true

                                    HLe.GInput.TextBox:CaptureFocus()
                                end)
                                HLe.GInput.TextBox.FocusLost:Connect(function(
                                    WN20gP
                                )
                                    local L2VjlBE = tonumber(HLe.GInput.TextBox.Text)

                                    if L2VjlBE then
                                        if L2VjlBE > 255 then
                                            L2VjlBE = 255
                                        elseif L2VjlBE < 0 then
                                            L2VjlBE = 0
                                        end

                                        gTa7jfw.changeColor(gTa7jfw, 'pointlight', 'g', L2VjlBE / 255)
                                    end

                                    gTa7jfw.State.pl_color_g_focused = false
                                end)
                                HLe.BInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    gTa7jfw.State.pl_color_b_focused = true

                                    HLe.BInput.TextBox:CaptureFocus()
                                end)
                                HLe.BInput.TextBox.FocusLost:Connect(function(
                                    xH
                                )
                                    local N = tonumber(HLe.BInput.TextBox.Text)

                                    if N then
                                        if N > 255 then
                                            N = 255
                                        elseif N < 0 then
                                            N = 0
                                        end

                                        gTa7jfw.changeColor(gTa7jfw, 'pointlight', 'b', N / 255)
                                    end

                                    gTa7jfw.State.pl_color_b_focused = false
                                end)
                                HLe.HSVPicker.MouseButton1Up:Connect(function()
                                    ColorPicker.start(ColorPicker, function(...)
                                        local R = {...}

                                        if #R == 3 then
                                            gTa7jfw.changeColor(gTa7jfw, 'pointlight', Support.HSVToRGB(
...))
                                        end
                                    end, gTa7jfw.State.pl_color)
                                end)

                                local COX = DPOHoac.Options.BrightnessOption.Input

                                COX.TextButton.MouseButton1Down:Connect(function(
                                )
                                    gTa7jfw.State.pl_brightness_focused = true

                                    COX.TextBox:CaptureFocus()
                                end)
                                COX.TextBox.FocusLost:Connect(function(owi4kS)
                                    local zUfjp = tonumber(COX.TextBox.Text)

                                    if zUfjp then
                                        if zUfjp > 5 then
                                            zUfjp = 5
                                        elseif zUfjp < 0 then
                                            zUfjp = 0
                                        end

                                        gTa7jfw.changeBrightness(gTa7jfw, 'pointlight', zUfjp)
                                    end

                                    gTa7jfw.State.pl_brightness_focused = false
                                end)

                                local BP9Y0 = DPOHoac.Options.RangeOption.Input

                                BP9Y0.TextButton.MouseButton1Down:Connect(function(
                                )
                                    gTa7jfw.State.pl_range_focused = true

                                    BP9Y0.TextBox:CaptureFocus()
                                end)
                                BP9Y0.TextBox.FocusLost:Connect(function(
                                    fd5S4R
                                )
                                    local Jt = tonumber(BP9Y0.TextBox.Text)

                                    if Jt then
                                        if Jt > 60 then
                                            Jt = 60
                                        elseif Jt < 0 then
                                            Jt = 0
                                        end

                                        gTa7jfw.changeRange(gTa7jfw, 'pointlight', Jt)
                                    end

                                    gTa7jfw.State.pl_range_focused = false
                                end)

                                local DR = DPOHoac.Options.ShadowsOption

                                DR.On.Button.MouseButton1Down:Connect(function()
                                    gTa7jfw.changeShadows(gTa7jfw, 'pointlight', true)
                                end)
                                DR.Off.Button.MouseButton1Down:Connect(function()
                                    gTa7jfw.changeShadows(gTa7jfw, 'pointlight', false)
                                end)

                                gTa7jfw.GUI = d6RaDSY
                            end

                            gTa7jfw.GUI.Visible = true
                        end
                        Tools.Lighting.changeSide = function(vJ88gTG, GVscDb)
                            local eGuTD = vJ88gTG.getSpotlights(vJ88gTG)

                            vJ88gTG.startHistoryRecord(vJ88gTG, eGuTD)

                            for l, rcJbyavv in pairs(eGuTD)do
                                rcJbyavv.Face = GVscDb
                            end

                            vJ88gTG.finishHistoryRecord(vJ88gTG)

                            if vJ88gTG.SideDropdown.open then
                                vJ88gTG.SideDropdown:toggle()
                            end
                        end
                        Tools.Lighting.changeAngle = function(nPu, wKdmIyn)
                            local Po67cFi = nPu.getSpotlights(nPu)

                            nPu.startHistoryRecord(nPu, Po67cFi)

                            for nlAeE, h in pairs(Po67cFi)do
                                h.Angle = wKdmIyn
                            end

                            nPu.finishHistoryRecord(nPu)
                        end
                        Tools.Lighting.getSpotlights = function(B)
                            local mmcA = {}

                            for Pk, es in pairs(Selection.Items)do
                                local F0ZX = Support.GetChildOfClass(es, 'SpotLight')

                                if F0ZX then
                                    table.insert(mmcA, F0ZX)
                                end
                            end

                            return mmcA
                        end
                        Tools.Lighting.getPointLights = function(W_)
                            local he3X = {}

                            for IAEOa, lq0 in pairs(Selection.Items)do
                                local cJ = Support.GetChildOfClass(lq0, 'PointLight')

                                if cJ then
                                    table.insert(he3X, cJ)
                                end
                            end

                            return he3X
                        end
                        Tools.Lighting.changeColor = function(
                            VxeY5X,
                            oS8SgP,
                            ...
                        )
                            local hBilFrU4 = {...}
                            local AodN1

                            if oS8SgP == 'spotlight' then
                                AodN1 = VxeY5X.getSpotlights(VxeY5X)
                            elseif oS8SgP == 'pointlight' then
                                AodN1 = VxeY5X.getPointLights(VxeY5X)
                            end

                            VxeY5X.startHistoryRecord(VxeY5X, AodN1)

                            if #hBilFrU4 == 2 then
                                local yj4Mo = hBilFrU4[1]
                                local BiwDB = hBilFrU4[2]

                                for Ca, wHJE0ZY in pairs(AodN1)do
                                    wHJE0ZY.Color = Color3.new(yj4Mo == 'r' and BiwDB or wHJE0ZY.Color.r, yj4Mo == 'g' and BiwDB or wHJE0ZY.Color.g, yj4Mo == 'b' and BiwDB or wHJE0ZY.Color.b)
                                end
                            elseif #hBilFrU4 == 3 then
                                local Js7, h6W2B6z, Cx = ...

                                for oj, u1 in pairs(AodN1)do
                                    u1.Color = Color3.new(Js7, h6W2B6z, Cx)
                                end
                            end

                            VxeY5X.finishHistoryRecord(VxeY5X)
                        end
                        Tools.Lighting.changeBrightness = function(
                            TYixjzX4,
                            vI9Mah0,
                            Ad
                        )
                            local l

                            if vI9Mah0 == 'spotlight' then
                                l = TYixjzX4.getSpotlights(TYixjzX4)
                            elseif vI9Mah0 == 'pointlight' then
                                l = TYixjzX4.getPointLights(TYixjzX4)
                            end

                            TYixjzX4.startHistoryRecord(TYixjzX4, l)

                            for LwNRuJvR, nohO9Ia in pairs(l)do
                                nohO9Ia.Brightness = Ad
                            end

                            TYixjzX4.finishHistoryRecord(TYixjzX4)
                        end
                        Tools.Lighting.changeRange = function(FDJ, u, v)
                            local i0iuEsi

                            if u == 'spotlight' then
                                i0iuEsi = FDJ.getSpotlights(FDJ)
                            elseif u == 'pointlight' then
                                i0iuEsi = FDJ.getPointLights(FDJ)
                            end

                            FDJ.startHistoryRecord(FDJ, i0iuEsi)

                            for qWrjc, y2zVVi in pairs(i0iuEsi)do
                                y2zVVi.Range = v
                            end

                            FDJ.finishHistoryRecord(FDJ)
                        end
                        Tools.Lighting.changeShadows = function(
                            mQIVEP5,
                            QV4HoK0r,
                            uqoP
                        )
                            local fXnJ2kO

                            if QV4HoK0r == 'spotlight' then
                                fXnJ2kO = mQIVEP5.getSpotlights(mQIVEP5)
                            elseif QV4HoK0r == 'pointlight' then
                                fXnJ2kO = mQIVEP5.getPointLights(mQIVEP5)
                            end

                            mQIVEP5.startHistoryRecord(mQIVEP5, fXnJ2kO)

                            for mHD8, L in pairs(fXnJ2kO)do
                                L.Shadows = uqoP
                            end

                            mQIVEP5.finishHistoryRecord(mQIVEP5)
                        end
                        Tools.Lighting.addLight = function(tlNupYZ, VY6SD)
                            local ydb = {
                                apply = function(tlNupYZ)
                                    Selection.clear(Selection)

                                    for ElVn76, yAEULfS in pairs(tlNupYZ.lights)do
                                        yAEULfS.Parent = tlNupYZ.light_parents[yAEULfS]

                                        Selection.add(Selection, yAEULfS.Parent)
                                    end
                                end,
                                unapply = function(tlNupYZ)
                                    Selection.clear(Selection)

                                    for O6Ft6oPX, RWubfxqF in pairs(tlNupYZ.lights)do
                                        Selection.add(Selection, RWubfxqF.Parent)

                                        RWubfxqF.Parent = nil
                                    end
                                end,
                            }
                            local O = {}
                            local _ = {}

                            for E, e0kpxJ in pairs(Selection.Items)do
                                local VXZfG = Support.GetChildOfClass(e0kpxJ, VY6SD)

                                if not VXZfG then
                                    local VXZfG = RbxUtility.Create(VY6SD){Parent = e0kpxJ}

                                    table.insert(O, VXZfG)

                                    _[VXZfG] = e0kpxJ
                                end
                            end

                            ydb.lights = O
                            ydb.light_parents = _

                            History.add(History, ydb)
                        end
                        Tools.Lighting.removeLight = function(Bd, Qf)
                            local p2jTk = {
                                apply = function(Bd)
                                    Selection.clear(Selection)

                                    for IR7v, _SmNfMoD in pairs(Bd.lights)do
                                        Selection.add(Selection, _SmNfMoD.Parent)

                                        _SmNfMoD.Parent = nil
                                    end
                                end,
                                unapply = function(Bd)
                                    Selection.clear(Selection)

                                    for g5wBR, z0SIbm in pairs(Bd.lights)do
                                        z0SIbm.Parent = Bd.light_parents[z0SIbm]

                                        Selection.add(Selection, z0SIbm.Parent)
                                    end
                                end,
                            }
                            local _5Pf = {}
                            local vHVSWs9 = {}
                            local _5Pf

                            if Qf == 'spotlight' then
                                _5Pf = Bd.getSpotlights(Bd)
                            elseif Qf == 'pointlight' then
                                _5Pf = Bd.getPointLights(Bd)
                            end

                            for zL, nWzKrVe in pairs(_5Pf)do
                                vHVSWs9[nWzKrVe] = nWzKrVe.Parent
                                nWzKrVe.Parent = nil
                            end

                            p2jTk.lights = _5Pf
                            p2jTk.light_parents = vHVSWs9

                            History.add(History, p2jTk)
                        end
                        Tools.Lighting.startHistoryRecord = function(zha, yBtE)
                            if zha.State.HistoryRecord then
                                zha.State.HistoryRecord = nil
                            end

                            zha.State.HistoryRecord = {
                                targets = Support.CloneTable(yBtE),
                                initial_color = {},
                                terminal_color = {},
                                initial_brightness = {},
                                terminal_brightness = {},
                                initial_range = {},
                                terminal_range = {},
                                initial_shadows = {},
                                terminal_shadows = {},
                                initial_side = {},
                                terminal_side = {},
                                initial_angle = {},
                                terminal_angle = {},
                                unapply = function(zha)
                                    Selection.clear(Selection)

                                    for GlmZIM, bm in pairs(zha.targets)do
                                        if bm then
                                            Selection.add(Selection, bm.Parent)

                                            bm.Color = zha.initial_color[bm]
                                            bm.Brightness = zha.initial_brightness[bm]
                                            bm.Range = zha.initial_range[bm]
                                            bm.Shadows = zha.initial_shadows[bm]

                                            if bm.IsA(bm, 'SpotLight') then
                                                bm.Face = zha.initial_side[bm]
                                                bm.Angle = zha.initial_angle[bm]
                                            end
                                        end
                                    end
                                end,
                                apply = function(zha)
                                    Selection.clear(Selection)

                                    for ken, gHpr in pairs(zha.targets)do
                                        if gHpr then
                                            Selection.add(Selection, gHpr.Parent)

                                            gHpr.Color = zha.terminal_color[gHpr]
                                            gHpr.Brightness = zha.terminal_brightness[gHpr]
                                            gHpr.Range = zha.terminal_range[gHpr]
                                            gHpr.Shadows = zha.terminal_shadows[gHpr]

                                            if gHpr.IsA(gHpr, 'SpotLight') then
                                                gHpr.Face = zha.terminal_side[gHpr]
                                                gHpr.Angle = zha.terminal_angle[gHpr]
                                            end
                                        end
                                    end
                                end,
                            }

                            for wL, uXW in pairs(zha.State.HistoryRecord.targets)do
                                if uXW then
                                    zha.State.HistoryRecord.initial_color[uXW] = uXW.Color
                                    zha.State.HistoryRecord.initial_brightness[uXW] = uXW.Brightness
                                    zha.State.HistoryRecord.initial_range[uXW] = uXW.Range
                                    zha.State.HistoryRecord.initial_shadows[uXW] = uXW.Shadows

                                    if uXW.IsA(uXW, 'SpotLight') then
                                        zha.State.HistoryRecord.initial_side[uXW] = uXW.Face
                                        zha.State.HistoryRecord.initial_angle[uXW] = uXW.Angle
                                    end
                                end
                            end
                        end
                        Tools.Lighting.finishHistoryRecord = function(f1Guph)
                            if not f1Guph.State.HistoryRecord then
                                return
                            end

                            for VoIe2R, wULNB in pairs(f1Guph.State.HistoryRecord.targets)do
                                if wULNB then
                                    f1Guph.State.HistoryRecord.terminal_color[wULNB] = wULNB.Color
                                    f1Guph.State.HistoryRecord.terminal_brightness[wULNB] = wULNB.Brightness
                                    f1Guph.State.HistoryRecord.terminal_range[wULNB] = wULNB.Range
                                    f1Guph.State.HistoryRecord.terminal_shadows[wULNB] = wULNB.Shadows

                                    if wULNB.IsA(wULNB, 'SpotLight') then
                                        f1Guph.State.HistoryRecord.terminal_side[wULNB] = wULNB.Face
                                        f1Guph.State.HistoryRecord.terminal_angle[wULNB] = wULNB.Angle
                                    end
                                end
                            end

                            History.add(History, f1Guph.State.HistoryRecord)

                            f1Guph.State.HistoryRecord = nil
                        end
                        Tools.Lighting.hideGUI = function(Uin1c)
                            if Uin1c.GUI then
                                Uin1c.GUI.Visible = false
                            end
                        end
                        Tools.Lighting.Loaded = true
                    end,
                },
                {
                    'Decorate',
                    function()
                        repeat
                            wait()
                        until (_G.BTCoreEnv and _G.BTCoreEnv.tool and _G.BTCoreEnv.tool.CoreReady)

                        setfenv(1, _G.BTCoreEnv.tool)

                        Tools.Decorate = {}
                        Tools.Decorate.Color = BrickColor.new('Really black')
                        Tools.Decorate.State = {}
                        Tools.Decorate.Connections = {}
                        Tools.Decorate.Listeners = {}
                        Tools.Decorate.Listeners.Equipped = function()
                            local uZOynu = Tools.Decorate

                            uZOynu.State.PreviousSelectionBoxColor = SelectionBoxColor
                            SelectionBoxColor = uZOynu.Color

                            updateSelectionBoxColor()
                            uZOynu.showGUI(uZOynu)
                            coroutine.wrap(function()
                                updater_on = true
                                uZOynu.Updater = function()
                                    updater_on = false
                                end

                                while wait(0.1) and updater_on do
                                    if CurrentTool == uZOynu then
                                        if uZOynu.GUI and uZOynu.GUI.Visible then
                                            uZOynu.updateGUI(uZOynu)
                                        end
                                    end
                                end
                            end)()
                        end
                        Tools.Decorate.Listeners.Unequipped = function()
                            local XYjab = Tools.Decorate

                            if XYjab.Updater then
                                XYjab.Updater()

                                XYjab.Updater = nil
                            end

                            XYjab.hideGUI(XYjab)

                            for g226Ed, iKS in pairs(XYjab.Connections)do
                                iKS.disconnect(iKS)

                                XYjab.Connections[g226Ed] = nil
                            end

                            SelectionBoxColor = XYjab.State.PreviousSelectionBoxColor

                            updateSelectionBoxColor()
                        end
                        Tools.Decorate.updateGUI = function(vKlf)
                            if not vKlf.GUI then
                                return
                            end
                            if #Selection.Items > 0 then
                                local SlWsaU = vKlf.getSmoke(vKlf)
                                local Mj = vKlf.getFire(vKlf)
                                local c_ = vKlf.getSparkles(vKlf)
                                local Kw4ta8iS, AlV6, LtS, TaJ2US, Ghp0, opR
                                local sif2, PGiQADW, PI, dZc, iebKJjA, d, CaFSQRf, vn3NH
                                local JFZ, L, j_st9

                                for Ubiy, mIV in pairs(SlWsaU)do
                                    if Ubiy == 1 then
                                        Kw4ta8iS, AlV6, LtS = mIV.Color.r, mIV.Color.g, mIV.Color.b
                                        TaJ2US = mIV.Opacity
                                        Ghp0 = mIV.RiseVelocity
                                        opR = mIV.Size
                                    else
                                        if Kw4ta8iS ~= mIV.Color.r then
                                            Kw4ta8iS = nil
                                        end
                                        if AlV6 ~= mIV.Color.g then
                                            AlV6 = nil
                                        end
                                        if LtS ~= mIV.Color.b then
                                            LtS = nil
                                        end
                                        if TaJ2US ~= mIV.Opacity then
                                            TaJ2US = nil
                                        end
                                        if Ghp0 ~= mIV.RiseVelocity then
                                            Ghp0 = nil
                                        end
                                        if opR ~= mIV.Size then
                                            opR = nil
                                        end
                                    end
                                end
                                for hgRaw, vvwRldj in pairs(Mj)do
                                    if hgRaw == 1 then
                                        sif2, PGiQADW, PI = vvwRldj.Color.r, vvwRldj.Color.g, vvwRldj.Color.b
                                        dZc, iebKJjA, d = vvwRldj.SecondaryColor.r, vvwRldj.SecondaryColor.g, vvwRldj.SecondaryColor.b
                                        CaFSQRf = vvwRldj.Heat
                                        vn3NH = vvwRldj.Size
                                    else
                                        if sif2 ~= vvwRldj.Color.r then
                                            sif2 = nil
                                        end
                                        if PGiQADW ~= vvwRldj.Color.g then
                                            PGiQADW = nil
                                        end
                                        if PI ~= vvwRldj.Color.b then
                                            PI = nil
                                        end
                                        if dZc ~= vvwRldj.SecondaryColor.r then
                                            dZc = nil
                                        end
                                        if iebKJjA ~= vvwRldj.SecondaryColor.g then
                                            iebKJjA = nil
                                        end
                                        if d ~= vvwRldj.SecondaryColor.b then
                                            d = nil
                                        end
                                        if CaFSQRf ~= vvwRldj.Heat then
                                            CaFSQRf = nil
                                        end
                                        if vn3NH ~= vvwRldj.Size then
                                            vn3NH = nil
                                        end
                                    end
                                end
                                for f_7I8Jo, K072gC9 in pairs(c_)do
                                    if f_7I8Jo == 1 then
                                        JFZ, L, j_st9 = K072gC9.SparkleColor.r, K072gC9.SparkleColor.g, K072gC9.SparkleColor.b
                                    else
                                        if JFZ ~= K072gC9.SparkleColor.r then
                                            JFZ = nil
                                        end
                                        if L ~= K072gC9.SparkleColor.g then
                                            L = nil
                                        end
                                        if j_st9 ~= K072gC9.SparkleColor.b then
                                            j_st9 = nil
                                        end
                                    end
                                end

                                vKlf.State.smoke_color = (Kw4ta8iS and AlV6 and LtS) and Color3.new(Kw4ta8iS, AlV6, LtS) or nil
                                vKlf.State.fire_color = (sif2 and PGiQADW and PI) and Color3.new(sif2, PGiQADW, PI) or nil
                                vKlf.State.fire_2nd_color = (dZc and iebKJjA and d) and Color3.new(dZc, iebKJjA, d) or nil
                                vKlf.State.sparkles_color = (JFZ and L and j_st9) and Color3.new(JFZ, L, j_st9) or nil

                                if not vKlf.State.smoke_color_r_focused then
                                    vKlf.GUI.Smoke.Options.ColorOption.RInput.TextBox.Text = Kw4ta8iS and Support.Round(Kw4ta8iS * 255, 0) or '*'
                                end
                                if not vKlf.State.smoke_color_g_focused then
                                    vKlf.GUI.Smoke.Options.ColorOption.GInput.TextBox.Text = AlV6 and Support.Round(AlV6 * 255, 0) or '*'
                                end
                                if not vKlf.State.smoke_color_b_focused then
                                    vKlf.GUI.Smoke.Options.ColorOption.BInput.TextBox.Text = LtS and Support.Round(LtS * 255, 0) or '*'
                                end
                                if not vKlf.State.smoke_opacity_focused then
                                    vKlf.GUI.Smoke.Options.OpacityOption.Input.TextBox.Text = TaJ2US and Support.Round(TaJ2US, 2) or '*'
                                end
                                if not vKlf.State.smoke_velocity_focused then
                                    vKlf.GUI.Smoke.Options.VelocityOption.Input.TextBox.Text = Ghp0 and Support.Round(Ghp0, 2) or '*'
                                end
                                if not vKlf.State.smoke_size_focused then
                                    vKlf.GUI.Smoke.Options.SizeOption.Input.TextBox.Text = opR and Support.Round(opR, 2) or '*'
                                end
                                if not vKlf.State.fire_color_r_focused then
                                    vKlf.GUI.Fire.Options.ColorOption.RInput.TextBox.Text = sif2 and Support.Round(sif2 * 255, 0) or '*'
                                end
                                if not vKlf.State.fire_color_g_focused then
                                    vKlf.GUI.Fire.Options.ColorOption.GInput.TextBox.Text = PGiQADW and Support.Round(PGiQADW * 255, 0) or '*'
                                end
                                if not vKlf.State.fire_color_b_focused then
                                    vKlf.GUI.Fire.Options.ColorOption.BInput.TextBox.Text = PI and Support.Round(PI * 255, 0) or '*'
                                end
                                if not vKlf.State.fire_2nd_color_r_focused then
                                    vKlf.GUI.Fire.Options.SecondColorOption.RInput.TextBox.Text = dZc and Support.Round(dZc * 255, 0) or '*'
                                end
                                if not vKlf.State.fire_2nd_color_g_focused then
                                    vKlf.GUI.Fire.Options.SecondColorOption.GInput.TextBox.Text = iebKJjA and Support.Round(iebKJjA * 255, 0) or '*'
                                end
                                if not vKlf.State.fire_2nd_color_b_focused then
                                    vKlf.GUI.Fire.Options.SecondColorOption.BInput.TextBox.Text = d and Support.Round(d * 255, 0) or '*'
                                end
                                if not vKlf.State.fire_heat_focused then
                                    vKlf.GUI.Fire.Options.HeatOption.Input.TextBox.Text = CaFSQRf and Support.Round(CaFSQRf, 2) or '*'
                                end
                                if not vKlf.State.fire_size_focused then
                                    vKlf.GUI.Fire.Options.SizeOption.Input.TextBox.Text = vn3NH and Support.Round(vn3NH, 2) or '*'
                                end
                                if not vKlf.State.sparkles_color_r_focused then
                                    vKlf.GUI.Sparkles.Options.ColorOption.RInput.TextBox.Text = JFZ and Support.Round(JFZ * 255, 0) or '*'
                                end
                                if not vKlf.State.sparkles_color_g_focused then
                                    vKlf.GUI.Sparkles.Options.ColorOption.GInput.TextBox.Text = L and Support.Round(L * 255, 0) or '*'
                                end
                                if not vKlf.State.sparkles_color_b_focused then
                                    vKlf.GUI.Sparkles.Options.ColorOption.BInput.TextBox.Text = j_st9 and Support.Round(j_st9 * 255, 0) or '*'
                                end
                                if vKlf.GUI.SelectNote.Visible then
                                    vKlf.closeSmoke(vKlf)
                                    vKlf.closeFire(vKlf)
                                    vKlf.closeSparkles(vKlf)
                                end

                                vKlf.GUI.Smoke.Visible = true
                                vKlf.GUI.Fire.Visible = true
                                vKlf.GUI.Sparkles.Visible = true
                                vKlf.GUI.SelectNote.Visible = false

                                if not vKlf.State.smoke_open and not vKlf.State.fire_open and not vKlf.State.sparkles_open then
                                    vKlf.GUI:TweenSize(UDim2.new(0, 200, 0, 125), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                                end
                                if #SlWsaU == 0 then
                                    vKlf.GUI.Smoke.Options.Size = UDim2.new(1, -3, 0, 0)
                                    vKlf.GUI.Smoke.AddButton.Visible = true
                                    vKlf.GUI.Smoke.RemoveButton.Visible = false

                                    if vKlf.State.smoke_open then
                                        vKlf.closeSmoke(vKlf)
                                    end
                                elseif #SlWsaU ~= #Selection.Items then
                                    vKlf.GUI.Smoke.AddButton.Visible = true
                                    vKlf.GUI.Smoke.RemoveButton.Position = UDim2.new(0, 90, 0, 3)
                                    vKlf.GUI.Smoke.RemoveButton.Visible = true
                                elseif #SlWsaU == #Selection.Items then
                                    vKlf.GUI.Smoke.AddButton.Visible = false
                                    vKlf.GUI.Smoke.RemoveButton.Position = UDim2.new(0, 127, 0, 3)
                                    vKlf.GUI.Smoke.RemoveButton.Visible = true

                                    if vKlf.GUI.Smoke.Size == UDim2.new(0, 200, 0, 52) then
                                        vKlf.GUI.Smoke.Size = UDim2.new(0, 200, 0, 125)
                                    end
                                end
                                if #Mj == 0 then
                                    vKlf.GUI.Fire.Options.Size = UDim2.new(1, -3, 0, 0)
                                    vKlf.GUI.Fire.AddButton.Visible = true
                                    vKlf.GUI.Fire.RemoveButton.Visible = false

                                    if vKlf.State.fire_open then
                                        vKlf.closeFire(vKlf)
                                    end
                                elseif #Mj ~= #Selection.Items then
                                    vKlf.GUI.Fire.AddButton.Visible = true
                                    vKlf.GUI.Fire.RemoveButton.Position = UDim2.new(0, 90, 0, 3)
                                    vKlf.GUI.Fire.RemoveButton.Visible = true
                                elseif #Mj == #Selection.Items then
                                    vKlf.GUI.Fire.AddButton.Visible = false
                                    vKlf.GUI.Fire.RemoveButton.Position = UDim2.new(0, 127, 0, 3)
                                    vKlf.GUI.Fire.RemoveButton.Visible = true
                                end
                                if #c_ == 0 then
                                    vKlf.GUI.Sparkles.Options.Size = UDim2.new(1, 
-3, 0, 0)
                                    vKlf.GUI.Sparkles.AddButton.Visible = true
                                    vKlf.GUI.Sparkles.RemoveButton.Visible = false

                                    if vKlf.State.sparkles_open then
                                        vKlf.closeSparkles(vKlf)
                                    end
                                elseif #c_ ~= #Selection.Items then
                                    vKlf.GUI.Sparkles.AddButton.Visible = true
                                    vKlf.GUI.Sparkles.RemoveButton.Position = UDim2.new(0, 90, 0, 3)
                                    vKlf.GUI.Sparkles.RemoveButton.Visible = true
                                elseif #c_ == #Selection.Items then
                                    vKlf.GUI.Sparkles.AddButton.Visible = false
                                    vKlf.GUI.Sparkles.RemoveButton.Position = UDim2.new(0, 127, 0, 3)
                                    vKlf.GUI.Sparkles.RemoveButton.Visible = true
                                end
                            else
                                vKlf.GUI.Smoke.Visible = false
                                vKlf.GUI.Fire.Visible = false
                                vKlf.GUI.Sparkles.Visible = false
                                vKlf.GUI.SelectNote.Visible = true
                                vKlf.GUI.Size = UDim2.new(0, 200, 0, 52)
                            end
                        end
                        Tools.Decorate.openSmoke = function(SbuPM)
                            SbuPM.State.smoke_open = true

                            SbuPM.closeFire(SbuPM)
                            SbuPM.closeSparkles(SbuPM)
                            SbuPM.GUI.Smoke.Options:TweenSize(UDim2.new(1, -3, 0, 110), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            SbuPM.GUI.Smoke:TweenPosition(UDim2.new(0, 10, 0, 30), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            SbuPM.GUI:TweenSize(UDim2.new(0, 200, 0, 235), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                        end
                        Tools.Decorate.openFire = function(cobaoFK)
                            cobaoFK.State.fire_open = true

                            cobaoFK.closeSmoke(cobaoFK)
                            cobaoFK.closeSparkles(cobaoFK)
                            cobaoFK.GUI.Fire.Options:TweenSize(UDim2.new(1, -3, 0, 110), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            cobaoFK.GUI.Fire:TweenPosition(UDim2.new(0, 10, 0, 60), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            cobaoFK.GUI:TweenSize(UDim2.new(0, 200, 0, 235), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                        end
                        Tools.Decorate.openSparkles = function(JbhOvI)
                            JbhOvI.State.sparkles_open = true

                            JbhOvI.closeSmoke(JbhOvI)
                            JbhOvI.closeFire(JbhOvI)
                            JbhOvI.GUI.Sparkles.Options:TweenSize(UDim2.new(1, -3, 0, 40), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            JbhOvI.GUI.Sparkles:TweenPosition(UDim2.new(0, 10, 0, 90), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            JbhOvI.GUI:TweenSize(UDim2.new(0, 200, 0, 160), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                        end
                        Tools.Decorate.closeSmoke = function(yA)
                            yA.State.smoke_open = false

                            yA.GUI.Smoke.Options:TweenSize(UDim2.new(1, -3, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            yA.GUI.Fire:TweenPosition(UDim2.new(0, 10, 0, 60), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)

                            if not yA.State.fire_open then
                                yA.GUI.Sparkles:TweenPosition(UDim2.new(0, 10, 0, 90), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            end
                            if not yA.State.fire_open and not yA.State.sparkles_open then
                                yA.GUI:TweenSize(UDim2.new(0, 200, 0, 125), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            end
                        end
                        Tools.Decorate.closeFire = function(NUsjSgB)
                            NUsjSgB.State.fire_open = false

                            if NUsjSgB.State.smoke_open then
                                NUsjSgB.GUI.Fire:TweenPosition(UDim2.new(0, 10, 0, 170), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            else
                                NUsjSgB.GUI.Fire:TweenPosition(UDim2.new(0, 10, 0, 60), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            end

                            NUsjSgB.GUI.Fire.Options:TweenSize(UDim2.new(1, -3, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)

                            if not NUsjSgB.State.smoke_open then
                                NUsjSgB.GUI.Sparkles:TweenPosition(UDim2.new(0, 10, 0, 90), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            end
                            if not NUsjSgB.State.smoke_open and not NUsjSgB.State.sparkles_open then
                                NUsjSgB.GUI:TweenSize(UDim2.new(0, 200, 0, 125), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            end
                        end
                        Tools.Decorate.closeSparkles = function(Xuvxfbm)
                            Xuvxfbm.State.sparkles_open = false

                            if Xuvxfbm.State.smoke_open or Xuvxfbm.State.fire_open then
                                Xuvxfbm.GUI.Sparkles:TweenPosition(UDim2.new(0, 10, 0, 200), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            else
                                Xuvxfbm.GUI.Sparkles:TweenPosition(UDim2.new(0, 10, 0, 90), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            end

                            Xuvxfbm.GUI.Sparkles.Options:TweenSize(UDim2.new(1, 
-3, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)

                            if not Xuvxfbm.State.smoke_open and not Xuvxfbm.State.fire_open then
                                Xuvxfbm.GUI:TweenSize(UDim2.new(0, 200, 0, 125), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true)
                            end
                        end
                        Tools.Decorate.showGUI = function(tY)
                            if not tY.GUI then
                                local l1YAdT2c = DFb100j.BTDecorateToolGUI:Clone()

                                l1YAdT2c.Parent = UI

                                l1YAdT2c.Smoke.ArrowButton.MouseButton1Up:Connect(function(
                                )
                                    if not tY.State.smoke_open and #tY.getSmoke(tY) > 0 then
                                        tY.openSmoke(tY)
                                    else
                                        tY.closeSmoke(tY)
                                    end
                                end)
                                l1YAdT2c.Fire.ArrowButton.MouseButton1Up:Connect(function(
                                )
                                    if not tY.State.fire_open and #tY.getFire(tY) > 0 then
                                        tY.openFire(tY)
                                    else
                                        tY.closeFire(tY)
                                    end
                                end)
                                l1YAdT2c.Sparkles.ArrowButton.MouseButton1Up:Connect(function(
                                )
                                    if not tY.State.sparkles_open and #tY.getSparkles(tY) > 0 then
                                        tY.openSparkles(tY)
                                    else
                                        tY.closeSparkles(tY)
                                    end
                                end)
                                l1YAdT2c.Smoke.AddButton.MouseButton1Up:Connect(function(
                                )
                                    tY.addSmoke(tY)
                                    tY.openSmoke(tY)
                                end)
                                l1YAdT2c.Fire.AddButton.MouseButton1Up:Connect(function(
                                )
                                    tY.addFire(tY)
                                    tY.openFire(tY)
                                end)
                                l1YAdT2c.Sparkles.AddButton.MouseButton1Up:Connect(function(
                                )
                                    tY.addSparkles(tY)
                                    tY.openSparkles(tY)
                                end)
                                l1YAdT2c.Smoke.RemoveButton.MouseButton1Up:Connect(function(
                                )
                                    tY.removeSmoke(tY)
                                    tY.closeSmoke(tY)
                                end)
                                l1YAdT2c.Fire.RemoveButton.MouseButton1Up:Connect(function(
                                )
                                    tY.removeFire(tY)
                                    tY.closeFire(tY)
                                end)
                                l1YAdT2c.Sparkles.RemoveButton.MouseButton1Up:Connect(function(
                                )
                                    tY.removeSparkles(tY)
                                    tY.closeSparkles(tY)
                                end)

                                local A1A = l1YAdT2c.Smoke
                                local PMB1UGv = A1A.Options.ColorOption

                                PMB1UGv.RInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.smoke_color_r_focused = true

                                    PMB1UGv.RInput.TextBox:CaptureFocus()
                                end)
                                PMB1UGv.RInput.TextBox.FocusLost:Connect(function(
                                    _MI
                                )
                                    local TITR = tonumber(PMB1UGv.RInput.TextBox.Text)

                                    if TITR then
                                        if TITR > 255 then
                                            TITR = 255
                                        elseif TITR < 0 then
                                            TITR = 0
                                        end

                                        tY.changeSmokeColor(tY, 'r', TITR / 255)
                                    end

                                    tY.State.smoke_color_r_focused = false
                                end)
                                PMB1UGv.GInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.smoke_color_g_focused = true

                                    PMB1UGv.GInput.TextBox:CaptureFocus()
                                end)
                                PMB1UGv.GInput.TextBox.FocusLost:Connect(function(
                                    i_aIFe
                                )
                                    local YFJRo6 = tonumber(PMB1UGv.GInput.TextBox.Text)

                                    if YFJRo6 then
                                        if YFJRo6 > 255 then
                                            YFJRo6 = 255
                                        elseif YFJRo6 < 0 then
                                            YFJRo6 = 0
                                        end

                                        tY.changeSmokeColor(tY, 'g', YFJRo6 / 255)
                                    end

                                    tY.State.smoke_color_g_focused = false
                                end)
                                PMB1UGv.BInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.smoke_color_b_focused = true

                                    PMB1UGv.BInput.TextBox:CaptureFocus()
                                end)
                                PMB1UGv.BInput.TextBox.FocusLost:Connect(function(
                                    V3EcTFrW
                                )
                                    local zJbXZu2D = tonumber(PMB1UGv.BInput.TextBox.Text)

                                    if zJbXZu2D then
                                        if zJbXZu2D > 255 then
                                            zJbXZu2D = 255
                                        elseif zJbXZu2D < 0 then
                                            zJbXZu2D = 0
                                        end

                                        tY.changeSmokeColor(tY, 'b', zJbXZu2D / 255)
                                    end

                                    tY.State.smoke_color_b_focused = false
                                end)
                                PMB1UGv.HSVPicker.MouseButton1Up:Connect(function(
                                )
                                    ColorPicker.start(ColorPicker, function(...)
                                        local drq = {...}

                                        if #drq == 3 then
                                            tY.changeSmokeColor(tY, Support.HSVToRGB(
...))
                                        end
                                    end, tY.State.smoke_color)
                                end)

                                local TicLenZ = A1A.Options.OpacityOption.Input

                                TicLenZ.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.smoke_opacity_focused = true

                                    TicLenZ.TextBox:CaptureFocus()
                                end)
                                TicLenZ.TextBox.FocusLost:Connect(function(
                                    ezkF
                                )
                                    local dlHohKjZ = tonumber(TicLenZ.TextBox.Text)

                                    if dlHohKjZ then
                                        if dlHohKjZ > 1 then
                                            dlHohKjZ = 1
                                        elseif dlHohKjZ < 0 then
                                            dlHohKjZ = 0
                                        end

                                        tY.changeSmokeOpacity(tY, dlHohKjZ)
                                    end

                                    tY.State.smoke_opacity_focused = false
                                end)

                                local Xc = A1A.Options.VelocityOption.Input

                                Xc.TextButton.MouseButton1Down:Connect(function()
                                    tY.State.smoke_velocity_focused = true

                                    Xc.TextBox:CaptureFocus()
                                end)
                                Xc.TextBox.FocusLost:Connect(function(QI)
                                    local fI = tonumber(Xc.TextBox.Text)

                                    if fI then
                                        if fI > 25 then
                                            fI = 25
                                        elseif fI < -25 then
                                            fI = -25
                                        end

                                        tY.changeSmokeVelocity(tY, fI)
                                    end

                                    tY.State.smoke_velocity_focused = false
                                end)

                                local onx = A1A.Options.SizeOption.Input

                                onx.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.smoke_size_focused = true

                                    onx.TextBox:CaptureFocus()
                                end)
                                onx.TextBox.FocusLost:Connect(function(In)
                                    local u = tonumber(onx.TextBox.Text)

                                    if u then
                                        if u > 100 then
                                            u = 100
                                        elseif u < 0.1 then
                                            u = 0.1
                                        end

                                        tY.changeSmokeSize(tY, u)
                                    end

                                    tY.State.smoke_size_focused = false
                                end)

                                local z = l1YAdT2c.Fire
                                local hHo = z.Options.ColorOption

                                hHo.RInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.fire_color_r_focused = true

                                    hHo.RInput.TextBox:CaptureFocus()
                                end)
                                hHo.RInput.TextBox.FocusLost:Connect(function(
                                    ygfhj
                                )
                                    local fN = tonumber(hHo.RInput.TextBox.Text)

                                    if fN then
                                        if fN > 255 then
                                            fN = 255
                                        elseif fN < 0 then
                                            fN = 0
                                        end

                                        tY.changeFireColor(tY, 'r', fN / 255)
                                    end

                                    tY.State.fire_color_r_focused = false
                                end)
                                hHo.GInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.fire_color_g_focused = true

                                    hHo.GInput.TextBox:CaptureFocus()
                                end)
                                hHo.GInput.TextBox.FocusLost:Connect(function(
                                    ws8
                                )
                                    local yDc8 = tonumber(hHo.GInput.TextBox.Text)

                                    if yDc8 then
                                        if yDc8 > 255 then
                                            yDc8 = 255
                                        elseif yDc8 < 0 then
                                            yDc8 = 0
                                        end

                                        tY.changeFireColor(tY, 'g', yDc8 / 255)
                                    end

                                    tY.State.fire_color_g_focused = false
                                end)
                                hHo.BInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.fire_color_b_focused = true

                                    hHo.BInput.TextBox:CaptureFocus()
                                end)
                                hHo.BInput.TextBox.FocusLost:Connect(function(
                                    d3g
                                )
                                    local vZH = tonumber(hHo.BInput.TextBox.Text)

                                    if vZH then
                                        if vZH > 255 then
                                            vZH = 255
                                        elseif vZH < 0 then
                                            vZH = 0
                                        end

                                        tY.changeFireColor(tY, 'b', vZH / 255)
                                    end

                                    tY.State.fire_color_b_focused = false
                                end)
                                hHo.HSVPicker.MouseButton1Up:Connect(function()
                                    ColorPicker.start(ColorPicker, function(...)
                                        local RWqs = {...}

                                        if #RWqs == 3 then
                                            tY.changeFireColor(tY, Support.HSVToRGB(
...))
                                        end
                                    end, tY.State.fire_color)
                                end)

                                local fgqM6D = z.Options.SecondColorOption

                                fgqM6D.RInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.fire_2nd_color_r_focused = true

                                    fgqM6D.RInput.TextBox:CaptureFocus()
                                end)
                                fgqM6D.RInput.TextBox.FocusLost:Connect(function(
                                    tn
                                )
                                    local FKyVcS = tonumber(fgqM6D.RInput.TextBox.Text)

                                    if FKyVcS then
                                        if FKyVcS > 255 then
                                            FKyVcS = 255
                                        elseif FKyVcS < 0 then
                                            FKyVcS = 0
                                        end

                                        tY.changeFireColor2(tY, 'r', FKyVcS / 255)
                                    end

                                    tY.State.fire_2nd_color_r_focused = false
                                end)
                                fgqM6D.GInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.fire_2nd_color_g_focused = true

                                    fgqM6D.GInput.TextBox:CaptureFocus()
                                end)
                                fgqM6D.GInput.TextBox.FocusLost:Connect(function(
                                    zNfSeV
                                )
                                    local HtbHbcu = tonumber(fgqM6D.GInput.TextBox.Text)

                                    if HtbHbcu then
                                        if HtbHbcu > 255 then
                                            HtbHbcu = 255
                                        elseif HtbHbcu < 0 then
                                            HtbHbcu = 0
                                        end

                                        tY.changeFireColor2(tY, 'g', HtbHbcu / 255)
                                    end

                                    tY.State.fire_2nd_color_g_focused = false
                                end)
                                fgqM6D.BInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.fire_2nd_color_b_focused = true

                                    fgqM6D.BInput.TextBox:CaptureFocus()
                                end)
                                fgqM6D.BInput.TextBox.FocusLost:Connect(function(
                                    MDLzj7
                                )
                                    local RNIZJ = tonumber(fgqM6D.BInput.TextBox.Text)

                                    if RNIZJ then
                                        if RNIZJ > 255 then
                                            RNIZJ = 255
                                        elseif RNIZJ < 0 then
                                            RNIZJ = 0
                                        end

                                        tY.changeFireColor2(tY, 'b', RNIZJ / 255)
                                    end

                                    tY.State.fire_2nd_color_b_focused = false
                                end)
                                fgqM6D.HSVPicker.MouseButton1Up:Connect(function(
                                )
                                    ColorPicker.start(ColorPicker, function(...)
                                        local ma = {...}

                                        if #ma == 3 then
                                            tY.changeFireColor2(tY, Support.HSVToRGB(
...))
                                        end
                                    end, tY.State.fire_2nd_color)
                                end)

                                local KXz5 = z.Options.HeatOption.Input

                                KXz5.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.fire_heat_focused = true

                                    KXz5.TextBox:CaptureFocus()
                                end)
                                KXz5.TextBox.FocusLost:Connect(function(X_)
                                    local E_fkS = tonumber(KXz5.TextBox.Text)

                                    if E_fkS then
                                        if E_fkS > 25 then
                                            E_fkS = 25
                                        elseif E_fkS < -25 then
                                            E_fkS = -25
                                        end

                                        tY.changeFireHeat(tY, E_fkS)
                                    end

                                    tY.State.fire_heat_focused = false
                                end)

                                local IxVqKpu = z.Options.SizeOption.Input

                                IxVqKpu.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.fire_size_focused = true

                                    IxVqKpu.TextBox:CaptureFocus()
                                end)
                                IxVqKpu.TextBox.FocusLost:Connect(function(
                                    iv18CGzs
                                )
                                    local TpEB = tonumber(IxVqKpu.TextBox.Text)

                                    if TpEB then
                                        if TpEB > 30 then
                                            TpEB = 30
                                        elseif TpEB < 2 then
                                            TpEB = 2
                                        end

                                        tY.changeFireSize(tY, TpEB)
                                    end

                                    tY.State.fire_size_focused = false
                                end)

                                local B0cg08r_ = l1YAdT2c.Sparkles
                                local GRkE = B0cg08r_.Options.ColorOption

                                GRkE.RInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.sparkles_color_r_focused = true

                                    GRkE.RInput.TextBox:CaptureFocus()
                                end)
                                GRkE.RInput.TextBox.FocusLost:Connect(function(
                                    x
                                )
                                    local yF1U = tonumber(GRkE.RInput.TextBox.Text)

                                    if yF1U then
                                        if yF1U > 255 then
                                            yF1U = 255
                                        elseif yF1U < 0 then
                                            yF1U = 0
                                        end

                                        tY.changeSparklesColor(tY, 'r', yF1U / 255)
                                    end

                                    tY.State.sparkles_color_r_focused = false
                                end)
                                GRkE.GInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.sparkles_color_g_focused = true

                                    GRkE.GInput.TextBox:CaptureFocus()
                                end)
                                GRkE.GInput.TextBox.FocusLost:Connect(function(
                                    JE6a4s
                                )
                                    local sloRQ = tonumber(GRkE.GInput.TextBox.Text)

                                    if sloRQ then
                                        if sloRQ > 255 then
                                            sloRQ = 255
                                        elseif sloRQ < 0 then
                                            sloRQ = 0
                                        end

                                        tY.changeSparklesColor(tY, 'g', sloRQ / 255)
                                    end

                                    tY.State.sparkles_color_g_focused = false
                                end)
                                GRkE.BInput.TextButton.MouseButton1Down:Connect(function(
                                )
                                    tY.State.sparkles_color_b_focused = true

                                    GRkE.BInput.TextBox:CaptureFocus()
                                end)
                                GRkE.BInput.TextBox.FocusLost:Connect(function(
                                    mJ2
                                )
                                    local P = tonumber(GRkE.BInput.TextBox.Text)

                                    if P then
                                        if P > 255 then
                                            P = 255
                                        elseif P < 0 then
                                            P = 0
                                        end

                                        tY.changeSparklesColor(tY, 'b', P / 255)
                                    end

                                    tY.State.sparkles_color_b_focused = false
                                end)
                                GRkE.HSVPicker.MouseButton1Up:Connect(function()
                                    ColorPicker.start(ColorPicker, function(...)
                                        local Ge = {...}

                                        if #Ge == 3 then
                                            tY.changeSparklesColor(tY, Support.HSVToRGB(
...))
                                        end
                                    end, tY.State.sparkles_color)
                                end)

                                tY.GUI = l1YAdT2c
                            end

                            tY.GUI.Visible = true
                        end
                        Tools.Decorate.changeSmokeOpacity = function(
                            tYF,
                            jzn73
                        )
                            local vQTwJ6V1 = tYF.getSmoke(tYF)

                            tYF.startHistoryRecord(tYF, vQTwJ6V1)

                            for Knf7U, I0 in pairs(vQTwJ6V1)do
                                I0.Opacity = jzn73
                            end

                            tYF.finishHistoryRecord(tYF)
                        end
                        Tools.Decorate.changeSmokeVelocity = function(
                            jFyAt,
                            LyJxC
                        )
                            local E = jFyAt.getSmoke(jFyAt)

                            jFyAt.startHistoryRecord(jFyAt, E)

                            for vnC8kIGX, dnKfz in pairs(E)do
                                dnKfz.RiseVelocity = LyJxC
                            end

                            jFyAt.finishHistoryRecord(jFyAt)
                        end
                        Tools.Decorate.changeSmokeSize = function(kDt, QLp)
                            local IXNl = kDt.getSmoke(kDt)

                            kDt.startHistoryRecord(kDt, IXNl)

                            for oqPG, Pa in pairs(IXNl)do
                                Pa.Size = QLp
                            end

                            kDt.finishHistoryRecord(kDt)
                        end
                        Tools.Decorate.changeFireHeat = function(j37n1ZA, aLxQ)
                            local GW = j37n1ZA.getFire(j37n1ZA)

                            j37n1ZA.startHistoryRecord(j37n1ZA, GW)

                            for AzhdvccS, J in pairs(GW)do
                                J.Heat = aLxQ
                            end

                            j37n1ZA.finishHistoryRecord(j37n1ZA)
                        end
                        Tools.Decorate.changeFireSize = function(PYFFxAp, i)
                            local AP1UcfB = PYFFxAp.getFire(PYFFxAp)

                            PYFFxAp.startHistoryRecord(PYFFxAp, AP1UcfB)

                            for e, H4 in pairs(AP1UcfB)do
                                H4.Size = i
                            end

                            PYFFxAp.finishHistoryRecord(PYFFxAp)
                        end
                        Tools.Decorate.getSmoke = function(CMIGYkL8)
                            local n9FOtM = {}

                            for K, EeAZn in pairs(Selection.Items)do
                                local aCKog = Support.GetChildOfClass(EeAZn, 'Smoke')

                                if aCKog then
                                    table.insert(n9FOtM, aCKog)
                                end
                            end

                            return n9FOtM
                        end
                        Tools.Decorate.getFire = function(c)
                            local OWrvY = {}

                            for lp2, k in pairs(Selection.Items)do
                                local sEjUvkV = Support.GetChildOfClass(k, 'Fire')

                                if sEjUvkV then
                                    table.insert(OWrvY, sEjUvkV)
                                end
                            end

                            return OWrvY
                        end
                        Tools.Decorate.getSparkles = function(pnOWD9)
                            local iRm2 = {}

                            for J61iBvjC, _ in pairs(Selection.Items)do
                                local X79LkbfD = Support.GetChildOfClass(_, 'Sparkles')

                                if X79LkbfD then
                                    table.insert(iRm2, X79LkbfD)
                                end
                            end

                            return iRm2
                        end
                        Tools.Decorate.changeSmokeColor = function(JNRj6X, ...)
                            local ldz480 = {...}
                            local rE = JNRj6X.getSmoke(JNRj6X)

                            JNRj6X.startHistoryRecord(JNRj6X, rE)

                            if #ldz480 == 2 then
                                local f7eR2T = ldz480[1]
                                local l = ldz480[2]

                                for XZ3A, Czs0f in pairs(rE)do
                                    Czs0f.Color = Color3.new(f7eR2T == 'r' and l or Czs0f.Color.r, f7eR2T == 'g' and l or Czs0f.Color.g, f7eR2T == 'b' and l or Czs0f.Color.b)
                                end
                            elseif #ldz480 == 3 then
                                local aMvb, _QG, CWG = ...

                                for z1q, YkD6SuyP in pairs(rE)do
                                    YkD6SuyP.Color = Color3.new(aMvb, _QG, CWG)
                                end
                            end

                            JNRj6X.finishHistoryRecord(JNRj6X)
                        end
                        Tools.Decorate.changeFireColor = function(GW3xWh, ...)
                            local eA_ohY = {...}
                            local b5p2AMKP = GW3xWh.getFire(GW3xWh)

                            GW3xWh.startHistoryRecord(GW3xWh, b5p2AMKP)

                            if #eA_ohY == 2 then
                                local m = eA_ohY[1]
                                local Xve = eA_ohY[2]

                                for Hk0hzj, Mfs in pairs(b5p2AMKP)do
                                    Mfs.Color = Color3.new(m == 'r' and Xve or Mfs.Color.r, m == 'g' and Xve or Mfs.Color.g, m == 'b' and Xve or Mfs.Color.b)
                                end
                            elseif #eA_ohY == 3 then
                                local JqnndWc, l5T8J5g1, RhLeG = ...

                                for tOSI20, n in pairs(b5p2AMKP)do
                                    n.Color = Color3.new(JqnndWc, l5T8J5g1, RhLeG)
                                end
                            end

                            GW3xWh.finishHistoryRecord(GW3xWh)
                        end
                        Tools.Decorate.changeFireColor2 = function(mZcPQEV, ...)
                            local O_oVTYL = {...}
                            local PGzKhtPH = mZcPQEV.getFire(mZcPQEV)

                            mZcPQEV.startHistoryRecord(mZcPQEV, PGzKhtPH)

                            if #O_oVTYL == 2 then
                                local wI3DS0Kh = O_oVTYL[1]
                                local CwTDNbR = O_oVTYL[2]

                                for A, JfSij6_ in pairs(PGzKhtPH)do
                                    JfSij6_.SecondaryColor = Color3.new(wI3DS0Kh == 'r' and CwTDNbR or JfSij6_.Color.r, wI3DS0Kh == 'g' and CwTDNbR or JfSij6_.Color.g, wI3DS0Kh == 'b' and CwTDNbR or JfSij6_.Color.b)
                                end
                            elseif #O_oVTYL == 3 then
                                local Lr, NXu695, lzWnF = ...

                                for sNe6_x, fBLoB6JH in pairs(PGzKhtPH)do
                                    fBLoB6JH.SecondaryColor = Color3.new(Lr, NXu695, lzWnF)
                                end
                            end

                            mZcPQEV.finishHistoryRecord(mZcPQEV)
                        end
                        Tools.Decorate.changeSparklesColor = function(z6gv, ...)
                            local ZZ93rHc0 = {...}
                            local j_V = z6gv.getSparkles(z6gv)

                            z6gv.startHistoryRecord(z6gv, j_V)

                            if #ZZ93rHc0 == 2 then
                                local I_ = ZZ93rHc0[1]
                                local yPn = ZZ93rHc0[2]

                                for LsT, E in pairs(j_V)do
                                    E.SparkleColor = Color3.new(I_ == 'r' and yPn or E.SparkleColor.r, I_ == 'g' and yPn or E.SparkleColor.g, I_ == 'b' and yPn or E.SparkleColor.b)
                                end
                            elseif #ZZ93rHc0 == 3 then
                                local dOD2G, jhOfPSgm, eri = ...

                                for uaTR, JDs76MG in pairs(j_V)do
                                    JDs76MG.SparkleColor = Color3.new(dOD2G, jhOfPSgm, eri)
                                end
                            end

                            z6gv.finishHistoryRecord(z6gv)
                        end
                        Tools.Decorate.addSmoke = function(aDZVav)
                            local sRoTvf = {
                                apply = function(aDZVav)
                                    Selection.clear(Selection)

                                    for cUR, p in pairs(aDZVav.smoke)do
                                        p.Parent = aDZVav.smoke_parents[p]

                                        Selection.add(Selection, p.Parent)
                                    end
                                end,
                                unapply = function(aDZVav)
                                    Selection.clear(Selection)

                                    for kKdY4XaA, d in pairs(aDZVav.smoke)do
                                        Selection.add(Selection, d.Parent)

                                        d.Parent = nil
                                    end
                                end,
                            }
                            local R1TLssk = {}
                            local H = {}

                            for sPM6lF, Qp_1 in pairs(Selection.Items)do
                                local q1YAR = Support.GetChildOfClass(Qp_1, 'Smoke')

                                if not q1YAR then
                                    local q1YAR = RbxUtility.Create('Smoke'){Parent = Qp_1}

                                    table.insert(R1TLssk, q1YAR)

                                    H[q1YAR] = Qp_1
                                end
                            end

                            sRoTvf.smoke = R1TLssk
                            sRoTvf.smoke_parents = H

                            History.add(History, sRoTvf)
                        end
                        Tools.Decorate.removeSmoke = function(kg)
                            local bijI = {
                                apply = function(kg)
                                    Selection.clear(Selection)

                                    for NhucT, SZMbpM in pairs(kg.smoke)do
                                        Selection.add(Selection, SZMbpM.Parent)

                                        SZMbpM.Parent = nil
                                    end
                                end,
                                unapply = function(kg)
                                    Selection.clear(Selection)

                                    for aTkVS, eBp38EEt in pairs(kg.smoke)do
                                        eBp38EEt.Parent = kg.smoke_parents[eBp38EEt]

                                        Selection.add(Selection, eBp38EEt.Parent)
                                    end
                                end,
                            }
                            local K = kg.getSmoke(kg)
                            local lCr41We = {}

                            for U8NHKEk, yf0 in pairs(K)do
                                lCr41We[yf0] = yf0.Parent
                                yf0.Parent = nil
                            end

                            bijI.smoke = K
                            bijI.smoke_parents = lCr41We

                            History.add(History, bijI)
                        end
                        Tools.Decorate.addFire = function(skphQH)
                            local ioxmHxH = {
                                apply = function(skphQH)
                                    Selection.clear(Selection)

                                    for e09Nk, ifI_m2 in pairs(skphQH.fire)do
                                        ifI_m2.Parent = skphQH.fire_parents[ifI_m2]

                                        Selection.add(Selection, ifI_m2.Parent)
                                    end
                                end,
                                unapply = function(skphQH)
                                    Selection.clear(Selection)

                                    for QSX2, L1dTNDQb in pairs(skphQH.fire)do
                                        Selection.add(Selection, L1dTNDQb.Parent)

                                        L1dTNDQb.Parent = nil
                                    end
                                end,
                            }
                            local YGhYv64 = {}
                            local i = {}

                            for eMzb, J0KiSt in pairs(Selection.Items)do
                                local pXdVoc = Support.GetChildOfClass(J0KiSt, 'Fire')

                                if not pXdVoc then
                                    local pXdVoc = RbxUtility.Create('Fire'){Parent = J0KiSt}

                                    table.insert(YGhYv64, pXdVoc)

                                    i[pXdVoc] = J0KiSt
                                end
                            end

                            ioxmHxH.fire = YGhYv64
                            ioxmHxH.fire_parents = i

                            History.add(History, ioxmHxH)
                        end
                        Tools.Decorate.removeFire = function(xme)
                            local kAbF = {
                                apply = function(xme)
                                    Selection.clear(Selection)

                                    for sqZtSeO, K4W6 in pairs(xme.fire)do
                                        Selection.add(Selection, K4W6.Parent)

                                        K4W6.Parent = nil
                                    end
                                end,
                                unapply = function(xme)
                                    Selection.clear(Selection)

                                    for R4qp7, _F71WhJ in pairs(xme.fire)do
                                        _F71WhJ.Parent = xme.fire_parents[_F71WhJ]

                                        Selection.add(Selection, _F71WhJ.Parent)
                                    end
                                end,
                            }
                            local h = xme.getFire(xme)
                            local GtezA0 = {}

                            for YciJj, CZ2Wt in pairs(h)do
                                GtezA0[CZ2Wt] = CZ2Wt.Parent
                                CZ2Wt.Parent = nil
                            end

                            kAbF.fire = h
                            kAbF.fire_parents = GtezA0

                            History.add(History, kAbF)
                        end
                        Tools.Decorate.addSparkles = function(rp3QaP)
                            local Anqa = {
                                apply = function(rp3QaP)
                                    Selection.clear(Selection)

                                    for C, wM4R in pairs(rp3QaP.sparkles)do
                                        wM4R.Parent = rp3QaP.sparkles_parents[wM4R]

                                        Selection.add(Selection, wM4R.Parent)
                                    end
                                end,
                                unapply = function(rp3QaP)
                                    Selection.clear(Selection)

                                    for sHOVr, v4D in pairs(rp3QaP.sparkles)do
                                        Selection.add(Selection, v4D.Parent)

                                        v4D.Parent = nil
                                    end
                                end,
                            }
                            local sDak1ecL = {}
                            local r = {}

                            for KBI_GdWx, XcV in pairs(Selection.Items)do
                                local yq_h4JT = Support.GetChildOfClass(XcV, 'Sparkles')

                                if not yq_h4JT then
                                    local yq_h4JT = RbxUtility.Create('Sparkles'){
                                        Parent = XcV,
                                        SparkleColor = Color3.new(1, 0, 0),
                                    }

                                    table.insert(sDak1ecL, yq_h4JT)

                                    r[yq_h4JT] = XcV
                                end
                            end

                            Anqa.sparkles = sDak1ecL
                            Anqa.sparkles_parents = r

                            History.add(History, Anqa)
                        end
                        Tools.Decorate.removeSparkles = function(Dde)
                            local RIc = {
                                apply = function(Dde)
                                    Selection.clear(Selection)

                                    for _neQ47D, scY in pairs(Dde.sparkles)do
                                        Selection.add(Selection, scY.Parent)

                                        scY.Parent = nil
                                    end
                                end,
                                unapply = function(Dde)
                                    Selection.clear(Selection)

                                    for H42, JLx in pairs(Dde.sparkles)do
                                        JLx.Parent = Dde.sparkles_parents[JLx]

                                        Selection.add(Selection, JLx.Parent)
                                    end
                                end,
                            }
                            local WL7T8_G = Dde.getSparkles(Dde)
                            local DN = {}

                            for vDPis1Y, pEV in pairs(WL7T8_G)do
                                DN[pEV] = pEV.Parent
                                pEV.Parent = nil
                            end

                            RIc.sparkles = WL7T8_G
                            RIc.sparkles_parents = DN

                            History.add(History, RIc)
                        end
                        Tools.Decorate.startHistoryRecord = function(
                            v1pCX6,
                            NK
                        )
                            if v1pCX6.State.HistoryRecord then
                                v1pCX6.State.HistoryRecord = nil
                            end

                            v1pCX6.State.HistoryRecord = {
                                targets = Support.CloneTable(NK),
                                initial_color = {},
                                terminal_color = {},
                                initial_2nd_color = {},
                                terminal_2nd_color = {},
                                initial_opacity = {},
                                terminal_opacity = {},
                                initial_velocity = {},
                                terminal_velocity = {},
                                initial_size = {},
                                terminal_size = {},
                                initial_heat = {},
                                terminal_heat = {},
                                unapply = function(v1pCX6)
                                    Selection.clear(Selection)

                                    for KNYh, STO_Hubw in pairs(v1pCX6.targets)do
                                        if STO_Hubw then
                                            Selection.add(Selection, STO_Hubw.Parent)

                                            if STO_Hubw.IsA(STO_Hubw, 'Sparkles') then
                                                STO_Hubw.SparkleColor = v1pCX6.initial_color[STO_Hubw]
                                            else
                                                STO_Hubw.Color = v1pCX6.initial_color[STO_Hubw]
                                                STO_Hubw.Size = v1pCX6.initial_size[STO_Hubw]
                                            end
                                            if STO_Hubw.IsA(STO_Hubw, 'Smoke') then
                                                STO_Hubw.Opacity = v1pCX6.initial_opacity[STO_Hubw]
                                                STO_Hubw.RiseVelocity = v1pCX6.initial_velocity[STO_Hubw]
                                            end
                                            if STO_Hubw.IsA(STO_Hubw, 'Fire') then
                                                STO_Hubw.SecondaryColor = v1pCX6.initial_2nd_color[STO_Hubw]
                                                STO_Hubw.Heat = v1pCX6.initial_heat[STO_Hubw]
                                            end
                                        end
                                    end
                                end,
                                apply = function(v1pCX6)
                                    Selection.clear(Selection)

                                    for S4jSoR, w in pairs(v1pCX6.targets)do
                                        if w then
                                            Selection.add(Selection, w.Parent)

                                            if w.IsA(w, 'Sparkles') then
                                                w.SparkleColor = v1pCX6.terminal_color[w]
                                            else
                                                w.Color = v1pCX6.terminal_color[w]
                                                w.Size = v1pCX6.terminal_size[w]
                                            end
                                            if w.IsA(w, 'Smoke') then
                                                w.Opacity = v1pCX6.terminal_opacity[w]
                                                w.RiseVelocity = v1pCX6.terminal_velocity[w]
                                            end
                                            if w.IsA(w, 'Fire') then
                                                w.SecondaryColor = v1pCX6.terminal_2nd_color[w]
                                                w.Heat = v1pCX6.terminal_heat[w]
                                            end
                                        end
                                    end
                                end,
                            }

                            for yX3j, bOwWOjQH in pairs(v1pCX6.State.HistoryRecord.targets)do
                                if bOwWOjQH then
                                    if bOwWOjQH.IsA(bOwWOjQH, 'Sparkles') then
                                        v1pCX6.State.HistoryRecord.initial_color[bOwWOjQH] = bOwWOjQH.SparkleColor
                                    else
                                        v1pCX6.State.HistoryRecord.initial_color[bOwWOjQH] = bOwWOjQH.Color
                                        v1pCX6.State.HistoryRecord.initial_size[bOwWOjQH] = bOwWOjQH.Size
                                    end
                                    if bOwWOjQH.IsA(bOwWOjQH, 'Smoke') then
                                        v1pCX6.State.HistoryRecord.initial_opacity[bOwWOjQH] = bOwWOjQH.Opacity
                                        v1pCX6.State.HistoryRecord.initial_velocity[bOwWOjQH] = bOwWOjQH.RiseVelocity
                                    end
                                    if bOwWOjQH.IsA(bOwWOjQH, 'Fire') then
                                        v1pCX6.State.HistoryRecord.initial_2nd_color[bOwWOjQH] = bOwWOjQH.SecondaryColor
                                        v1pCX6.State.HistoryRecord.initial_heat[bOwWOjQH] = bOwWOjQH.Heat
                                    end
                                end
                            end
                        end
                        Tools.Decorate.finishHistoryRecord = function(d)
                            if not d.State.HistoryRecord then
                                return
                            end

                            for pM6sO5R0, TF4nyv in pairs(d.State.HistoryRecord.targets)do
                                if TF4nyv then
                                    if TF4nyv.IsA(TF4nyv, 'Sparkles') then
                                        d.State.HistoryRecord.terminal_color[TF4nyv] = TF4nyv.SparkleColor
                                    else
                                        d.State.HistoryRecord.terminal_color[TF4nyv] = TF4nyv.Color
                                        d.State.HistoryRecord.terminal_size[TF4nyv] = TF4nyv.Size
                                    end
                                    if TF4nyv.IsA(TF4nyv, 'Smoke') then
                                        d.State.HistoryRecord.terminal_opacity[TF4nyv] = TF4nyv.Opacity
                                        d.State.HistoryRecord.terminal_velocity[TF4nyv] = TF4nyv.RiseVelocity
                                    end
                                    if TF4nyv.IsA(TF4nyv, 'Fire') then
                                        d.State.HistoryRecord.terminal_2nd_color[TF4nyv] = TF4nyv.SecondaryColor
                                        d.State.HistoryRecord.terminal_heat[TF4nyv] = TF4nyv.Heat
                                    end
                                end
                            end

                            History.add(History, d.State.HistoryRecord)

                            d.State.HistoryRecord = nil
                        end
                        Tools.Decorate.hideGUI = function(lilD_Ll)
                            if lilD_Ll.GUI then
                                lilD_Ll.GUI.Visible = false
                            end
                        end
                        Tools.Decorate.Loaded = true
                    end,
                },
            }

            if not _G.BTCoreEnv then
                _G.BTCoreEnv = {}
            end

            _G.BTCoreEnv.tool = getfenv(0)
            CoreReady = true

            for Q2jN, Y1v09ha in pairs(q)do
                Y1v09ha[2]()
            end
            for XWU, t in pairs(q)do
                if not Tools[t[1] ] then
                    repeat
                        wait()
                        print('is tool not hooking?')
                    until Tools[t[1] ]
                end

                repeat
                    wait()
                until Tools[t[1] ].Loaded
            end

            if ToolType == 'plugin' then
                local i = false

                ToolbarButton.Click:Connect(function()
                    if i then
                        i = false

                        unequipBT()
                    else
                        i = true

                        plugin.Activate(plugin, true)
                        equipBT(plugin.GetMouse(plugin))
                    end
                end)
                plugin.Deactivation:connect(unequipBT)
            elseif ToolType == 'tool' then
                Tool.Equipped:connect(equipBT)
                Tool.Unequipped:connect(unequipBT)
            end

            return true
        end

        __DARKLUA_BUNDLE_MODULES.a = function()
            local v = __DARKLUA_BUNDLE_MODULES.cache.a

            if not v then
                v = {
                    c = __modImpl(),
                }
                __DARKLUA_BUNDLE_MODULES.cache.a = v
            end

            return v.c
        end
    end
    do
        local function __modImpl()
            script = Instance.new('LocalScript')

            repeat
                wait()

                a = pcall(function()
                    game.WaitForChild(game, 'Players').LocalPlayer:WaitForChild('PlayerScripts').ChildAdded:Connect(function(
                        c
                    )
                        if c.Name == 'PlayerScriptsLoader' then
                            c.Disabled = true
                        end
                    end)
                end)

                if a == true then
                    break
                end
            until false

            game.WaitForChild(game, 'Players').LocalPlayer:WaitForChild('PlayerScripts').ChildAdded:Connect(function(
                c
            )
                if c.Name == 'PlayerScriptsLoader' then
                    c.Disabled = true
                end
            end)

            _CameraUI = function()
                local Players = game.GetService(game, 'Players')
                local TweenService = game.GetService(game, 'TweenService')
                local LocalPlayer = Players.LocalPlayer

                if not LocalPlayer then
                    Players.GetPropertyChangedSignal(Players, 'LocalPlayer'):Wait()

                    LocalPlayer = Players.LocalPlayer
                end

                local function waitForChildOfClass(parent, class)
                    local child = parent.FindFirstChildOfClass(parent, class)

                    while not child or child.ClassName ~= class do
                        child = parent.ChildAdded:Wait()
                    end

                    return child
                end

                local PlayerGui = waitForChildOfClass(LocalPlayer, 'PlayerGui')
                local TOAST_OPEN_SIZE = UDim2.new(0, 326, 0, 58)
                local TOAST_CLOSED_SIZE = UDim2.new(0, 80, 0, 58)
                local TOAST_BACKGROUND_COLOR = Color3.fromRGB(32, 32, 32)
                local TOAST_BACKGROUND_TRANS = 0.4
                local TOAST_FOREGROUND_COLOR = Color3.fromRGB(200, 200, 200)
                local TOAST_FOREGROUND_TRANS = 0

                local function create(className)
                    return function(props)
                        local inst = Instance.new(className)
                        local parent = props.Parent

                        props.Parent = nil

                        for name, val in pairs(props)do
                            if type(name) == 'string' then
                                inst[name] = val
                            else
                                val.Parent = inst
                            end
                        end

                        inst.Parent = parent

                        return inst
                    end
                end

                local initialized = false
                local uiRoot
                local toast
                local toastIcon
                local toastUpperText
                local toastLowerText

                local function initializeUI()
                    assert(not initialized)

                    uiRoot = create('ScreenGui'){
                        Name = 'RbxCameraUI',
                        AutoLocalize = false,
                        Enabled = true,
                        DisplayOrder = -1,
                        IgnoreGuiInset = false,
                        ResetOnSpawn = false,
                        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
                        create('ImageLabel'){
                            Name = 'Toast',
                            Visible = false,
                            AnchorPoint = Vector2.new(0.5, 0),
                            BackgroundTransparency = 1,
                            BorderSizePixel = 0,
                            Position = UDim2.new(0.5, 0, 0, 8),
                            Size = TOAST_CLOSED_SIZE,
                            Image = 'rbxasset://textures/ui/Camera/CameraToast9Slice.png',
                            ImageColor3 = TOAST_BACKGROUND_COLOR,
                            ImageRectSize = Vector2.new(6, 6),
                            ImageTransparency = 1,
                            ScaleType = Enum.ScaleType.Slice,
                            SliceCenter = Rect.new(3, 3, 3, 3),
                            ClipsDescendants = true,
                            create('Frame'){
                                Name = 'IconBuffer',
                                BackgroundTransparency = 1,
                                BorderSizePixel = 0,
                                Position = UDim2.new(0, 0, 0, 0),
                                Size = UDim2.new(0, 80, 1, 0),
                                create('ImageLabel'){
                                    Name = 'Icon',
                                    AnchorPoint = Vector2.new(0.5, 0.5),
                                    BackgroundTransparency = 1,
                                    Position = UDim2.new(0.5, 0, 0.5, 0),
                                    Size = UDim2.new(0, 48, 0, 48),
                                    ZIndex = 2,
                                    Image = 'rbxasset://textures/ui/Camera/CameraToastIcon.png',
                                    ImageColor3 = TOAST_FOREGROUND_COLOR,
                                    ImageTransparency = 1,
                                },
                            },
                            create('Frame'){
                                Name = 'TextBuffer',
                                BackgroundTransparency = 1,
                                BorderSizePixel = 0,
                                Position = UDim2.new(0, 80, 0, 0),
                                Size = UDim2.new(1, -80, 1, 0),
                                ClipsDescendants = true,
                                create('TextLabel'){
                                    Name = 'Upper',
                                    AnchorPoint = Vector2.new(0, 1),
                                    BackgroundTransparency = 1,
                                    Position = UDim2.new(0, 0, 0.5, 0),
                                    Size = UDim2.new(1, 0, 0, 19),
                                    Font = Enum.Font.GothamSemibold,
                                    Text = 'Camera control enabled',
                                    TextColor3 = TOAST_FOREGROUND_COLOR,
                                    TextTransparency = 1,
                                    TextSize = 19,
                                    TextXAlignment = Enum.TextXAlignment.Left,
                                    TextYAlignment = Enum.TextYAlignment.Center,
                                },
                                create('TextLabel'){
                                    Name = 'Lower',
                                    AnchorPoint = Vector2.new(0, 0),
                                    BackgroundTransparency = 1,
                                    Position = UDim2.new(0, 0, 0.5, 3),
                                    Size = UDim2.new(1, 0, 0, 15),
                                    Font = Enum.Font.Gotham,
                                    Text = 'Right mouse button to toggle',
                                    TextColor3 = TOAST_FOREGROUND_COLOR,
                                    TextTransparency = 1,
                                    TextSize = 15,
                                    TextXAlignment = Enum.TextXAlignment.Left,
                                    TextYAlignment = Enum.TextYAlignment.Center,
                                },
                            },
                        },
                        Parent = PlayerGui,
                    }
                    toast = uiRoot.Toast
                    toastIcon = toast.IconBuffer.Icon
                    toastUpperText = toast.TextBuffer.Upper
                    toastLowerText = toast.TextBuffer.Lower
                    initialized = true
                end

                local CameraUI = {}

                do
                    CameraUI.setCameraModeToastEnabled = function(enabled)
                        if not enabled and not initialized then
                            return
                        end
                        if not initialized then
                            initializeUI()
                        end

                        toast.Visible = enabled

                        if not enabled then
                            CameraUI.setCameraModeToastOpen(false)
                        end
                    end

                    local tweenInfo = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

                    CameraUI.setCameraModeToastOpen = function(open)
                        assert(initialized)
                        TweenService.Create(TweenService, toast, tweenInfo, {
                            Size = open and TOAST_OPEN_SIZE or TOAST_CLOSED_SIZE,
                            ImageTransparency = open and TOAST_BACKGROUND_TRANS or 1,
                        }):Play()
                        TweenService.Create(TweenService, toastIcon, tweenInfo, {
                            ImageTransparency = open and TOAST_FOREGROUND_TRANS or 1,
                        }):Play()
                        TweenService.Create(TweenService, toastUpperText, tweenInfo, {
                            TextTransparency = open and TOAST_FOREGROUND_TRANS or 1,
                        }):Play()
                        TweenService.Create(TweenService, toastLowerText, tweenInfo, {
                            TextTransparency = open and TOAST_FOREGROUND_TRANS or 1,
                        }):Play()
                    end
                end

                return CameraUI
            end
            _CameraToggleStateController = function()
                local Players = game.GetService(game, 'Players')
                local UserInputService = game.GetService(game, 'UserInputService')
                local GameSettings = UserSettings():GetService('UserGameSettings')
                local LocalPlayer = Players.LocalPlayer

                if not LocalPlayer then
                    Players.GetPropertyChangedSignal(Players, 'LocalPlayer'):Wait()

                    LocalPlayer = Players.LocalPlayer
                end

                local Mouse = LocalPlayer.GetMouse(LocalPlayer)
                local Input = _CameraInput()
                local CameraUI = _CameraUI()
                local lastTogglePan = false
                local lastTogglePanChange = tick()
                local CROSS_MOUSE_ICON = 'rbxasset://textures/Cursors/CrossMouseIcon.png'
                local lockStateDirty = false
                local wasTogglePanOnTheLastTimeYouWentIntoFirstPerson = false
                local lastFirstPerson = false

                CameraUI.setCameraModeToastEnabled(false)

                return function(isFirstPerson)
                    local togglePan = Input.getTogglePan()
                    local toastTimeout = 3

                    if isFirstPerson and togglePan ~= lastTogglePan then
                        lockStateDirty = true
                    end
                    if lastTogglePan ~= togglePan or tick() - lastTogglePanChange > toastTimeout then
                        local doShow = togglePan and tick() - lastTogglePanChange < toastTimeout

                        CameraUI.setCameraModeToastOpen(doShow)

                        if togglePan then
                            lockStateDirty = false
                        end

                        lastTogglePanChange = tick()
                        lastTogglePan = togglePan
                    end
                    if isFirstPerson ~= lastFirstPerson then
                        if isFirstPerson then
                            wasTogglePanOnTheLastTimeYouWentIntoFirstPerson = Input.getTogglePan()

                            Input.setTogglePan(true)
                        elseif not lockStateDirty then
                            Input.setTogglePan(wasTogglePanOnTheLastTimeYouWentIntoFirstPerson)
                        end
                    end
                    if isFirstPerson then
                        if Input.getTogglePan() then
                            Mouse.Icon = CROSS_MOUSE_ICON
                            UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
                        else
                            Mouse.Icon = ''
                            UserInputService.MouseBehavior = Enum.MouseBehavior.Default
                        end
                    elseif Input.getTogglePan() then
                        Mouse.Icon = CROSS_MOUSE_ICON
                        UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
                        GameSettings.RotationType = Enum.RotationType.MovementRelative
                    elseif Input.getHoldPan() then
                        Mouse.Icon = ''
                        UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
                        GameSettings.RotationType = Enum.RotationType.MovementRelative
                    else
                        Mouse.Icon = ''
                        UserInputService.MouseBehavior = Enum.MouseBehavior.Default
                        GameSettings.RotationType = Enum.RotationType.MovementRelative
                    end

                    lastFirstPerson = isFirstPerson
                end
            end
            _CameraInput = function()
                local UserInputService = game.GetService(game, 'UserInputService')
                local MB_TAP_LENGTH = 0.3
                local rmbDown, rmbUp

                do
                    local rmbDownBindable = Instance.new('BindableEvent')
                    local rmbUpBindable = Instance.new('BindableEvent')

                    rmbDown = rmbDownBindable.Event
                    rmbUp = rmbUpBindable.Event

                    UserInputService.InputBegan:Connect(function(input, gpe)
                        if not gpe and input.UserInputType == Enum.UserInputType.MouseButton2 then
                            rmbDownBindable.Fire(rmbDownBindable)
                        end
                    end)
                    UserInputService.InputEnded:Connect(function(input, gpe)
                        if input.UserInputType == Enum.UserInputType.MouseButton2 then
                            rmbUpBindable.Fire(rmbUpBindable)
                        end
                    end)
                end

                local holdPan = false
                local togglePan = false
                local lastRmbDown = 0
                local CameraInput = {}

                CameraInput.getHoldPan = function()
                    return holdPan
                end
                CameraInput.getTogglePan = function()
                    return togglePan
                end
                CameraInput.getPanning = function()
                    return togglePan or holdPan
                end
                CameraInput.setTogglePan = function(value)
                    togglePan = value
                end

                local cameraToggleInputEnabled = false
                local rmbDownConnection
                local rmbUpConnection

                CameraInput.enableCameraToggleInput = function()
                    if cameraToggleInputEnabled then
                        return
                    end

                    cameraToggleInputEnabled = true
                    holdPan = false
                    togglePan = false

                    if rmbDownConnection then
                        rmbDownConnection.Disconnect(rmbDownConnection)
                    end
                    if rmbUpConnection then
                        rmbUpConnection.Disconnect(rmbUpConnection)
                    end

                    rmbDownConnection = rmbDown.Connect(rmbDown, function()
                        holdPan = true
                        lastRmbDown = tick()
                    end)
                    rmbUpConnection = rmbUp.Connect(rmbUp, function()
                        holdPan = false

                        if tick() - lastRmbDown < MB_TAP_LENGTH and (togglePan or UserInputService.GetMouseDelta(UserInputService).Magnitude < 2) then
                            togglePan = not togglePan
                        end
                    end)
                end
                CameraInput.disableCameraToggleInput = function()
                    if not cameraToggleInputEnabled then
                        return
                    end

                    cameraToggleInputEnabled = false

                    if rmbDownConnection then
                        rmbDownConnection.Disconnect(rmbDownConnection)

                        rmbDownConnection = nil
                    end
                    if rmbUpConnection then
                        rmbUpConnection.Disconnect(rmbUpConnection)

                        rmbUpConnection = nil
                    end
                end

                return CameraInput
            end
            _BaseCamera = function()
                local UNIT_Z = Vector3.new(0, 0, 1)
                local X1_Y0_Z1 = Vector3.new(1, 0, 1)
                local THUMBSTICK_DEADZONE = 0.2
                local DEFAULT_DISTANCE = 12.5
                local PORTRAIT_DEFAULT_DISTANCE = 25
                local FIRST_PERSON_DISTANCE_THRESHOLD = 1
                local CAMERA_ACTION_PRIORITY = Enum.ContextActionPriority.Default.Value
                local MIN_Y = math.rad(-80)
                local MAX_Y = math.rad(80)
                local TOUCH_ADJUST_AREA_UP = math.rad(30)
                local TOUCH_ADJUST_AREA_DOWN = math.rad(-15)
                local TOUCH_SENSITIVTY_ADJUST_MAX_Y = 2.1
                local TOUCH_SENSITIVTY_ADJUST_MIN_Y = 0.5
                local VR_ANGLE = math.rad(15)
                local VR_LOW_INTENSITY_ROTATION = Vector2.new(math.rad(15), 0)
                local VR_HIGH_INTENSITY_ROTATION = Vector2.new(math.rad(45), 0)
                local VR_LOW_INTENSITY_REPEAT = 0.1
                local VR_HIGH_INTENSITY_REPEAT = 0.4
                local ZERO_VECTOR2 = Vector2.new(0, 0)
                local ZERO_VECTOR3 = Vector3.new(0, 0, 0)
                local TOUCH_SENSITIVTY = Vector2.new(0.00945 * math.pi, 0.003375 * math.pi)
                local MOUSE_SENSITIVITY = Vector2.new(0.002 * math.pi, 0.0015 * math.pi)
                local SEAT_OFFSET = Vector3.new(0, 5, 0)
                local VR_SEAT_OFFSET = Vector3.new(0, 4, 0)
                local HEAD_OFFSET = Vector3.new(0, 1.5, 0)
                local R15_HEAD_OFFSET = Vector3.new(0, 1.5, 0)
                local R15_HEAD_OFFSET_NO_SCALING = Vector3.new(0, 2, 0)
                local HUMANOID_ROOT_PART_SIZE = Vector3.new(2, 2, 1)
                local GAMEPAD_ZOOM_STEP_1 = 0
                local GAMEPAD_ZOOM_STEP_2 = 10
                local GAMEPAD_ZOOM_STEP_3 = 20
                local PAN_SENSITIVITY = 20
                local ZOOM_SENSITIVITY_CURVATURE = 0.5
                local abs = math.abs
                local sign = math.sign
                local FFlagUserCameraToggle

                do
                    local success, result = pcall(function()
                        return UserSettings():IsUserFeatureEnabled('UserCameraToggle')
                    end)

                    FFlagUserCameraToggle = success and result
                end

                local FFlagUserDontAdjustSensitvityForPortrait

                do
                    local success, result = pcall(function()
                        return UserSettings():IsUserFeatureEnabled('UserDontAdjustSensitvityForPortrait')
                    end)

                    FFlagUserDontAdjustSensitvityForPortrait = success and result
                end

                local FFlagUserFixZoomInZoomOutDiscrepancy

                do
                    local success, result = pcall(function()
                        return UserSettings():IsUserFeatureEnabled('UserFixZoomInZoomOutDiscrepancy')
                    end)

                    FFlagUserFixZoomInZoomOutDiscrepancy = success and result
                end

                local Util = _CameraUtils()
                local ZoomController = _ZoomController()
                local CameraToggleStateController = _CameraToggleStateController()
                local CameraInput = _CameraInput()
                local CameraUI = _CameraUI()
                local Players = game.GetService(game, 'Players')
                local UserInputService = game.GetService(game, 'UserInputService')
                local StarterGui = game.GetService(game, 'StarterGui')
                local GuiService = game.GetService(game, 'GuiService')
                local ContextActionService = game.GetService(game, 'ContextActionService')
                local VRService = game.GetService(game, 'VRService')
                local UserGameSettings = UserSettings():GetService('UserGameSettings')
                local player = Players.LocalPlayer
                local BaseCamera = {}

                BaseCamera.__index = BaseCamera
                BaseCamera.new = function()
                    local self = setmetatable({}, BaseCamera)

                    self.FIRST_PERSON_DISTANCE_THRESHOLD = FIRST_PERSON_DISTANCE_THRESHOLD
                    self.cameraType = nil
                    self.cameraMovementMode = nil
                    self.lastCameraTransform = nil
                    self.rotateInput = ZERO_VECTOR2
                    self.userPanningCamera = false
                    self.lastUserPanCamera = tick()
                    self.humanoidRootPart = nil
                    self.humanoidCache = {}
                    self.lastSubject = nil
                    self.lastSubjectPosition = Vector3.new(0, 5, 0)
                    self.defaultSubjectDistance = math.clamp(DEFAULT_DISTANCE, player.CameraMinZoomDistance, player.CameraMaxZoomDistance)
                    self.currentSubjectDistance = math.clamp(DEFAULT_DISTANCE, player.CameraMinZoomDistance, player.CameraMaxZoomDistance)
                    self.inFirstPerson = false
                    self.inMouseLockedMode = false
                    self.portraitMode = false
                    self.isSmallTouchScreen = false
                    self.resetCameraAngle = true
                    self.enabled = false
                    self.inputBeganConn = nil
                    self.inputChangedConn = nil
                    self.inputEndedConn = nil
                    self.startPos = nil
                    self.lastPos = nil
                    self.panBeginLook = nil
                    self.panEnabled = true
                    self.keyPanEnabled = true
                    self.distanceChangeEnabled = true
                    self.PlayerGui = nil
                    self.cameraChangedConn = nil
                    self.viewportSizeChangedConn = nil
                    self.boundContextActions = {}
                    self.shouldUseVRRotation = false
                    self.VRRotationIntensityAvailable = false
                    self.lastVRRotationIntensityCheckTime = 0
                    self.lastVRRotationTime = 0
                    self.vrRotateKeyCooldown = {}
                    self.cameraTranslationConstraints = Vector3.new(1, 1, 1)
                    self.humanoidJumpOrigin = nil
                    self.trackingHumanoid = nil
                    self.cameraFrozen = false
                    self.subjectStateChangedConn = nil
                    self.activeGamepad = nil
                    self.gamepadPanningCamera = false
                    self.lastThumbstickRotate = nil
                    self.numOfSeconds = 0.7
                    self.currentSpeed = 0
                    self.maxSpeed = 6
                    self.vrMaxSpeed = 4
                    self.lastThumbstickPos = Vector2.new(0, 0)
                    self.ySensitivity = 0.65
                    self.lastVelocity = nil
                    self.gamepadConnectedConn = nil
                    self.gamepadDisconnectedConn = nil
                    self.currentZoomSpeed = 1
                    self.L3ButtonDown = false
                    self.dpadLeftDown = false
                    self.dpadRightDown = false
                    self.isDynamicThumbstickEnabled = false
                    self.fingerTouches = {}
                    self.dynamicTouchInput = nil
                    self.numUnsunkTouches = 0
                    self.inputStartPositions = {}
                    self.inputStartTimes = {}
                    self.startingDiff = nil
                    self.pinchBeginZoom = nil
                    self.userPanningTheCamera = false
                    self.touchActivateConn = nil
                    self.mouseLockOffset = ZERO_VECTOR3

                    if player.Character then
                        self.OnCharacterAdded(self, player.Character)
                    end

                    player.CharacterAdded:Connect(function(char)
                        self.OnCharacterAdded(self, char)
                    end)

                    if self.cameraChangedConn then
                        self.cameraChangedConn:Disconnect()
                    end

                    self.cameraChangedConn = workspace.GetPropertyChangedSignal(workspace, 'CurrentCamera'):Connect(function(
                    )
                        self.OnCurrentCameraChanged(self)
                    end)

                    self.OnCurrentCameraChanged(self)

                    if self.playerCameraModeChangeConn then
                        self.playerCameraModeChangeConn:Disconnect()
                    end

                    self.playerCameraModeChangeConn = player.GetPropertyChangedSignal(player, 'CameraMode'):Connect(function(
                    )
                        self.OnPlayerCameraPropertyChange(self)
                    end)

                    if self.minDistanceChangeConn then
                        self.minDistanceChangeConn:Disconnect()
                    end

                    self.minDistanceChangeConn = player.GetPropertyChangedSignal(player, 'CameraMinZoomDistance'):Connect(function(
                    )
                        self.OnPlayerCameraPropertyChange(self)
                    end)

                    if self.maxDistanceChangeConn then
                        self.maxDistanceChangeConn:Disconnect()
                    end

                    self.maxDistanceChangeConn = player.GetPropertyChangedSignal(player, 'CameraMaxZoomDistance'):Connect(function(
                    )
                        self.OnPlayerCameraPropertyChange(self)
                    end)

                    if self.playerDevTouchMoveModeChangeConn then
                        self.playerDevTouchMoveModeChangeConn:Disconnect()
                    end

                    self.playerDevTouchMoveModeChangeConn = player.GetPropertyChangedSignal(player, 'DevTouchMovementMode'):Connect(function(
                    )
                        self.OnDevTouchMovementModeChanged(self)
                    end)

                    self.OnDevTouchMovementModeChanged(self)

                    if self.gameSettingsTouchMoveMoveChangeConn then
                        self.gameSettingsTouchMoveMoveChangeConn:Disconnect()
                    end

                    self.gameSettingsTouchMoveMoveChangeConn = UserGameSettings.GetPropertyChangedSignal(UserGameSettings, 'TouchMovementMode'):Connect(function(
                    )
                        self.OnGameSettingsTouchMovementModeChanged(self)
                    end)

                    self.OnGameSettingsTouchMovementModeChanged(self)
                    UserGameSettings.SetCameraYInvertVisible(UserGameSettings)
                    UserGameSettings.SetGamepadCameraSensitivityVisible(UserGameSettings)

                    self.hasGameLoaded = game.IsLoaded(game)

                    if not self.hasGameLoaded then
                        self.gameLoadedConn = game.Loaded:Connect(function()
                            self.hasGameLoaded = true

                            self.gameLoadedConn:Disconnect()

                            self.gameLoadedConn = nil
                        end)
                    end

                    self.OnPlayerCameraPropertyChange(self)

                    return self
                end
                BaseCamera.GetModuleName = function(self)
                    return 'BaseCamera'
                end
                BaseCamera.OnCharacterAdded = function(self, char)
                    self.resetCameraAngle = self.resetCameraAngle or self.GetEnabled(self)
                    self.humanoidRootPart = nil

                    if UserInputService.TouchEnabled then
                        self.PlayerGui = player.WaitForChild(player, 'PlayerGui')

                        for _, child in ipairs(char.GetChildren(char))do
                            if child.IsA(child, 'Tool') then
                                self.isAToolEquipped = true
                            end
                        end

                        char.ChildAdded:Connect(function(child)
                            if child.IsA(child, 'Tool') then
                                self.isAToolEquipped = true
                            end
                        end)
                        char.ChildRemoved:Connect(function(child)
                            if child.IsA(child, 'Tool') then
                                self.isAToolEquipped = false
                            end
                        end)
                    end
                end
                BaseCamera.GetHumanoidRootPart = function(self)
                    if not self.humanoidRootPart then
                        if player.Character then
                            local humanoid = player.Character:FindFirstChildOfClass('Humanoid')

                            if humanoid then
                                self.humanoidRootPart = humanoid.RootPart
                            end
                        end
                    end

                    return self.humanoidRootPart
                end
                BaseCamera.GetBodyPartToFollow = function(
                    self,
                    humanoid,
                    isDead
                )
                    if humanoid.GetState(humanoid) == Enum.HumanoidStateType.Dead then
                        local character = humanoid.Parent

                        if character and character.IsA(character, 'Model') then
                            return character.FindFirstChild(character, 'Head') or humanoid.RootPart
                        end
                    end

                    return humanoid.RootPart
                end
                BaseCamera.GetSubjectPosition = function(self)
                    local result = self.lastSubjectPosition
                    local camera = game.Workspace.CurrentCamera
                    local cameraSubject = camera and camera.CameraSubject

                    if cameraSubject then
                        if cameraSubject.IsA(cameraSubject, 'Humanoid') then
                            local humanoid = cameraSubject
                            local humanoidIsDead = humanoid.GetState(humanoid) == Enum.HumanoidStateType.Dead

                            if VRService.VREnabled and humanoidIsDead and humanoid == self.lastSubject then
                                result = self.lastSubjectPosition
                            else
                                local bodyPartToFollow = humanoid.RootPart

                                if humanoidIsDead then
                                    if humanoid.Parent and humanoid.Parent:IsA('Model') then
                                        bodyPartToFollow = humanoid.Parent:FindFirstChild('Head') or bodyPartToFollow
                                    end
                                end
                                if bodyPartToFollow and bodyPartToFollow.IsA(bodyPartToFollow, 'BasePart') then
                                    local heightOffset

                                    if humanoid.RigType == Enum.HumanoidRigType.R15 then
                                        if humanoid.AutomaticScalingEnabled then
                                            heightOffset = R15_HEAD_OFFSET

                                            if bodyPartToFollow == humanoid.RootPart then
                                                local rootPartSizeOffset = (humanoid.RootPart.Size.Y / 2) - (HUMANOID_ROOT_PART_SIZE.Y / 2)

                                                heightOffset = heightOffset + Vector3.new(0, rootPartSizeOffset, 0)
                                            end
                                        else
                                            heightOffset = R15_HEAD_OFFSET_NO_SCALING
                                        end
                                    else
                                        heightOffset = HEAD_OFFSET
                                    end
                                    if humanoidIsDead then
                                        heightOffset = ZERO_VECTOR3
                                    end

                                    result = bodyPartToFollow.CFrame.p + bodyPartToFollow.CFrame:vectorToWorldSpace(heightOffset + humanoid.CameraOffset)
                                end
                            end
                        elseif cameraSubject.IsA(cameraSubject, 'VehicleSeat') then
                            local offset = SEAT_OFFSET

                            if VRService.VREnabled then
                                offset = VR_SEAT_OFFSET
                            end

                            result = cameraSubject.CFrame.p + cameraSubject.CFrame:vectorToWorldSpace(offset)
                        elseif cameraSubject.IsA(cameraSubject, 'SkateboardPlatform') then
                            result = cameraSubject.CFrame.p + SEAT_OFFSET
                        elseif cameraSubject.IsA(cameraSubject, 'BasePart') then
                            result = cameraSubject.CFrame.p
                        elseif cameraSubject.IsA(cameraSubject, 'Model') then
                            if cameraSubject.PrimaryPart then
                                result = cameraSubject.GetPrimaryPartCFrame(cameraSubject).p
                            else
                                result = cameraSubject.GetModelCFrame(cameraSubject).p
                            end
                        end
                    else
                        return
                    end

                    self.lastSubject = cameraSubject
                    self.lastSubjectPosition = result

                    return result
                end
                BaseCamera.UpdateDefaultSubjectDistance = function(self)
                    if self.portraitMode then
                        self.defaultSubjectDistance = math.clamp(PORTRAIT_DEFAULT_DISTANCE, player.CameraMinZoomDistance, player.CameraMaxZoomDistance)
                    else
                        self.defaultSubjectDistance = math.clamp(DEFAULT_DISTANCE, player.CameraMinZoomDistance, player.CameraMaxZoomDistance)
                    end
                end
                BaseCamera.OnViewportSizeChanged = function(self)
                    local camera = game.Workspace.CurrentCamera
                    local size = camera.ViewportSize

                    self.portraitMode = size.X < size.Y
                    self.isSmallTouchScreen = UserInputService.TouchEnabled and (size.Y < 500 or size.X < 700)

                    self.UpdateDefaultSubjectDistance(self)
                end
                BaseCamera.OnCurrentCameraChanged = function(self)
                    if UserInputService.TouchEnabled then
                        if self.viewportSizeChangedConn then
                            self.viewportSizeChangedConn:Disconnect()

                            self.viewportSizeChangedConn = nil
                        end

                        local newCamera = game.Workspace.CurrentCamera

                        if newCamera then
                            self.OnViewportSizeChanged(self)

                            self.viewportSizeChangedConn = newCamera.GetPropertyChangedSignal(newCamera, 'ViewportSize'):Connect(function(
                            )
                                self.OnViewportSizeChanged(self)
                            end)
                        end
                    end
                    if self.cameraSubjectChangedConn then
                        self.cameraSubjectChangedConn:Disconnect()

                        self.cameraSubjectChangedConn = nil
                    end

                    local camera = game.Workspace.CurrentCamera

                    if camera then
                        self.cameraSubjectChangedConn = camera.GetPropertyChangedSignal(camera, 'CameraSubject'):Connect(function(
                        )
                            self.OnNewCameraSubject(self)
                        end)

                        self.OnNewCameraSubject(self)
                    end
                end
                BaseCamera.OnDynamicThumbstickEnabled = function(self)
                    if UserInputService.TouchEnabled then
                        self.isDynamicThumbstickEnabled = true
                    end
                end
                BaseCamera.OnDynamicThumbstickDisabled = function(self)
                    self.isDynamicThumbstickEnabled = false
                end
                BaseCamera.OnGameSettingsTouchMovementModeChanged = function(
                    self
                )
                    if player.DevTouchMovementMode == Enum.DevTouchMovementMode.UserChoice then
                        if (UserGameSettings.TouchMovementMode == Enum.TouchMovementMode.DynamicThumbstick or UserGameSettings.TouchMovementMode == Enum.TouchMovementMode.Default) then
                            self.OnDynamicThumbstickEnabled(self)
                        else
                            self.OnDynamicThumbstickDisabled(self)
                        end
                    end
                end
                BaseCamera.OnDevTouchMovementModeChanged = function(self)
                    if player.DevTouchMovementMode.Name == 'DynamicThumbstick' then
                        self.OnDynamicThumbstickEnabled(self)
                    else
                        self.OnGameSettingsTouchMovementModeChanged(self)
                    end
                end
                BaseCamera.OnPlayerCameraPropertyChange = function(self)
                    self.SetCameraToSubjectDistance(self, self.currentSubjectDistance)
                end
                BaseCamera.GetCameraHeight = function(self)
                    if VRService.VREnabled and not self.inFirstPerson then
                        return math.sin(VR_ANGLE) * self.currentSubjectDistance
                    end

                    return 0
                end
                BaseCamera.InputTranslationToCameraAngleChange = function(
                    self,
                    translationVector,
                    sensitivity
                )
                    if not FFlagUserDontAdjustSensitvityForPortrait then
                        local camera = game.Workspace.CurrentCamera

                        if camera and camera.ViewportSize.X > 0 and camera.ViewportSize.Y > 0 and (camera.ViewportSize.Y > camera.ViewportSize.X) then
                            return translationVector * Vector2.new(sensitivity.Y, sensitivity.X)
                        end
                    end

                    return translationVector * sensitivity
                end
                BaseCamera.Enable = function(self, enable)
                    if self.enabled ~= enable then
                        self.enabled = enable

                        if self.enabled then
                            self.ConnectInputEvents(self)
                            self.BindContextActions(self)

                            if player.CameraMode == Enum.CameraMode.LockFirstPerson then
                                self.currentSubjectDistance = 0.5

                                if not self.inFirstPerson then
                                    self.EnterFirstPerson(self)
                                end
                            end
                        else
                            self.DisconnectInputEvents(self)
                            self.UnbindContextActions(self)
                            self.Cleanup(self)
                        end
                    end
                end
                BaseCamera.GetEnabled = function(self)
                    return self.enabled
                end
                BaseCamera.OnInputBegan = function(self, input, processed)
                    if input.UserInputType == Enum.UserInputType.Touch then
                        self.OnTouchBegan(self, input, processed)
                    elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
                        self.OnMouse2Down(self, input, processed)
                    elseif input.UserInputType == Enum.UserInputType.MouseButton3 then
                        self.OnMouse3Down(self, input, processed)
                    end
                end
                BaseCamera.OnInputChanged = function(self, input, processed)
                    if input.UserInputType == Enum.UserInputType.Touch then
                        self.OnTouchChanged(self, input, processed)
                    elseif input.UserInputType == Enum.UserInputType.MouseMovement then
                        self.OnMouseMoved(self, input, processed)
                    end
                end
                BaseCamera.OnInputEnded = function(self, input, processed)
                    if input.UserInputType == Enum.UserInputType.Touch then
                        self.OnTouchEnded(self, input, processed)
                    elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
                        self.OnMouse2Up(self, input, processed)
                    elseif input.UserInputType == Enum.UserInputType.MouseButton3 then
                        self.OnMouse3Up(self, input, processed)
                    end
                end
                BaseCamera.OnPointerAction = function(
                    self,
                    wheel,
                    pan,
                    pinch,
                    processed
                )
                    if processed then
                        return
                    end
                    if pan.Magnitude > 0 then
                        local inversionVector = Vector2.new(1, UserGameSettings.GetCameraYInvertValue(UserGameSettings))
                        local rotateDelta = self.InputTranslationToCameraAngleChange(self, PAN_SENSITIVITY * pan, MOUSE_SENSITIVITY) * inversionVector

                        self.rotateInput = self.rotateInput + rotateDelta
                    end

                    local zoom = self.currentSubjectDistance
                    local zoomDelta = -(wheel + pinch)

                    if abs(zoomDelta) > 0 then
                        local newZoom

                        if self.inFirstPerson and zoomDelta > 0 then
                            newZoom = FIRST_PERSON_DISTANCE_THRESHOLD
                        else
                            if FFlagUserFixZoomInZoomOutDiscrepancy then
                                if (zoomDelta > 0) then
                                    newZoom = zoom + zoomDelta * (1 + zoom * ZOOM_SENSITIVITY_CURVATURE)
                                else
                                    newZoom = (zoom + zoomDelta) / (1 - zoomDelta * ZOOM_SENSITIVITY_CURVATURE)
                                end
                            else
                                newZoom = zoom + zoomDelta * (1 + zoom * ZOOM_SENSITIVITY_CURVATURE)
                            end
                        end

                        self.SetCameraToSubjectDistance(self, newZoom)
                    end
                end
                BaseCamera.ConnectInputEvents = function(self)
                    self.pointerActionConn = UserInputService.PointerAction:Connect(function(
                        wheel,
                        pan,
                        pinch,
                        processed
                    )
                        self.OnPointerAction(self, wheel, pan, pinch, processed)
                    end)
                    self.inputBeganConn = UserInputService.InputBegan:Connect(function(
                        input,
                        processed
                    )
                        self.OnInputBegan(self, input, processed)
                    end)
                    self.inputChangedConn = UserInputService.InputChanged:Connect(function(
                        input,
                        processed
                    )
                        self.OnInputChanged(self, input, processed)
                    end)
                    self.inputEndedConn = UserInputService.InputEnded:Connect(function(
                        input,
                        processed
                    )
                        self.OnInputEnded(self, input, processed)
                    end)
                    self.menuOpenedConn = GuiService.MenuOpened:connect(function(
                    )
                        self.ResetInputStates(self)
                    end)
                    self.gamepadConnectedConn = UserInputService.GamepadDisconnected:connect(function(
                        gamepadEnum
                    )
                        if self.activeGamepad ~= gamepadEnum then
                            return
                        end

                        self.activeGamepad = nil

                        self.AssignActivateGamepad(self)
                    end)
                    self.gamepadDisconnectedConn = UserInputService.GamepadConnected:connect(function(
                        gamepadEnum
                    )
                        if self.activeGamepad == nil then
                            self.AssignActivateGamepad(self)
                        end
                    end)

                    self.AssignActivateGamepad(self)

                    if not FFlagUserCameraToggle then
                        self.UpdateMouseBehavior(self)
                    end
                end
                BaseCamera.BindContextActions = function(self)
                    self.BindGamepadInputActions(self)
                    self.BindKeyboardInputActions(self)
                end
                BaseCamera.AssignActivateGamepad = function(self)
                    local connectedGamepads = UserInputService.GetConnectedGamepads(UserInputService)

                    if #connectedGamepads > 0 then
                        for i = 1, #connectedGamepads do
                            if self.activeGamepad == nil then
                                self.activeGamepad = connectedGamepads[i]
                            elseif connectedGamepads[i].Value < self.activeGamepad.Value then
                                self.activeGamepad = connectedGamepads[i]
                            end
                        end
                    end
                    if self.activeGamepad == nil then
                        self.activeGamepad = Enum.UserInputType.Gamepad1
                    end
                end
                BaseCamera.DisconnectInputEvents = function(self)
                    if self.inputBeganConn then
                        self.inputBeganConn:Disconnect()

                        self.inputBeganConn = nil
                    end
                    if self.inputChangedConn then
                        self.inputChangedConn:Disconnect()

                        self.inputChangedConn = nil
                    end
                    if self.inputEndedConn then
                        self.inputEndedConn:Disconnect()

                        self.inputEndedConn = nil
                    end
                end
                BaseCamera.UnbindContextActions = function(self)
                    for i = 1, #self.boundContextActions do
                        ContextActionService.UnbindAction(ContextActionService, self.boundContextActions[i])
                    end

                    self.boundContextActions = {}
                end
                BaseCamera.Cleanup = function(self)
                    if self.pointerActionConn then
                        self.pointerActionConn:Disconnect()

                        self.pointerActionConn = nil
                    end
                    if self.menuOpenedConn then
                        self.menuOpenedConn:Disconnect()

                        self.menuOpenedConn = nil
                    end
                    if self.mouseLockToggleConn then
                        self.mouseLockToggleConn:Disconnect()

                        self.mouseLockToggleConn = nil
                    end
                    if self.gamepadConnectedConn then
                        self.gamepadConnectedConn:Disconnect()

                        self.gamepadConnectedConn = nil
                    end
                    if self.gamepadDisconnectedConn then
                        self.gamepadDisconnectedConn:Disconnect()

                        self.gamepadDisconnectedConn = nil
                    end
                    if self.subjectStateChangedConn then
                        self.subjectStateChangedConn:Disconnect()

                        self.subjectStateChangedConn = nil
                    end
                    if self.viewportSizeChangedConn then
                        self.viewportSizeChangedConn:Disconnect()

                        self.viewportSizeChangedConn = nil
                    end
                    if self.touchActivateConn then
                        self.touchActivateConn:Disconnect()

                        self.touchActivateConn = nil
                    end

                    self.turningLeft = false
                    self.turningRight = false
                    self.lastCameraTransform = nil
                    self.lastSubjectCFrame = nil
                    self.userPanningTheCamera = false
                    self.rotateInput = Vector2.new()
                    self.gamepadPanningCamera = Vector2.new(0, 0)
                    self.startPos = nil
                    self.lastPos = nil
                    self.panBeginLook = nil
                    self.isRightMouseDown = false
                    self.isMiddleMouseDown = false
                    self.fingerTouches = {}
                    self.dynamicTouchInput = nil
                    self.numUnsunkTouches = 0
                    self.startingDiff = nil
                    self.pinchBeginZoom = nil

                    if UserInputService.MouseBehavior ~= Enum.MouseBehavior.LockCenter then
                        UserInputService.MouseBehavior = Enum.MouseBehavior.Default
                    end
                end
                BaseCamera.ResetInputStates = function(self)
                    self.isRightMouseDown = false
                    self.isMiddleMouseDown = false

                    self.OnMousePanButtonReleased(self)

                    if UserInputService.TouchEnabled then
                        for inputObject in pairs(self.fingerTouches)do
                            self.fingerTouches[inputObject] = nil
                        end

                        self.dynamicTouchInput = nil
                        self.panBeginLook = nil
                        self.startPos = nil
                        self.lastPos = nil
                        self.userPanningTheCamera = false
                        self.startingDiff = nil
                        self.pinchBeginZoom = nil
                        self.numUnsunkTouches = 0
                    end
                end
                BaseCamera.GetGamepadPan = function(self, name, state, input)
                    if input.UserInputType == self.activeGamepad and input.KeyCode == Enum.KeyCode.Thumbstick2 then
                        if state == Enum.UserInputState.Cancel then
                            self.gamepadPanningCamera = ZERO_VECTOR2

                            return
                        end

                        local inputVector = Vector2.new(input.Position.X, -input.Position.Y)

                        if inputVector.magnitude > THUMBSTICK_DEADZONE then
                            self.gamepadPanningCamera = Vector2.new(input.Position.X, 
-input.Position.Y)
                        else
                            self.gamepadPanningCamera = ZERO_VECTOR2
                        end

                        return Enum.ContextActionResult.Sink
                    end

                    return Enum.ContextActionResult.Pass
                end
                BaseCamera.DoKeyboardPanTurn = function(
                    self,
                    name,
                    state,
                    input
                )
                    if not self.hasGameLoaded and VRService.VREnabled then
                        return Enum.ContextActionResult.Pass
                    end
                    if state == Enum.UserInputState.Cancel then
                        self.turningLeft = false
                        self.turningRight = false

                        return Enum.ContextActionResult.Sink
                    end
                    if self.panBeginLook == nil and self.keyPanEnabled then
                        if input.KeyCode == Enum.KeyCode.Left then
                            self.turningLeft = state == Enum.UserInputState.Begin
                        elseif input.KeyCode == Enum.KeyCode.Right then
                            self.turningRight = state == Enum.UserInputState.Begin
                        end

                        return Enum.ContextActionResult.Sink
                    end

                    return Enum.ContextActionResult.Pass
                end
                BaseCamera.DoPanRotateCamera = function(self, rotateAngle)
                    local angle = Util.RotateVectorByAngleAndRound(self.GetCameraLookVector(self) * Vector3.new(1, 0, 1), rotateAngle, math.pi * 0.25)

                    if angle ~= 0 then
                        self.rotateInput = self.rotateInput + Vector2.new(angle, 0)
                        self.lastUserPanCamera = tick()
                        self.lastCameraTransform = nil
                    end
                end
                BaseCamera.DoGamepadZoom = function(self, name, state, input)
                    if input.UserInputType == self.activeGamepad then
                        if input.KeyCode == Enum.KeyCode.ButtonR3 then
                            if state == Enum.UserInputState.Begin then
                                if self.distanceChangeEnabled then
                                    local dist = self.GetCameraToSubjectDistance(self)

                                    if dist > (GAMEPAD_ZOOM_STEP_2 + GAMEPAD_ZOOM_STEP_3) / 2 then
                                        self.SetCameraToSubjectDistance(self, GAMEPAD_ZOOM_STEP_2)
                                    elseif dist > (GAMEPAD_ZOOM_STEP_1 + GAMEPAD_ZOOM_STEP_2) / 2 then
                                        self.SetCameraToSubjectDistance(self, GAMEPAD_ZOOM_STEP_1)
                                    else
                                        self.SetCameraToSubjectDistance(self, GAMEPAD_ZOOM_STEP_3)
                                    end
                                end
                            end
                        elseif input.KeyCode == Enum.KeyCode.DPadLeft then
                            self.dpadLeftDown = (state == Enum.UserInputState.Begin)
                        elseif input.KeyCode == Enum.KeyCode.DPadRight then
                            self.dpadRightDown = (state == Enum.UserInputState.Begin)
                        end
                        if self.dpadLeftDown then
                            self.currentZoomSpeed = 1.04
                        elseif self.dpadRightDown then
                            self.currentZoomSpeed = 0.96
                        else
                            self.currentZoomSpeed = 1
                        end

                        return Enum.ContextActionResult.Sink
                    end

                    return Enum.ContextActionResult.Pass
                end
                BaseCamera.DoKeyboardZoom = function(self, name, state, input)
                    if not self.hasGameLoaded and VRService.VREnabled then
                        return Enum.ContextActionResult.Pass
                    end
                    if state ~= Enum.UserInputState.Begin then
                        return Enum.ContextActionResult.Pass
                    end
                    if self.distanceChangeEnabled and player.CameraMode ~= Enum.CameraMode.LockFirstPerson then
                        if input.KeyCode == Enum.KeyCode.I then
                            self.SetCameraToSubjectDistance(self, self.currentSubjectDistance - 5)
                        elseif input.KeyCode == Enum.KeyCode.O then
                            self.SetCameraToSubjectDistance(self, self.currentSubjectDistance + 5)
                        end

                        return Enum.ContextActionResult.Sink
                    end

                    return Enum.ContextActionResult.Pass
                end
                BaseCamera.BindAction = function(
                    self,
                    actionName,
                    actionFunc,
                    createTouchButton,
                    ...
                )
                    table.insert(self.boundContextActions, actionName)
                    ContextActionService.BindActionAtPriority(ContextActionService, actionName, actionFunc, createTouchButton, CAMERA_ACTION_PRIORITY, 
...)
                end
                BaseCamera.BindGamepadInputActions = function(self)
                    self.BindAction(self, 'BaseCameraGamepadPan', function(
                        name,
                        state,
                        input
                    )
                        return self.GetGamepadPan(self, name, state, input)
                    end, false, Enum.KeyCode.Thumbstick2)
                    self.BindAction(self, 'BaseCameraGamepadZoom', function(
                        name,
                        state,
                        input
                    )
                        return self.DoGamepadZoom(self, name, state, input)
                    end, false, Enum.KeyCode.DPadLeft, Enum.KeyCode.DPadRight, Enum.KeyCode.ButtonR3)
                end
                BaseCamera.BindKeyboardInputActions = function(self)
                    self.BindAction(self, 'BaseCameraKeyboardPanArrowKeys', function(
                        name,
                        state,
                        input
                    )
                        return self.DoKeyboardPanTurn(self, name, state, input)
                    end, false, Enum.KeyCode.Left, Enum.KeyCode.Right)
                    self.BindAction(self, 'BaseCameraKeyboardZoom', function(
                        name,
                        state,
                        input
                    )
                        return self.DoKeyboardZoom(self, name, state, input)
                    end, false, Enum.KeyCode.I, Enum.KeyCode.O)
                end

                local function isInDynamicThumbstickArea(input)
                    local playerGui = player.FindFirstChildOfClass(player, 'PlayerGui')
                    local touchGui = playerGui and playerGui.FindFirstChild(playerGui, 'TouchGui')
                    local touchFrame = touchGui and touchGui.FindFirstChild(touchGui, 'TouchControlFrame')
                    local thumbstickFrame = touchFrame and touchFrame.FindFirstChild(touchFrame, 'DynamicThumbstickFrame')

                    if not thumbstickFrame then
                        return false
                    end

                    local frameCornerTopLeft = thumbstickFrame.AbsolutePosition
                    local frameCornerBottomRight = frameCornerTopLeft + thumbstickFrame.AbsoluteSize

                    if input.Position.X >= frameCornerTopLeft.X and input.Position.Y >= frameCornerTopLeft.Y then
                        if input.Position.X <= frameCornerBottomRight.X and input.Position.Y <= frameCornerBottomRight.Y then
                            return true
                        end
                    end

                    return false
                end

                BaseCamera.AdjustTouchSensitivity = function(
                    self,
                    delta,
                    sensitivity
                )
                    local cameraCFrame = game.Workspace.CurrentCamera and game.Workspace.CurrentCamera.CFrame

                    if not cameraCFrame then
                        return sensitivity
                    end

                    local currPitchAngle = cameraCFrame.ToEulerAnglesYXZ(cameraCFrame)
                    local multiplierY = TOUCH_SENSITIVTY_ADJUST_MAX_Y

                    if currPitchAngle > TOUCH_ADJUST_AREA_UP and delta.Y < 0 then
                        local fractionAdjust = (currPitchAngle - TOUCH_ADJUST_AREA_UP) / (MAX_Y - TOUCH_ADJUST_AREA_UP)

                        fractionAdjust = 1 - (1 - fractionAdjust) ^ 3
                        multiplierY = TOUCH_SENSITIVTY_ADJUST_MAX_Y - fractionAdjust * (TOUCH_SENSITIVTY_ADJUST_MAX_Y - TOUCH_SENSITIVTY_ADJUST_MIN_Y)
                    elseif currPitchAngle < TOUCH_ADJUST_AREA_DOWN and delta.Y > 0 then
                        local fractionAdjust = (currPitchAngle - TOUCH_ADJUST_AREA_DOWN) / (MIN_Y - TOUCH_ADJUST_AREA_DOWN)

                        fractionAdjust = 1 - (1 - fractionAdjust) ^ 3
                        multiplierY = TOUCH_SENSITIVTY_ADJUST_MAX_Y - fractionAdjust * (TOUCH_SENSITIVTY_ADJUST_MAX_Y - TOUCH_SENSITIVTY_ADJUST_MIN_Y)
                    end

                    return Vector2.new(sensitivity.X, sensitivity.Y * multiplierY)
                end
                BaseCamera.OnTouchBegan = function(self, input, processed)
                    local canUseDynamicTouch = self.isDynamicThumbstickEnabled and not processed

                    if canUseDynamicTouch then
                        if self.dynamicTouchInput == nil and isInDynamicThumbstickArea(input) then
                            self.dynamicTouchInput = input

                            return
                        end

                        self.fingerTouches[input] = processed
                        self.inputStartPositions[input] = input.Position
                        self.inputStartTimes[input] = tick()
                        self.numUnsunkTouches = self.numUnsunkTouches + 1
                    end
                end
                BaseCamera.OnTouchChanged = function(self, input, processed)
                    if self.fingerTouches[input] == nil then
                        if self.isDynamicThumbstickEnabled then
                            return
                        end

                        self.fingerTouches[input] = processed

                        if not processed then
                            self.numUnsunkTouches = self.numUnsunkTouches + 1
                        end
                    end
                    if self.numUnsunkTouches == 1 then
                        if self.fingerTouches[input] == false then
                            self.panBeginLook = self.panBeginLook or self.GetCameraLookVector(self)
                            self.startPos = self.startPos or input.Position
                            self.lastPos = self.lastPos or self.startPos
                            self.userPanningTheCamera = true

                            local delta = input.Position - self.lastPos

                            delta = Vector2.new(delta.X, delta.Y * UserGameSettings.GetCameraYInvertValue(UserGameSettings))

                            if self.panEnabled then
                                local adjustedTouchSensitivity = TOUCH_SENSITIVTY

                                self.AdjustTouchSensitivity(self, delta, TOUCH_SENSITIVTY)

                                local desiredXYVector = self.InputTranslationToCameraAngleChange(self, delta, adjustedTouchSensitivity)

                                self.rotateInput = self.rotateInput + desiredXYVector
                            end

                            self.lastPos = input.Position
                        end
                    else
                        self.panBeginLook = nil
                        self.startPos = nil
                        self.lastPos = nil
                        self.userPanningTheCamera = false
                    end
                    if self.numUnsunkTouches == 2 then
                        local unsunkTouches = {}

                        for touch, wasSunk in pairs(self.fingerTouches)do
                            if not wasSunk then
                                table.insert(unsunkTouches, touch)
                            end
                        end

                        if #unsunkTouches == 2 then
                            local difference = (unsunkTouches[1].Position - unsunkTouches[2].Position).magnitude

                            if self.startingDiff and self.pinchBeginZoom then
                                local scale = difference / math.max(0.01, self.startingDiff)
                                local clampedScale = math.clamp(scale, 0.1, 10)

                                if self.distanceChangeEnabled then
                                    self.SetCameraToSubjectDistance(self, self.pinchBeginZoom / clampedScale)
                                end
                            else
                                self.startingDiff = difference
                                self.pinchBeginZoom = self.GetCameraToSubjectDistance(self)
                            end
                        end
                    else
                        self.startingDiff = nil
                        self.pinchBeginZoom = nil
                    end
                end
                BaseCamera.OnTouchEnded = function(self, input, processed)
                    if input == self.dynamicTouchInput then
                        self.dynamicTouchInput = nil

                        return
                    end
                    if self.fingerTouches[input] == false then
                        if self.numUnsunkTouches == 1 then
                            self.panBeginLook = nil
                            self.startPos = nil
                            self.lastPos = nil
                            self.userPanningTheCamera = false
                        elseif self.numUnsunkTouches == 2 then
                            self.startingDiff = nil
                            self.pinchBeginZoom = nil
                        end
                    end
                    if self.fingerTouches[input] ~= nil and self.fingerTouches[input] == false then
                        self.numUnsunkTouches = self.numUnsunkTouches - 1
                    end

                    self.fingerTouches[input] = nil
                    self.inputStartPositions[input] = nil
                    self.inputStartTimes[input] = nil
                end
                BaseCamera.OnMouse2Down = function(self, input, processed)
                    if processed then
                        return
                    end

                    self.isRightMouseDown = true

                    self.OnMousePanButtonPressed(self, input, processed)
                end
                BaseCamera.OnMouse2Up = function(self, input, processed)
                    self.isRightMouseDown = false

                    self.OnMousePanButtonReleased(self, input, processed)
                end
                BaseCamera.OnMouse3Down = function(self, input, processed)
                    if processed then
                        return
                    end

                    self.isMiddleMouseDown = true

                    self.OnMousePanButtonPressed(self, input, processed)
                end
                BaseCamera.OnMouse3Up = function(self, input, processed)
                    self.isMiddleMouseDown = false

                    self.OnMousePanButtonReleased(self, input, processed)
                end
                BaseCamera.OnMouseMoved = function(self, input, processed)
                    if not self.hasGameLoaded and VRService.VREnabled then
                        return
                    end

                    local inputDelta = input.Delta

                    inputDelta = Vector2.new(inputDelta.X, inputDelta.Y * UserGameSettings.GetCameraYInvertValue(UserGameSettings))

                    local isInputPanning = FFlagUserCameraToggle and CameraInput.getPanning()
                    local isBeginLook = self.startPos and self.lastPos and self.panBeginLook
                    local isPanning = isBeginLook or self.inFirstPerson or self.inMouseLockedMode or isInputPanning

                    if self.panEnabled and isPanning then
                        local desiredXYVector = self.InputTranslationToCameraAngleChange(self, inputDelta, MOUSE_SENSITIVITY)

                        self.rotateInput = self.rotateInput + desiredXYVector
                    end
                    if self.startPos and self.lastPos and self.panBeginLook then
                        self.lastPos = self.lastPos + input.Delta
                    end
                end
                BaseCamera.OnMousePanButtonPressed = function(
                    self,
                    input,
                    processed
                )
                    if processed then
                        return
                    end
                    if not FFlagUserCameraToggle then
                        self.UpdateMouseBehavior(self)
                    end

                    self.panBeginLook = self.panBeginLook or self.GetCameraLookVector(self)
                    self.startPos = self.startPos or input.Position
                    self.lastPos = self.lastPos or self.startPos
                    self.userPanningTheCamera = true
                end
                BaseCamera.OnMousePanButtonReleased = function(
                    self,
                    input,
                    processed
                )
                    if not FFlagUserCameraToggle then
                        self.UpdateMouseBehavior(self)
                    end
                    if not (self.isRightMouseDown or self.isMiddleMouseDown) then
                        self.panBeginLook = nil
                        self.startPos = nil
                        self.lastPos = nil
                        self.userPanningTheCamera = false
                    end
                end
                BaseCamera.UpdateMouseBehavior = function(self)
                    if FFlagUserCameraToggle and self.isCameraToggle then
                        CameraUI.setCameraModeToastEnabled(true)
                        CameraInput.enableCameraToggleInput()
                        CameraToggleStateController(self.inFirstPerson)
                    else
                        if FFlagUserCameraToggle then
                            CameraUI.setCameraModeToastEnabled(false)
                            CameraInput.disableCameraToggleInput()
                        end
                        if self.inFirstPerson or self.inMouseLockedMode then
                            UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
                        else
                            UserGameSettings.RotationType = Enum.RotationType.MovementRelative

                            if self.isRightMouseDown or self.isMiddleMouseDown then
                                UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
                            else
                                UserInputService.MouseBehavior = Enum.MouseBehavior.Default
                            end
                        end
                    end
                end
                BaseCamera.UpdateForDistancePropertyChange = function(self)
                    self.SetCameraToSubjectDistance(self, self.currentSubjectDistance)
                end
                BaseCamera.SetCameraToSubjectDistance = function(
                    self,
                    desiredSubjectDistance
                )
                    local lastSubjectDistance = self.currentSubjectDistance

                    if player.CameraMode == Enum.CameraMode.LockFirstPerson then
                        self.currentSubjectDistance = 0.5

                        if not self.inFirstPerson then
                            self.EnterFirstPerson(self)
                        end
                    else
                        local newSubjectDistance = math.clamp(desiredSubjectDistance, player.CameraMinZoomDistance, player.CameraMaxZoomDistance)

                        if newSubjectDistance < FIRST_PERSON_DISTANCE_THRESHOLD then
                            self.currentSubjectDistance = 0.5

                            if not self.inFirstPerson then
                                self.EnterFirstPerson(self)
                            end
                        else
                            self.currentSubjectDistance = newSubjectDistance

                            if self.inFirstPerson then
                                self.LeaveFirstPerson(self)
                            end
                        end
                    end

                    ZoomController.SetZoomParameters(self.currentSubjectDistance, math.sign(desiredSubjectDistance - lastSubjectDistance))

                    return self.currentSubjectDistance
                end
                BaseCamera.SetCameraType = function(self, cameraType)
                    self.cameraType = cameraType
                end
                BaseCamera.GetCameraType = function(self)
                    return self.cameraType
                end
                BaseCamera.SetCameraMovementMode = function(
                    self,
                    cameraMovementMode
                )
                    self.cameraMovementMode = cameraMovementMode
                end
                BaseCamera.GetCameraMovementMode = function(self)
                    return self.cameraMovementMode
                end
                BaseCamera.SetIsMouseLocked = function(self, mouseLocked)
                    self.inMouseLockedMode = mouseLocked

                    if not FFlagUserCameraToggle then
                        self.UpdateMouseBehavior(self)
                    end
                end
                BaseCamera.GetIsMouseLocked = function(self)
                    return self.inMouseLockedMode
                end
                BaseCamera.SetMouseLockOffset = function(self, offsetVector)
                    self.mouseLockOffset = offsetVector
                end
                BaseCamera.GetMouseLockOffset = function(self)
                    return self.mouseLockOffset
                end
                BaseCamera.InFirstPerson = function(self)
                    return self.inFirstPerson
                end
                BaseCamera.EnterFirstPerson = function(self) end
                BaseCamera.LeaveFirstPerson = function(self) end
                BaseCamera.GetCameraToSubjectDistance = function(self)
                    return self.currentSubjectDistance
                end
                BaseCamera.GetMeasuredDistanceToFocus = function(self)
                    local camera = game.Workspace.CurrentCamera

                    if camera then
                        return (camera.CoordinateFrame.p - camera.Focus.p).magnitude
                    end

                    return nil
                end
                BaseCamera.GetCameraLookVector = function(self)
                    return game.Workspace.CurrentCamera and game.Workspace.CurrentCamera.CFrame.lookVector or UNIT_Z
                end
                BaseCamera.CalculateNewLookCFrame = function(
                    self,
                    suppliedLookVector
                )
                    local currLookVector = suppliedLookVector or self.GetCameraLookVector(self)
                    local currPitchAngle = math.asin(currLookVector.y)
                    local yTheta = math.clamp(self.rotateInput.y, -MAX_Y + currPitchAngle, 
-MIN_Y + currPitchAngle)
                    local constrainedRotateInput = Vector2.new(self.rotateInput.x, yTheta)
                    local startCFrame = CFrame.new(ZERO_VECTOR3, currLookVector)
                    local newLookCFrame = CFrame.Angles(0, -constrainedRotateInput.x, 0) * startCFrame * CFrame.Angles(
-constrainedRotateInput.y, 0, 0)

                    return newLookCFrame
                end
                BaseCamera.CalculateNewLookVector = function(
                    self,
                    suppliedLookVector
                )
                    local newLookCFrame = self.CalculateNewLookCFrame(self, suppliedLookVector)

                    return newLookCFrame.lookVector
                end
                BaseCamera.CalculateNewLookVectorVR = function(self)
                    local subjectPosition = self.GetSubjectPosition(self)
                    local vecToSubject = (subjectPosition - game.Workspace.CurrentCamera.CFrame.p)
                    local currLookVector = (vecToSubject * X1_Y0_Z1).unit
                    local vrRotateInput = Vector2.new(self.rotateInput.x, 0)
                    local startCFrame = CFrame.new(ZERO_VECTOR3, currLookVector)
                    local yawRotatedVector = (CFrame.Angles(0, -vrRotateInput.x, 0) * startCFrame * CFrame.Angles(
-vrRotateInput.y, 0, 0)).lookVector

                    return (yawRotatedVector * X1_Y0_Z1).unit
                end
                BaseCamera.GetHumanoid = function(self)
                    local character = player and player.Character

                    if character then
                        local resultHumanoid = self.humanoidCache[player]

                        if resultHumanoid and resultHumanoid.Parent == character then
                            return resultHumanoid
                        else
                            self.humanoidCache[player] = nil

                            local humanoid = character.FindFirstChildOfClass(character, 'Humanoid')

                            if humanoid then
                                self.humanoidCache[player] = humanoid
                            end

                            return humanoid
                        end
                    end

                    return nil
                end
                BaseCamera.GetHumanoidPartToFollow = function(
                    self,
                    humanoid,
                    humanoidStateType
                )
                    if humanoidStateType == Enum.HumanoidStateType.Dead then
                        local character = humanoid.Parent

                        if character then
                            return character.FindFirstChild(character, 'Head') or humanoid.Torso
                        else
                            return humanoid.Torso
                        end
                    else
                        return humanoid.Torso
                    end
                end
                BaseCamera.UpdateGamepad = function(self)
                    local gamepadPan = self.gamepadPanningCamera

                    if gamepadPan and (self.hasGameLoaded or not VRService.VREnabled) then
                        gamepadPan = Util.GamepadLinearToCurve(gamepadPan)

                        local currentTime = tick()

                        if gamepadPan.X ~= 0 or gamepadPan.Y ~= 0 then
                            self.userPanningTheCamera = true
                        elseif gamepadPan == ZERO_VECTOR2 then
                            self.lastThumbstickRotate = nil

                            if self.lastThumbstickPos == ZERO_VECTOR2 then
                                self.currentSpeed = 0
                            end
                        end

                        local finalConstant = 0

                        if self.lastThumbstickRotate then
                            if VRService.VREnabled then
                                self.currentSpeed = self.vrMaxSpeed
                            else
                                local elapsedTime = (currentTime - self.lastThumbstickRotate) * 10

                                self.currentSpeed = self.currentSpeed + (self.maxSpeed * ((elapsedTime * elapsedTime) / self.numOfSeconds))

                                if self.currentSpeed > self.maxSpeed then
                                    self.currentSpeed = self.maxSpeed
                                end
                                if self.lastVelocity then
                                    local velocity = (gamepadPan - self.lastThumbstickPos) / (currentTime - self.lastThumbstickRotate)
                                    local velocityDeltaMag = (velocity - self.lastVelocity).magnitude

                                    if velocityDeltaMag > 12 then
                                        self.currentSpeed = self.currentSpeed * (20 / velocityDeltaMag)

                                        if self.currentSpeed > self.maxSpeed then
                                            self.currentSpeed = self.maxSpeed
                                        end
                                    end
                                end
                            end

                            finalConstant = UserGameSettings.GamepadCameraSensitivity * self.currentSpeed
                            self.lastVelocity = (gamepadPan - self.lastThumbstickPos) / (currentTime - self.lastThumbstickRotate)
                        end

                        self.lastThumbstickPos = gamepadPan
                        self.lastThumbstickRotate = currentTime

                        return Vector2.new(gamepadPan.X * finalConstant, gamepadPan.Y * finalConstant * self.ySensitivity * UserGameSettings.GetCameraYInvertValue(UserGameSettings))
                    end

                    return ZERO_VECTOR2
                end
                BaseCamera.ApplyVRTransform = function(self)
                    if not VRService.VREnabled then
                        return
                    end

                    local rootJoint = self.humanoidRootPart and self.humanoidRootPart:FindFirstChild('RootJoint')

                    if not rootJoint then
                        return
                    end

                    local cameraSubject = game.Workspace.CurrentCamera.CameraSubject
                    local isInVehicle = cameraSubject and cameraSubject.IsA(cameraSubject, 'VehicleSeat')

                    if self.inFirstPerson and not isInVehicle then
                        local vrFrame = VRService.GetUserCFrame(VRService, Enum.UserCFrame.Head)
                        local vrRotation = vrFrame - vrFrame.p

                        rootJoint.C0 = CFrame.new(vrRotation.vectorToObjectSpace(vrRotation, vrFrame.p)) * CFrame.new(0, 0, 0, 
-1, 0, 0, 0, 0, 1, 0, 1, 0)
                    else
                        rootJoint.C0 = CFrame.new(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, 0)
                    end
                end
                BaseCamera.IsInFirstPerson = function(self)
                    return self.inFirstPerson
                end
                BaseCamera.ShouldUseVRRotation = function(self)
                    if not VRService.VREnabled then
                        return false
                    end
                    if not self.VRRotationIntensityAvailable and tick() - self.lastVRRotationIntensityCheckTime < 1 then
                        return false
                    end

                    local success, vrRotationIntensity = pcall(function()
                        return StarterGui.GetCore(StarterGui, 'VRRotationIntensity')
                    end)

                    self.VRRotationIntensityAvailable = success and vrRotationIntensity ~= nil
                    self.lastVRRotationIntensityCheckTime = tick()
                    self.shouldUseVRRotation = success and vrRotationIntensity ~= nil and vrRotationIntensity ~= 'Smooth'

                    return self.shouldUseVRRotation
                end
                BaseCamera.GetVRRotationInput = function(self)
                    local vrRotateSum = ZERO_VECTOR2
                    local success, vrRotationIntensity = pcall(function()
                        return StarterGui.GetCore(StarterGui, 'VRRotationIntensity')
                    end)

                    if not success then
                        return
                    end

                    local vrGamepadRotation = self.GamepadPanningCamera or ZERO_VECTOR2
                    local delayExpired = (tick() - self.lastVRRotationTime) >= self.GetRepeatDelayValue(self, vrRotationIntensity)

                    if math.abs(vrGamepadRotation.x) >= self.GetActivateValue(self) then
                        if (delayExpired or not self.vrRotateKeyCooldown[Enum.KeyCode.Thumbstick2]) then
                            local sign = 1

                            if vrGamepadRotation.x < 0 then
                                sign = -1
                            end

                            vrRotateSum = vrRotateSum + self.GetRotateAmountValue(self, vrRotationIntensity) * sign
                            self.vrRotateKeyCooldown[Enum.KeyCode.Thumbstick2] = true
                        end
                    elseif math.abs(vrGamepadRotation.x) < self.GetActivateValue(self) - 0.1 then
                        self.vrRotateKeyCooldown[Enum.KeyCode.Thumbstick2] = nil
                    end
                    if self.turningLeft then
                        if delayExpired or not self.vrRotateKeyCooldown[Enum.KeyCode.Left] then
                            vrRotateSum = vrRotateSum - self.GetRotateAmountValue(self, vrRotationIntensity)
                            self.vrRotateKeyCooldown[Enum.KeyCode.Left] = true
                        end
                    else
                        self.vrRotateKeyCooldown[Enum.KeyCode.Left] = nil
                    end
                    if self.turningRight then
                        if (delayExpired or not self.vrRotateKeyCooldown[Enum.KeyCode.Right]) then
                            vrRotateSum = vrRotateSum + self.GetRotateAmountValue(self, vrRotationIntensity)
                            self.vrRotateKeyCooldown[Enum.KeyCode.Right] = true
                        end
                    else
                        self.vrRotateKeyCooldown[Enum.KeyCode.Right] = nil
                    end
                    if vrRotateSum ~= ZERO_VECTOR2 then
                        self.lastVRRotationTime = tick()
                    end

                    return vrRotateSum
                end
                BaseCamera.CancelCameraFreeze = function(self, keepConstraints)
                    if not keepConstraints then
                        self.cameraTranslationConstraints = Vector3.new(self.cameraTranslationConstraints.x, 1, self.cameraTranslationConstraints.z)
                    end
                    if self.cameraFrozen then
                        self.trackingHumanoid = nil
                        self.cameraFrozen = false
                    end
                end
                BaseCamera.StartCameraFreeze = function(
                    self,
                    subjectPosition,
                    humanoidToTrack
                )
                    if not self.cameraFrozen then
                        self.humanoidJumpOrigin = subjectPosition
                        self.trackingHumanoid = humanoidToTrack
                        self.cameraTranslationConstraints = Vector3.new(self.cameraTranslationConstraints.x, 0, self.cameraTranslationConstraints.z)
                        self.cameraFrozen = true
                    end
                end
                BaseCamera.OnNewCameraSubject = function(self)
                    if self.subjectStateChangedConn then
                        self.subjectStateChangedConn:Disconnect()

                        self.subjectStateChangedConn = nil
                    end

                    local humanoid = workspace.CurrentCamera and workspace.CurrentCamera.CameraSubject

                    if self.trackingHumanoid ~= humanoid then
                        self.CancelCameraFreeze(self)
                    end
                    if humanoid and humanoid.IsA(humanoid, 'Humanoid') then
                        self.subjectStateChangedConn = humanoid.StateChanged:Connect(function(
                            oldState,
                            newState
                        )
                            if VRService.VREnabled and newState == Enum.HumanoidStateType.Jumping and not self.inFirstPerson then
                                self.StartCameraFreeze(self, self.GetSubjectPosition(self), humanoid)
                            elseif newState ~= Enum.HumanoidStateType.Jumping and newState ~= Enum.HumanoidStateType.Freefall then
                                self.CancelCameraFreeze(self, true)
                            end
                        end)
                    end
                end
                BaseCamera.GetVRFocus = function(
                    self,
                    subjectPosition,
                    timeDelta
                )
                    local lastFocus = self.LastCameraFocus or subjectPosition

                    if not self.cameraFrozen then
                        self.cameraTranslationConstraints = Vector3.new(self.cameraTranslationConstraints.x, math.min(1, self.cameraTranslationConstraints.y + 0.42 * timeDelta), self.cameraTranslationConstraints.z)
                    end

                    local newFocus

                    if self.cameraFrozen and self.humanoidJumpOrigin and self.humanoidJumpOrigin.y > lastFocus.y then
                        newFocus = CFrame.new(Vector3.new(subjectPosition.x, math.min(self.humanoidJumpOrigin.y, lastFocus.y + 5 * timeDelta), subjectPosition.z))
                    else
                        newFocus = CFrame.new(Vector3.new(subjectPosition.x, lastFocus.y, subjectPosition.z):lerp(subjectPosition, self.cameraTranslationConstraints.y))
                    end
                    if self.cameraFrozen then
                        if self.inFirstPerson then
                            self.CancelCameraFreeze(self)
                        end
                        if self.humanoidJumpOrigin and subjectPosition.y < (self.humanoidJumpOrigin.y - 0.5) then
                            self.CancelCameraFreeze(self)
                        end
                    end

                    return newFocus
                end
                BaseCamera.GetRotateAmountValue = function(
                    self,
                    vrRotationIntensity
                )
                    vrRotationIntensity = vrRotationIntensity or StarterGui.GetCore(StarterGui, 'VRRotationIntensity')

                    if vrRotationIntensity then
                        if vrRotationIntensity == 'Low' then
                            return VR_LOW_INTENSITY_ROTATION
                        elseif vrRotationIntensity == 'High' then
                            return VR_HIGH_INTENSITY_ROTATION
                        end
                    end

                    return ZERO_VECTOR2
                end
                BaseCamera.GetRepeatDelayValue = function(
                    self,
                    vrRotationIntensity
                )
                    vrRotationIntensity = vrRotationIntensity or StarterGui.GetCore(StarterGui, 'VRRotationIntensity')

                    if vrRotationIntensity then
                        if vrRotationIntensity == 'Low' then
                            return VR_LOW_INTENSITY_REPEAT
                        elseif vrRotationIntensity == 'High' then
                            return VR_HIGH_INTENSITY_REPEAT
                        end
                    end

                    return 0
                end
                BaseCamera.Update = function(self, dt)
                    error(
[[BaseCamera:Update() This is a virtual function that should never be getting called.]], 2)
                end
                BaseCamera.UpCFrame = CFrame.new()
                BaseCamera.UpdateUpCFrame = function(self, cf)
                    self.UpCFrame = cf
                end

                local ZERO = Vector3.new(0, 0, 0)

                BaseCamera.CalculateNewLookCFrame = function(
                    self,
                    suppliedLookVector
                )
                    local currLookVector = suppliedLookVector or self.GetCameraLookVector(self)

                    currLookVector = self.UpCFrame:VectorToObjectSpace(currLookVector)

                    local currPitchAngle = math.asin(currLookVector.y)
                    local yTheta = math.clamp(self.rotateInput.y, -MAX_Y + currPitchAngle, 
-MIN_Y + currPitchAngle)
                    local constrainedRotateInput = Vector2.new(self.rotateInput.x, yTheta)
                    local startCFrame = CFrame.new(ZERO, currLookVector)
                    local newLookCFrame = CFrame.Angles(0, -constrainedRotateInput.x, 0) * startCFrame * CFrame.Angles(
-constrainedRotateInput.y, 0, 0)

                    return newLookCFrame
                end

                return BaseCamera
            end
            _BaseOcclusion = function()
                local BaseOcclusion = {}

                BaseOcclusion.__index = BaseOcclusion

                setmetatable(BaseOcclusion, {
                    __call = function(_, ...)
                        return BaseOcclusion.new(...)
                    end,
                })

                BaseOcclusion.new = function()
                    local self = setmetatable({}, BaseOcclusion)

                    return self
                end
                BaseOcclusion.CharacterAdded = function(self, char, player) end
                BaseOcclusion.CharacterRemoving = function(self, char, player) end
                BaseOcclusion.OnCameraSubjectChanged = function(
                    self,
                    newSubject
                ) end
                BaseOcclusion.GetOcclusionMode = function(self)
                    warn(
[[BaseOcclusion GetOcclusionMode must be overridden by derived classes]])

                    return nil
                end
                BaseOcclusion.Enable = function(self, enabled)
                    warn('BaseOcclusion Enable must be overridden by derived classes')
                end
                BaseOcclusion.Update = function(
                    self,
                    dt,
                    desiredCameraCFrame,
                    desiredCameraFocus
                )
                    warn('BaseOcclusion Update must be overridden by derived classes')

                    return desiredCameraCFrame, desiredCameraFocus
                end

                return BaseOcclusion
            end
            _Popper = function()
                local Players = game.GetService(game, 'Players')
                local camera = game.Workspace.CurrentCamera
                local min = math.min
                local tan = math.tan
                local rad = math.rad
                local inf = math.huge
                local ray = Ray.new

                local function getTotalTransparency(part)
                    return 1 - (1 - part.Transparency) * (1 - part.LocalTransparencyModifier)
                end
                local function eraseFromEnd(t, toSize)
                    for i = #t, toSize + 1, -1 do
                        t[i] = nil
                    end
                end

                local nearPlaneZ, projX, projY

                do
                    local function updateProjection()
                        local fov = rad(camera.FieldOfView)
                        local view = camera.ViewportSize
                        local ar = view.X / view.Y

                        projY = 2 * tan(fov / 2)
                        projX = ar * projY
                    end

                    camera.GetPropertyChangedSignal(camera, 'FieldOfView'):Connect(updateProjection)
                    camera.GetPropertyChangedSignal(camera, 'ViewportSize'):Connect(updateProjection)
                    updateProjection()

                    nearPlaneZ = camera.NearPlaneZ

                    camera.GetPropertyChangedSignal(camera, 'NearPlaneZ'):Connect(function(
                    )
                        nearPlaneZ = camera.NearPlaneZ
                    end)
                end

                local blacklist = {}

                do
                    local charMap = {}

                    local function refreshIgnoreList()
                        local n = 1

                        blacklist = {}

                        for _, character in pairs(charMap)do
                            blacklist[n] = character
                            n = n + 1
                        end
                    end
                    local function playerAdded(player)
                        local function characterAdded(character)
                            charMap[player] = character

                            refreshIgnoreList()
                        end
                        local function characterRemoving()
                            charMap[player] = nil

                            refreshIgnoreList()
                        end

                        player.CharacterAdded:Connect(characterAdded)
                        player.CharacterRemoving:Connect(characterRemoving)

                        if player.Character then
                            characterAdded(player.Character)
                        end
                    end
                    local function playerRemoving(player)
                        charMap[player] = nil

                        refreshIgnoreList()
                    end

                    Players.PlayerAdded:Connect(playerAdded)
                    Players.PlayerRemoving:Connect(playerRemoving)

                    for _, player in ipairs(Players.GetPlayers(Players))do
                        playerAdded(player)
                    end

                    refreshIgnoreList()
                end

                local subjectRoot
                local subjectPart

                camera.GetPropertyChangedSignal(camera, 'CameraSubject'):Connect(function(
                )
                    local subject = camera.CameraSubject

                    if subject.IsA(subject, 'Humanoid') then
                        subjectPart = subject.RootPart
                    elseif subject.IsA(subject, 'BasePart') then
                        subjectPart = subject
                    else
                        subjectPart = nil
                    end
                end)

                local function canOcclude(part)
                    return getTotalTransparency(part) < 0.25 and part.CanCollide and subjectRoot ~= (part.GetRootPart(part) or part) and not part.IsA(part, 'TrussPart')
                end

                local SCAN_SAMPLE_OFFSETS = {
                    Vector2.new(0.4, 0),
                    Vector2.new(-0.4, 0),
                    Vector2.new(0, -0.4),
                    Vector2.new(0, 0.4),
                    Vector2.new(0, 0.2),
                }

                local function getCollisionPoint(origin, dir)
                    local originalSize = #blacklist

                    repeat
                        local hitPart, hitPoint = workspace.FindPartOnRayWithIgnoreList(workspace, ray(origin, dir), blacklist, false, true)

                        if hitPart then
                            if hitPart.CanCollide then
                                eraseFromEnd(blacklist, originalSize)

                                return hitPoint, true
                            end

                            blacklist[#blacklist + 1] = hitPart
                        end
                    until not hitPart

                    eraseFromEnd(blacklist, originalSize)

                    return origin + dir, false
                end
                local function queryPoint(origin, unitDir, dist, lastPos)
                    debug.profilebegin('queryPoint')

                    local originalSize = #blacklist

                    dist = dist + nearPlaneZ

                    local target = origin + unitDir * dist
                    local softLimit = inf
                    local hardLimit = inf
                    local movingOrigin = origin

                    repeat
                        local entryPart, entryPos = workspace.FindPartOnRayWithIgnoreList(workspace, ray(movingOrigin, target - movingOrigin), blacklist, false, true)

                        if entryPart then
                            if canOcclude(entryPart) then
                                local wl = {entryPart}
                                local exitPart = workspace.FindPartOnRayWithWhitelist(workspace, ray(target, entryPos - target), wl, true)
                                local lim = (entryPos - origin).Magnitude

                                if exitPart then
                                    local promote = false

                                    if lastPos then
                                        promote = workspace.FindPartOnRayWithWhitelist(workspace, ray(lastPos, target - lastPos), wl, true) or workspace.FindPartOnRayWithWhitelist(workspace, ray(target, lastPos - target), wl, true)
                                    end
                                    if promote then
                                        hardLimit = lim
                                    elseif dist < softLimit then
                                        softLimit = lim
                                    end
                                else
                                    hardLimit = lim
                                end
                            end

                            blacklist[#blacklist + 1] = entryPart
                            movingOrigin = entryPos - unitDir * 1e-3
                        end
                    until hardLimit < inf or not entryPart

                    eraseFromEnd(blacklist, originalSize)
                    debug.profileend()

                    return softLimit - nearPlaneZ, hardLimit - nearPlaneZ
                end
                local function queryViewport(focus, dist)
                    debug.profilebegin('queryViewport')

                    local fP = focus.p
                    local fX = focus.rightVector
                    local fY = focus.upVector
                    local fZ = -focus.lookVector
                    local viewport = camera.ViewportSize
                    local hardBoxLimit = inf
                    local softBoxLimit = inf

                    for viewX = 0, 1 do
                        local worldX = fX * ((viewX - 0.5) * projX)

                        for viewY = 0, 1 do
                            local worldY = fY * ((viewY - 0.5) * projY)
                            local origin = fP + nearPlaneZ * (worldX + worldY)
                            local lastPos = camera.ViewportPointToRay(camera, viewport.x * viewX, viewport.y * viewY).Origin
                            local softPointLimit, hardPointLimit = queryPoint(origin, fZ, dist, lastPos)

                            if hardPointLimit < hardBoxLimit then
                                hardBoxLimit = hardPointLimit
                            end
                            if softPointLimit < softBoxLimit then
                                softBoxLimit = softPointLimit
                            end
                        end
                    end

                    debug.profileend()

                    return softBoxLimit, hardBoxLimit
                end
                local function testPromotion(focus, dist, focusExtrapolation)
                    debug.profilebegin('testPromotion')

                    local fP = focus.p
                    local fX = focus.rightVector
                    local fY = focus.upVector
                    local fZ = -focus.lookVector

                    do
                        debug.profilebegin('extrapolate')

                        local SAMPLE_DT = 0.0625
                        local SAMPLE_MAX_T = 1.25
                        local maxDist = (getCollisionPoint(fP, focusExtrapolation.posVelocity * SAMPLE_MAX_T) - fP).Magnitude
                        local combinedSpeed = focusExtrapolation.posVelocity.magnitude

                        for dt = 0, min(SAMPLE_MAX_T, focusExtrapolation.rotVelocity.magnitude + maxDist / combinedSpeed), SAMPLE_DT do
                            local cfDt = focusExtrapolation.extrapolate(dt)

                            if queryPoint(cfDt.p, -cfDt.lookVector, dist) >= dist then
                                return false
                            end
                        end

                        debug.profileend()
                    end
                    do
                        debug.profilebegin('testOffsets')

                        for _, offset in ipairs(SCAN_SAMPLE_OFFSETS)do
                            local scaledOffset = offset
                            local pos = getCollisionPoint(fP, fX * scaledOffset.x + fY * scaledOffset.y)

                            if queryPoint(pos, (fP + fZ * dist - pos).Unit, dist) == inf then
                                return false
                            end
                        end

                        debug.profileend()
                    end

                    debug.profileend()

                    return true
                end
                local function Popper(focus, targetDist, focusExtrapolation)
                    debug.profilebegin('popper')

                    subjectRoot = subjectPart and subjectPart.GetRootPart(subjectPart) or subjectPart

                    local dist = targetDist
                    local soft, hard = queryViewport(focus, targetDist)

                    if hard < dist then
                        dist = hard
                    end
                    if soft < dist and testPromotion(focus, targetDist, focusExtrapolation) then
                        dist = soft
                    end

                    subjectRoot = nil

                    debug.profileend()

                    return dist
                end

                return Popper
            end
            _ZoomController = function()
                local ZOOM_STIFFNESS = 4.5
                local ZOOM_DEFAULT = 12.5
                local ZOOM_ACCELERATION = 0.0375
                local MIN_FOCUS_DIST = 0.5
                local DIST_OPAQUE = 1
                local Popper = _Popper()
                local clamp = math.clamp
                local exp = math.exp
                local min = math.min
                local max = math.max
                local pi = math.pi
                local cameraMinZoomDistance, cameraMaxZoomDistance

                do
                    local Player = game.GetService(game, 'Players').LocalPlayer

                    local function updateBounds()
                        cameraMinZoomDistance = Player.CameraMinZoomDistance
                        cameraMaxZoomDistance = Player.CameraMaxZoomDistance
                    end

                    updateBounds()
                    Player.GetPropertyChangedSignal(Player, 'CameraMinZoomDistance'):Connect(updateBounds)
                    Player.GetPropertyChangedSignal(Player, 'CameraMaxZoomDistance'):Connect(updateBounds)
                end

                local ConstrainedSpring = {}

                do
                    ConstrainedSpring.__index = ConstrainedSpring
                    ConstrainedSpring.new = function(
                        freq,
                        x,
                        minValue,
                        maxValue
                    )
                        x = clamp(x, minValue, maxValue)

                        return setmetatable({
                            freq = freq,
                            x = x,
                            v = 0,
                            minValue = minValue,
                            maxValue = maxValue,
                            goal = x,
                        }, ConstrainedSpring)
                    end
                    ConstrainedSpring.Step = function(self, dt)
                        local freq = self.freq * 2 * pi
                        local x = self.x
                        local v = self.v
                        local minValue = self.minValue
                        local maxValue = self.maxValue
                        local goal = self.goal
                        local offset = goal - x
                        local step = freq * dt
                        local decay = exp(-step)
                        local x1 = goal + (v * dt - offset * (step + 1)) * decay
                        local v1 = ((offset * freq - v) * step + v) * decay

                        if x1 < minValue then
                            x1 = minValue
                            v1 = 0
                        elseif x1 > maxValue then
                            x1 = maxValue
                            v1 = 0
                        end

                        self.x = x1
                        self.v = v1

                        return x1
                    end
                end

                local zoomSpring = ConstrainedSpring.new(ZOOM_STIFFNESS, ZOOM_DEFAULT, MIN_FOCUS_DIST, cameraMaxZoomDistance)

                local function stepTargetZoom(z, dz, zoomMin, zoomMax)
                    z = clamp(z + dz * (1 + z * ZOOM_ACCELERATION), zoomMin, zoomMax)

                    if z < DIST_OPAQUE then
                        z = dz <= 0 and zoomMin or DIST_OPAQUE
                    end

                    return z
                end

                local zoomDelta = 0
                local Zoom = {}

                do
                    Zoom.Update = function(renderDt, focus, extrapolation)
                        local poppedZoom = math.huge

                        if zoomSpring.goal > DIST_OPAQUE then
                            local maxPossibleZoom = max(zoomSpring.x, stepTargetZoom(zoomSpring.goal, zoomDelta, cameraMinZoomDistance, cameraMaxZoomDistance))

                            poppedZoom = Popper(focus * CFrame.new(0, 0, MIN_FOCUS_DIST), maxPossibleZoom - MIN_FOCUS_DIST, extrapolation) + MIN_FOCUS_DIST
                        end

                        zoomSpring.minValue = MIN_FOCUS_DIST
                        zoomSpring.maxValue = min(cameraMaxZoomDistance, poppedZoom)

                        return zoomSpring.Step(zoomSpring, renderDt)
                    end
                    Zoom.SetZoomParameters = function(targetZoom, newZoomDelta)
                        zoomSpring.goal = targetZoom
                        zoomDelta = newZoomDelta
                    end
                end

                return Zoom
            end
            _MouseLockController = function()
                local DEFAULT_MOUSE_LOCK_CURSOR = 'rbxasset://textures/MouseLockedCursor.png'
                local CONTEXT_ACTION_NAME = 'MouseLockSwitchAction'
                local MOUSELOCK_ACTION_PRIORITY = Enum.ContextActionPriority.Default.Value
                local PlayersService = game.GetService(game, 'Players')
                local ContextActionService = game.GetService(game, 'ContextActionService')
                local Settings = UserSettings()
                local GameSettings = Settings.GameSettings
                local Mouse = PlayersService.LocalPlayer:GetMouse()
                local MouseLockController = {}

                MouseLockController.__index = MouseLockController
                MouseLockController.new = function()
                    local self = setmetatable({}, MouseLockController)

                    self.isMouseLocked = false
                    self.savedMouseCursor = nil
                    self.boundKeys = {
                        Enum.KeyCode.LeftShift,
                        Enum.KeyCode.RightShift,
                    }
                    self.mouseLockToggledEvent = Instance.new('BindableEvent')

                    local boundKeysObj = script.FindFirstChild(script, 'BoundKeys')

                    if (not boundKeysObj) or (not boundKeysObj.IsA(boundKeysObj, 'StringValue')) then
                        if boundKeysObj then
                            boundKeysObj.Destroy(boundKeysObj)
                        end

                        boundKeysObj = Instance.new('StringValue')
                        boundKeysObj.Name = 'BoundKeys'
                        boundKeysObj.Value = 'LeftShift,RightShift'
                        boundKeysObj.Parent = script
                    end
                    if boundKeysObj then
                        boundKeysObj.Changed:Connect(function(value)
                            self.OnBoundKeysObjectChanged(self, value)
                        end)
                        self.OnBoundKeysObjectChanged(self, boundKeysObj.Value)
                    end

                    GameSettings.Changed:Connect(function(property)
                        if property == 'ControlMode' or property == 'ComputerMovementMode' then
                            self.UpdateMouseLockAvailability(self)
                        end
                    end)
                    PlayersService.LocalPlayer:GetPropertyChangedSignal('DevEnableMouseLock'):Connect(function(
                    )
                        self.UpdateMouseLockAvailability(self)
                    end)
                    PlayersService.LocalPlayer:GetPropertyChangedSignal('DevComputerMovementMode'):Connect(function(
                    )
                        self.UpdateMouseLockAvailability(self)
                    end)
                    self.UpdateMouseLockAvailability(self)

                    return self
                end
                MouseLockController.GetIsMouseLocked = function(self)
                    return self.isMouseLocked
                end
                MouseLockController.GetBindableToggleEvent = function(self)
                    return self.mouseLockToggledEvent.Event
                end
                MouseLockController.GetMouseLockOffset = function(self)
                    local offsetValueObj = script.FindFirstChild(script, 'CameraOffset')

                    if offsetValueObj and offsetValueObj.IsA(offsetValueObj, 'Vector3Value') then
                        return offsetValueObj.Value
                    else
                        if offsetValueObj then
                            offsetValueObj.Destroy(offsetValueObj)
                        end

                        offsetValueObj = Instance.new('Vector3Value')
                        offsetValueObj.Name = 'CameraOffset'
                        offsetValueObj.Value = Vector3.new(1.75, 0, 0)
                        offsetValueObj.Parent = script
                    end
                    if offsetValueObj and offsetValueObj.Value then
                        return offsetValueObj.Value
                    end

                    return Vector3.new(1.75, 0, 0)
                end
                MouseLockController.UpdateMouseLockAvailability = function(
                    self
                )
                    local devAllowsMouseLock = PlayersService.LocalPlayer.DevEnableMouseLock
                    local devMovementModeIsScriptable = PlayersService.LocalPlayer.DevComputerMovementMode == Enum.DevComputerMovementMode.Scriptable
                    local userHasMouseLockModeEnabled = GameSettings.ControlMode == Enum.ControlMode.MouseLockSwitch
                    local userHasClickToMoveEnabled = GameSettings.ComputerMovementMode == Enum.ComputerMovementMode.ClickToMove
                    local MouseLockAvailable = devAllowsMouseLock and userHasMouseLockModeEnabled and not userHasClickToMoveEnabled and not devMovementModeIsScriptable

                    if MouseLockAvailable ~= self.enabled then
                        self.EnableMouseLock(self, MouseLockAvailable)
                    end
                end
                MouseLockController.OnBoundKeysObjectChanged = function(
                    self,
                    newValue
                )
                    self.boundKeys = {}

                    for token in string.gmatch(newValue, '[^%s,]+')do
                        for _, keyEnum in pairs(Enum.KeyCode:GetEnumItems())do
                            if token == keyEnum.Name then
                                self.boundKeys[#self.boundKeys + 1] = keyEnum

                                break
                            end
                        end
                    end

                    self.UnbindContextActions(self)
                    self.BindContextActions(self)
                end
                MouseLockController.OnMouseLockToggled = function(self)
                    self.isMouseLocked = not self.isMouseLocked

                    if self.isMouseLocked then
                        local cursorImageValueObj = script.FindFirstChild(script, 'CursorImage')

                        if cursorImageValueObj and cursorImageValueObj.IsA(cursorImageValueObj, 'StringValue') and cursorImageValueObj.Value then
                            self.savedMouseCursor = Mouse.Icon
                            Mouse.Icon = cursorImageValueObj.Value
                        else
                            if cursorImageValueObj then
                                cursorImageValueObj.Destroy(cursorImageValueObj)
                            end

                            cursorImageValueObj = Instance.new('StringValue')
                            cursorImageValueObj.Name = 'CursorImage'
                            cursorImageValueObj.Value = DEFAULT_MOUSE_LOCK_CURSOR
                            cursorImageValueObj.Parent = script
                            self.savedMouseCursor = Mouse.Icon
                            Mouse.Icon = DEFAULT_MOUSE_LOCK_CURSOR
                        end
                    else
                        if self.savedMouseCursor then
                            Mouse.Icon = self.savedMouseCursor
                            self.savedMouseCursor = nil
                        end
                    end

                    self.mouseLockToggledEvent:Fire()
                end
                MouseLockController.DoMouseLockSwitch = function(
                    self,
                    name,
                    state,
                    input
                )
                    if state == Enum.UserInputState.Begin then
                        self.OnMouseLockToggled(self)

                        return Enum.ContextActionResult.Sink
                    end

                    return Enum.ContextActionResult.Pass
                end
                MouseLockController.BindContextActions = function(self)
                    ContextActionService.BindActionAtPriority(ContextActionService, CONTEXT_ACTION_NAME, function(
                        name,
                        state,
                        input
                    )
                        return self.DoMouseLockSwitch(self, name, state, input)
                    end, false, MOUSELOCK_ACTION_PRIORITY, unpack(self.boundKeys))
                end
                MouseLockController.UnbindContextActions = function(self)
                    ContextActionService.UnbindAction(ContextActionService, CONTEXT_ACTION_NAME)
                end
                MouseLockController.IsMouseLocked = function(self)
                    return self.enabled and self.isMouseLocked
                end
                MouseLockController.EnableMouseLock = function(self, enable)
                    if enable ~= self.enabled then
                        self.enabled = enable

                        if self.enabled then
                            self.BindContextActions(self)
                        else
                            if Mouse.Icon ~= '' then
                                Mouse.Icon = ''
                            end

                            self.UnbindContextActions(self)

                            if self.isMouseLocked then
                                self.mouseLockToggledEvent:Fire()
                            end

                            self.isMouseLocked = false
                        end
                    end
                end

                return MouseLockController
            end
            _TransparencyController = function()
                local MAX_TWEEN_RATE = 2.8
                local Util = _CameraUtils()
                local TransparencyController = {}

                TransparencyController.__index = TransparencyController
                TransparencyController.new = function()
                    local self = setmetatable({}, TransparencyController)

                    self.lastUpdate = tick()
                    self.transparencyDirty = false
                    self.enabled = false
                    self.lastTransparency = nil
                    self.descendantAddedConn, self.descendantRemovingConn = nil, nil
                    self.toolDescendantAddedConns = {}
                    self.toolDescendantRemovingConns = {}
                    self.cachedParts = {}

                    return self
                end
                TransparencyController.HasToolAncestor = function(self, object)
                    if object.Parent == nil then
                        return false
                    end

                    return object.Parent:IsA('Tool') or self.HasToolAncestor(self, object.Parent)
                end
                TransparencyController.IsValidPartToModify = function(
                    self,
                    part
                )
                    if part.IsA(part, 'BasePart') or part.IsA(part, 'Decal') then
                        return not self.HasToolAncestor(self, part)
                    end

                    return false
                end
                TransparencyController.CachePartsRecursive = function(
                    self,
                    object
                )
                    if object then
                        if self.IsValidPartToModify(self, object) then
                            self.cachedParts[object] = true
                            self.transparencyDirty = true
                        end

                        for _, child in pairs(object.GetChildren(object))do
                            self.CachePartsRecursive(self, child)
                        end
                    end
                end
                TransparencyController.TeardownTransparency = function(self)
                    for child, _ in pairs(self.cachedParts)do
                        child.LocalTransparencyModifier = 0
                    end

                    self.cachedParts = {}
                    self.transparencyDirty = true
                    self.lastTransparency = nil

                    if self.descendantAddedConn then
                        self.descendantAddedConn:disconnect()

                        self.descendantAddedConn = nil
                    end
                    if self.descendantRemovingConn then
                        self.descendantRemovingConn:disconnect()

                        self.descendantRemovingConn = nil
                    end

                    for object, conn in pairs(self.toolDescendantAddedConns)do
                        conn.Disconnect(conn)

                        self.toolDescendantAddedConns[object] = nil
                    end
                    for object, conn in pairs(self.toolDescendantRemovingConns)do
                        conn.Disconnect(conn)

                        self.toolDescendantRemovingConns[object] = nil
                    end
                end
                TransparencyController.SetupTransparency = function(
                    self,
                    character
                )
                    self.TeardownTransparency(self)

                    if self.descendantAddedConn then
                        self.descendantAddedConn:disconnect()
                    end

                    self.descendantAddedConn = character.DescendantAdded:Connect(function(
                        object
                    )
                        if self.IsValidPartToModify(self, object) then
                            self.cachedParts[object] = true
                            self.transparencyDirty = true
                        elseif object.IsA(object, 'Tool') then
                            if self.toolDescendantAddedConns[object] then
                                self.toolDescendantAddedConns[object]:Disconnect()
                            end

                            self.toolDescendantAddedConns[object] = object.DescendantAdded:Connect(function(
                                toolChild
                            )
                                self.cachedParts[toolChild] = nil

                                if toolChild.IsA(toolChild, 'BasePart') or toolChild.IsA(toolChild, 'Decal') then
                                    toolChild.LocalTransparencyModifier = 0
                                end
                            end)

                            if self.toolDescendantRemovingConns[object] then
                                self.toolDescendantRemovingConns[object]:disconnect()
                            end

                            self.toolDescendantRemovingConns[object] = object.DescendantRemoving:Connect(function(
                                formerToolChild
                            )
                                wait()

                                if character and formerToolChild and formerToolChild.IsDescendantOf(formerToolChild, character) then
                                    if self.IsValidPartToModify(self, formerToolChild) then
                                        self.cachedParts[formerToolChild] = true
                                        self.transparencyDirty = true
                                    end
                                end
                            end)
                        end
                    end)

                    if self.descendantRemovingConn then
                        self.descendantRemovingConn:disconnect()
                    end

                    self.descendantRemovingConn = character.DescendantRemoving:connect(function(
                        object
                    )
                        if self.cachedParts[object] then
                            self.cachedParts[object] = nil
                            object.LocalTransparencyModifier = 0
                        end
                    end)

                    self.CachePartsRecursive(self, character)
                end
                TransparencyController.Enable = function(self, enable)
                    if self.enabled ~= enable then
                        self.enabled = enable

                        self.Update(self)
                    end
                end
                TransparencyController.SetSubject = function(self, subject)
                    local character

                    if subject and subject.IsA(subject, 'Humanoid') then
                        character = subject.Parent
                    end
                    if subject and subject.IsA(subject, 'VehicleSeat') and subject.Occupant then
                        character = subject.Occupant.Parent
                    end
                    if character then
                        self.SetupTransparency(self, character)
                    else
                        self.TeardownTransparency(self)
                    end
                end
                TransparencyController.Update = function(self)
                    local instant = false
                    local now = tick()
                    local currentCamera = workspace.CurrentCamera

                    if currentCamera then
                        local transparency = 0

                        if not self.enabled then
                            instant = true
                        else
                            local distance = (currentCamera.Focus.p - currentCamera.CoordinateFrame.p).magnitude

                            transparency = (distance < 2) and (1 - (distance - 0.5) / 1.5) or 0

                            if transparency < 0.5 then
                                transparency = 0
                            end
                            if self.lastTransparency then
                                local deltaTransparency = transparency - self.lastTransparency

                                if not instant and transparency < 1 and self.lastTransparency < 0.95 then
                                    local maxDelta = MAX_TWEEN_RATE * (now - self.lastUpdate)

                                    deltaTransparency = math.clamp(deltaTransparency, 
-maxDelta, maxDelta)
                                end

                                transparency = self.lastTransparency + deltaTransparency
                            else
                                self.transparencyDirty = true
                            end

                            transparency = math.clamp(Util.Round(transparency, 2), 0, 1)
                        end
                        if self.transparencyDirty or self.lastTransparency ~= transparency then
                            for child, _ in pairs(self.cachedParts)do
                                child.LocalTransparencyModifier = transparency
                            end

                            self.transparencyDirty = false
                            self.lastTransparency = transparency
                        end
                    end

                    self.lastUpdate = now
                end

                return TransparencyController
            end
            _Poppercam = function()
                local ZoomController = _ZoomController()
                local TransformExtrapolator = {}

                do
                    TransformExtrapolator.__index = TransformExtrapolator

                    local CF_IDENTITY = CFrame.new()

                    local function cframeToAxis(cframe)
                        local axis, angle = cframe.toAxisAngle(cframe)

                        return axis * angle
                    end
                    local function axisToCFrame(axis)
                        local angle = axis.magnitude

                        if angle > 1e-5 then
                            return CFrame.fromAxisAngle(axis, angle)
                        end

                        return CF_IDENTITY
                    end
                    local function extractRotation(cf)
                        local _, _, _, xx, yx, zx, xy, yy, zy, xz, yz, zz = cf.components(cf)

                        return CFrame.new(0, 0, 0, xx, yx, zx, xy, yy, zy, xz, yz, zz)
                    end

                    TransformExtrapolator.new = function()
                        return setmetatable({lastCFrame = nil}, TransformExtrapolator)
                    end
                    TransformExtrapolator.Step = function(
                        self,
                        dt,
                        currentCFrame
                    )
                        local lastCFrame = self.lastCFrame or currentCFrame

                        self.lastCFrame = currentCFrame

                        local currentPos = currentCFrame.p
                        local currentRot = extractRotation(currentCFrame)
                        local lastPos = lastCFrame.p
                        local lastRot = extractRotation(lastCFrame)
                        local dp = (currentPos - lastPos) / dt
                        local dr = cframeToAxis(currentRot * lastRot.inverse(lastRot)) / dt

                        local function extrapolate(t)
                            local p = dp * t + currentPos
                            local r = axisToCFrame(dr * t) * currentRot

                            return r + p
                        end

                        return {
                            extrapolate = extrapolate,
                            posVelocity = dp,
                            rotVelocity = dr,
                        }
                    end
                    TransformExtrapolator.Reset = function(self)
                        self.lastCFrame = nil
                    end
                end

                local BaseOcclusion = _BaseOcclusion()
                local Poppercam = setmetatable({}, BaseOcclusion)

                Poppercam.__index = Poppercam
                Poppercam.new = function()
                    local self = setmetatable(BaseOcclusion.new(), Poppercam)

                    self.focusExtrapolator = TransformExtrapolator.new()

                    return self
                end
                Poppercam.GetOcclusionMode = function(self)
                    return Enum.DevCameraOcclusionMode.Zoom
                end
                Poppercam.Enable = function(self, enable)
                    self.focusExtrapolator:Reset()
                end
                Poppercam.Update = function(
                    self,
                    renderDt,
                    desiredCameraCFrame,
                    desiredCameraFocus,
                    cameraController
                )
                    local rotatedFocus = CFrame.new(desiredCameraFocus.p, desiredCameraCFrame.p) * CFrame.new(0, 0, 0, 
-1, 0, 0, 0, 1, 0, 0, 0, -1)
                    local extrapolation = self.focusExtrapolator:Step(renderDt, rotatedFocus)
                    local zoom = ZoomController.Update(renderDt, rotatedFocus, extrapolation)

                    return rotatedFocus * CFrame.new(0, 0, zoom), desiredCameraFocus
                end
                Poppercam.CharacterAdded = function(self, character, player) end
                Poppercam.CharacterRemoving = function(self, character, player) end
                Poppercam.OnCameraSubjectChanged = function(self, newSubject) end

                local ZoomController = _ZoomController()

                Poppercam.Update = function(
                    self,
                    renderDt,
                    desiredCameraCFrame,
                    desiredCameraFocus,
                    cameraController
                )
                    local rotatedFocus = desiredCameraFocus * (desiredCameraCFrame - desiredCameraCFrame.p)
                    local extrapolation = self.focusExtrapolator:Step(renderDt, rotatedFocus)
                    local zoom = ZoomController.Update(renderDt, rotatedFocus, extrapolation)

                    return rotatedFocus * CFrame.new(0, 0, zoom), desiredCameraFocus
                end

                return Poppercam
            end
            _Invisicam = function()
                local PlayersService = game.GetService(game, 'Players')
                local ZERO_VECTOR3 = Vector3.new(0, 0, 0)
                local USE_STACKING_TRANSPARENCY = true
                local TARGET_TRANSPARENCY = 0.75
                local TARGET_TRANSPARENCY_PERIPHERAL = 0.5
                local MODE = {
                    LIMBS = 2,
                    MOVEMENT = 3,
                    CORNERS = 4,
                    CIRCLE1 = 5,
                    CIRCLE2 = 6,
                    LIMBMOVE = 7,
                    SMART_CIRCLE = 8,
                    CHAR_OUTLINE = 9,
                }
                local LIMB_TRACKING_SET = {
                    Head = true,
                    ['Left Arm'] = true,
                    ['Right Arm'] = true,
                    ['Left Leg'] = true,
                    ['Right Leg'] = true,
                    LeftLowerArm = true,
                    RightLowerArm = true,
                    LeftUpperLeg = true,
                    RightUpperLeg = true,
                }
                local CORNER_FACTORS = {
                    Vector3.new(1, 1, -1),
                    Vector3.new(1, -1, -1),
                    Vector3.new(-1, -1, -1),
                    Vector3.new(-1, 1, -1),
                }
                local CIRCLE_CASTS = 10
                local MOVE_CASTS = 3
                local SMART_CIRCLE_CASTS = 24
                local SMART_CIRCLE_INCREMENT = 2 * math.pi / SMART_CIRCLE_CASTS
                local CHAR_OUTLINE_CASTS = 24

                local function AssertTypes(param, ...)
                    local allowedTypes = {}
                    local typeString = ''

                    for _, typeName in pairs({...})do
                        allowedTypes[typeName] = true
                        typeString = typeString .. (typeString == '' and '' or ' or ') .. typeName
                    end

                    local theType = type(param)

                    assert(allowedTypes[theType], typeString .. ' type expected, got: ' .. theType)
                end
                local function Det3x3(a, b, c, d, e, f, g, h, i)
                    return (a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g))
                end
                local function RayIntersection(p0, v0, p1, v1)
                    local v2 = v0.Cross(v0, v1)
                    local d1 = p1.x - p0.x
                    local d2 = p1.y - p0.y
                    local d3 = p1.z - p0.z
                    local denom = Det3x3(v0.x, -v1.x, v2.x, v0.y, -v1.y, v2.y, v0.z, 
-v1.z, v2.z)

                    if (denom == 0) then
                        return ZERO_VECTOR3
                    end

                    local t0 = Det3x3(d1, -v1.x, v2.x, d2, -v1.y, v2.y, d3, -v1.z, v2.z) / denom
                    local t1 = Det3x3(v0.x, d1, v2.x, v0.y, d2, v2.y, v0.z, d3, v2.z) / denom
                    local s0 = p0 + t0 * v0
                    local s1 = p1 + t1 * v1
                    local s = s0 + 0.5 * (s1 - s0)

                    if (s1 - s0).Magnitude < 0.25 then
                        return s
                    else
                        return ZERO_VECTOR3
                    end
                end

                local BaseOcclusion = _BaseOcclusion()
                local Invisicam = setmetatable({}, BaseOcclusion)

                Invisicam.__index = Invisicam
                Invisicam.new = function()
                    local self = setmetatable(BaseOcclusion.new(), Invisicam)

                    self.char = nil
                    self.humanoidRootPart = nil
                    self.torsoPart = nil
                    self.headPart = nil
                    self.childAddedConn = nil
                    self.childRemovedConn = nil
                    self.behaviors = {}
                    self.behaviors[MODE.LIMBS] = self.LimbBehavior
                    self.behaviors[MODE.MOVEMENT] = self.MoveBehavior
                    self.behaviors[MODE.CORNERS] = self.CornerBehavior
                    self.behaviors[MODE.CIRCLE1] = self.CircleBehavior
                    self.behaviors[MODE.CIRCLE2] = self.CircleBehavior
                    self.behaviors[MODE.LIMBMOVE] = self.LimbMoveBehavior
                    self.behaviors[MODE.SMART_CIRCLE] = self.SmartCircleBehavior
                    self.behaviors[MODE.CHAR_OUTLINE] = self.CharacterOutlineBehavior
                    self.mode = MODE.SMART_CIRCLE
                    self.behaviorFunction = self.SmartCircleBehavior
                    self.savedHits = {}
                    self.trackedLimbs = {}
                    self.camera = game.Workspace.CurrentCamera
                    self.enabled = false

                    return self
                end
                Invisicam.Enable = function(self, enable)
                    self.enabled = enable

                    if not enable then
                        self.Cleanup(self)
                    end
                end
                Invisicam.GetOcclusionMode = function(self)
                    return Enum.DevCameraOcclusionMode.Invisicam
                end
                Invisicam.LimbBehavior = function(self, castPoints)
                    for limb, _ in pairs(self.trackedLimbs)do
                        castPoints[#castPoints + 1] = limb.Position
                    end
                end
                Invisicam.MoveBehavior = function(self, castPoints)
                    for i = 1, MOVE_CASTS do
                        local position, velocity = self.humanoidRootPart.Position, self.humanoidRootPart.Velocity
                        local horizontalSpeed = Vector3.new(velocity.X, 0, velocity.Z).Magnitude / 2
                        local offsetVector = (i - 1) * self.humanoidRootPart.CFrame.lookVector * horizontalSpeed

                        castPoints[#castPoints + 1] = position + offsetVector
                    end
                end
                Invisicam.CornerBehavior = function(self, castPoints)
                    local cframe = self.humanoidRootPart.CFrame
                    local centerPoint = cframe.p
                    local rotation = cframe - centerPoint
                    local halfSize = self.char:GetExtentsSize() / 2

                    castPoints[#castPoints + 1] = centerPoint

                    for i = 1, #CORNER_FACTORS do
                        castPoints[#castPoints + 1] = centerPoint + (rotation * (halfSize * CORNER_FACTORS[i]))
                    end
                end
                Invisicam.CircleBehavior = function(self, castPoints)
                    local cframe

                    if self.mode == MODE.CIRCLE1 then
                        cframe = self.humanoidRootPart.CFrame
                    else
                        local camCFrame = self.camera.CoordinateFrame

                        cframe = camCFrame - camCFrame.p + self.humanoidRootPart.Position
                    end

                    castPoints[#castPoints + 1] = cframe.p

                    for i = 0, CIRCLE_CASTS - 1 do
                        local angle = (2 * math.pi / CIRCLE_CASTS) * i
                        local offset = 3 * Vector3.new(math.cos(angle), math.sin(angle), 0)

                        castPoints[#castPoints + 1] = cframe * offset
                    end
                end
                Invisicam.LimbMoveBehavior = function(self, castPoints)
                    self.LimbBehavior(self, castPoints)
                    self.MoveBehavior(self, castPoints)
                end
                Invisicam.CharacterOutlineBehavior = function(self, castPoints)
                    local torsoUp = self.torsoPart.CFrame.upVector.unit
                    local torsoRight = self.torsoPart.CFrame.rightVector.unit

                    castPoints[#castPoints + 1] = self.torsoPart.CFrame.p
                    castPoints[#castPoints + 1] = self.torsoPart.CFrame.p + torsoUp
                    castPoints[#castPoints + 1] = self.torsoPart.CFrame.p - torsoUp
                    castPoints[#castPoints + 1] = self.torsoPart.CFrame.p + torsoRight
                    castPoints[#castPoints + 1] = self.torsoPart.CFrame.p - torsoRight

                    if self.headPart then
                        castPoints[#castPoints + 1] = self.headPart.CFrame.p
                    end

                    local cframe = CFrame.new(ZERO_VECTOR3, Vector3.new(self.camera.CoordinateFrame.lookVector.X, 0, self.camera.CoordinateFrame.lookVector.Z))
                    local centerPoint = (self.torsoPart and self.torsoPart.Position or self.humanoidRootPart.Position)
                    local partsWhitelist = {
                        self.torsoPart,
                    }

                    if self.headPart then
                        partsWhitelist[#partsWhitelist + 1] = self.headPart
                    end

                    for i = 1, CHAR_OUTLINE_CASTS do
                        local angle = (2 * math.pi * i / CHAR_OUTLINE_CASTS)
                        local offset = cframe * (3 * Vector3.new(math.cos(angle), math.sin(angle), 0))

                        offset = Vector3.new(offset.X, math.max(offset.Y, -2.25), offset.Z)

                        local ray = Ray.new(centerPoint + offset, -3 * offset)
                        local hit, hitPoint = game.Workspace:FindPartOnRayWithWhitelist(ray, partsWhitelist, false, false)

                        if hit then
                            castPoints[#castPoints + 1] = hitPoint + 0.2 * (centerPoint - hitPoint).unit
                        end
                    end
                end
                Invisicam.SmartCircleBehavior = function(self, castPoints)
                    local torsoUp = self.torsoPart.CFrame.upVector.unit
                    local torsoRight = self.torsoPart.CFrame.rightVector.unit

                    castPoints[#castPoints + 1] = self.torsoPart.CFrame.p
                    castPoints[#castPoints + 1] = self.torsoPart.CFrame.p + torsoUp
                    castPoints[#castPoints + 1] = self.torsoPart.CFrame.p - torsoUp
                    castPoints[#castPoints + 1] = self.torsoPart.CFrame.p + torsoRight
                    castPoints[#castPoints + 1] = self.torsoPart.CFrame.p - torsoRight

                    if self.headPart then
                        castPoints[#castPoints + 1] = self.headPart.CFrame.p
                    end

                    local cameraOrientation = self.camera.CFrame - self.camera.CFrame.p
                    local torsoPoint = Vector3.new(0, 0.5, 0) + (self.torsoPart and self.torsoPart.Position or self.humanoidRootPart.Position)
                    local radius = 2.5

                    for i = 1, SMART_CIRCLE_CASTS do
                        local angle = SMART_CIRCLE_INCREMENT * i - 0.5 * math.pi
                        local offset = radius * Vector3.new(math.cos(angle), math.sin(angle), 0)
                        local circlePoint = torsoPoint + cameraOrientation * offset
                        local vp = circlePoint - self.camera.CFrame.p
                        local ray = Ray.new(torsoPoint, circlePoint - torsoPoint)
                        local hit, hp, hitNormal = game.Workspace:FindPartOnRayWithIgnoreList(ray, {
                            self.char,
                        }, false, false)
                        local castPoint = circlePoint

                        if hit then
                            local hprime = hp + 0.1 * hitNormal.unit
                            local v0 = hprime - torsoPoint
                            local perp = (v0.Cross(v0, vp)).unit
                            local v1 = (perp.Cross(perp, hitNormal)).unit
                            local vprime = (hprime - self.camera.CFrame.p).unit

                            if (v0.unit:Dot(-v1) < v0.unit:Dot(vprime)) then
                                castPoint = RayIntersection(hprime, v1, circlePoint, vp)

                                if castPoint.Magnitude > 0 then
                                    local ray = Ray.new(hprime, castPoint - hprime)
                                    local hit, hitPoint, hitNormal = game.Workspace:FindPartOnRayWithIgnoreList(ray, {
                                        self.char,
                                    }, false, false)

                                    if hit then
                                        local hprime2 = hitPoint + 0.1 * hitNormal.unit

                                        castPoint = hprime2
                                    end
                                else
                                    castPoint = hprime
                                end
                            else
                                castPoint = hprime
                            end

                            local ray = Ray.new(torsoPoint, (castPoint - torsoPoint))
                            local hit, hitPoint, hitNormal = game.Workspace:FindPartOnRayWithIgnoreList(ray, {
                                self.char,
                            }, false, false)

                            if hit then
                                local castPoint2 = hitPoint - 0.1 * (castPoint - torsoPoint).unit

                                castPoint = castPoint2
                            end
                        end

                        castPoints[#castPoints + 1] = castPoint
                    end
                end
                Invisicam.CheckTorsoReference = function(self)
                    if self.char then
                        self.torsoPart = self.char:FindFirstChild('Torso')

                        if not self.torsoPart then
                            self.torsoPart = self.char:FindFirstChild('UpperTorso')

                            if not self.torsoPart then
                                self.torsoPart = self.char:FindFirstChild('HumanoidRootPart')
                            end
                        end

                        self.headPart = self.char:FindFirstChild('Head')
                    end
                end
                Invisicam.CharacterAdded = function(self, char, player)
                    if player ~= PlayersService.LocalPlayer then
                        return
                    end
                    if self.childAddedConn then
                        self.childAddedConn:Disconnect()

                        self.childAddedConn = nil
                    end
                    if self.childRemovedConn then
                        self.childRemovedConn:Disconnect()

                        self.childRemovedConn = nil
                    end

                    self.char = char
                    self.trackedLimbs = {}

                    local function childAdded(child)
                        if child.IsA(child, 'BasePart') then
                            if LIMB_TRACKING_SET[child.Name] then
                                self.trackedLimbs[child] = true
                            end
                            if child.Name == 'Torso' or child.Name == 'UpperTorso' then
                                self.torsoPart = child
                            end
                            if child.Name == 'Head' then
                                self.headPart = child
                            end
                        end
                    end
                    local function childRemoved(child)
                        self.trackedLimbs[child] = nil

                        self.CheckTorsoReference(self)
                    end

                    self.childAddedConn = char.ChildAdded:Connect(childAdded)
                    self.childRemovedConn = char.ChildRemoved:Connect(childRemoved)

                    for _, child in pairs(self.char:GetChildren())do
                        childAdded(child)
                    end
                end
                Invisicam.SetMode = function(self, newMode)
                    AssertTypes(newMode, 'number')

                    for _, modeNum in pairs(MODE)do
                        if modeNum == newMode then
                            self.mode = newMode
                            self.behaviorFunction = self.behaviors[self.mode]

                            return
                        end
                    end

                    error('Invalid mode number')
                end
                Invisicam.GetObscuredParts = function(self)
                    return self.savedHits
                end
                Invisicam.Cleanup = function(self)
                    for hit, originalFade in pairs(self.savedHits)do
                        hit.LocalTransparencyModifier = originalFade
                    end
                end
                Invisicam.Update = function(
                    self,
                    dt,
                    desiredCameraCFrame,
                    desiredCameraFocus
                )
                    if not self.enabled or not self.char then
                        return desiredCameraCFrame, desiredCameraFocus
                    end

                    self.camera = game.Workspace.CurrentCamera

                    if not self.humanoidRootPart then
                        local humanoid = self.char:FindFirstChildOfClass('Humanoid')

                        if humanoid and humanoid.RootPart then
                            self.humanoidRootPart = humanoid.RootPart
                        else
                            self.humanoidRootPart = self.char:FindFirstChild('HumanoidRootPart')

                            if not self.humanoidRootPart then
                                return desiredCameraCFrame, desiredCameraFocus
                            end
                        end

                        local ancestryChangedConn

                        ancestryChangedConn = self.humanoidRootPart.AncestryChanged:Connect(function(
                            child,
                            parent
                        )
                            if child == self.humanoidRootPart and not parent then
                                self.humanoidRootPart = nil

                                if ancestryChangedConn and ancestryChangedConn.Connected then
                                    ancestryChangedConn.Disconnect(ancestryChangedConn)

                                    ancestryChangedConn = nil
                                end
                            end
                        end)
                    end
                    if not self.torsoPart then
                        self.CheckTorsoReference(self)

                        if not self.torsoPart then
                            return desiredCameraCFrame, desiredCameraFocus
                        end
                    end

                    local castPoints = {}

                    self.behaviorFunction(self, castPoints)

                    local currentHits = {}
                    local ignoreList = {
                        self.char,
                    }

                    local function add(hit)
                        currentHits[hit] = true

                        if not self.savedHits[hit] then
                            self.savedHits[hit] = hit.LocalTransparencyModifier
                        end
                    end

                    local hitParts
                    local hitPartCount = 0
                    local headTorsoRayHitParts = {}
                    local perPartTransparencyHeadTorsoHits = TARGET_TRANSPARENCY
                    local perPartTransparencyOtherHits = TARGET_TRANSPARENCY

                    if USE_STACKING_TRANSPARENCY then
                        local headPoint = self.headPart and self.headPart.CFrame.p or castPoints[1]
                        local torsoPoint = self.torsoPart and self.torsoPart.CFrame.p or castPoints[2]

                        hitParts = self.camera:GetPartsObscuringTarget({headPoint, torsoPoint}, ignoreList)

                        for i = 1, #hitParts do
                            local hitPart = hitParts[i]

                            hitPartCount = hitPartCount + 1
                            headTorsoRayHitParts[hitPart] = true

                            for _, child in pairs(hitPart.GetChildren(hitPart))do
                                if child.IsA(child, 'Decal') or child.IsA(child, 'Texture') then
                                    hitPartCount = hitPartCount + 1

                                    break
                                end
                            end
                        end

                        if (hitPartCount > 0) then
                            perPartTransparencyHeadTorsoHits = math.pow(((0.5 * TARGET_TRANSPARENCY) + (0.5 * TARGET_TRANSPARENCY / hitPartCount)), 1 / hitPartCount)
                            perPartTransparencyOtherHits = math.pow(((0.5 * TARGET_TRANSPARENCY_PERIPHERAL) + (0.5 * TARGET_TRANSPARENCY_PERIPHERAL / hitPartCount)), 1 / hitPartCount)
                        end
                    end

                    hitParts = self.camera:GetPartsObscuringTarget(castPoints, ignoreList)

                    local partTargetTransparency = {}

                    for i = 1, #hitParts do
                        local hitPart = hitParts[i]

                        partTargetTransparency[hitPart] = headTorsoRayHitParts[hitPart] and perPartTransparencyHeadTorsoHits or perPartTransparencyOtherHits

                        if hitPart.Transparency < partTargetTransparency[hitPart] then
                            add(hitPart)
                        end

                        for _, child in pairs(hitPart.GetChildren(hitPart))do
                            if child.IsA(child, 'Decal') or child.IsA(child, 'Texture') then
                                if (child.Transparency < partTargetTransparency[hitPart]) then
                                    partTargetTransparency[child] = partTargetTransparency[hitPart]

                                    add(child)
                                end
                            end
                        end
                    end

                    for hitPart, originalLTM in pairs(self.savedHits)do
                        if currentHits[hitPart] then
                            hitPart.LocalTransparencyModifier = (hitPart.Transparency < 1) and ((partTargetTransparency[hitPart] - hitPart.Transparency) / (1 - hitPart.Transparency)) or 0
                        else
                            hitPart.LocalTransparencyModifier = originalLTM
                            self.savedHits[hitPart] = nil
                        end
                    end

                    return desiredCameraCFrame, desiredCameraFocus
                end

                return Invisicam
            end
            _LegacyCamera = function()
                local ZERO_VECTOR2 = Vector2.new(0, 0)
                local Util = _CameraUtils()
                local PlayersService = game.GetService(game, 'Players')
                local BaseCamera = _BaseCamera()
                local LegacyCamera = setmetatable({}, BaseCamera)

                LegacyCamera.__index = LegacyCamera
                LegacyCamera.new = function()
                    local self = setmetatable(BaseCamera.new(), LegacyCamera)

                    self.cameraType = Enum.CameraType.Fixed
                    self.lastUpdate = tick()
                    self.lastDistanceToSubject = nil

                    return self
                end
                LegacyCamera.GetModuleName = function(self)
                    return 'LegacyCamera'
                end
                LegacyCamera.SetCameraToSubjectDistance = function(
                    self,
                    desiredSubjectDistance
                )
                    return BaseCamera.SetCameraToSubjectDistance(self, desiredSubjectDistance)
                end
                LegacyCamera.Update = function(self, dt)
                    if not self.cameraType then
                        return
                    end

                    local now = tick()
                    local timeDelta = (now - self.lastUpdate)
                    local camera = workspace.CurrentCamera
                    local newCameraCFrame = camera.CFrame
                    local newCameraFocus = camera.Focus
                    local player = PlayersService.LocalPlayer

                    if self.lastUpdate == nil or timeDelta > 1 then
                        self.lastDistanceToSubject = nil
                    end

                    local subjectPosition = self.GetSubjectPosition(self)

                    if self.cameraType == Enum.CameraType.Fixed then
                        if self.lastUpdate then
                            local delta = math.min(0.1, now - self.lastUpdate)
                            local gamepadRotation = self.UpdateGamepad(self)

                            self.rotateInput = self.rotateInput + (gamepadRotation * delta)
                        end
                        if subjectPosition and player and camera then
                            local distanceToSubject = self.GetCameraToSubjectDistance(self)
                            local newLookVector = self.CalculateNewLookVector(self)

                            self.rotateInput = ZERO_VECTOR2
                            newCameraFocus = camera.Focus
                            newCameraCFrame = CFrame.new(camera.CFrame.p, camera.CFrame.p + (distanceToSubject * newLookVector))
                        end
                    elseif self.cameraType == Enum.CameraType.Attach then
                        if subjectPosition and camera then
                            local distanceToSubject = self.GetCameraToSubjectDistance(self)
                            local humanoid = self.GetHumanoid(self)

                            if self.lastUpdate and humanoid and humanoid.RootPart then
                                local delta = math.min(0.1, now - self.lastUpdate)
                                local gamepadRotation = self.UpdateGamepad(self)

                                self.rotateInput = self.rotateInput + (gamepadRotation * delta)

                                local forwardVector = humanoid.RootPart.CFrame.lookVector
                                local y = Util.GetAngleBetweenXZVectors(forwardVector, self.GetCameraLookVector(self))

                                if Util.IsFinite(y) then
                                    self.rotateInput = Vector2.new(y, self.rotateInput.Y)
                                end
                            end

                            local newLookVector = self.CalculateNewLookVector(self)

                            self.rotateInput = ZERO_VECTOR2
                            newCameraFocus = CFrame.new(subjectPosition)
                            newCameraCFrame = CFrame.new(subjectPosition - (distanceToSubject * newLookVector), subjectPosition)
                        end
                    elseif self.cameraType == Enum.CameraType.Watch then
                        if subjectPosition and player and camera then
                            local cameraLook
                            local humanoid = self.GetHumanoid(self)

                            if humanoid and humanoid.RootPart then
                                local diffVector = subjectPosition - camera.CFrame.p

                                cameraLook = diffVector.unit

                                if self.lastDistanceToSubject and self.lastDistanceToSubject == self.GetCameraToSubjectDistance(self) then
                                    local newDistanceToSubject = diffVector.magnitude

                                    self.SetCameraToSubjectDistance(self, newDistanceToSubject)
                                end
                            end

                            local distanceToSubject = self.GetCameraToSubjectDistance(self)
                            local newLookVector = self.CalculateNewLookVector(self, cameraLook)

                            self.rotateInput = ZERO_VECTOR2
                            newCameraFocus = CFrame.new(subjectPosition)
                            newCameraCFrame = CFrame.new(subjectPosition - (distanceToSubject * newLookVector), subjectPosition)
                            self.lastDistanceToSubject = distanceToSubject
                        end
                    else
                        return camera.CFrame, camera.Focus
                    end

                    self.lastUpdate = now

                    return newCameraCFrame, newCameraFocus
                end

                return LegacyCamera
            end
            _OrbitalCamera = function()
                local UNIT_Z = Vector3.new(0, 0, 1)
                local X1_Y0_Z1 = Vector3.new(1, 0, 1)
                local ZERO_VECTOR3 = Vector3.new(0, 0, 0)
                local ZERO_VECTOR2 = Vector2.new(0, 0)
                local TAU = 2 * math.pi
                local THUMBSTICK_DEADZONE = 0.2
                local MIN_ALLOWED_ELEVATION_DEG = -80
                local MAX_ALLOWED_ELEVATION_DEG = 80
                local externalProperties = {}

                externalProperties.InitialDistance = 25
                externalProperties.MinDistance = 10
                externalProperties.MaxDistance = 100
                externalProperties.InitialElevation = 35
                externalProperties.MinElevation = 35
                externalProperties.MaxElevation = 35
                externalProperties.ReferenceAzimuth = -45
                externalProperties.CWAzimuthTravel = 90
                externalProperties.CCWAzimuthTravel = 90
                externalProperties.UseAzimuthLimits = false

                local Util = _CameraUtils()
                local PlayersService = game.GetService(game, 'Players')
                local VRService = game.GetService(game, 'VRService')
                local BaseCamera = _BaseCamera()
                local OrbitalCamera = setmetatable({}, BaseCamera)

                OrbitalCamera.__index = OrbitalCamera
                OrbitalCamera.new = function()
                    local self = setmetatable(BaseCamera.new(), OrbitalCamera)

                    self.lastUpdate = tick()
                    self.changedSignalConnections = {}
                    self.refAzimuthRad = nil
                    self.curAzimuthRad = nil
                    self.minAzimuthAbsoluteRad = nil
                    self.maxAzimuthAbsoluteRad = nil
                    self.useAzimuthLimits = nil
                    self.curElevationRad = nil
                    self.minElevationRad = nil
                    self.maxElevationRad = nil
                    self.curDistance = nil
                    self.minDistance = nil
                    self.maxDistance = nil
                    self.r3ButtonDown = false
                    self.l3ButtonDown = false
                    self.gamepadDollySpeedMultiplier = 1
                    self.lastUserPanCamera = tick()
                    self.externalProperties = {}
                    self.externalProperties.InitialDistance = 25
                    self.externalProperties.MinDistance = 10
                    self.externalProperties.MaxDistance = 100
                    self.externalProperties.InitialElevation = 35
                    self.externalProperties.MinElevation = 35
                    self.externalProperties.MaxElevation = 35
                    self.externalProperties.ReferenceAzimuth = -45
                    self.externalProperties.CWAzimuthTravel = 90
                    self.externalProperties.CCWAzimuthTravel = 90
                    self.externalProperties.UseAzimuthLimits = false

                    self.LoadNumberValueParameters(self)

                    return self
                end
                OrbitalCamera.LoadOrCreateNumberValueParameter = function(
                    self,
                    name,
                    valueType,
                    updateFunction
                )
                    local valueObj = script.FindFirstChild(script, name)

                    if valueObj and valueObj.isA(valueObj, valueType) then
                        self.externalProperties[name] = valueObj.Value
                    elseif self.externalProperties[name] ~= nil then
                        valueObj = Instance.new(valueType)
                        valueObj.Name = name
                        valueObj.Parent = script
                        valueObj.Value = self.externalProperties[name]
                    else
                        return
                    end
                    if updateFunction then
                        if self.changedSignalConnections[name] then
                            self.changedSignalConnections[name]:Disconnect()
                        end

                        self.changedSignalConnections[name] = valueObj.Changed:Connect(function(
                            newValue
                        )
                            self.externalProperties[name] = newValue

                            updateFunction(self)
                        end)
                    end
                end
                OrbitalCamera.SetAndBoundsCheckAzimuthValues = function(self)
                    self.minAzimuthAbsoluteRad = math.rad(self.externalProperties.ReferenceAzimuth) - math.abs(math.rad(self.externalProperties.CWAzimuthTravel))
                    self.maxAzimuthAbsoluteRad = math.rad(self.externalProperties.ReferenceAzimuth) + math.abs(math.rad(self.externalProperties.CCWAzimuthTravel))
                    self.useAzimuthLimits = self.externalProperties.UseAzimuthLimits

                    if self.useAzimuthLimits then
                        self.curAzimuthRad = math.max(self.curAzimuthRad, self.minAzimuthAbsoluteRad)
                        self.curAzimuthRad = math.min(self.curAzimuthRad, self.maxAzimuthAbsoluteRad)
                    end
                end
                OrbitalCamera.SetAndBoundsCheckElevationValues = function(self)
                    local minElevationDeg = math.max(self.externalProperties.MinElevation, MIN_ALLOWED_ELEVATION_DEG)
                    local maxElevationDeg = math.min(self.externalProperties.MaxElevation, MAX_ALLOWED_ELEVATION_DEG)

                    self.minElevationRad = math.rad(math.min(minElevationDeg, maxElevationDeg))
                    self.maxElevationRad = math.rad(math.max(minElevationDeg, maxElevationDeg))
                    self.curElevationRad = math.max(self.curElevationRad, self.minElevationRad)
                    self.curElevationRad = math.min(self.curElevationRad, self.maxElevationRad)
                end
                OrbitalCamera.SetAndBoundsCheckDistanceValues = function(self)
                    self.minDistance = self.externalProperties.MinDistance
                    self.maxDistance = self.externalProperties.MaxDistance
                    self.curDistance = math.max(self.curDistance, self.minDistance)
                    self.curDistance = math.min(self.curDistance, self.maxDistance)
                end
                OrbitalCamera.LoadNumberValueParameters = function(self)
                    self.LoadOrCreateNumberValueParameter(self, 'InitialElevation', 'NumberValue', nil)
                    self.LoadOrCreateNumberValueParameter(self, 'InitialDistance', 'NumberValue', nil)
                    self.LoadOrCreateNumberValueParameter(self, 'ReferenceAzimuth', 'NumberValue', self.SetAndBoundsCheckAzimuthValue)
                    self.LoadOrCreateNumberValueParameter(self, 'CWAzimuthTravel', 'NumberValue', self.SetAndBoundsCheckAzimuthValues)
                    self.LoadOrCreateNumberValueParameter(self, 'CCWAzimuthTravel', 'NumberValue', self.SetAndBoundsCheckAzimuthValues)
                    self.LoadOrCreateNumberValueParameter(self, 'MinElevation', 'NumberValue', self.SetAndBoundsCheckElevationValues)
                    self.LoadOrCreateNumberValueParameter(self, 'MaxElevation', 'NumberValue', self.SetAndBoundsCheckElevationValues)
                    self.LoadOrCreateNumberValueParameter(self, 'MinDistance', 'NumberValue', self.SetAndBoundsCheckDistanceValues)
                    self.LoadOrCreateNumberValueParameter(self, 'MaxDistance', 'NumberValue', self.SetAndBoundsCheckDistanceValues)
                    self.LoadOrCreateNumberValueParameter(self, 'UseAzimuthLimits', 'BoolValue', self.SetAndBoundsCheckAzimuthValues)

                    self.curAzimuthRad = math.rad(self.externalProperties.ReferenceAzimuth)
                    self.curElevationRad = math.rad(self.externalProperties.InitialElevation)
                    self.curDistance = self.externalProperties.InitialDistance

                    self.SetAndBoundsCheckAzimuthValues(self)
                    self.SetAndBoundsCheckElevationValues(self)
                    self.SetAndBoundsCheckDistanceValues(self)
                end
                OrbitalCamera.GetModuleName = function(self)
                    return 'OrbitalCamera'
                end
                OrbitalCamera.SetInitialOrientation = function(self, humanoid)
                    if not humanoid or not humanoid.RootPart then
                        warn(
[[OrbitalCamera could not set initial orientation due to missing humanoid]])

                        return
                    end

                    local newDesiredLook = (humanoid.RootPart.CFrame.lookVector - Vector3.new(0, 0.23, 0)).unit
                    local horizontalShift = Util.GetAngleBetweenXZVectors(newDesiredLook, self.GetCameraLookVector(self))
                    local vertShift = math.asin(self.GetCameraLookVector(self).y) - math.asin(newDesiredLook.y)

                    if not Util.IsFinite(horizontalShift) then
                        horizontalShift = 0
                    end
                    if not Util.IsFinite(vertShift) then
                        vertShift = 0
                    end

                    self.rotateInput = Vector2.new(horizontalShift, vertShift)
                end
                OrbitalCamera.GetCameraToSubjectDistance = function(self)
                    return self.curDistance
                end
                OrbitalCamera.SetCameraToSubjectDistance = function(
                    self,
                    desiredSubjectDistance
                )
                    local player = PlayersService.LocalPlayer

                    if player then
                        self.currentSubjectDistance = math.clamp(desiredSubjectDistance, self.minDistance, self.maxDistance)
                        self.currentSubjectDistance = math.max(self.currentSubjectDistance, self.FIRST_PERSON_DISTANCE_THRESHOLD)
                    end

                    self.inFirstPerson = false

                    self.UpdateMouseBehavior(self)

                    return self.currentSubjectDistance
                end
                OrbitalCamera.CalculateNewLookVector = function(
                    self,
                    suppliedLookVector,
                    xyRotateVector
                )
                    local currLookVector = suppliedLookVector or self.GetCameraLookVector(self)
                    local currPitchAngle = math.asin(currLookVector.y)
                    local yTheta = math.clamp(xyRotateVector.y, currPitchAngle - math.rad(MAX_ALLOWED_ELEVATION_DEG), currPitchAngle - math.rad(MIN_ALLOWED_ELEVATION_DEG))
                    local constrainedRotateInput = Vector2.new(xyRotateVector.x, yTheta)
                    local startCFrame = CFrame.new(ZERO_VECTOR3, currLookVector)
                    local newLookVector = (CFrame.Angles(0, -constrainedRotateInput.x, 0) * startCFrame * CFrame.Angles(
-constrainedRotateInput.y, 0, 0)).lookVector

                    return newLookVector
                end
                OrbitalCamera.GetGamepadPan = function(
                    self,
                    name,
                    state,
                    input
                )
                    if input.UserInputType == self.activeGamepad and input.KeyCode == Enum.KeyCode.Thumbstick2 then
                        if self.r3ButtonDown or self.l3ButtonDown then
                            if (input.Position.Y > THUMBSTICK_DEADZONE) then
                                self.gamepadDollySpeedMultiplier = 0.96
                            elseif (input.Position.Y < -THUMBSTICK_DEADZONE) then
                                self.gamepadDollySpeedMultiplier = 1.04
                            else
                                self.gamepadDollySpeedMultiplier = 1
                            end
                        else
                            if state == Enum.UserInputState.Cancel then
                                self.gamepadPanningCamera = ZERO_VECTOR2

                                return
                            end

                            local inputVector = Vector2.new(input.Position.X, -input.Position.Y)

                            if inputVector.magnitude > THUMBSTICK_DEADZONE then
                                self.gamepadPanningCamera = Vector2.new(input.Position.X, 
-input.Position.Y)
                            else
                                self.gamepadPanningCamera = ZERO_VECTOR2
                            end
                        end

                        return Enum.ContextActionResult.Sink
                    end

                    return Enum.ContextActionResult.Pass
                end
                OrbitalCamera.DoGamepadZoom = function(
                    self,
                    name,
                    state,
                    input
                )
                    if input.UserInputType == self.activeGamepad and (input.KeyCode == Enum.KeyCode.ButtonR3 or input.KeyCode == Enum.KeyCode.ButtonL3) then
                        if (state == Enum.UserInputState.Begin) then
                            self.r3ButtonDown = input.KeyCode == Enum.KeyCode.ButtonR3
                            self.l3ButtonDown = input.KeyCode == Enum.KeyCode.ButtonL3
                        elseif (state == Enum.UserInputState.End) then
                            if (input.KeyCode == Enum.KeyCode.ButtonR3) then
                                self.r3ButtonDown = false
                            elseif (input.KeyCode == Enum.KeyCode.ButtonL3) then
                                self.l3ButtonDown = false
                            end
                            if (not self.r3ButtonDown) and (not self.l3ButtonDown) then
                                self.gamepadDollySpeedMultiplier = 1
                            end
                        end

                        return Enum.ContextActionResult.Sink
                    end

                    return Enum.ContextActionResult.Pass
                end
                OrbitalCamera.BindGamepadInputActions = function(self)
                    self.BindAction(self, 'OrbitalCamGamepadPan', function(
                        name,
                        state,
                        input
                    )
                        return self.GetGamepadPan(self, name, state, input)
                    end, false, Enum.KeyCode.Thumbstick2)
                    self.BindAction(self, 'OrbitalCamGamepadZoom', function(
                        name,
                        state,
                        input
                    )
                        return self.DoGamepadZoom(self, name, state, input)
                    end, false, Enum.KeyCode.ButtonR3, Enum.KeyCode.ButtonL3)
                end
                OrbitalCamera.Update = function(self, dt)
                    local now = tick()
                    local timeDelta = (now - self.lastUpdate)
                    local userPanningTheCamera = (self.UserPanningTheCamera == true)
                    local camera = workspace.CurrentCamera
                    local newCameraCFrame = camera.CFrame
                    local newCameraFocus = camera.Focus
                    local player = PlayersService.LocalPlayer
                    local cameraSubject = camera and camera.CameraSubject
                    local isInVehicle = cameraSubject and cameraSubject.IsA(cameraSubject, 'VehicleSeat')
                    local isOnASkateboard = cameraSubject and cameraSubject.IsA(cameraSubject, 'SkateboardPlatform')

                    if self.lastUpdate == nil or timeDelta > 1 then
                        self.lastCameraTransform = nil
                    end
                    if self.lastUpdate then
                        local gamepadRotation = self.UpdateGamepad(self)

                        if self.ShouldUseVRRotation(self) then
                            self.RotateInput = self.RotateInput + self.GetVRRotationInput(self)
                        else
                            local delta = math.min(0.1, timeDelta)

                            if gamepadRotation ~= ZERO_VECTOR2 then
                                userPanningTheCamera = true
                                self.rotateInput = self.rotateInput + (gamepadRotation * delta)
                            end

                            local angle = 0

                            if not (isInVehicle or isOnASkateboard) then
                                angle = angle + (self.TurningLeft and -120 or 0)
                                angle = angle + (self.TurningRight and 120 or 0)
                            end
                            if angle ~= 0 then
                                self.rotateInput = self.rotateInput + Vector2.new(math.rad(angle * delta), 0)
                                userPanningTheCamera = true
                            end
                        end
                    end
                    if userPanningTheCamera then
                        self.lastUserPanCamera = tick()
                    end

                    local subjectPosition = self.GetSubjectPosition(self)

                    if subjectPosition and player and camera then
                        if self.gamepadDollySpeedMultiplier ~= 1 then
                            self.SetCameraToSubjectDistance(self, self.currentSubjectDistance * self.gamepadDollySpeedMultiplier)
                        end

                        local VREnabled = VRService.VREnabled

                        newCameraFocus = VREnabled and self.GetVRFocus(self, subjectPosition, timeDelta) or CFrame.new(subjectPosition)

                        local cameraFocusP = newCameraFocus.p

                        if VREnabled and not self.IsInFirstPerson(self) then
                            local cameraHeight = self.GetCameraHeight(self)
                            local vecToSubject = (subjectPosition - camera.CFrame.p)
                            local distToSubject = vecToSubject.magnitude

                            if distToSubject > self.currentSubjectDistance or self.rotateInput.x ~= 0 then
                                local desiredDist = math.min(distToSubject, self.currentSubjectDistance)

                                vecToSubject = self.CalculateNewLookVector(self, vecToSubject.unit * X1_Y0_Z1, Vector2.new(self.rotateInput.x, 0)) * desiredDist

                                local newPos = cameraFocusP - vecToSubject
                                local desiredLookDir = camera.CFrame.lookVector

                                if self.rotateInput.x ~= 0 then
                                    desiredLookDir = vecToSubject
                                end

                                local lookAt = Vector3.new(newPos.x + desiredLookDir.x, newPos.y, newPos.z + desiredLookDir.z)

                                self.RotateInput = ZERO_VECTOR2
                                newCameraCFrame = CFrame.new(newPos, lookAt) + Vector3.new(0, cameraHeight, 0)
                            end
                        else
                            self.curAzimuthRad = self.curAzimuthRad - self.rotateInput.x

                            if self.useAzimuthLimits then
                                self.curAzimuthRad = math.clamp(self.curAzimuthRad, self.minAzimuthAbsoluteRad, self.maxAzimuthAbsoluteRad)
                            else
                                self.curAzimuthRad = (self.curAzimuthRad ~= 0) and (math.sign(self.curAzimuthRad) * (math.abs(self.curAzimuthRad) % TAU)) or 0
                            end

                            self.curElevationRad = math.clamp(self.curElevationRad + self.rotateInput.y, self.minElevationRad, self.maxElevationRad)

                            local cameraPosVector = self.currentSubjectDistance * (CFrame.fromEulerAnglesYXZ(
-self.curElevationRad, self.curAzimuthRad, 0) * UNIT_Z)
                            local camPos = subjectPosition + cameraPosVector

                            newCameraCFrame = CFrame.new(camPos, subjectPosition)
                            self.rotateInput = ZERO_VECTOR2
                        end

                        self.lastCameraTransform = newCameraCFrame
                        self.lastCameraFocus = newCameraFocus

                        if (isInVehicle or isOnASkateboard) and cameraSubject.IsA(cameraSubject, 'BasePart') then
                            self.lastSubjectCFrame = cameraSubject.CFrame
                        else
                            self.lastSubjectCFrame = nil
                        end
                    end

                    self.lastUpdate = now

                    return newCameraCFrame, newCameraFocus
                end

                return OrbitalCamera
            end
            _ClassicCamera = function()
                local ZERO_VECTOR2 = Vector2.new(0, 0)
                local tweenAcceleration = math.rad(220)
                local tweenSpeed = math.rad(0)
                local tweenMaxSpeed = math.rad(250)
                local TIME_BEFORE_AUTO_ROTATE = 2
                local INITIAL_CAMERA_ANGLE = CFrame.fromOrientation(math.rad(-15), 0, 0)
                local FFlagUserCameraToggle

                do
                    local success, result = pcall(function()
                        return UserSettings():IsUserFeatureEnabled('UserCameraToggle')
                    end)

                    FFlagUserCameraToggle = success and result
                end

                local PlayersService = game.GetService(game, 'Players')
                local VRService = game.GetService(game, 'VRService')
                local CameraInput = _CameraInput()
                local Util = _CameraUtils()
                local BaseCamera = _BaseCamera()
                local ClassicCamera = setmetatable({}, BaseCamera)

                ClassicCamera.__index = ClassicCamera
                ClassicCamera.new = function()
                    local self = setmetatable(BaseCamera.new(), ClassicCamera)

                    self.isFollowCamera = false
                    self.isCameraToggle = false
                    self.lastUpdate = tick()
                    self.cameraToggleSpring = Util.Spring.new(5, 0)

                    return self
                end
                ClassicCamera.GetCameraToggleOffset = function(self, dt)
                    assert(FFlagUserCameraToggle)

                    if self.isCameraToggle then
                        local zoom = self.currentSubjectDistance

                        if CameraInput.getTogglePan() then
                            self.cameraToggleSpring.goal = math.clamp(Util.map(zoom, 0.5, self.FIRST_PERSON_DISTANCE_THRESHOLD, 0, 1), 0, 1)
                        else
                            self.cameraToggleSpring.goal = 0
                        end

                        local distanceOffset = math.clamp(Util.map(zoom, 0.5, 64, 0, 1), 0, 1) + 1

                        return Vector3.new(0, self.cameraToggleSpring:step(dt) * distanceOffset, 0)
                    end

                    return Vector3.new()
                end
                ClassicCamera.SetCameraMovementMode = function(
                    self,
                    cameraMovementMode
                )
                    BaseCamera.SetCameraMovementMode(self, cameraMovementMode)

                    self.isFollowCamera = cameraMovementMode == Enum.ComputerCameraMovementMode.Follow
                    self.isCameraToggle = cameraMovementMode == Enum.ComputerCameraMovementMode.CameraToggle
                end
                ClassicCamera.Update = function(self)
                    local now = tick()
                    local timeDelta = now - self.lastUpdate
                    local camera = workspace.CurrentCamera
                    local newCameraCFrame = camera.CFrame
                    local newCameraFocus = camera.Focus
                    local overrideCameraLookVector

                    if self.resetCameraAngle then
                        local rootPart = self.GetHumanoidRootPart(self)

                        if rootPart then
                            overrideCameraLookVector = (rootPart.CFrame * INITIAL_CAMERA_ANGLE).lookVector
                        else
                            overrideCameraLookVector = INITIAL_CAMERA_ANGLE.lookVector
                        end

                        self.resetCameraAngle = false
                    end

                    local player = PlayersService.LocalPlayer
                    local humanoid = self.GetHumanoid(self)
                    local cameraSubject = camera.CameraSubject
                    local isInVehicle = cameraSubject and cameraSubject.IsA(cameraSubject, 'VehicleSeat')
                    local isOnASkateboard = cameraSubject and cameraSubject.IsA(cameraSubject, 'SkateboardPlatform')
                    local isClimbing = humanoid and humanoid.GetState(humanoid) == Enum.HumanoidStateType.Climbing

                    if self.lastUpdate == nil or timeDelta > 1 then
                        self.lastCameraTransform = nil
                    end
                    if self.lastUpdate then
                        local gamepadRotation = self.UpdateGamepad(self)

                        if self.ShouldUseVRRotation(self) then
                            self.rotateInput = self.rotateInput + self.GetVRRotationInput(self)
                        else
                            local delta = math.min(0.1, timeDelta)

                            if gamepadRotation ~= ZERO_VECTOR2 then
                                self.rotateInput = self.rotateInput + (gamepadRotation * delta)
                            end

                            local angle = 0

                            if not (isInVehicle or isOnASkateboard) then
                                angle = angle + (self.turningLeft and -120 or 0)
                                angle = angle + (self.turningRight and 120 or 0)
                            end
                            if angle ~= 0 then
                                self.rotateInput = self.rotateInput + Vector2.new(math.rad(angle * delta), 0)
                            end
                        end
                    end

                    local cameraHeight = self.GetCameraHeight(self)

                    if self.userPanningTheCamera then
                        tweenSpeed = 0
                        self.lastUserPanCamera = tick()
                    end

                    local userRecentlyPannedCamera = now - self.lastUserPanCamera < TIME_BEFORE_AUTO_ROTATE
                    local subjectPosition = self.GetSubjectPosition(self)

                    if subjectPosition and player and camera then
                        local zoom = self.GetCameraToSubjectDistance(self)

                        if zoom < 0.5 then
                            zoom = 0.5
                        end
                        if self.GetIsMouseLocked(self) and not self.IsInFirstPerson(self) then
                            local newLookCFrame = self.CalculateNewLookCFrame(self, overrideCameraLookVector)
                            local offset = self.GetMouseLockOffset(self)
                            local cameraRelativeOffset = offset.X * newLookCFrame.rightVector + offset.Y * newLookCFrame.upVector + offset.Z * newLookCFrame.lookVector

                            if Util.IsFiniteVector3(cameraRelativeOffset) then
                                subjectPosition = subjectPosition + cameraRelativeOffset
                            end
                        else
                            if not self.userPanningTheCamera and self.lastCameraTransform then
                                local isInFirstPerson = self.IsInFirstPerson(self)

                                if (isInVehicle or isOnASkateboard or (self.isFollowCamera and isClimbing)) and self.lastUpdate and humanoid and humanoid.Torso then
                                    if isInFirstPerson then
                                        if self.lastSubjectCFrame and (isInVehicle or isOnASkateboard) and cameraSubject.IsA(cameraSubject, 'BasePart') then
                                            local y = -Util.GetAngleBetweenXZVectors(self.lastSubjectCFrame.lookVector, cameraSubject.CFrame.lookVector)

                                            if Util.IsFinite(y) then
                                                self.rotateInput = self.rotateInput + Vector2.new(y, 0)
                                            end

                                            tweenSpeed = 0
                                        end
                                    elseif not userRecentlyPannedCamera then
                                        local forwardVector = humanoid.Torso.CFrame.lookVector

                                        if isOnASkateboard then
                                            forwardVector = cameraSubject.CFrame.lookVector
                                        end

                                        tweenSpeed = math.clamp(tweenSpeed + tweenAcceleration * timeDelta, 0, tweenMaxSpeed)

                                        local percent = math.clamp(tweenSpeed * timeDelta, 0, 1)

                                        if self.IsInFirstPerson(self) and not (self.isFollowCamera and self.isClimbing) then
                                            percent = 1
                                        end

                                        local y = Util.GetAngleBetweenXZVectors(forwardVector, self.GetCameraLookVector(self))

                                        if Util.IsFinite(y) and math.abs(y) > 0.0001 then
                                            self.rotateInput = self.rotateInput + Vector2.new(y * percent, 0)
                                        end
                                    end
                                elseif self.isFollowCamera and (not (isInFirstPerson or userRecentlyPannedCamera) and not VRService.VREnabled) then
                                    local lastVec = -(self.lastCameraTransform.p - subjectPosition)
                                    local y = Util.GetAngleBetweenXZVectors(lastVec, self.GetCameraLookVector(self))
                                    local thetaCutoff = 0.4

                                    if Util.IsFinite(y) and math.abs(y) > 0.0001 and math.abs(y) > thetaCutoff * timeDelta then
                                        self.rotateInput = self.rotateInput + Vector2.new(y, 0)
                                    end
                                end
                            end
                        end
                        if not self.isFollowCamera then
                            local VREnabled = VRService.VREnabled

                            if VREnabled then
                                newCameraFocus = self.GetVRFocus(self, subjectPosition, timeDelta)
                            else
                                newCameraFocus = CFrame.new(subjectPosition)
                            end

                            local cameraFocusP = newCameraFocus.p

                            if VREnabled and not self.IsInFirstPerson(self) then
                                local vecToSubject = (subjectPosition - camera.CFrame.p)
                                local distToSubject = vecToSubject.magnitude

                                if distToSubject > zoom or self.rotateInput.x ~= 0 then
                                    local desiredDist = math.min(distToSubject, zoom)

                                    vecToSubject = self.CalculateNewLookVectorVR(self) * desiredDist

                                    local newPos = cameraFocusP - vecToSubject
                                    local desiredLookDir = camera.CFrame.lookVector

                                    if self.rotateInput.x ~= 0 then
                                        desiredLookDir = vecToSubject
                                    end

                                    local lookAt = Vector3.new(newPos.x + desiredLookDir.x, newPos.y, newPos.z + desiredLookDir.z)

                                    self.rotateInput = ZERO_VECTOR2
                                    newCameraCFrame = CFrame.new(newPos, lookAt) + Vector3.new(0, cameraHeight, 0)
                                end
                            else
                                local newLookVector = self.CalculateNewLookVector(self, overrideCameraLookVector)

                                self.rotateInput = ZERO_VECTOR2
                                newCameraCFrame = CFrame.new(cameraFocusP - (zoom * newLookVector), cameraFocusP)
                            end
                        else
                            local newLookVector = self.CalculateNewLookVector(self, overrideCameraLookVector)

                            self.rotateInput = ZERO_VECTOR2

                            if VRService.VREnabled then
                                newCameraFocus = self.GetVRFocus(self, subjectPosition, timeDelta)
                            else
                                newCameraFocus = CFrame.new(subjectPosition)
                            end

                            newCameraCFrame = CFrame.new(newCameraFocus.p - (zoom * newLookVector), newCameraFocus.p) + Vector3.new(0, cameraHeight, 0)
                        end
                        if FFlagUserCameraToggle then
                            local toggleOffset = self.GetCameraToggleOffset(self, timeDelta)

                            newCameraFocus = newCameraFocus + toggleOffset
                            newCameraCFrame = newCameraCFrame + toggleOffset
                        end

                        self.lastCameraTransform = newCameraCFrame
                        self.lastCameraFocus = newCameraFocus

                        if (isInVehicle or isOnASkateboard) and cameraSubject.IsA(cameraSubject, 'BasePart') then
                            self.lastSubjectCFrame = cameraSubject.CFrame
                        else
                            self.lastSubjectCFrame = nil
                        end
                    end

                    self.lastUpdate = now

                    return newCameraCFrame, newCameraFocus
                end
                ClassicCamera.EnterFirstPerson = function(self)
                    self.inFirstPerson = true

                    self.UpdateMouseBehavior(self)
                end
                ClassicCamera.LeaveFirstPerson = function(self)
                    self.inFirstPerson = false

                    self.UpdateMouseBehavior(self)
                end

                return ClassicCamera
            end
            _CameraUtils = function()
                local CameraUtils = {}
                local FFlagUserCameraToggle

                do
                    local success, result = pcall(function()
                        return UserSettings():IsUserFeatureEnabled('UserCameraToggle')
                    end)

                    FFlagUserCameraToggle = success and result
                end

                local function round(num)
                    return math.floor(num + 0.5)
                end

                local Spring = {}

                do
                    Spring.__index = Spring
                    Spring.new = function(freq, pos)
                        return setmetatable({
                            freq = freq,
                            goal = pos,
                            pos = pos,
                            vel = 0,
                        }, Spring)
                    end
                    Spring.step = function(self, dt)
                        local f = self.freq * 2 * math.pi
                        local g = self.goal
                        local p0 = self.pos
                        local v0 = self.vel
                        local offset = p0 - g
                        local decay = math.exp(-f * dt)
                        local p1 = (offset * (1 + f * dt) + v0 * dt) * decay + g
                        local v1 = (v0 * (1 - f * dt) - offset * (f * f * dt)) * decay

                        self.pos = p1
                        self.vel = v1

                        return p1
                    end
                end

                CameraUtils.Spring = Spring
                CameraUtils.map = function(x, inMin, inMax, outMin, outMax)
                    return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin
                end
                CameraUtils.Round = function(num, places)
                    local decimalPivot = 10 ^ places

                    return math.floor(num * decimalPivot + 0.5) / decimalPivot
                end
                CameraUtils.IsFinite = function(val)
                    return val == val and val ~= math.huge and val ~= -math.huge
                end
                CameraUtils.IsFiniteVector3 = function(vec3)
                    return CameraUtils.IsFinite(vec3.X) and CameraUtils.IsFinite(vec3.Y) and CameraUtils.IsFinite(vec3.Z)
                end
                CameraUtils.GetAngleBetweenXZVectors = function(v1, v2)
                    return math.atan2(v2.X * v1.Z - v2.Z * v1.X, v2.X * v1.X + v2.Z * v1.Z)
                end
                CameraUtils.RotateVectorByAngleAndRound = function(
                    camLook,
                    rotateAngle,
                    roundAmount
                )
                    if camLook.Magnitude > 0 then
                        camLook = camLook.unit

                        local currAngle = math.atan2(camLook.z, camLook.x)
                        local newAngle = round((math.atan2(camLook.z, camLook.x) + rotateAngle) / roundAmount) * roundAmount

                        return newAngle - currAngle
                    end

                    return 0
                end

                local k = 0.35
                local lowerK = 0.8

                local function SCurveTranform(t)
                    t = math.clamp(t, -1, 1)

                    if t >= 0 then
                        return (k * t) / (k - t + 1)
                    end

                    return -((lowerK * -t) / (lowerK + t + 1))
                end

                local DEADZONE = 0.1

                local function toSCurveSpace(t)
                    return (1 + DEADZONE) * (2 * math.abs(t) - 1) - DEADZONE
                end
                local function fromSCurveSpace(t)
                    return t / 2 + 0.5
                end

                CameraUtils.GamepadLinearToCurve = function(thumbstickPosition)
                    local function onAxis(axisValue)
                        local sign = 1

                        if axisValue < 0 then
                            sign = -1
                        end

                        local point = fromSCurveSpace(SCurveTranform(toSCurveSpace(math.abs(axisValue))))

                        point = point * sign

                        return math.clamp(point, -1, 1)
                    end

                    return Vector2.new(onAxis(thumbstickPosition.x), onAxis(thumbstickPosition.y))
                end
                CameraUtils.ConvertCameraModeEnumToStandard = function(
                    enumValue
                )
                    if enumValue == Enum.TouchCameraMovementMode.Default then
                        return Enum.ComputerCameraMovementMode.Follow
                    end
                    if enumValue == Enum.ComputerCameraMovementMode.Default then
                        return Enum.ComputerCameraMovementMode.Classic
                    end
                    if enumValue == Enum.TouchCameraMovementMode.Classic or enumValue == Enum.DevTouchCameraMovementMode.Classic or enumValue == Enum.DevComputerCameraMovementMode.Classic or enumValue == Enum.ComputerCameraMovementMode.Classic then
                        return Enum.ComputerCameraMovementMode.Classic
                    end
                    if enumValue == Enum.TouchCameraMovementMode.Follow or enumValue == Enum.DevTouchCameraMovementMode.Follow or enumValue == Enum.DevComputerCameraMovementMode.Follow or enumValue == Enum.ComputerCameraMovementMode.Follow then
                        return Enum.ComputerCameraMovementMode.Follow
                    end
                    if enumValue == Enum.TouchCameraMovementMode.Orbital or enumValue == Enum.DevTouchCameraMovementMode.Orbital or enumValue == Enum.DevComputerCameraMovementMode.Orbital or enumValue == Enum.ComputerCameraMovementMode.Orbital then
                        return Enum.ComputerCameraMovementMode.Orbital
                    end
                    if FFlagUserCameraToggle then
                        if enumValue == Enum.ComputerCameraMovementMode.CameraToggle or enumValue == Enum.DevComputerCameraMovementMode.CameraToggle then
                            return Enum.ComputerCameraMovementMode.CameraToggle
                        end
                    end
                    if enumValue == Enum.DevTouchCameraMovementMode.UserChoice or enumValue == Enum.DevComputerCameraMovementMode.UserChoice then
                        return Enum.DevComputerCameraMovementMode.UserChoice
                    end

                    return Enum.ComputerCameraMovementMode.Classic
                end

                return CameraUtils
            end
            _CameraModule = function()
                local CameraModule = {}

                CameraModule.__index = CameraModule

                local FFlagUserCameraToggle

                do
                    local success, result = pcall(function()
                        return UserSettings():IsUserFeatureEnabled('UserCameraToggle')
                    end)

                    FFlagUserCameraToggle = success and result
                end

                local FFlagUserRemoveTheCameraApi

                do
                    local success, result = pcall(function()
                        return UserSettings():IsUserFeatureEnabled('UserRemoveTheCameraApi')
                    end)

                    FFlagUserRemoveTheCameraApi = success and result
                end

                local PLAYER_CAMERA_PROPERTIES = {
                    'CameraMinZoomDistance',
                    'CameraMaxZoomDistance',
                    'CameraMode',
                    'DevCameraOcclusionMode',
                    'DevComputerCameraMode',
                    'DevTouchCameraMode',
                    'DevComputerMovementMode',
                    'DevTouchMovementMode',
                    'DevEnableMouseLock',
                }
                local USER_GAME_SETTINGS_PROPERTIES = {
                    'ComputerCameraMovementMode',
                    'ComputerMovementMode',
                    'ControlMode',
                    'GamepadCameraSensitivity',
                    'MouseSensitivity',
                    'RotationType',
                    'TouchCameraMovementMode',
                    'TouchMovementMode',
                }
                local Players = game.GetService(game, 'Players')
                local RunService = game.GetService(game, 'RunService')
                local UserInputService = game.GetService(game, 'UserInputService')
                local UserGameSettings = UserSettings():GetService('UserGameSettings')
                local CameraUtils = _CameraUtils()
                local ClassicCamera = _ClassicCamera()
                local OrbitalCamera = _OrbitalCamera()
                local LegacyCamera = _LegacyCamera()
                local Invisicam = _Invisicam()
                local Poppercam = _Poppercam()
                local TransparencyController = _TransparencyController()
                local MouseLockController = _MouseLockController()
                local instantiatedCameraControllers = {}
                local instantiatedOcclusionModules = {}

                do
                    local PlayerScripts = Players.LocalPlayer:WaitForChild('PlayerScripts')

                    PlayerScripts.RegisterTouchCameraMovementMode(PlayerScripts, Enum.TouchCameraMovementMode.Default)
                    PlayerScripts.RegisterTouchCameraMovementMode(PlayerScripts, Enum.TouchCameraMovementMode.Follow)
                    PlayerScripts.RegisterTouchCameraMovementMode(PlayerScripts, Enum.TouchCameraMovementMode.Classic)
                    PlayerScripts.RegisterComputerCameraMovementMode(PlayerScripts, Enum.ComputerCameraMovementMode.Default)
                    PlayerScripts.RegisterComputerCameraMovementMode(PlayerScripts, Enum.ComputerCameraMovementMode.Follow)
                    PlayerScripts.RegisterComputerCameraMovementMode(PlayerScripts, Enum.ComputerCameraMovementMode.Classic)

                    if FFlagUserCameraToggle then
                        PlayerScripts.RegisterComputerCameraMovementMode(PlayerScripts, Enum.ComputerCameraMovementMode.CameraToggle)
                    end
                end

                CameraModule.FFlagUserCameraToggle = FFlagUserCameraToggle
                CameraModule.new = function()
                    local self = setmetatable({}, CameraModule)

                    self.activeCameraController = nil
                    self.activeOcclusionModule = nil
                    self.activeTransparencyController = nil
                    self.activeMouseLockController = nil
                    self.currentComputerCameraMovementMode = nil
                    self.cameraSubjectChangedConn = nil
                    self.cameraTypeChangedConn = nil

                    for _, player in pairs(Players.GetPlayers(Players))do
                        self.OnPlayerAdded(self, player)
                    end

                    Players.PlayerAdded:Connect(function(player)
                        self.OnPlayerAdded(self, player)
                    end)

                    self.activeTransparencyController = TransparencyController.new()

                    self.activeTransparencyController:Enable(true)

                    if not UserInputService.TouchEnabled then
                        self.activeMouseLockController = MouseLockController.new()

                        local toggleEvent = self.activeMouseLockController:GetBindableToggleEvent()

                        if toggleEvent then
                            toggleEvent.Connect(toggleEvent, function()
                                self.OnMouseLockToggled(self)
                            end)
                        end
                    end

                    self.ActivateCameraController(self, self.GetCameraControlChoice(self))
                    self.ActivateOcclusionModule(self, Players.LocalPlayer.DevCameraOcclusionMode)
                    self.OnCurrentCameraChanged(self)
                    RunService.BindToRenderStep(RunService, 'cameraRenderUpdate', Enum.RenderPriority.Camera.Value, function(
                        dt
                    )
                        self.Update(self, dt)
                    end)

                    for _, propertyName in pairs(PLAYER_CAMERA_PROPERTIES)do
                        Players.LocalPlayer:GetPropertyChangedSignal(propertyName):Connect(function(
                        )
                            self.OnLocalPlayerCameraPropertyChanged(self, propertyName)
                        end)
                    end
                    for _, propertyName in pairs(USER_GAME_SETTINGS_PROPERTIES)do
                        UserGameSettings.GetPropertyChangedSignal(UserGameSettings, propertyName):Connect(function(
                        )
                            self.OnUserGameSettingsPropertyChanged(self, propertyName)
                        end)
                    end

                    game.Workspace:GetPropertyChangedSignal('CurrentCamera'):Connect(function(
                    )
                        self.OnCurrentCameraChanged(self)
                    end)

                    self.lastInputType = UserInputService.GetLastInputType(UserInputService)

                    UserInputService.LastInputTypeChanged:Connect(function(
                        newLastInputType
                    )
                        self.lastInputType = newLastInputType
                    end)

                    return self
                end
                CameraModule.GetCameraMovementModeFromSettings = function(self)
                    local cameraMode = Players.LocalPlayer.CameraMode

                    if cameraMode == Enum.CameraMode.LockFirstPerson then
                        return CameraUtils.ConvertCameraModeEnumToStandard(Enum.ComputerCameraMovementMode.Classic)
                    end

                    local devMode, userMode

                    if UserInputService.TouchEnabled then
                        devMode = CameraUtils.ConvertCameraModeEnumToStandard(Players.LocalPlayer.DevTouchCameraMode)
                        userMode = CameraUtils.ConvertCameraModeEnumToStandard(UserGameSettings.TouchCameraMovementMode)
                    else
                        devMode = CameraUtils.ConvertCameraModeEnumToStandard(Players.LocalPlayer.DevComputerCameraMode)
                        userMode = CameraUtils.ConvertCameraModeEnumToStandard(UserGameSettings.ComputerCameraMovementMode)
                    end
                    if devMode == Enum.DevComputerCameraMovementMode.UserChoice then
                        return userMode
                    end

                    return devMode
                end
                CameraModule.ActivateOcclusionModule = function(
                    self,
                    occlusionMode
                )
                    local newModuleCreator

                    if occlusionMode == Enum.DevCameraOcclusionMode.Zoom then
                        newModuleCreator = Poppercam
                    elseif occlusionMode == Enum.DevCameraOcclusionMode.Invisicam then
                        newModuleCreator = Invisicam
                    else
                        warn(
[[CameraScript ActivateOcclusionModule called with unsupported mode]])

                        return
                    end
                    if self.activeOcclusionModule and self.activeOcclusionModule:GetOcclusionMode() == occlusionMode then
                        if not self.activeOcclusionModule:GetEnabled() then
                            self.activeOcclusionModule:Enable(true)
                        end

                        return
                    end

                    local prevOcclusionModule = self.activeOcclusionModule

                    self.activeOcclusionModule = instantiatedOcclusionModules[newModuleCreator]

                    if not self.activeOcclusionModule then
                        self.activeOcclusionModule = newModuleCreator.new()

                        if self.activeOcclusionModule then
                            instantiatedOcclusionModules[newModuleCreator] = self.activeOcclusionModule
                        end
                    end
                    if self.activeOcclusionModule then
                        local newModuleOcclusionMode = self.activeOcclusionModule:GetOcclusionMode()

                        if newModuleOcclusionMode ~= occlusionMode then
                            warn('CameraScript ActivateOcclusionModule mismatch: ', self.activeOcclusionModule:GetOcclusionMode(), '~=', occlusionMode)
                        end
                        if prevOcclusionModule then
                            if prevOcclusionModule ~= self.activeOcclusionModule then
                                prevOcclusionModule.Enable(prevOcclusionModule, false)
                            else
                                warn(
[[CameraScript ActivateOcclusionModule failure to detect already running correct module]])
                            end
                        end
                        if occlusionMode == Enum.DevCameraOcclusionMode.Invisicam then
                            if Players.LocalPlayer.Character then
                                self.activeOcclusionModule:CharacterAdded(Players.LocalPlayer.Character, Players.LocalPlayer)
                            end
                        else
                            for _, player in pairs(Players.GetPlayers(Players))do
                                if player and player.Character then
                                    self.activeOcclusionModule:CharacterAdded(player.Character, player)
                                end
                            end

                            self.activeOcclusionModule:OnCameraSubjectChanged(game.Workspace.CurrentCamera.CameraSubject)
                        end

                        self.activeOcclusionModule:Enable(true)
                    end
                end
                CameraModule.ActivateCameraController = function(
                    self,
                    cameraMovementMode,
                    legacyCameraType
                )
                    local newCameraCreator

                    if legacyCameraType ~= nil then
                        if legacyCameraType == Enum.CameraType.Scriptable then
                            if self.activeCameraController then
                                self.activeCameraController:Enable(false)

                                self.activeCameraController = nil

                                return
                            end
                        elseif legacyCameraType == Enum.CameraType.Custom then
                            cameraMovementMode = self.GetCameraMovementModeFromSettings(self)
                        elseif legacyCameraType == Enum.CameraType.Track then
                            cameraMovementMode = Enum.ComputerCameraMovementMode.Classic
                        elseif legacyCameraType == Enum.CameraType.Follow then
                            cameraMovementMode = Enum.ComputerCameraMovementMode.Follow
                        elseif legacyCameraType == Enum.CameraType.Orbital then
                            cameraMovementMode = Enum.ComputerCameraMovementMode.Orbital
                        elseif legacyCameraType == Enum.CameraType.Attach or legacyCameraType == Enum.CameraType.Watch or legacyCameraType == Enum.CameraType.Fixed then
                            newCameraCreator = LegacyCamera
                        else
                            warn(
[[CameraScript encountered an unhandled Camera.CameraType value: ]], legacyCameraType)
                        end
                    end
                    if not newCameraCreator then
                        if cameraMovementMode == Enum.ComputerCameraMovementMode.Classic or cameraMovementMode == Enum.ComputerCameraMovementMode.Follow or cameraMovementMode == Enum.ComputerCameraMovementMode.Default or (FFlagUserCameraToggle and cameraMovementMode == Enum.ComputerCameraMovementMode.CameraToggle) then
                            newCameraCreator = ClassicCamera
                        elseif cameraMovementMode == Enum.ComputerCameraMovementMode.Orbital then
                            newCameraCreator = OrbitalCamera
                        else
                            warn('ActivateCameraController did not select a module.')

                            return
                        end
                    end

                    local newCameraController

                    if not instantiatedCameraControllers[newCameraCreator] then
                        newCameraController = newCameraCreator.new()
                        instantiatedCameraControllers[newCameraCreator] = newCameraController
                    else
                        newCameraController = instantiatedCameraControllers[newCameraCreator]
                    end
                    if self.activeCameraController then
                        if self.activeCameraController ~= newCameraController then
                            self.activeCameraController:Enable(false)

                            self.activeCameraController = newCameraController

                            self.activeCameraController:Enable(true)
                        elseif not self.activeCameraController:GetEnabled() then
                            self.activeCameraController:Enable(true)
                        end
                    elseif newCameraController ~= nil then
                        self.activeCameraController = newCameraController

                        self.activeCameraController:Enable(true)
                    end
                    if self.activeCameraController then
                        if cameraMovementMode ~= nil then
                            self.activeCameraController:SetCameraMovementMode(cameraMovementMode)
                        elseif legacyCameraType ~= nil then
                            self.activeCameraController:SetCameraType(legacyCameraType)
                        end
                    end
                end
                CameraModule.OnCameraSubjectChanged = function(self)
                    if self.activeTransparencyController then
                        self.activeTransparencyController:SetSubject(game.Workspace.CurrentCamera.CameraSubject)
                    end
                    if self.activeOcclusionModule then
                        self.activeOcclusionModule:OnCameraSubjectChanged(game.Workspace.CurrentCamera.CameraSubject)
                    end
                end
                CameraModule.OnCameraTypeChanged = function(
                    self,
                    newCameraType
                )
                    if newCameraType == Enum.CameraType.Scriptable then
                        if UserInputService.MouseBehavior == Enum.MouseBehavior.LockCenter then
                            UserInputService.MouseBehavior = Enum.MouseBehavior.Default
                        end
                    end

                    self.ActivateCameraController(self, nil, newCameraType)
                end
                CameraModule.OnCurrentCameraChanged = function(self)
                    local currentCamera = game.Workspace.CurrentCamera

                    if not currentCamera then
                        return
                    end
                    if self.cameraSubjectChangedConn then
                        self.cameraSubjectChangedConn:Disconnect()
                    end
                    if self.cameraTypeChangedConn then
                        self.cameraTypeChangedConn:Disconnect()
                    end

                    self.cameraSubjectChangedConn = currentCamera.GetPropertyChangedSignal(currentCamera, 'CameraSubject'):Connect(function(
                    )
                        self.OnCameraSubjectChanged(self, currentCamera.CameraSubject)
                    end)
                    self.cameraTypeChangedConn = currentCamera.GetPropertyChangedSignal(currentCamera, 'CameraType'):Connect(function(
                    )
                        self.OnCameraTypeChanged(self, currentCamera.CameraType)
                    end)

                    self.OnCameraSubjectChanged(self, currentCamera.CameraSubject)
                    self.OnCameraTypeChanged(self, currentCamera.CameraType)
                end
                CameraModule.OnLocalPlayerCameraPropertyChanged = function(
                    self,
                    propertyName
                )
                    if propertyName == 'CameraMode' then
                        if Players.LocalPlayer.CameraMode == Enum.CameraMode.LockFirstPerson then
                            if not self.activeCameraController or self.activeCameraController:GetModuleName() ~= 'ClassicCamera' then
                                self.ActivateCameraController(self, CameraUtils.ConvertCameraModeEnumToStandard(Enum.DevComputerCameraMovementMode.Classic))
                            end
                            if self.activeCameraController then
                                self.activeCameraController:UpdateForDistancePropertyChange()
                            end
                        elseif Players.LocalPlayer.CameraMode == Enum.CameraMode.Classic then
                            local cameraMovementMode = self.GetCameraMovementModeFromSettings(self)

                            self.ActivateCameraController(self, CameraUtils.ConvertCameraModeEnumToStandard(cameraMovementMode))
                        else
                            warn('Unhandled value for property player.CameraMode: ', Players.LocalPlayer.CameraMode)
                        end
                    elseif propertyName == 'DevComputerCameraMode' or propertyName == 'DevTouchCameraMode' then
                        local cameraMovementMode = self.GetCameraMovementModeFromSettings(self)

                        self.ActivateCameraController(self, CameraUtils.ConvertCameraModeEnumToStandard(cameraMovementMode))
                    elseif propertyName == 'DevCameraOcclusionMode' then
                        self.ActivateOcclusionModule(self, Players.LocalPlayer.DevCameraOcclusionMode)
                    elseif propertyName == 'CameraMinZoomDistance' or propertyName == 'CameraMaxZoomDistance' then
                        if self.activeCameraController then
                            self.activeCameraController:UpdateForDistancePropertyChange()
                        end
                    elseif propertyName == 'DevTouchMovementMode' then
                    elseif propertyName == 'DevComputerMovementMode' then
                    elseif propertyName == 'DevEnableMouseLock' then
                    end
                end
                CameraModule.OnUserGameSettingsPropertyChanged = function(
                    self,
                    propertyName
                )
                    if propertyName == 'ComputerCameraMovementMode' then
                        local cameraMovementMode = self.GetCameraMovementModeFromSettings(self)

                        self.ActivateCameraController(self, CameraUtils.ConvertCameraModeEnumToStandard(cameraMovementMode))
                    end
                end
                CameraModule.Update = function(self, dt)
                    if self.activeCameraController then
                        if FFlagUserCameraToggle then
                            self.activeCameraController:UpdateMouseBehavior()
                        end

                        local newCameraCFrame, newCameraFocus = self.activeCameraController:Update(dt)

                        self.activeCameraController:ApplyVRTransform()

                        if self.activeOcclusionModule then
                            newCameraCFrame, newCameraFocus = self.activeOcclusionModule:Update(dt, newCameraCFrame, newCameraFocus)
                        end

                        game.Workspace.CurrentCamera.CFrame = newCameraCFrame
                        game.Workspace.CurrentCamera.Focus = newCameraFocus

                        if self.activeTransparencyController then
                            self.activeTransparencyController:Update()
                        end
                    end
                end
                CameraModule.GetCameraControlChoice = function(self)
                    local player = Players.LocalPlayer

                    if player then
                        if self.lastInputType == Enum.UserInputType.Touch or UserInputService.TouchEnabled then
                            if player.DevTouchCameraMode == Enum.DevTouchCameraMovementMode.UserChoice then
                                return CameraUtils.ConvertCameraModeEnumToStandard(UserGameSettings.TouchCameraMovementMode)
                            else
                                return CameraUtils.ConvertCameraModeEnumToStandard(player.DevTouchCameraMode)
                            end
                        else
                            if player.DevComputerCameraMode == Enum.DevComputerCameraMovementMode.UserChoice then
                                local computerMovementMode = CameraUtils.ConvertCameraModeEnumToStandard(UserGameSettings.ComputerCameraMovementMode)

                                return CameraUtils.ConvertCameraModeEnumToStandard(computerMovementMode)
                            else
                                return CameraUtils.ConvertCameraModeEnumToStandard(player.DevComputerCameraMode)
                            end
                        end
                    end
                end
                CameraModule.OnCharacterAdded = function(self, char, player)
                    if self.activeOcclusionModule then
                        self.activeOcclusionModule:CharacterAdded(char, player)
                    end
                end
                CameraModule.OnCharacterRemoving = function(self, char, player)
                    if self.activeOcclusionModule then
                        self.activeOcclusionModule:CharacterRemoving(char, player)
                    end
                end
                CameraModule.OnPlayerAdded = function(self, player)
                    player.CharacterAdded:Connect(function(char)
                        self.OnCharacterAdded(self, char, player)
                    end)
                    player.CharacterRemoving:Connect(function(char)
                        self.OnCharacterRemoving(self, char, player)
                    end)
                end
                CameraModule.OnMouseLockToggled = function(self)
                    if self.activeMouseLockController then
                        local mouseLocked = self.activeMouseLockController:GetIsMouseLocked()
                        local mouseLockOffset = self.activeMouseLockController:GetMouseLockOffset()

                        if self.activeCameraController then
                            self.activeCameraController:SetIsMouseLocked(mouseLocked)
                            self.activeCameraController:SetMouseLockOffset(mouseLockOffset)
                        end
                    end
                end

                local Camera = CameraModule
                local IDENTITYCF = CFrame.new()
                local lastUpCFrame = IDENTITYCF

                Camera.UpVector = Vector3.new(0, 1, 0)
                Camera.TransitionRate = 0.15
                Camera.UpCFrame = IDENTITYCF
                Camera.GetUpVector = function(self, oldUpVector)
                    return oldUpVector
                end

                local function getRotationBetween(u, v, axis)
                    local dot, uxv = u.Dot(u, v), u.Cross(u, v)

                    if (dot < -0.99999) then
                        return CFrame.fromAxisAngle(axis, math.pi)
                    end

                    return CFrame.new(0, 0, 0, uxv.x, uxv.y, uxv.z, 1 + dot)
                end

                Camera.CalculateUpCFrame = function(self)
                    local oldUpVector = self.UpVector
                    local newUpVector = self.GetUpVector(self, oldUpVector)
                    local backup = game.Workspace.CurrentCamera.CFrame.RightVector
                    local transitionCF = getRotationBetween(oldUpVector, newUpVector, backup)
                    local vecSlerpCF = IDENTITYCF.Lerp(IDENTITYCF, transitionCF, self.TransitionRate)

                    self.UpVector = vecSlerpCF * oldUpVector
                    self.UpCFrame = vecSlerpCF * self.UpCFrame
                    lastUpCFrame = self.UpCFrame
                end
                Camera.Update = function(self, dt)
                    if self.activeCameraController then
                        if Camera.FFlagUserCameraToggle then
                            self.activeCameraController:UpdateMouseBehavior()
                        end

                        local newCameraCFrame, newCameraFocus = self.activeCameraController:Update(dt)

                        self.activeCameraController:ApplyVRTransform()
                        self.CalculateUpCFrame(self)
                        self.activeCameraController:UpdateUpCFrame(self.UpCFrame)

                        local lockOffset = Vector3.new(0, 0, 0)

                        if (self.activeMouseLockController and self.activeMouseLockController:GetIsMouseLocked()) then
                            lockOffset = self.activeMouseLockController:GetMouseLockOffset()
                        end

                        local offset = newCameraFocus.ToObjectSpace(newCameraFocus, newCameraCFrame)
                        local camRotation = self.UpCFrame * offset

                        newCameraFocus = newCameraFocus - newCameraCFrame.VectorToWorldSpace(newCameraCFrame, lockOffset) + camRotation.VectorToWorldSpace(camRotation, lockOffset)
                        newCameraCFrame = newCameraFocus * camRotation

                        if (self.activeCameraController.lastCameraTransform) then
                            self.activeCameraController.lastCameraTransform = newCameraCFrame
                            self.activeCameraController.lastCameraFocus = newCameraFocus
                        end
                        if self.activeOcclusionModule then
                            newCameraCFrame, newCameraFocus = self.activeOcclusionModule:Update(dt, newCameraCFrame, newCameraFocus)
                        end

                        game.Workspace.CurrentCamera.CFrame = newCameraCFrame
                        game.Workspace.CurrentCamera.Focus = newCameraFocus

                        if self.activeTransparencyController then
                            self.activeTransparencyController:Update()
                        end
                    end
                end
                Camera.IsFirstPerson = function(self)
                    if self.activeCameraController then
                        return self.activeCameraController:InFirstPerson()
                    end

                    return false
                end
                Camera.IsMouseLocked = function(self)
                    if self.activeCameraController then
                        return self.activeCameraController:GetIsMouseLocked()
                    end

                    return false
                end
                Camera.IsToggleMode = function(self)
                    if self.activeCameraController then
                        return self.activeCameraController.isCameraToggle
                    end

                    return false
                end
                Camera.IsCamRelative = function(self)
                    return self.IsMouseLocked(self) or self.IsFirstPerson(self)
                end

                local Utils = _CameraUtils()

                Utils.GetAngleBetweenXZVectors = function(v1, v2)
                    local upCFrame = lastUpCFrame

                    v1 = upCFrame.VectorToObjectSpace(upCFrame, v1)
                    v2 = upCFrame.VectorToObjectSpace(upCFrame, v2)

                    return math.atan2(v2.X * v1.Z - v2.Z * v1.X, v2.X * v1.X + v2.Z * v1.Z)
                end

                local cameraModuleObject = CameraModule.new()
                local cameraApi = {}

                return cameraModuleObject
            end
            _ClickToMoveDisplay = function()
                local ClickToMoveDisplay = {}
                local FAILURE_ANIMATION_ID = 'rbxassetid://2874840706'
                local TrailDotIcon = 'rbxasset://textures/ui/traildot.png'
                local EndWaypointIcon = 'rbxasset://textures/ui/waypoint.png'
                local WaypointsAlwaysOnTop = false
                local WAYPOINT_INCLUDE_FACTOR = 2
                local LAST_DOT_DISTANCE = 3
                local WAYPOINT_BILLBOARD_SIZE = UDim2.new(0, 42, 0, 50)
                local ENDWAYPOINT_SIZE_OFFSET_MIN = Vector2.new(0, 0.5)
                local ENDWAYPOINT_SIZE_OFFSET_MAX = Vector2.new(0, 1)
                local FAIL_WAYPOINT_SIZE_OFFSET_CENTER = Vector2.new(0, 0.5)
                local FAIL_WAYPOINT_SIZE_OFFSET_LEFT = Vector2.new(0.1, 0.5)
                local FAIL_WAYPOINT_SIZE_OFFSET_RIGHT = Vector2.new(-0.1, 0.5)
                local FAILURE_TWEEN_LENGTH = 0.125
                local FAILURE_TWEEN_COUNT = 4
                local TWEEN_WAYPOINT_THRESHOLD = 5
                local TRAIL_DOT_PARENT_NAME = 'ClickToMoveDisplay'
                local TrailDotSize = Vector2.new(1.5, 1.5)
                local TRAIL_DOT_MIN_SCALE = 1
                local TRAIL_DOT_MIN_DISTANCE = 10
                local TRAIL_DOT_MAX_SCALE = 2.5
                local TRAIL_DOT_MAX_DISTANCE = 100
                local PlayersService = game.GetService(game, 'Players')
                local TweenService = game.GetService(game, 'TweenService')
                local RunService = game.GetService(game, 'RunService')
                local Workspace = game.GetService(game, 'Workspace')
                local LocalPlayer = PlayersService.LocalPlayer

                local function CreateWaypointTemplates()
                    local TrailDotTemplate = Instance.new('Part')

                    TrailDotTemplate.Size = Vector3.new(1, 1, 1)
                    TrailDotTemplate.Anchored = true
                    TrailDotTemplate.CanCollide = false
                    TrailDotTemplate.Name = 'TrailDot'
                    TrailDotTemplate.Transparency = 1

                    local TrailDotImage = Instance.new('ImageHandleAdornment')

                    TrailDotImage.Name = 'TrailDotImage'
                    TrailDotImage.Size = TrailDotSize
                    TrailDotImage.SizeRelativeOffset = Vector3.new(0, 0, -0.1)
                    TrailDotImage.AlwaysOnTop = WaypointsAlwaysOnTop
                    TrailDotImage.Image = TrailDotIcon
                    TrailDotImage.Adornee = TrailDotTemplate
                    TrailDotImage.Parent = TrailDotTemplate

                    local EndWaypointTemplate = Instance.new('Part')

                    EndWaypointTemplate.Size = Vector3.new(2, 2, 2)
                    EndWaypointTemplate.Anchored = true
                    EndWaypointTemplate.CanCollide = false
                    EndWaypointTemplate.Name = 'EndWaypoint'
                    EndWaypointTemplate.Transparency = 1

                    local EndWaypointImage = Instance.new('ImageHandleAdornment')

                    EndWaypointImage.Name = 'TrailDotImage'
                    EndWaypointImage.Size = TrailDotSize
                    EndWaypointImage.SizeRelativeOffset = Vector3.new(0, 0, -0.1)
                    EndWaypointImage.AlwaysOnTop = WaypointsAlwaysOnTop
                    EndWaypointImage.Image = TrailDotIcon
                    EndWaypointImage.Adornee = EndWaypointTemplate
                    EndWaypointImage.Parent = EndWaypointTemplate

                    local EndWaypointBillboard = Instance.new('BillboardGui')

                    EndWaypointBillboard.Name = 'EndWaypointBillboard'
                    EndWaypointBillboard.Size = WAYPOINT_BILLBOARD_SIZE
                    EndWaypointBillboard.LightInfluence = 0
                    EndWaypointBillboard.SizeOffset = ENDWAYPOINT_SIZE_OFFSET_MIN
                    EndWaypointBillboard.AlwaysOnTop = true
                    EndWaypointBillboard.Adornee = EndWaypointTemplate
                    EndWaypointBillboard.Parent = EndWaypointTemplate

                    local EndWaypointImageLabel = Instance.new('ImageLabel')

                    EndWaypointImageLabel.Image = EndWaypointIcon
                    EndWaypointImageLabel.BackgroundTransparency = 1
                    EndWaypointImageLabel.Size = UDim2.new(1, 0, 1, 0)
                    EndWaypointImageLabel.Parent = EndWaypointBillboard

                    local FailureWaypointTemplate = Instance.new('Part')

                    FailureWaypointTemplate.Size = Vector3.new(2, 2, 2)
                    FailureWaypointTemplate.Anchored = true
                    FailureWaypointTemplate.CanCollide = false
                    FailureWaypointTemplate.Name = 'FailureWaypoint'
                    FailureWaypointTemplate.Transparency = 1

                    local FailureWaypointImage = Instance.new('ImageHandleAdornment')

                    FailureWaypointImage.Name = 'TrailDotImage'
                    FailureWaypointImage.Size = TrailDotSize
                    FailureWaypointImage.SizeRelativeOffset = Vector3.new(0, 0, 
-0.1)
                    FailureWaypointImage.AlwaysOnTop = WaypointsAlwaysOnTop
                    FailureWaypointImage.Image = TrailDotIcon
                    FailureWaypointImage.Adornee = FailureWaypointTemplate
                    FailureWaypointImage.Parent = FailureWaypointTemplate

                    local FailureWaypointBillboard = Instance.new('BillboardGui')

                    FailureWaypointBillboard.Name = 'FailureWaypointBillboard'
                    FailureWaypointBillboard.Size = WAYPOINT_BILLBOARD_SIZE
                    FailureWaypointBillboard.LightInfluence = 0
                    FailureWaypointBillboard.SizeOffset = FAIL_WAYPOINT_SIZE_OFFSET_CENTER
                    FailureWaypointBillboard.AlwaysOnTop = true
                    FailureWaypointBillboard.Adornee = FailureWaypointTemplate
                    FailureWaypointBillboard.Parent = FailureWaypointTemplate

                    local FailureWaypointFrame = Instance.new('Frame')

                    FailureWaypointFrame.BackgroundTransparency = 1
                    FailureWaypointFrame.Size = UDim2.new(0, 0, 0, 0)
                    FailureWaypointFrame.Position = UDim2.new(0.5, 0, 1, 0)
                    FailureWaypointFrame.Parent = FailureWaypointBillboard

                    local FailureWaypointImageLabel = Instance.new('ImageLabel')

                    FailureWaypointImageLabel.Image = EndWaypointIcon
                    FailureWaypointImageLabel.BackgroundTransparency = 1
                    FailureWaypointImageLabel.Position = UDim2.new(0, -WAYPOINT_BILLBOARD_SIZE.X.Offset / 2, 0, 
-WAYPOINT_BILLBOARD_SIZE.Y.Offset)
                    FailureWaypointImageLabel.Size = WAYPOINT_BILLBOARD_SIZE
                    FailureWaypointImageLabel.Parent = FailureWaypointFrame

                    return TrailDotTemplate, EndWaypointTemplate, FailureWaypointTemplate
                end

                local TrailDotTemplate, EndWaypointTemplate, FailureWaypointTemplate = CreateWaypointTemplates()

                local function getTrailDotParent()
                    local camera = Workspace.CurrentCamera
                    local trailParent = camera.FindFirstChild(camera, TRAIL_DOT_PARENT_NAME)

                    if not trailParent then
                        trailParent = Instance.new('Model')
                        trailParent.Name = TRAIL_DOT_PARENT_NAME
                        trailParent.Parent = camera
                    end

                    return trailParent
                end
                local function placePathWaypoint(waypointModel, position)
                    local ray = Ray.new(position + Vector3.new(0, 2.5, 0), Vector3.new(0, 
-10, 0))
                    local hitPart, hitPoint, hitNormal = Workspace.FindPartOnRayWithIgnoreList(Workspace, ray, {
                        Workspace.CurrentCamera,
                        LocalPlayer.Character,
                    })

                    if hitPart then
                        waypointModel.CFrame = CFrame.new(hitPoint, hitPoint + hitNormal)
                        waypointModel.Parent = getTrailDotParent()
                    end
                end

                local TrailDot = {}

                TrailDot.__index = TrailDot
                TrailDot.Destroy = function(self)
                    self.DisplayModel:Destroy()
                end
                TrailDot.NewDisplayModel = function(self, position)
                    local newDisplayModel = TrailDotTemplate.Clone(TrailDotTemplate)

                    placePathWaypoint(newDisplayModel, position)

                    return newDisplayModel
                end
                TrailDot.new = function(position, closestWaypoint)
                    local self = setmetatable({}, TrailDot)

                    self.DisplayModel = self.NewDisplayModel(self, position)
                    self.ClosestWayPoint = closestWaypoint

                    return self
                end

                local EndWaypoint = {}

                EndWaypoint.__index = EndWaypoint
                EndWaypoint.Destroy = function(self)
                    self.Destroyed = true

                    self.Tween:Cancel()
                    self.DisplayModel:Destroy()
                end
                EndWaypoint.NewDisplayModel = function(self, position)
                    local newDisplayModel = EndWaypointTemplate.Clone(EndWaypointTemplate)

                    placePathWaypoint(newDisplayModel, position)

                    return newDisplayModel
                end
                EndWaypoint.CreateTween = function(self)
                    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, 
-1, true)
                    local tween = TweenService.Create(TweenService, self.DisplayModel.EndWaypointBillboard, tweenInfo, {SizeOffset = ENDWAYPOINT_SIZE_OFFSET_MAX})

                    tween.Play(tween)

                    return tween
                end
                EndWaypoint.TweenInFrom = function(self, originalPosition)
                    local currentPositon = self.DisplayModel.Position
                    local studsOffset = originalPosition - currentPositon

                    self.DisplayModel.EndWaypointBillboard.StudsOffset = Vector3.new(0, studsOffset.Y, 0)

                    local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
                    local tween = TweenService.Create(TweenService, self.DisplayModel.EndWaypointBillboard, tweenInfo, {
                        StudsOffset = Vector3.new(0, 0, 0),
                    })

                    tween.Play(tween)

                    return tween
                end
                EndWaypoint.new = function(
                    position,
                    closestWaypoint,
                    originalPosition
                )
                    local self = setmetatable({}, EndWaypoint)

                    self.DisplayModel = self.NewDisplayModel(self, position)
                    self.Destroyed = false

                    if originalPosition and (originalPosition - position).magnitude > TWEEN_WAYPOINT_THRESHOLD then
                        self.Tween = self.TweenInFrom(self, originalPosition)

                        coroutine.wrap(function()
                            self.Tween.Completed:Wait()

                            if not self.Destroyed then
                                self.Tween = self.CreateTween(self)
                            end
                        end)()
                    else
                        self.Tween = self.CreateTween(self)
                    end

                    self.ClosestWayPoint = closestWaypoint

                    return self
                end

                local FailureWaypoint = {}

                FailureWaypoint.__index = FailureWaypoint
                FailureWaypoint.Hide = function(self)
                    self.DisplayModel.Parent = nil
                end
                FailureWaypoint.Destroy = function(self)
                    self.DisplayModel:Destroy()
                end
                FailureWaypoint.NewDisplayModel = function(self, position)
                    local newDisplayModel = FailureWaypointTemplate.Clone(FailureWaypointTemplate)

                    placePathWaypoint(newDisplayModel, position)

                    local ray = Ray.new(position + Vector3.new(0, 2.5, 0), Vector3.new(0, 
-10, 0))
                    local hitPart, hitPoint, hitNormal = Workspace.FindPartOnRayWithIgnoreList(Workspace, ray, {
                        Workspace.CurrentCamera,
                        LocalPlayer.Character,
                    })

                    if hitPart then
                        newDisplayModel.CFrame = CFrame.new(hitPoint, hitPoint + hitNormal)
                        newDisplayModel.Parent = getTrailDotParent()
                    end

                    return newDisplayModel
                end
                FailureWaypoint.RunFailureTween = function(self)
                    wait(FAILURE_TWEEN_LENGTH)

                    local tweenInfo = TweenInfo.new(FAILURE_TWEEN_LENGTH / 2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
                    local tweenLeft = TweenService.Create(TweenService, self.DisplayModel.FailureWaypointBillboard, tweenInfo, {SizeOffset = FAIL_WAYPOINT_SIZE_OFFSET_LEFT})

                    tweenLeft.Play(tweenLeft)

                    local tweenLeftRoation = TweenService.Create(TweenService, self.DisplayModel.FailureWaypointBillboard.Frame, tweenInfo, {Rotation = 10})

                    tweenLeftRoation.Play(tweenLeftRoation)
                    tweenLeft.Completed:wait()

                    tweenInfo = TweenInfo.new(FAILURE_TWEEN_LENGTH, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, FAILURE_TWEEN_COUNT - 1, true)

                    local tweenSideToSide = TweenService.Create(TweenService, self.DisplayModel.FailureWaypointBillboard, tweenInfo, {SizeOffset = FAIL_WAYPOINT_SIZE_OFFSET_RIGHT})

                    tweenSideToSide.Play(tweenSideToSide)

                    tweenInfo = TweenInfo.new(FAILURE_TWEEN_LENGTH, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, FAILURE_TWEEN_COUNT - 1, true)

                    local tweenFlash = TweenService.Create(TweenService, self.DisplayModel.FailureWaypointBillboard.Frame.ImageLabel, tweenInfo, {
                        ImageColor3 = Color3.new(0.75, 0.75, 0.75),
                    })

                    tweenFlash.Play(tweenFlash)

                    local tweenRotate = TweenService.Create(TweenService, self.DisplayModel.FailureWaypointBillboard.Frame, tweenInfo, {
                        Rotation = -10,
                    })

                    tweenRotate.Play(tweenRotate)
                    tweenSideToSide.Completed:wait()

                    tweenInfo = TweenInfo.new(FAILURE_TWEEN_LENGTH / 2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)

                    local tweenCenter = TweenService.Create(TweenService, self.DisplayModel.FailureWaypointBillboard, tweenInfo, {SizeOffset = FAIL_WAYPOINT_SIZE_OFFSET_CENTER})

                    tweenCenter.Play(tweenCenter)

                    local tweenRoation = TweenService.Create(TweenService, self.DisplayModel.FailureWaypointBillboard.Frame, tweenInfo, {Rotation = 0})

                    tweenRoation.Play(tweenRoation)
                    tweenCenter.Completed:wait()
                    wait(FAILURE_TWEEN_LENGTH)
                end
                FailureWaypoint.new = function(position)
                    local self = setmetatable({}, FailureWaypoint)

                    self.DisplayModel = self.NewDisplayModel(self, position)

                    return self
                end

                local failureAnimation = Instance.new('Animation')

                failureAnimation.AnimationId = FAILURE_ANIMATION_ID

                local lastHumanoid
                local lastFailureAnimationTrack

                local function getFailureAnimationTrack(myHumanoid)
                    if myHumanoid == lastHumanoid then
                        return lastFailureAnimationTrack
                    end

                    lastFailureAnimationTrack = myHumanoid.LoadAnimation(myHumanoid, failureAnimation)
                    lastFailureAnimationTrack.Priority = Enum.AnimationPriority.Action
                    lastFailureAnimationTrack.Looped = false

                    return lastFailureAnimationTrack
                end
                local function findPlayerHumanoid()
                    local character = LocalPlayer.Character

                    if character then
                        return character.FindFirstChildOfClass(character, 'Humanoid')
                    end
                end
                local function createTrailDots(wayPoints, originalEndWaypoint)
                    local newTrailDots = {}
                    local count = 1

                    for i = 1, #wayPoints - 1 do
                        local closeToEnd = (wayPoints[i].Position - wayPoints[#wayPoints].Position).magnitude < LAST_DOT_DISTANCE
                        local includeWaypoint = i % WAYPOINT_INCLUDE_FACTOR == 0 and not closeToEnd

                        if includeWaypoint then
                            local trailDot = TrailDot.new(wayPoints[i].Position, i)

                            newTrailDots[count] = trailDot
                            count = count + 1
                        end
                    end

                    local newEndWaypoint = EndWaypoint.new(wayPoints[#wayPoints].Position, #wayPoints, originalEndWaypoint)

                    table.insert(newTrailDots, newEndWaypoint)

                    local reversedTrailDots = {}

                    count = 1

                    for i = #newTrailDots, 1, -1 do
                        reversedTrailDots[count] = newTrailDots[i]
                        count = count + 1
                    end

                    return reversedTrailDots
                end
                local function getTrailDotScale(distanceToCamera, defaultSize)
                    local rangeLength = TRAIL_DOT_MAX_DISTANCE - TRAIL_DOT_MIN_DISTANCE
                    local inRangePoint = math.clamp(distanceToCamera - TRAIL_DOT_MIN_DISTANCE, 0, rangeLength) / rangeLength
                    local scale = TRAIL_DOT_MIN_SCALE + (TRAIL_DOT_MAX_SCALE - TRAIL_DOT_MIN_SCALE) * inRangePoint

                    return defaultSize * scale
                end

                local createPathCount = 0

                ClickToMoveDisplay.CreatePathDisplay = function(
                    wayPoints,
                    originalEndWaypoint
                )
                    createPathCount = createPathCount + 1

                    local trailDots = createTrailDots(wayPoints, originalEndWaypoint)

                    local function removePathBeforePoint(wayPointNumber)
                        for i = #trailDots, 1, -1 do
                            local trailDot = trailDots[i]

                            if trailDot.ClosestWayPoint <= wayPointNumber then
                                trailDot.Destroy(trailDot)

                                trailDots[i] = nil
                            else
                                break
                            end
                        end
                    end

                    local reiszeTrailDotsUpdateName = 'ClickToMoveResizeTrail' .. createPathCount

                    local function resizeTrailDots()
                        if #trailDots == 0 then
                            RunService.UnbindFromRenderStep(RunService, reiszeTrailDotsUpdateName)

                            return
                        end

                        local cameraPos = Workspace.CurrentCamera.CFrame.p

                        for i = 1, #trailDots do
                            local trailDotImage = trailDots[i].DisplayModel:FindFirstChild('TrailDotImage')

                            if trailDotImage then
                                local distanceToCamera = (trailDots[i].DisplayModel.Position - cameraPos).magnitude

                                trailDotImage.Size = getTrailDotScale(distanceToCamera, TrailDotSize)
                            end
                        end
                    end

                    RunService.BindToRenderStep(RunService, reiszeTrailDotsUpdateName, Enum.RenderPriority.Camera.Value - 1, resizeTrailDots)

                    local function removePath()
                        removePathBeforePoint(#wayPoints)
                    end

                    return removePath, removePathBeforePoint
                end

                local lastFailureWaypoint

                ClickToMoveDisplay.DisplayFailureWaypoint = function(position)
                    if lastFailureWaypoint then
                        lastFailureWaypoint.Hide(lastFailureWaypoint)
                    end

                    local failureWaypoint = FailureWaypoint.new(position)

                    lastFailureWaypoint = failureWaypoint

                    coroutine.wrap(function()
                        failureWaypoint.RunFailureTween(failureWaypoint)
                        failureWaypoint.Destroy(failureWaypoint)

                        failureWaypoint = nil
                    end)()
                end
                ClickToMoveDisplay.CreateEndWaypoint = function(position)
                    return EndWaypoint.new(position)
                end
                ClickToMoveDisplay.PlayFailureAnimation = function()
                    local myHumanoid = findPlayerHumanoid()

                    if myHumanoid then
                        local animationTrack = getFailureAnimationTrack(myHumanoid)

                        animationTrack.Play(animationTrack)
                    end
                end
                ClickToMoveDisplay.CancelFailureAnimation = function()
                    if lastFailureAnimationTrack ~= nil and lastFailureAnimationTrack.IsPlaying then
                        lastFailureAnimationTrack.Stop(lastFailureAnimationTrack)
                    end
                end
                ClickToMoveDisplay.SetWaypointTexture = function(texture)
                    TrailDotIcon = texture
                    TrailDotTemplate, EndWaypointTemplate, FailureWaypointTemplate = CreateWaypointTemplates()
                end
                ClickToMoveDisplay.GetWaypointTexture = function()
                    return TrailDotIcon
                end
                ClickToMoveDisplay.SetWaypointRadius = function(radius)
                    TrailDotSize = Vector2.new(radius, radius)
                    TrailDotTemplate, EndWaypointTemplate, FailureWaypointTemplate = CreateWaypointTemplates()
                end
                ClickToMoveDisplay.GetWaypointRadius = function()
                    return TrailDotSize.X
                end
                ClickToMoveDisplay.SetEndWaypointTexture = function(texture)
                    EndWaypointIcon = texture
                    TrailDotTemplate, EndWaypointTemplate, FailureWaypointTemplate = CreateWaypointTemplates()
                end
                ClickToMoveDisplay.GetEndWaypointTexture = function()
                    return EndWaypointIcon
                end
                ClickToMoveDisplay.SetWaypointsAlwaysOnTop = function(
                    alwaysOnTop
                )
                    WaypointsAlwaysOnTop = alwaysOnTop
                    TrailDotTemplate, EndWaypointTemplate, FailureWaypointTemplate = CreateWaypointTemplates()
                end
                ClickToMoveDisplay.GetWaypointsAlwaysOnTop = function()
                    return WaypointsAlwaysOnTop
                end

                return ClickToMoveDisplay
            end
            _BaseCharacterController = function()
                local ZERO_VECTOR3 = Vector3.new(0, 0, 0)
                local BaseCharacterController = {}

                BaseCharacterController.__index = BaseCharacterController
                BaseCharacterController.new = function()
                    local self = setmetatable({}, BaseCharacterController)

                    self.enabled = false
                    self.moveVector = ZERO_VECTOR3
                    self.moveVectorIsCameraRelative = true
                    self.isJumping = false

                    return self
                end
                BaseCharacterController.OnRenderStepped = function(self, dt) end
                BaseCharacterController.GetMoveVector = function(self)
                    return self.moveVector
                end
                BaseCharacterController.IsMoveVectorCameraRelative = function(
                    self
                )
                    return self.moveVectorIsCameraRelative
                end
                BaseCharacterController.GetIsJumping = function(self)
                    return self.isJumping
                end
                BaseCharacterController.Enable = function(self, enable)
                    error(
[[BaseCharacterController:Enable must be overridden in derived classes and should not be called.]])

                    return false
                end

                return BaseCharacterController
            end
            _VehicleController = function()
                local ContextActionService = game.GetService(game, 'ContextActionService')
                local useTriggersForThrottle = true
                local onlyTriggersForThrottle = false
                local ZERO_VECTOR3 = Vector3.new(0, 0, 0)
                local AUTO_PILOT_DEFAULT_MAX_STEERING_ANGLE = 35
                local VehicleController = {}

                VehicleController.__index = VehicleController
                VehicleController.new = function(CONTROL_ACTION_PRIORITY)
                    local self = setmetatable({}, VehicleController)

                    self.CONTROL_ACTION_PRIORITY = CONTROL_ACTION_PRIORITY
                    self.enabled = false
                    self.vehicleSeat = nil
                    self.throttle = 0
                    self.steer = 0
                    self.acceleration = 0
                    self.decceleration = 0
                    self.turningRight = 0
                    self.turningLeft = 0
                    self.vehicleMoveVector = ZERO_VECTOR3
                    self.autoPilot = {}
                    self.autoPilot.MaxSpeed = 0
                    self.autoPilot.MaxSteeringAngle = 0

                    return self
                end
                VehicleController.BindContextActions = function(self)
                    if useTriggersForThrottle then
                        ContextActionService.BindActionAtPriority(ContextActionService, 'throttleAccel', (function(
                            actionName,
                            inputState,
                            inputObject
                        )
                            self.OnThrottleAccel(self, actionName, inputState, inputObject)

                            return Enum.ContextActionResult.Pass
                        end), false, self.CONTROL_ACTION_PRIORITY, Enum.KeyCode.ButtonR2)
                        ContextActionService.BindActionAtPriority(ContextActionService, 'throttleDeccel', (function(
                            actionName,
                            inputState,
                            inputObject
                        )
                            self.OnThrottleDeccel(self, actionName, inputState, inputObject)

                            return Enum.ContextActionResult.Pass
                        end), false, self.CONTROL_ACTION_PRIORITY, Enum.KeyCode.ButtonL2)
                    end

                    ContextActionService.BindActionAtPriority(ContextActionService, 'arrowSteerRight', (function(
                        actionName,
                        inputState,
                        inputObject
                    )
                        self.OnSteerRight(self, actionName, inputState, inputObject)

                        return Enum.ContextActionResult.Pass
                    end), false, self.CONTROL_ACTION_PRIORITY, Enum.KeyCode.Right)
                    ContextActionService.BindActionAtPriority(ContextActionService, 'arrowSteerLeft', (function(
                        actionName,
                        inputState,
                        inputObject
                    )
                        self.OnSteerLeft(self, actionName, inputState, inputObject)

                        return Enum.ContextActionResult.Pass
                    end), false, self.CONTROL_ACTION_PRIORITY, Enum.KeyCode.Left)
                end
                VehicleController.Enable = function(self, enable, vehicleSeat)
                    if enable == self.enabled and vehicleSeat == self.vehicleSeat then
                        return
                    end

                    self.enabled = enable
                    self.vehicleMoveVector = ZERO_VECTOR3

                    if enable then
                        if vehicleSeat then
                            self.vehicleSeat = vehicleSeat

                            self.SetupAutoPilot(self)
                            self.BindContextActions(self)
                        end
                    else
                        if useTriggersForThrottle then
                            ContextActionService.UnbindAction(ContextActionService, 'throttleAccel')
                            ContextActionService.UnbindAction(ContextActionService, 'throttleDeccel')
                        end

                        ContextActionService.UnbindAction(ContextActionService, 'arrowSteerRight')
                        ContextActionService.UnbindAction(ContextActionService, 'arrowSteerLeft')

                        self.vehicleSeat = nil
                    end
                end
                VehicleController.OnThrottleAccel = function(
                    self,
                    actionName,
                    inputState,
                    inputObject
                )
                    if inputState == Enum.UserInputState.End or inputState == Enum.UserInputState.Cancel then
                        self.acceleration = 0
                    else
                        self.acceleration = -1
                    end

                    self.throttle = self.acceleration + self.decceleration
                end
                VehicleController.OnThrottleDeccel = function(
                    self,
                    actionName,
                    inputState,
                    inputObject
                )
                    if inputState == Enum.UserInputState.End or inputState == Enum.UserInputState.Cancel then
                        self.decceleration = 0
                    else
                        self.decceleration = 1
                    end

                    self.throttle = self.acceleration + self.decceleration
                end
                VehicleController.OnSteerRight = function(
                    self,
                    actionName,
                    inputState,
                    inputObject
                )
                    if inputState == Enum.UserInputState.End or inputState == Enum.UserInputState.Cancel then
                        self.turningRight = 0
                    else
                        self.turningRight = 1
                    end

                    self.steer = self.turningRight + self.turningLeft
                end
                VehicleController.OnSteerLeft = function(
                    self,
                    actionName,
                    inputState,
                    inputObject
                )
                    if inputState == Enum.UserInputState.End or inputState == Enum.UserInputState.Cancel then
                        self.turningLeft = 0
                    else
                        self.turningLeft = -1
                    end

                    self.steer = self.turningRight + self.turningLeft
                end
                VehicleController.Update = function(
                    self,
                    moveVector,
                    cameraRelative,
                    usingGamepad
                )
                    if self.vehicleSeat then
                        if cameraRelative then
                            moveVector = moveVector + Vector3.new(self.steer, 0, self.throttle)

                            if usingGamepad and onlyTriggersForThrottle and useTriggersForThrottle then
                                self.vehicleSeat.ThrottleFloat = -self.throttle
                            else
                                self.vehicleSeat.ThrottleFloat = -moveVector.Z
                            end

                            self.vehicleSeat.SteerFloat = moveVector.X

                            return moveVector, true
                        else
                            local localMoveVector = self.vehicleSeat.Occupant.RootPart.CFrame:VectorToObjectSpace(moveVector)

                            self.vehicleSeat.ThrottleFloat = self.ComputeThrottle(self, localMoveVector)
                            self.vehicleSeat.SteerFloat = self.ComputeSteer(self, localMoveVector)

                            return ZERO_VECTOR3, true
                        end
                    end

                    return moveVector, false
                end
                VehicleController.ComputeThrottle = function(
                    self,
                    localMoveVector
                )
                    if localMoveVector ~= ZERO_VECTOR3 then
                        local throttle = -localMoveVector.Z

                        return throttle
                    else
                        return 0
                    end
                end
                VehicleController.ComputeSteer = function(
                    self,
                    localMoveVector
                )
                    if localMoveVector ~= ZERO_VECTOR3 then
                        local steerAngle = -math.atan2(-localMoveVector.x, -localMoveVector.z) * (180 / math.pi)

                        return steerAngle / self.autoPilot.MaxSteeringAngle
                    else
                        return 0
                    end
                end
                VehicleController.SetupAutoPilot = function(self)
                    self.autoPilot.MaxSpeed = self.vehicleSeat.MaxSpeed
                    self.autoPilot.MaxSteeringAngle = AUTO_PILOT_DEFAULT_MAX_STEERING_ANGLE
                end

                return VehicleController
            end
            _TouchJump = function()
                local Players = game.GetService(game, 'Players')
                local GuiService = game.GetService(game, 'GuiService')
                local TOUCH_CONTROL_SHEET = 'rbxasset://textures/ui/Input/TouchControlsSheetV2.png'
                local BaseCharacterController = _BaseCharacterController()
                local TouchJump = setmetatable({}, BaseCharacterController)

                TouchJump.__index = TouchJump
                TouchJump.new = function()
                    local self = setmetatable(BaseCharacterController.new(), TouchJump)

                    self.parentUIFrame = nil
                    self.jumpButton = nil
                    self.characterAddedConn = nil
                    self.humanoidStateEnabledChangedConn = nil
                    self.humanoidJumpPowerConn = nil
                    self.humanoidParentConn = nil
                    self.externallyEnabled = false
                    self.jumpPower = 0
                    self.jumpStateEnabled = true
                    self.isJumping = false
                    self.humanoid = nil

                    return self
                end
                TouchJump.EnableButton = function(self, enable)
                    if enable then
                        if not self.jumpButton then
                            self.Create(self)
                        end

                        local humanoid = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid')

                        if humanoid and self.externallyEnabled then
                            if self.externallyEnabled then
                                if humanoid.JumpPower > 0 then
                                    self.jumpButton.Visible = true
                                end
                            end
                        end
                    else
                        self.jumpButton.Visible = false
                        self.isJumping = false
                        self.jumpButton.ImageRectOffset = Vector2.new(1, 146)
                    end
                end
                TouchJump.UpdateEnabled = function(self)
                    if self.jumpPower > 0 and self.jumpStateEnabled then
                        self.EnableButton(self, true)
                    else
                        self.EnableButton(self, false)
                    end
                end
                TouchJump.HumanoidChanged = function(self, prop)
                    local humanoid = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid')

                    if humanoid then
                        if prop == 'JumpPower' then
                            self.jumpPower = humanoid.JumpPower

                            self.UpdateEnabled(self)
                        elseif prop == 'Parent' then
                            if not humanoid.Parent then
                                self.humanoidChangeConn:Disconnect()
                            end
                        end
                    end
                end
                TouchJump.HumanoidStateEnabledChanged = function(
                    self,
                    state,
                    isEnabled
                )
                    if state == Enum.HumanoidStateType.Jumping then
                        self.jumpStateEnabled = isEnabled

                        self.UpdateEnabled(self)
                    end
                end
                TouchJump.CharacterAdded = function(self, char)
                    if self.humanoidChangeConn then
                        self.humanoidChangeConn:Disconnect()

                        self.humanoidChangeConn = nil
                    end

                    self.humanoid = char.FindFirstChildOfClass(char, 'Humanoid')

                    while not self.humanoid do
                        char.ChildAdded:wait()

                        self.humanoid = char.FindFirstChildOfClass(char, 'Humanoid')
                    end

                    self.humanoidJumpPowerConn = self.humanoid:GetPropertyChangedSignal('JumpPower'):Connect(function(
                    )
                        self.jumpPower = self.humanoid.JumpPower

                        self.UpdateEnabled(self)
                    end)
                    self.humanoidParentConn = self.humanoid:GetPropertyChangedSignal('Parent'):Connect(function(
                    )
                        if not self.humanoid.Parent then
                            self.humanoidJumpPowerConn:Disconnect()

                            self.humanoidJumpPowerConn = nil

                            self.humanoidParentConn:Disconnect()

                            self.humanoidParentConn = nil
                        end
                    end)
                    self.humanoidStateEnabledChangedConn = self.humanoid.StateEnabledChanged:Connect(function(
                        state,
                        enabled
                    )
                        self.HumanoidStateEnabledChanged(self, state, enabled)
                    end)
                    self.jumpPower = self.humanoid.JumpPower
                    self.jumpStateEnabled = self.humanoid:GetStateEnabled(Enum.HumanoidStateType.Jumping)

                    self.UpdateEnabled(self)
                end
                TouchJump.SetupCharacterAddedFunction = function(self)
                    self.characterAddedConn = Players.LocalPlayer.CharacterAdded:Connect(function(
                        char
                    )
                        self.CharacterAdded(self, char)
                    end)

                    if Players.LocalPlayer.Character then
                        self.CharacterAdded(self, Players.LocalPlayer.Character)
                    end
                end
                TouchJump.Enable = function(self, enable, parentFrame)
                    if parentFrame then
                        self.parentUIFrame = parentFrame
                    end

                    self.externallyEnabled = enable

                    self.EnableButton(self, enable)
                end
                TouchJump.Create = function(self)
                    if not self.parentUIFrame then
                        return
                    end
                    if self.jumpButton then
                        self.jumpButton:Destroy()

                        self.jumpButton = nil
                    end

                    local minAxis = math.min(self.parentUIFrame.AbsoluteSize.x, self.parentUIFrame.AbsoluteSize.y)
                    local isSmallScreen = minAxis <= 500
                    local jumpButtonSize = isSmallScreen and 70 or 120

                    self.jumpButton = Instance.new('ImageButton')
                    self.jumpButton.Name = 'JumpButton'
                    self.jumpButton.Visible = false
                    self.jumpButton.BackgroundTransparency = 1
                    self.jumpButton.Image = TOUCH_CONTROL_SHEET
                    self.jumpButton.ImageRectOffset = Vector2.new(1, 146)
                    self.jumpButton.ImageRectSize = Vector2.new(144, 144)
                    self.jumpButton.Size = UDim2.new(0, jumpButtonSize, 0, jumpButtonSize)
                    self.jumpButton.Position = isSmallScreen and UDim2.new(1, -(jumpButtonSize * 1.5 - 10), 1, 
-jumpButtonSize - 20) or UDim2.new(1, -(jumpButtonSize * 1.5 - 10), 1, -jumpButtonSize * 1.75)

                    local touchObject

                    self.jumpButton.InputBegan:connect(function(inputObject)
                        if touchObject or inputObject.UserInputType ~= Enum.UserInputType.Touch or inputObject.UserInputState ~= Enum.UserInputState.Begin then
                            return
                        end

                        touchObject = inputObject
                        self.jumpButton.ImageRectOffset = Vector2.new(146, 146)
                        self.isJumping = true
                    end)

                    local OnInputEnded = function()
                        touchObject = nil
                        self.isJumping = false
                        self.jumpButton.ImageRectOffset = Vector2.new(1, 146)
                    end

                    self.jumpButton.InputEnded:connect(function(inputObject)
                        if inputObject == touchObject then
                            OnInputEnded()
                        end
                    end)
                    GuiService.MenuOpened:connect(function()
                        if touchObject then
                            OnInputEnded()
                        end
                    end)

                    if not self.characterAddedConn then
                        self.SetupCharacterAddedFunction(self)
                    end

                    self.jumpButton.Parent = self.parentUIFrame
                end

                return TouchJump
            end
            _ClickToMoveController = function()
                local UserInputService = game.GetService(game, 'UserInputService')
                local PathfindingService = game.GetService(game, 'PathfindingService')
                local Players = game.GetService(game, 'Players')
                local DebrisService = game.GetService(game, 'Debris')
                local StarterGui = game.GetService(game, 'StarterGui')
                local Workspace = game.GetService(game, 'Workspace')
                local CollectionService = game.GetService(game, 'CollectionService')
                local GuiService = game.GetService(game, 'GuiService')
                local ShowPath = true
                local PlayFailureAnimation = true
                local UseDirectPath = false
                local UseDirectPathForVehicle = true
                local AgentSizeIncreaseFactor = 1
                local UnreachableWaypointTimeout = 8
                local movementKeys = {
                    [Enum.KeyCode.W] = true,
                    [Enum.KeyCode.A] = true,
                    [Enum.KeyCode.S] = true,
                    [Enum.KeyCode.D] = true,
                    [Enum.KeyCode.Up] = true,
                    [Enum.KeyCode.Down] = true,
                }
                local FFlagUserNavigationClickToMoveSkipPassedWaypointsSuccess, FFlagUserNavigationClickToMoveSkipPassedWaypointsResult = pcall(function(
                )
                    return UserSettings():IsUserFeatureEnabled('UserNavigationClickToMoveSkipPassedWaypoints')
                end)
                local FFlagUserNavigationClickToMoveSkipPassedWaypoints = FFlagUserNavigationClickToMoveSkipPassedWaypointsSuccess and FFlagUserNavigationClickToMoveSkipPassedWaypointsResult
                local Player = Players.LocalPlayer
                local ClickToMoveDisplay = _ClickToMoveDisplay()
                local ZERO_VECTOR3 = Vector3.new(0, 0, 0)
                local ALMOST_ZERO = 0.000001
                local Utility = {}

                do
                    local function FindCharacterAncestor(part)
                        if part then
                            local humanoid = part.FindFirstChildOfClass(part, 'Humanoid')

                            if humanoid then
                                return part, humanoid
                            else
                                return FindCharacterAncestor(part.Parent)
                            end
                        end
                    end

                    Utility.FindCharacterAncestor = FindCharacterAncestor

                    local function Raycast(
                        ray,
                        ignoreNonCollidable,
                        ignoreList
                    )
                        ignoreList = ignoreList or {}

                        local hitPart, hitPos, hitNorm, hitMat = Workspace.FindPartOnRayWithIgnoreList(Workspace, ray, ignoreList)

                        if hitPart then
                            if ignoreNonCollidable and hitPart.CanCollide == false then
                                local _, humanoid = FindCharacterAncestor(hitPart)

                                if humanoid == nil then
                                    table.insert(ignoreList, hitPart)

                                    return Raycast(ray, ignoreNonCollidable, ignoreList)
                                end
                            end

                            return hitPart, hitPos, hitNorm, hitMat
                        end

                        return nil, nil
                    end

                    Utility.Raycast = Raycast
                end

                local humanoidCache = {}

                local function findPlayerHumanoid(player)
                    local character = player and player.Character

                    if character then
                        local resultHumanoid = humanoidCache[player]

                        if resultHumanoid and resultHumanoid.Parent == character then
                            return resultHumanoid
                        else
                            humanoidCache[player] = nil

                            local humanoid = character.FindFirstChildOfClass(character, 'Humanoid')

                            if humanoid then
                                humanoidCache[player] = humanoid
                            end

                            return humanoid
                        end
                    end
                end

                local CurrentIgnoreList
                local CurrentIgnoreTag
                local TaggedInstanceAddedConnection
                local TaggedInstanceRemovedConnection

                local function GetCharacter()
                    return Player and Player.Character
                end
                local function UpdateIgnoreTag(newIgnoreTag)
                    if newIgnoreTag == CurrentIgnoreTag then
                        return
                    end
                    if TaggedInstanceAddedConnection then
                        TaggedInstanceAddedConnection.Disconnect(TaggedInstanceAddedConnection)

                        TaggedInstanceAddedConnection = nil
                    end
                    if TaggedInstanceRemovedConnection then
                        TaggedInstanceRemovedConnection.Disconnect(TaggedInstanceRemovedConnection)

                        TaggedInstanceRemovedConnection = nil
                    end

                    CurrentIgnoreTag = newIgnoreTag
                    CurrentIgnoreList = {
                        GetCharacter(),
                    }

                    if CurrentIgnoreTag ~= nil then
                        local ignoreParts = CollectionService.GetTagged(CollectionService, CurrentIgnoreTag)

                        for _, ignorePart in ipairs(ignoreParts)do
                            table.insert(CurrentIgnoreList, ignorePart)
                        end

                        TaggedInstanceAddedConnection = CollectionService.GetInstanceAddedSignal(CollectionService, CurrentIgnoreTag):Connect(function(
                            ignorePart
                        )
                            table.insert(CurrentIgnoreList, ignorePart)
                        end)
                        TaggedInstanceRemovedConnection = CollectionService.GetInstanceRemovedSignal(CollectionService, CurrentIgnoreTag):Connect(function(
                            ignorePart
                        )
                            for i = 1, #CurrentIgnoreList do
                                if CurrentIgnoreList[i] == ignorePart then
                                    CurrentIgnoreList[i] = CurrentIgnoreList[#CurrentIgnoreList]

                                    table.remove(CurrentIgnoreList)

                                    break
                                end
                            end
                        end)
                    end
                end
                local function getIgnoreList()
                    if CurrentIgnoreList then
                        return CurrentIgnoreList
                    end

                    CurrentIgnoreList = {}

                    table.insert(CurrentIgnoreList, GetCharacter())

                    return CurrentIgnoreList
                end
                local function Pather(
                    endPoint,
                    surfaceNormal,
                    overrideUseDirectPath
                )
                    local this = {}
                    local directPathForHumanoid
                    local directPathForVehicle

                    if overrideUseDirectPath ~= nil then
                        directPathForHumanoid = overrideUseDirectPath
                        directPathForVehicle = overrideUseDirectPath
                    else
                        directPathForHumanoid = UseDirectPath
                        directPathForVehicle = UseDirectPathForVehicle
                    end

                    this.Cancelled = false
                    this.Started = false
                    this.Finished = Instance.new('BindableEvent')
                    this.PathFailed = Instance.new('BindableEvent')
                    this.PathComputing = false
                    this.PathComputed = false
                    this.OriginalTargetPoint = endPoint
                    this.TargetPoint = endPoint
                    this.TargetSurfaceNormal = surfaceNormal
                    this.DiedConn = nil
                    this.SeatedConn = nil
                    this.BlockedConn = nil
                    this.TeleportedConn = nil
                    this.CurrentPoint = 0
                    this.HumanoidOffsetFromPath = ZERO_VECTOR3
                    this.CurrentWaypointPosition = nil
                    this.CurrentWaypointPlaneNormal = ZERO_VECTOR3
                    this.CurrentWaypointPlaneDistance = 0
                    this.CurrentWaypointNeedsJump = false
                    this.CurrentHumanoidPosition = ZERO_VECTOR3
                    this.CurrentHumanoidVelocity = 0
                    this.NextActionMoveDirection = ZERO_VECTOR3
                    this.NextActionJump = false
                    this.Timeout = 0
                    this.Humanoid = findPlayerHumanoid(Player)
                    this.OriginPoint = nil
                    this.AgentCanFollowPath = false
                    this.DirectPath = false
                    this.DirectPathRiseFirst = false

                    local rootPart = this.Humanoid and this.Humanoid.RootPart

                    if rootPart then
                        this.OriginPoint = rootPart.CFrame.p

                        local agentRadius = 2
                        local agentHeight = 5
                        local agentCanJump = true
                        local seat = this.Humanoid.SeatPart

                        if seat and seat.IsA(seat, 'VehicleSeat') then
                            local vehicle = seat.FindFirstAncestorOfClass(seat, 'Model')

                            if vehicle then
                                local tempPrimaryPart = vehicle.PrimaryPart

                                vehicle.PrimaryPart = seat

                                if directPathForVehicle then
                                    local extents = vehicle.GetExtentsSize(vehicle)

                                    agentRadius = AgentSizeIncreaseFactor * 0.5 * math.sqrt(extents.X * extents.X + extents.Z * extents.Z)
                                    agentHeight = AgentSizeIncreaseFactor * extents.Y
                                    agentCanJump = false
                                    this.AgentCanFollowPath = true
                                    this.DirectPath = directPathForVehicle
                                end

                                vehicle.PrimaryPart = tempPrimaryPart
                            end
                        else
                            local extents = GetCharacter():GetExtentsSize()

                            agentRadius = AgentSizeIncreaseFactor * 0.5 * math.sqrt(extents.X * extents.X + extents.Z * extents.Z)
                            agentHeight = AgentSizeIncreaseFactor * extents.Y
                            agentCanJump = (this.Humanoid.JumpPower > 0)
                            this.AgentCanFollowPath = true
                            this.DirectPath = directPathForHumanoid
                            this.DirectPathRiseFirst = this.Humanoid.Sit
                        end

                        this.pathResult = PathfindingService.CreatePath(PathfindingService, {
                            AgentRadius = agentRadius,
                            AgentHeight = agentHeight,
                            AgentCanJump = agentCanJump,
                        })
                    end

                    this.Cleanup = function(self)
                        if this.stopTraverseFunc then
                            this.stopTraverseFunc()

                            this.stopTraverseFunc = nil
                        end
                        if this.MoveToConn then
                            this.MoveToConn:Disconnect()

                            this.MoveToConn = nil
                        end
                        if this.BlockedConn then
                            this.BlockedConn:Disconnect()

                            this.BlockedConn = nil
                        end
                        if this.DiedConn then
                            this.DiedConn:Disconnect()

                            this.DiedConn = nil
                        end
                        if this.SeatedConn then
                            this.SeatedConn:Disconnect()

                            this.SeatedConn = nil
                        end
                        if this.TeleportedConn then
                            this.TeleportedConn:Disconnect()

                            this.TeleportedConn = nil
                        end

                        this.Started = false
                    end
                    this.Cancel = function(self)
                        this.Cancelled = true

                        this.Cleanup(this)
                    end
                    this.IsActive = function(self)
                        return this.AgentCanFollowPath and this.Started and not this.Cancelled
                    end
                    this.OnPathInterrupted = function(self)
                        this.Cancelled = true

                        this.OnPointReached(this, false)
                    end
                    this.ComputePath = function(self)
                        if this.OriginPoint then
                            if this.PathComputed or this.PathComputing then
                                return
                            end

                            this.PathComputing = true

                            if this.AgentCanFollowPath then
                                if this.DirectPath then
                                    this.pointList = {
                                        PathWaypoint.new(this.OriginPoint, Enum.PathWaypointAction.Walk),
                                        PathWaypoint.new(this.TargetPoint, this.DirectPathRiseFirst and Enum.PathWaypointAction.Jump or Enum.PathWaypointAction.Walk),
                                    }
                                    this.PathComputed = true
                                else
                                    this.pathResult:ComputeAsync(this.OriginPoint, this.TargetPoint)

                                    this.pointList = this.pathResult:GetWaypoints()
                                    this.BlockedConn = this.pathResult.Blocked:Connect(function(
                                        blockedIdx
                                    )
                                        this.OnPathBlocked(this, blockedIdx)
                                    end)
                                    this.PathComputed = this.pathResult.Status == Enum.PathStatus.Success
                                end
                            end

                            this.PathComputing = false
                        end
                    end
                    this.IsValidPath = function(self)
                        this.ComputePath(this)

                        return this.PathComputed and this.AgentCanFollowPath
                    end
                    this.Recomputing = false
                    this.OnPathBlocked = function(self, blockedWaypointIdx)
                        local pathBlocked = blockedWaypointIdx >= this.CurrentPoint

                        if not pathBlocked or this.Recomputing then
                            return
                        end

                        this.Recomputing = true

                        if this.stopTraverseFunc then
                            this.stopTraverseFunc()

                            this.stopTraverseFunc = nil
                        end

                        this.OriginPoint = this.Humanoid.RootPart.CFrame.p

                        this.pathResult:ComputeAsync(this.OriginPoint, this.TargetPoint)

                        this.pointList = this.pathResult:GetWaypoints()

                        if #this.pointList > 0 then
                            this.HumanoidOffsetFromPath = this.pointList[1].Position - this.OriginPoint
                        end

                        this.PathComputed = this.pathResult.Status == Enum.PathStatus.Success

                        if ShowPath then
                            this.stopTraverseFunc, this.setPointFunc = ClickToMoveDisplay.CreatePathDisplay(this.pointList)
                        end
                        if this.PathComputed then
                            this.CurrentPoint = 1

                            this.OnPointReached(this, true)
                        else
                            this.PathFailed:Fire()
                            this.Cleanup(this)
                        end

                        this.Recomputing = false
                    end
                    this.OnRenderStepped = function(self, dt)
                        if this.Started and not this.Cancelled then
                            this.Timeout = this.Timeout + dt

                            if this.Timeout > UnreachableWaypointTimeout then
                                this.OnPointReached(this, false)

                                return
                            end

                            this.CurrentHumanoidPosition = this.Humanoid.RootPart.Position + this.HumanoidOffsetFromPath
                            this.CurrentHumanoidVelocity = this.Humanoid.RootPart.Velocity

                            while this.Started and this.IsCurrentWaypointReached(this) do
                                this.OnPointReached(this, true)
                            end

                            if this.Started then
                                this.NextActionMoveDirection = this.CurrentWaypointPosition - this.CurrentHumanoidPosition

                                if this.NextActionMoveDirection.Magnitude > ALMOST_ZERO then
                                    this.NextActionMoveDirection = this.NextActionMoveDirection.Unit
                                else
                                    this.NextActionMoveDirection = ZERO_VECTOR3
                                end
                                if this.CurrentWaypointNeedsJump then
                                    this.NextActionJump = true
                                    this.CurrentWaypointNeedsJump = false
                                else
                                    this.NextActionJump = false
                                end
                            end
                        end
                    end
                    this.IsCurrentWaypointReached = function(self)
                        local reached = false

                        if this.CurrentWaypointPlaneNormal ~= ZERO_VECTOR3 then
                            local dist = this.CurrentWaypointPlaneNormal:Dot(this.CurrentHumanoidPosition) - this.CurrentWaypointPlaneDistance
                            local velocity = -this.CurrentWaypointPlaneNormal:Dot(this.CurrentHumanoidVelocity)
                            local threshold = math.max(1, 0.0625 * velocity)

                            reached = dist < threshold
                        else
                            reached = true
                        end
                        if reached then
                            this.CurrentWaypointPosition = nil
                            this.CurrentWaypointPlaneNormal = ZERO_VECTOR3
                            this.CurrentWaypointPlaneDistance = 0
                        end

                        return reached
                    end
                    this.OnPointReached = function(self, reached)
                        if reached and not this.Cancelled then
                            if this.setPointFunc then
                                this.setPointFunc(this.CurrentPoint)
                            end

                            local nextWaypointIdx = this.CurrentPoint + 1

                            if nextWaypointIdx > #this.pointList then
                                if this.stopTraverseFunc then
                                    this.stopTraverseFunc()
                                end

                                this.Finished:Fire()
                                this.Cleanup(this)
                            else
                                local currentWaypoint = this.pointList[this.CurrentPoint]
                                local nextWaypoint = this.pointList[nextWaypointIdx]
                                local currentState = this.Humanoid:GetState()
                                local isInAir = currentState == Enum.HumanoidStateType.FallingDown or currentState == Enum.HumanoidStateType.Freefall or currentState == Enum.HumanoidStateType.Jumping

                                if isInAir then
                                    local shouldWaitForGround = nextWaypoint.Action == Enum.PathWaypointAction.Jump

                                    if not shouldWaitForGround and this.CurrentPoint > 1 then
                                        local prevWaypoint = this.pointList[this.CurrentPoint - 1]
                                        local prevDir = currentWaypoint.Position - prevWaypoint.Position
                                        local currDir = nextWaypoint.Position - currentWaypoint.Position
                                        local prevDirXZ = Vector2.new(prevDir.x, prevDir.z).Unit
                                        local currDirXZ = Vector2.new(currDir.x, currDir.z).Unit
                                        local THRESHOLD_COS = 0.996

                                        shouldWaitForGround = prevDirXZ.Dot(prevDirXZ, currDirXZ) < THRESHOLD_COS
                                    end
                                    if shouldWaitForGround then
                                        this.Humanoid.FreeFalling:Wait()
                                        wait(0.1)
                                    end
                                end
                                if FFlagUserNavigationClickToMoveSkipPassedWaypoints then
                                    this.MoveToNextWayPoint(this, currentWaypoint, nextWaypoint, nextWaypointIdx)
                                else
                                    if this.setPointFunc then
                                        this.setPointFunc(nextWaypointIdx)
                                    end
                                    if nextWaypoint.Action == Enum.PathWaypointAction.Jump then
                                        this.Humanoid.Jump = true
                                    end

                                    this.Humanoid:MoveTo(nextWaypoint.Position)

                                    this.CurrentPoint = nextWaypointIdx
                                end
                            end
                        else
                            this.PathFailed:Fire()
                            this.Cleanup(this)
                        end
                    end
                    this.MoveToNextWayPoint = function(
                        self,
                        currentWaypoint,
                        nextWaypoint,
                        nextWaypointIdx
                    )
                        this.CurrentWaypointPlaneNormal = currentWaypoint.Position - nextWaypoint.Position
                        this.CurrentWaypointPlaneNormal = Vector3.new(this.CurrentWaypointPlaneNormal.X, 0, this.CurrentWaypointPlaneNormal.Z)

                        if this.CurrentWaypointPlaneNormal.Magnitude > ALMOST_ZERO then
                            this.CurrentWaypointPlaneNormal = this.CurrentWaypointPlaneNormal.Unit
                            this.CurrentWaypointPlaneDistance = this.CurrentWaypointPlaneNormal:Dot(nextWaypoint.Position)
                        else
                            this.CurrentWaypointPlaneNormal = ZERO_VECTOR3
                            this.CurrentWaypointPlaneDistance = 0
                        end

                        this.CurrentWaypointNeedsJump = nextWaypoint.Action == Enum.PathWaypointAction.Jump
                        this.CurrentWaypointPosition = nextWaypoint.Position
                        this.CurrentPoint = nextWaypointIdx
                        this.Timeout = 0
                    end
                    this.Start = function(self, overrideShowPath)
                        if not this.AgentCanFollowPath then
                            this.PathFailed:Fire()

                            return
                        end
                        if this.Started then
                            return
                        end

                        this.Started = true

                        ClickToMoveDisplay.CancelFailureAnimation()

                        if ShowPath then
                            if overrideShowPath == nil or overrideShowPath then
                                this.stopTraverseFunc, this.setPointFunc = ClickToMoveDisplay.CreatePathDisplay(this.pointList, this.OriginalTargetPoint)
                            end
                        end
                        if #this.pointList > 0 then
                            this.HumanoidOffsetFromPath = Vector3.new(0, this.pointList[1].Position.Y - this.OriginPoint.Y, 0)
                            this.CurrentHumanoidPosition = this.Humanoid.RootPart.Position + this.HumanoidOffsetFromPath
                            this.CurrentHumanoidVelocity = this.Humanoid.RootPart.Velocity
                            this.SeatedConn = this.Humanoid.Seated:Connect(function(
                                isSeated,
                                seat
                            )
                                this.OnPathInterrupted(this)
                            end)
                            this.DiedConn = this.Humanoid.Died:Connect(function()
                                this.OnPathInterrupted(this)
                            end)
                            this.TeleportedConn = this.Humanoid.RootPart:GetPropertyChangedSignal('CFrame'):Connect(function(
                            )
                                this.OnPathInterrupted(this)
                            end)
                            this.CurrentPoint = 1

                            this.OnPointReached(this, true)
                        else
                            this.PathFailed:Fire()

                            if this.stopTraverseFunc then
                                this.stopTraverseFunc()
                            end
                        end
                    end

                    local offsetPoint = this.TargetPoint + this.TargetSurfaceNormal * 1.5
                    local ray = Ray.new(offsetPoint, Vector3.new(0, -1, 0) * 50)
                    local newHitPart, newHitPos = Workspace.FindPartOnRayWithIgnoreList(Workspace, ray, getIgnoreList())

                    if newHitPart then
                        this.TargetPoint = newHitPos
                    end

                    this.ComputePath(this)

                    return this
                end
                local function CheckAlive()
                    local humanoid = findPlayerHumanoid(Player)

                    return humanoid ~= nil and humanoid.Health > 0
                end
                local function GetEquippedTool(character)
                    if character ~= nil then
                        for _, child in pairs(character.GetChildren(character))do
                            if child.IsA(child, 'Tool') then
                                return child
                            end
                        end
                    end
                end

                local ExistingPather
                local ExistingIndicator
                local PathCompleteListener
                local PathFailedListener

                local function CleanupPath()
                    if ExistingPather then
                        ExistingPather.Cancel(ExistingPather)

                        ExistingPather = nil
                    end
                    if PathCompleteListener then
                        PathCompleteListener.Disconnect(PathCompleteListener)

                        PathCompleteListener = nil
                    end
                    if PathFailedListener then
                        PathFailedListener.Disconnect(PathFailedListener)

                        PathFailedListener = nil
                    end
                    if ExistingIndicator then
                        ExistingIndicator.Destroy(ExistingIndicator)
                    end
                end
                local function HandleMoveTo(
                    thisPather,
                    hitPt,
                    hitChar,
                    character,
                    overrideShowPath
                )
                    if ExistingPather then
                        CleanupPath()
                    end

                    ExistingPather = thisPather

                    thisPather.Start(thisPather, overrideShowPath)

                    PathCompleteListener = thisPather.Finished.Event:Connect(function(
                    )
                        CleanupPath()

                        if hitChar then
                            local currentWeapon = GetEquippedTool(character)

                            if currentWeapon then
                                currentWeapon.Activate(currentWeapon)
                            end
                        end
                    end)
                    PathFailedListener = thisPather.PathFailed.Event:Connect(function(
                    )
                        CleanupPath()

                        if overrideShowPath == nil or overrideShowPath then
                            local shouldPlayFailureAnim = PlayFailureAnimation and not (ExistingPather and ExistingPather.IsActive(ExistingPather))

                            if shouldPlayFailureAnim then
                                ClickToMoveDisplay.PlayFailureAnimation()
                            end

                            ClickToMoveDisplay.DisplayFailureWaypoint(hitPt)
                        end
                    end)
                end
                local function ShowPathFailedFeedback(hitPt)
                    if ExistingPather and ExistingPather.IsActive(ExistingPather) then
                        ExistingPather.Cancel(ExistingPather)
                    end
                    if PlayFailureAnimation then
                        ClickToMoveDisplay.PlayFailureAnimation()
                    end

                    ClickToMoveDisplay.DisplayFailureWaypoint(hitPt)
                end

                OnTap = function(tapPositions, goToPoint, wasTouchTap)
                    local camera = Workspace.CurrentCamera
                    local character = Player.Character

                    if not CheckAlive() then
                        return
                    end
                    if #tapPositions == 1 or goToPoint then
                        if camera then
                            local unitRay = camera.ScreenPointToRay(camera, tapPositions[1].x, tapPositions[1].y)
                            local ray = Ray.new(unitRay.Origin, unitRay.Direction * 1000)
                            local myHumanoid = findPlayerHumanoid(Player)
                            local hitPart, hitPt, hitNormal = Utility.Raycast(ray, true, getIgnoreList())
                            local hitChar, hitHumanoid = Utility.FindCharacterAncestor(hitPart)

                            if wasTouchTap and hitHumanoid and StarterGui.GetCore(StarterGui, 'AvatarContextMenuEnabled') then
                                local clickedPlayer = Players.GetPlayerFromCharacter(Players, hitHumanoid.Parent)

                                if clickedPlayer then
                                    CleanupPath()

                                    return
                                end
                            end
                            if goToPoint then
                                hitPt = goToPoint
                                hitChar = nil
                            end
                            if hitPt and character then
                                CleanupPath()

                                local thisPather = Pather(hitPt, hitNormal)

                                if thisPather.IsValidPath(thisPather) then
                                    HandleMoveTo(thisPather, hitPt, hitChar, character)
                                else
                                    thisPather.Cleanup(thisPather)
                                    ShowPathFailedFeedback(hitPt)
                                end
                            end
                        end
                    elseif #tapPositions >= 2 then
                        if camera then
                            local currentWeapon = GetEquippedTool(character)

                            if currentWeapon then
                                currentWeapon.Activate(currentWeapon)
                            end
                        end
                    end
                end

                local function DisconnectEvent(event)
                    if event then
                        event.Disconnect(event)
                    end
                end

                local KeyboardController = _Keyboard()
                local ClickToMove = setmetatable({}, KeyboardController)

                ClickToMove.__index = ClickToMove
                ClickToMove.new = function(CONTROL_ACTION_PRIORITY)
                    local self = setmetatable(KeyboardController.new(CONTROL_ACTION_PRIORITY), ClickToMove)

                    self.fingerTouches = {}
                    self.numUnsunkTouches = 0
                    self.mouse1Down = tick()
                    self.mouse1DownPos = Vector2.new()
                    self.mouse2DownTime = tick()
                    self.mouse2DownPos = Vector2.new()
                    self.mouse2UpTime = tick()
                    self.keyboardMoveVector = ZERO_VECTOR3
                    self.tapConn = nil
                    self.inputBeganConn = nil
                    self.inputChangedConn = nil
                    self.inputEndedConn = nil
                    self.humanoidDiedConn = nil
                    self.characterChildAddedConn = nil
                    self.onCharacterAddedConn = nil
                    self.characterChildRemovedConn = nil
                    self.renderSteppedConn = nil
                    self.menuOpenedConnection = nil
                    self.running = false
                    self.wasdEnabled = false

                    return self
                end
                ClickToMove.DisconnectEvents = function(self)
                    DisconnectEvent(self.tapConn)
                    DisconnectEvent(self.inputBeganConn)
                    DisconnectEvent(self.inputChangedConn)
                    DisconnectEvent(self.inputEndedConn)
                    DisconnectEvent(self.humanoidDiedConn)
                    DisconnectEvent(self.characterChildAddedConn)
                    DisconnectEvent(self.onCharacterAddedConn)
                    DisconnectEvent(self.renderSteppedConn)
                    DisconnectEvent(self.characterChildRemovedConn)
                    DisconnectEvent(self.menuOpenedConnection)
                end
                ClickToMove.OnTouchBegan = function(self, input, processed)
                    if self.fingerTouches[input] == nil and not processed then
                        self.numUnsunkTouches = self.numUnsunkTouches + 1
                    end

                    self.fingerTouches[input] = processed
                end
                ClickToMove.OnTouchChanged = function(self, input, processed)
                    if self.fingerTouches[input] == nil then
                        self.fingerTouches[input] = processed

                        if not processed then
                            self.numUnsunkTouches = self.numUnsunkTouches + 1
                        end
                    end
                end
                ClickToMove.OnTouchEnded = function(self, input, processed)
                    if self.fingerTouches[input] ~= nil and self.fingerTouches[input] == false then
                        self.numUnsunkTouches = self.numUnsunkTouches - 1
                    end

                    self.fingerTouches[input] = nil
                end
                ClickToMove.OnCharacterAdded = function(self, character)
                    self.DisconnectEvents(self)

                    self.inputBeganConn = UserInputService.InputBegan:Connect(function(
                        input,
                        processed
                    )
                        if input.UserInputType == Enum.UserInputType.Touch then
                            self.OnTouchBegan(self, input, processed)
                        end
                        if self.wasdEnabled and processed == false and input.UserInputType == Enum.UserInputType.Keyboard and movementKeys[input.KeyCode] then
                            CleanupPath()
                            ClickToMoveDisplay.CancelFailureAnimation()
                        end
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            self.mouse1DownTime = tick()
                            self.mouse1DownPos = input.Position
                        end
                        if input.UserInputType == Enum.UserInputType.MouseButton2 then
                            self.mouse2DownTime = tick()
                            self.mouse2DownPos = input.Position
                        end
                    end)
                    self.inputChangedConn = UserInputService.InputChanged:Connect(function(
                        input,
                        processed
                    )
                        if input.UserInputType == Enum.UserInputType.Touch then
                            self.OnTouchChanged(self, input, processed)
                        end
                    end)
                    self.inputEndedConn = UserInputService.InputEnded:Connect(function(
                        input,
                        processed
                    )
                        if input.UserInputType == Enum.UserInputType.Touch then
                            self.OnTouchEnded(self, input, processed)
                        end
                        if input.UserInputType == Enum.UserInputType.MouseButton2 then
                            self.mouse2UpTime = tick()

                            local currPos = input.Position
                            local allowed = ExistingPather or self.keyboardMoveVector.Magnitude <= 0

                            if self.mouse2UpTime - self.mouse2DownTime < 0.25 and (currPos - self.mouse2DownPos).magnitude < 5 and allowed then
                                local positions = {currPos}

                                OnTap(positions)
                            end
                        end
                    end)
                    self.tapConn = UserInputService.TouchTap:Connect(function(
                        touchPositions,
                        processed
                    )
                        if not processed then
                            OnTap(touchPositions, nil, true)
                        end
                    end)
                    self.menuOpenedConnection = GuiService.MenuOpened:Connect(function(
                    )
                        CleanupPath()
                    end)

                    local function OnCharacterChildAdded(child)
                        if UserInputService.TouchEnabled then
                            if child.IsA(child, 'Tool') then
                                child.ManualActivationOnly = true
                            end
                        end
                        if child.IsA(child, 'Humanoid') then
                            DisconnectEvent(self.humanoidDiedConn)

                            self.humanoidDiedConn = child.Died:Connect(function()
                                if ExistingIndicator then
                                    DebrisService.AddItem(DebrisService, ExistingIndicator.Model, 1)
                                end
                            end)
                        end
                    end

                    self.characterChildAddedConn = character.ChildAdded:Connect(function(
                        child
                    )
                        OnCharacterChildAdded(child)
                    end)
                    self.characterChildRemovedConn = character.ChildRemoved:Connect(function(
                        child
                    )
                        if UserInputService.TouchEnabled then
                            if child.IsA(child, 'Tool') then
                                child.ManualActivationOnly = false
                            end
                        end
                    end)

                    for _, child in pairs(character.GetChildren(character))do
                        OnCharacterChildAdded(child)
                    end
                end
                ClickToMove.Start = function(self)
                    self.Enable(self, true)
                end
                ClickToMove.Stop = function(self)
                    self.Enable(self, false)
                end
                ClickToMove.CleanupPath = function(self)
                    CleanupPath()
                end
                ClickToMove.Enable = function(
                    self,
                    enable,
                    enableWASD,
                    touchJumpController
                )
                    if enable then
                        if not self.running then
                            if Player.Character then
                                self.OnCharacterAdded(self, Player.Character)
                            end

                            self.onCharacterAddedConn = Player.CharacterAdded:Connect(function(
                                char
                            )
                                self.OnCharacterAdded(self, char)
                            end)
                            self.running = true
                        end

                        self.touchJumpController = touchJumpController

                        if self.touchJumpController then
                            self.touchJumpController:Enable(self.jumpEnabled)
                        end
                    else
                        if self.running then
                            self.DisconnectEvents(self)
                            CleanupPath()

                            if UserInputService.TouchEnabled then
                                local character = Player.Character

                                if character then
                                    for _, child in pairs(character.GetChildren(character))do
                                        if child.IsA(child, 'Tool') then
                                            child.ManualActivationOnly = false
                                        end
                                    end
                                end
                            end

                            self.running = false
                        end
                        if self.touchJumpController and not self.jumpEnabled then
                            self.touchJumpController:Enable(true)
                        end

                        self.touchJumpController = nil
                    end
                    if UserInputService.KeyboardEnabled and enable ~= self.enabled then
                        self.forwardValue = 0
                        self.backwardValue = 0
                        self.leftValue = 0
                        self.rightValue = 0
                        self.moveVector = ZERO_VECTOR3

                        if enable then
                            self.BindContextActions(self)
                            self.ConnectFocusEventListeners(self)
                        else
                            self.UnbindContextActions(self)
                            self.DisconnectFocusEventListeners(self)
                        end
                    end

                    self.wasdEnabled = enable and enableWASD or false
                    self.enabled = enable
                end
                ClickToMove.OnRenderStepped = function(self, dt)
                    self.isJumping = false

                    if ExistingPather then
                        ExistingPather.OnRenderStepped(ExistingPather, dt)

                        if ExistingPather then
                            self.moveVector = ExistingPather.NextActionMoveDirection
                            self.moveVectorIsCameraRelative = false

                            if ExistingPather.NextActionJump then
                                self.isJumping = true
                            end
                        else
                            self.moveVector = self.keyboardMoveVector
                            self.moveVectorIsCameraRelative = true
                        end
                    else
                        self.moveVector = self.keyboardMoveVector
                        self.moveVectorIsCameraRelative = true
                    end
                    if self.jumpRequested then
                        self.isJumping = true
                    end
                end
                ClickToMove.UpdateMovement = function(self, inputState)
                    if inputState == Enum.UserInputState.Cancel then
                        self.keyboardMoveVector = ZERO_VECTOR3
                    elseif self.wasdEnabled then
                        self.keyboardMoveVector = Vector3.new(self.leftValue + self.rightValue, 0, self.forwardValue + self.backwardValue)
                    end
                end
                ClickToMove.UpdateJump = function(self) end
                ClickToMove.SetShowPath = function(self, value)
                    ShowPath = value
                end
                ClickToMove.GetShowPath = function(self)
                    return ShowPath
                end
                ClickToMove.SetWaypointTexture = function(self, texture)
                    ClickToMoveDisplay.SetWaypointTexture(texture)
                end
                ClickToMove.GetWaypointTexture = function(self)
                    return ClickToMoveDisplay.GetWaypointTexture()
                end
                ClickToMove.SetWaypointRadius = function(self, radius)
                    ClickToMoveDisplay.SetWaypointRadius(radius)
                end
                ClickToMove.GetWaypointRadius = function(self)
                    return ClickToMoveDisplay.GetWaypointRadius()
                end
                ClickToMove.SetEndWaypointTexture = function(self, texture)
                    ClickToMoveDisplay.SetEndWaypointTexture(texture)
                end
                ClickToMove.GetEndWaypointTexture = function(self)
                    return ClickToMoveDisplay.GetEndWaypointTexture()
                end
                ClickToMove.SetWaypointsAlwaysOnTop = function(
                    self,
                    alwaysOnTop
                )
                    ClickToMoveDisplay.SetWaypointsAlwaysOnTop(alwaysOnTop)
                end
                ClickToMove.GetWaypointsAlwaysOnTop = function(self)
                    return ClickToMoveDisplay.GetWaypointsAlwaysOnTop()
                end
                ClickToMove.SetFailureAnimationEnabled = function(
                    self,
                    enabled
                )
                    PlayFailureAnimation = enabled
                end
                ClickToMove.GetFailureAnimationEnabled = function(self)
                    return PlayFailureAnimation
                end
                ClickToMove.SetIgnoredPartsTag = function(self, tag)
                    UpdateIgnoreTag(tag)
                end
                ClickToMove.GetIgnoredPartsTag = function(self)
                    return CurrentIgnoreTag
                end
                ClickToMove.SetUseDirectPath = function(self, directPath)
                    UseDirectPath = directPath
                end
                ClickToMove.GetUseDirectPath = function(self)
                    return UseDirectPath
                end
                ClickToMove.SetAgentSizeIncreaseFactor = function(
                    self,
                    increaseFactorPercent
                )
                    AgentSizeIncreaseFactor = 1 + (increaseFactorPercent / 100)
                end
                ClickToMove.GetAgentSizeIncreaseFactor = function(self)
                    return (AgentSizeIncreaseFactor - 1) * 100
                end
                ClickToMove.SetUnreachableWaypointTimeout = function(
                    self,
                    timeoutInSec
                )
                    UnreachableWaypointTimeout = timeoutInSec
                end
                ClickToMove.GetUnreachableWaypointTimeout = function(self)
                    return UnreachableWaypointTimeout
                end
                ClickToMove.SetUserJumpEnabled = function(self, jumpEnabled)
                    self.jumpEnabled = jumpEnabled

                    if self.touchJumpController then
                        self.touchJumpController:Enable(jumpEnabled)
                    end
                end
                ClickToMove.GetUserJumpEnabled = function(self)
                    return self.jumpEnabled
                end
                ClickToMove.MoveTo = function(
                    self,
                    position,
                    showPath,
                    useDirectPath
                )
                    local character = Player.Character

                    if character == nil then
                        return false
                    end

                    local thisPather = Pather(position, Vector3.new(0, 1, 0), useDirectPath)

                    if thisPather and thisPather.IsValidPath(thisPather) then
                        HandleMoveTo(thisPather, position, nil, character, showPath)

                        return true
                    end

                    return false
                end

                return ClickToMove
            end
            _TouchThumbstick = function()
                local Players = game.GetService(game, 'Players')
                local GuiService = game.GetService(game, 'GuiService')
                local UserInputService = game.GetService(game, 'UserInputService')
                local ZERO_VECTOR3 = Vector3.new(0, 0, 0)
                local TOUCH_CONTROL_SHEET = 'rbxasset://textures/ui/TouchControlsSheet.png'
                local BaseCharacterController = _BaseCharacterController()
                local TouchThumbstick = setmetatable({}, BaseCharacterController)

                TouchThumbstick.__index = TouchThumbstick
                TouchThumbstick.new = function()
                    local self = setmetatable(BaseCharacterController.new(), TouchThumbstick)

                    self.isFollowStick = false
                    self.thumbstickFrame = nil
                    self.moveTouchObject = nil
                    self.onTouchMovedConn = nil
                    self.onTouchEndedConn = nil
                    self.screenPos = nil
                    self.stickImage = nil
                    self.thumbstickSize = nil

                    return self
                end
                TouchThumbstick.Enable = function(self, enable, uiParentFrame)
                    if enable == nil then
                        return false
                    end

                    enable = enable and true or false

                    if self.enabled == enable then
                        return true
                    end

                    self.moveVector = ZERO_VECTOR3
                    self.isJumping = false

                    if enable then
                        if not self.thumbstickFrame then
                            self.Create(self, uiParentFrame)
                        end

                        self.thumbstickFrame.Visible = true
                    else
                        self.thumbstickFrame.Visible = false

                        self.OnInputEnded(self)
                    end

                    self.enabled = enable
                end
                TouchThumbstick.OnInputEnded = function(self)
                    self.thumbstickFrame.Position = self.screenPos
                    self.stickImage.Position = UDim2.new(0, self.thumbstickFrame.Size.X.Offset / 2 - self.thumbstickSize / 4, 0, self.thumbstickFrame.Size.Y.Offset / 2 - self.thumbstickSize / 4)
                    self.moveVector = ZERO_VECTOR3
                    self.isJumping = false
                    self.thumbstickFrame.Position = self.screenPos
                    self.moveTouchObject = nil
                end
                TouchThumbstick.Create = function(self, parentFrame)
                    if self.thumbstickFrame then
                        self.thumbstickFrame:Destroy()

                        self.thumbstickFrame = nil

                        if self.onTouchMovedConn then
                            self.onTouchMovedConn:Disconnect()

                            self.onTouchMovedConn = nil
                        end
                        if self.onTouchEndedConn then
                            self.onTouchEndedConn:Disconnect()

                            self.onTouchEndedConn = nil
                        end
                    end

                    local minAxis = math.min(parentFrame.AbsoluteSize.x, parentFrame.AbsoluteSize.y)
                    local isSmallScreen = minAxis <= 500

                    self.thumbstickSize = isSmallScreen and 70 or 120
                    self.screenPos = isSmallScreen and UDim2.new(0, (self.thumbstickSize / 2) - 10, 1, 
-self.thumbstickSize - 20) or UDim2.new(0, self.thumbstickSize / 2, 1, -self.thumbstickSize * 1.75)
                    self.thumbstickFrame = Instance.new('Frame')
                    self.thumbstickFrame.Name = 'ThumbstickFrame'
                    self.thumbstickFrame.Active = true
                    self.thumbstickFrame.Visible = false
                    self.thumbstickFrame.Size = UDim2.new(0, self.thumbstickSize, 0, self.thumbstickSize)
                    self.thumbstickFrame.Position = self.screenPos
                    self.thumbstickFrame.BackgroundTransparency = 1

                    local outerImage = Instance.new('ImageLabel')

                    outerImage.Name = 'OuterImage'
                    outerImage.Image = TOUCH_CONTROL_SHEET
                    outerImage.ImageRectOffset = Vector2.new()
                    outerImage.ImageRectSize = Vector2.new(220, 220)
                    outerImage.BackgroundTransparency = 1
                    outerImage.Size = UDim2.new(0, self.thumbstickSize, 0, self.thumbstickSize)
                    outerImage.Position = UDim2.new(0, 0, 0, 0)
                    outerImage.Parent = self.thumbstickFrame
                    self.stickImage = Instance.new('ImageLabel')
                    self.stickImage.Name = 'StickImage'
                    self.stickImage.Image = TOUCH_CONTROL_SHEET
                    self.stickImage.ImageRectOffset = Vector2.new(220, 0)
                    self.stickImage.ImageRectSize = Vector2.new(111, 111)
                    self.stickImage.BackgroundTransparency = 1
                    self.stickImage.Size = UDim2.new(0, self.thumbstickSize / 2, 0, self.thumbstickSize / 2)
                    self.stickImage.Position = UDim2.new(0, self.thumbstickSize / 2 - self.thumbstickSize / 4, 0, self.thumbstickSize / 2 - self.thumbstickSize / 4)
                    self.stickImage.ZIndex = 2
                    self.stickImage.Parent = self.thumbstickFrame

                    local centerPosition
                    local deadZone = 0.05

                    local function DoMove(direction)
                        local currentMoveVector = direction / (self.thumbstickSize / 2)
                        local inputAxisMagnitude = currentMoveVector.magnitude

                        if inputAxisMagnitude < deadZone then
                            currentMoveVector = Vector3.new()
                        else
                            currentMoveVector = currentMoveVector.unit * ((inputAxisMagnitude - deadZone) / (1 - deadZone))
                            currentMoveVector = Vector3.new(currentMoveVector.x, 0, currentMoveVector.y)
                        end

                        self.moveVector = currentMoveVector
                    end
                    local function MoveStick(pos)
                        local relativePosition = Vector2.new(pos.x - centerPosition.x, pos.y - centerPosition.y)
                        local length = relativePosition.magnitude
                        local maxLength = self.thumbstickFrame.AbsoluteSize.x / 2

                        if self.isFollowStick and length > maxLength then
                            local offset = relativePosition.unit * maxLength

                            self.thumbstickFrame.Position = UDim2.new(0, pos.x - self.thumbstickFrame.AbsoluteSize.x / 2 - offset.x, 0, pos.y - self.thumbstickFrame.AbsoluteSize.y / 2 - offset.y)
                        else
                            length = math.min(length, maxLength)
                            relativePosition = relativePosition.unit * length
                        end

                        self.stickImage.Position = UDim2.new(0, relativePosition.x + self.stickImage.AbsoluteSize.x / 2, 0, relativePosition.y + self.stickImage.AbsoluteSize.y / 2)
                    end

                    self.thumbstickFrame.InputBegan:Connect(function(
                        inputObject
                    )
                        if self.moveTouchObject or inputObject.UserInputType ~= Enum.UserInputType.Touch or inputObject.UserInputState ~= Enum.UserInputState.Begin then
                            return
                        end

                        self.moveTouchObject = inputObject
                        self.thumbstickFrame.Position = UDim2.new(0, inputObject.Position.x - self.thumbstickFrame.Size.X.Offset / 2, 0, inputObject.Position.y - self.thumbstickFrame.Size.Y.Offset / 2)
                        centerPosition = Vector2.new(self.thumbstickFrame.AbsolutePosition.x + self.thumbstickFrame.AbsoluteSize.x / 2, self.thumbstickFrame.AbsolutePosition.y + self.thumbstickFrame.AbsoluteSize.y / 2)

                        local direction = Vector2.new(inputObject.Position.x - centerPosition.x, inputObject.Position.y - centerPosition.y)
                    end)

                    self.onTouchMovedConn = UserInputService.TouchMoved:Connect(function(
                        inputObject,
                        isProcessed
                    )
                        if inputObject == self.moveTouchObject then
                            centerPosition = Vector2.new(self.thumbstickFrame.AbsolutePosition.x + self.thumbstickFrame.AbsoluteSize.x / 2, self.thumbstickFrame.AbsolutePosition.y + self.thumbstickFrame.AbsoluteSize.y / 2)

                            local direction = Vector2.new(inputObject.Position.x - centerPosition.x, inputObject.Position.y - centerPosition.y)

                            DoMove(direction)
                            MoveStick(inputObject.Position)
                        end
                    end)
                    self.onTouchEndedConn = UserInputService.TouchEnded:Connect(function(
                        inputObject,
                        isProcessed
                    )
                        if inputObject == self.moveTouchObject then
                            self.OnInputEnded(self)
                        end
                    end)

                    GuiService.MenuOpened:Connect(function()
                        if self.moveTouchObject then
                            self.OnInputEnded(self)
                        end
                    end)

                    self.thumbstickFrame.Parent = parentFrame
                end

                return TouchThumbstick
            end
            _DynamicThumbstick = function()
                local ZERO_VECTOR3 = Vector3.new(0, 0, 0)
                local TOUCH_CONTROLS_SHEET = 'rbxasset://textures/ui/Input/TouchControlsSheetV2.png'
                local DYNAMIC_THUMBSTICK_ACTION_NAME = 'DynamicThumbstickAction'
                local DYNAMIC_THUMBSTICK_ACTION_PRIORITY = Enum.ContextActionPriority.High.Value
                local MIDDLE_TRANSPARENCIES = {
                    0.10999999999999999,
                    0.30000000000000004,
                    0.4,
                    0.5,
                    0.6,
                    0.7,
                    0.75,
                }
                local NUM_MIDDLE_IMAGES = #MIDDLE_TRANSPARENCIES
                local FADE_IN_OUT_BACKGROUND = true
                local FADE_IN_OUT_MAX_ALPHA = 0.35
                local FADE_IN_OUT_HALF_DURATION_DEFAULT = 0.3
                local FADE_IN_OUT_BALANCE_DEFAULT = 0.5
                local ThumbstickFadeTweenInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
                local Players = game.GetService(game, 'Players')
                local GuiService = game.GetService(game, 'GuiService')
                local UserInputService = game.GetService(game, 'UserInputService')
                local ContextActionService = game.GetService(game, 'ContextActionService')
                local RunService = game.GetService(game, 'RunService')
                local TweenService = game.GetService(game, 'TweenService')
                local LocalPlayer = Players.LocalPlayer

                if not LocalPlayer then
                    Players.GetPropertyChangedSignal(Players, 'LocalPlayer'):Wait()

                    LocalPlayer = Players.LocalPlayer
                end

                local BaseCharacterController = _BaseCharacterController()
                local DynamicThumbstick = setmetatable({}, BaseCharacterController)

                DynamicThumbstick.__index = DynamicThumbstick
                DynamicThumbstick.new = function()
                    local self = setmetatable(BaseCharacterController.new(), DynamicThumbstick)

                    self.moveTouchObject = nil
                    self.moveTouchLockedIn = false
                    self.moveTouchFirstChanged = false
                    self.moveTouchStartPosition = nil
                    self.startImage = nil
                    self.endImage = nil
                    self.middleImages = {}
                    self.startImageFadeTween = nil
                    self.endImageFadeTween = nil
                    self.middleImageFadeTweens = {}
                    self.isFirstTouch = true
                    self.thumbstickFrame = nil
                    self.onRenderSteppedConn = nil
                    self.fadeInAndOutBalance = FADE_IN_OUT_BALANCE_DEFAULT
                    self.fadeInAndOutHalfDuration = FADE_IN_OUT_HALF_DURATION_DEFAULT
                    self.hasFadedBackgroundInPortrait = false
                    self.hasFadedBackgroundInLandscape = false
                    self.tweenInAlphaStart = nil
                    self.tweenOutAlphaStart = nil

                    return self
                end
                DynamicThumbstick.GetIsJumping = function(self)
                    local wasJumping = self.isJumping

                    self.isJumping = false

                    return wasJumping
                end
                DynamicThumbstick.Enable = function(
                    self,
                    enable,
                    uiParentFrame
                )
                    if enable == nil then
                        return false
                    end

                    enable = enable and true or false

                    if self.enabled == enable then
                        return true
                    end
                    if enable then
                        if not self.thumbstickFrame then
                            self.Create(self, uiParentFrame)
                        end

                        self.BindContextActions(self)
                    else
                        ContextActionService.UnbindAction(ContextActionService, DYNAMIC_THUMBSTICK_ACTION_NAME)
                        self.OnInputEnded(self)
                    end

                    self.enabled = enable
                    self.thumbstickFrame.Visible = enable
                end
                DynamicThumbstick.OnInputEnded = function(self)
                    self.moveTouchObject = nil
                    self.moveVector = ZERO_VECTOR3

                    self.FadeThumbstick(self, false)
                end
                DynamicThumbstick.FadeThumbstick = function(self, visible)
                    if not visible and self.moveTouchObject then
                        return
                    end
                    if self.isFirstTouch then
                        return
                    end
                    if self.startImageFadeTween then
                        self.startImageFadeTween:Cancel()
                    end
                    if self.endImageFadeTween then
                        self.endImageFadeTween:Cancel()
                    end

                    for i = 1, #self.middleImages do
                        if self.middleImageFadeTweens[i] then
                            self.middleImageFadeTweens[i]:Cancel()
                        end
                    end

                    if visible then
                        self.startImageFadeTween = TweenService.Create(TweenService, self.startImage, ThumbstickFadeTweenInfo, {ImageTransparency = 0})

                        self.startImageFadeTween:Play()

                        self.endImageFadeTween = TweenService.Create(TweenService, self.endImage, ThumbstickFadeTweenInfo, {ImageTransparency = 0.2})

                        self.endImageFadeTween:Play()

                        for i = 1, #self.middleImages do
                            self.middleImageFadeTweens[i] = TweenService.Create(TweenService, self.middleImages[i], ThumbstickFadeTweenInfo, {
                                ImageTransparency = MIDDLE_TRANSPARENCIES[i],
                            })

                            self.middleImageFadeTweens[i]:Play()
                        end
                    else
                        self.startImageFadeTween = TweenService.Create(TweenService, self.startImage, ThumbstickFadeTweenInfo, {ImageTransparency = 1})

                        self.startImageFadeTween:Play()

                        self.endImageFadeTween = TweenService.Create(TweenService, self.endImage, ThumbstickFadeTweenInfo, {ImageTransparency = 1})

                        self.endImageFadeTween:Play()

                        for i = 1, #self.middleImages do
                            self.middleImageFadeTweens[i] = TweenService.Create(TweenService, self.middleImages[i], ThumbstickFadeTweenInfo, {ImageTransparency = 1})

                            self.middleImageFadeTweens[i]:Play()
                        end
                    end
                end
                DynamicThumbstick.FadeThumbstickFrame = function(
                    self,
                    fadeDuration,
                    fadeRatio
                )
                    self.fadeInAndOutHalfDuration = fadeDuration * 0.5
                    self.fadeInAndOutBalance = fadeRatio
                    self.tweenInAlphaStart = tick()
                end
                DynamicThumbstick.InputInFrame = function(self, inputObject)
                    local frameCornerTopLeft = self.thumbstickFrame.AbsolutePosition
                    local frameCornerBottomRight = frameCornerTopLeft + self.thumbstickFrame.AbsoluteSize
                    local inputPosition = inputObject.Position

                    if inputPosition.X >= frameCornerTopLeft.X and inputPosition.Y >= frameCornerTopLeft.Y then
                        if inputPosition.X <= frameCornerBottomRight.X and inputPosition.Y <= frameCornerBottomRight.Y then
                            return true
                        end
                    end

                    return false
                end
                DynamicThumbstick.DoFadeInBackground = function(self)
                    local playerGui = LocalPlayer.FindFirstChildOfClass(LocalPlayer, 'PlayerGui')
                    local hasFadedBackgroundInOrientation = false

                    if playerGui then
                        if playerGui.CurrentScreenOrientation == Enum.ScreenOrientation.LandscapeLeft or playerGui.CurrentScreenOrientation == Enum.ScreenOrientation.LandscapeRight then
                            hasFadedBackgroundInOrientation = self.hasFadedBackgroundInLandscape
                            self.hasFadedBackgroundInLandscape = true
                        elseif playerGui.CurrentScreenOrientation == Enum.ScreenOrientation.Portrait then
                            hasFadedBackgroundInOrientation = self.hasFadedBackgroundInPortrait
                            self.hasFadedBackgroundInPortrait = true
                        end
                    end
                    if not hasFadedBackgroundInOrientation then
                        self.fadeInAndOutHalfDuration = FADE_IN_OUT_HALF_DURATION_DEFAULT
                        self.fadeInAndOutBalance = FADE_IN_OUT_BALANCE_DEFAULT
                        self.tweenInAlphaStart = tick()
                    end
                end
                DynamicThumbstick.DoMove = function(self, direction)
                    local currentMoveVector = direction
                    local inputAxisMagnitude = currentMoveVector.magnitude

                    if inputAxisMagnitude < self.radiusOfDeadZone then
                        currentMoveVector = ZERO_VECTOR3
                    else
                        currentMoveVector = currentMoveVector.unit * (1 - math.max(0, (self.radiusOfMaxSpeed - currentMoveVector.magnitude) / self.radiusOfMaxSpeed))
                        currentMoveVector = Vector3.new(currentMoveVector.x, 0, currentMoveVector.y)
                    end

                    self.moveVector = currentMoveVector
                end
                DynamicThumbstick.LayoutMiddleImages = function(
                    self,
                    startPos,
                    endPos
                )
                    local startDist = (self.thumbstickSize / 2) + self.middleSize
                    local vector = endPos - startPos
                    local distAvailable = vector.magnitude - (self.thumbstickRingSize / 2) - self.middleSize
                    local direction = vector.unit
                    local distNeeded = self.middleSpacing * NUM_MIDDLE_IMAGES
                    local spacing = self.middleSpacing

                    if distNeeded < distAvailable then
                        spacing = distAvailable / NUM_MIDDLE_IMAGES
                    end

                    for i = 1, NUM_MIDDLE_IMAGES do
                        local image = self.middleImages[i]
                        local distWithout = startDist + (spacing * (i - 2))
                        local currentDist = startDist + (spacing * (i - 1))

                        if distWithout < distAvailable then
                            local pos = endPos - direction * currentDist
                            local exposedFraction = math.clamp(1 - ((currentDist - distAvailable) / spacing), 0, 1)

                            image.Visible = true
                            image.Position = UDim2.new(0, pos.X, 0, pos.Y)
                            image.Size = UDim2.new(0, self.middleSize * exposedFraction, 0, self.middleSize * exposedFraction)
                        else
                            image.Visible = false
                        end
                    end
                end
                DynamicThumbstick.MoveStick = function(self, pos)
                    local vector2StartPosition = Vector2.new(self.moveTouchStartPosition.X, self.moveTouchStartPosition.Y)
                    local startPos = vector2StartPosition - self.thumbstickFrame.AbsolutePosition
                    local endPos = Vector2.new(pos.X, pos.Y) - self.thumbstickFrame.AbsolutePosition

                    self.endImage.Position = UDim2.new(0, endPos.X, 0, endPos.Y)

                    self.LayoutMiddleImages(self, startPos, endPos)
                end
                DynamicThumbstick.BindContextActions = function(self)
                    local function inputBegan(inputObject)
                        if self.moveTouchObject then
                            return Enum.ContextActionResult.Pass
                        end
                        if not self.InputInFrame(self, inputObject) then
                            return Enum.ContextActionResult.Pass
                        end
                        if self.isFirstTouch then
                            self.isFirstTouch = false

                            local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0)

                            TweenService.Create(TweenService, self.startImage, tweenInfo, {
                                Size = UDim2.new(0, 0, 0, 0),
                            }):Play()
                            TweenService.Create(TweenService, self.endImage, tweenInfo, {
                                Size = UDim2.new(0, self.thumbstickSize, 0, self.thumbstickSize),
                                ImageColor3 = Color3.new(0, 0, 0),
                            }):Play()
                        end

                        self.moveTouchLockedIn = false
                        self.moveTouchObject = inputObject
                        self.moveTouchStartPosition = inputObject.Position
                        self.moveTouchFirstChanged = true

                        if FADE_IN_OUT_BACKGROUND then
                            self.DoFadeInBackground(self)
                        end

                        return Enum.ContextActionResult.Pass
                    end
                    local function inputChanged(inputObject)
                        if inputObject == self.moveTouchObject then
                            if self.moveTouchFirstChanged then
                                self.moveTouchFirstChanged = false

                                local startPosVec2 = Vector2.new(inputObject.Position.X - self.thumbstickFrame.AbsolutePosition.X, inputObject.Position.Y - self.thumbstickFrame.AbsolutePosition.Y)

                                self.startImage.Visible = true
                                self.startImage.Position = UDim2.new(0, startPosVec2.X, 0, startPosVec2.Y)
                                self.endImage.Visible = true
                                self.endImage.Position = self.startImage.Position

                                self.FadeThumbstick(self, true)
                                self.MoveStick(self, inputObject.Position)
                            end

                            self.moveTouchLockedIn = true

                            local direction = Vector2.new(inputObject.Position.x - self.moveTouchStartPosition.x, inputObject.Position.y - self.moveTouchStartPosition.y)

                            if math.abs(direction.x) > 0 or math.abs(direction.y) > 0 then
                                self.DoMove(self, direction)
                                self.MoveStick(self, inputObject.Position)
                            end

                            return Enum.ContextActionResult.Sink
                        end

                        return Enum.ContextActionResult.Pass
                    end
                    local function inputEnded(inputObject)
                        if inputObject == self.moveTouchObject then
                            self.OnInputEnded(self)

                            if self.moveTouchLockedIn then
                                return Enum.ContextActionResult.Sink
                            end
                        end

                        return Enum.ContextActionResult.Pass
                    end
                    local function handleInput(
                        actionName,
                        inputState,
                        inputObject
                    )
                        if inputState == Enum.UserInputState.Begin then
                            return inputBegan(inputObject)
                        elseif inputState == Enum.UserInputState.Change then
                            return inputChanged(inputObject)
                        elseif inputState == Enum.UserInputState.End then
                            return inputEnded(inputObject)
                        elseif inputState == Enum.UserInputState.Cancel then
                            self.OnInputEnded(self)
                        end
                    end

                    ContextActionService.BindActionAtPriority(ContextActionService, DYNAMIC_THUMBSTICK_ACTION_NAME, handleInput, false, DYNAMIC_THUMBSTICK_ACTION_PRIORITY, Enum.UserInputType.Touch)
                end
                DynamicThumbstick.Create = function(self, parentFrame)
                    if self.thumbstickFrame then
                        self.thumbstickFrame:Destroy()

                        self.thumbstickFrame = nil

                        if self.onRenderSteppedConn then
                            self.onRenderSteppedConn:Disconnect()

                            self.onRenderSteppedConn = nil
                        end
                    end

                    self.thumbstickSize = 45
                    self.thumbstickRingSize = 20
                    self.middleSize = 10
                    self.middleSpacing = self.middleSize + 4
                    self.radiusOfDeadZone = 2
                    self.radiusOfMaxSpeed = 20

                    local screenSize = parentFrame.AbsoluteSize
                    local isBigScreen = math.min(screenSize.x, screenSize.y) > 500

                    if isBigScreen then
                        self.thumbstickSize = self.thumbstickSize * 2
                        self.thumbstickRingSize = self.thumbstickRingSize * 2
                        self.middleSize = self.middleSize * 2
                        self.middleSpacing = self.middleSpacing * 2
                        self.radiusOfDeadZone = self.radiusOfDeadZone * 2
                        self.radiusOfMaxSpeed = self.radiusOfMaxSpeed * 2
                    end

                    local function layoutThumbstickFrame(portraitMode)
                        if portraitMode then
                            self.thumbstickFrame.Size = UDim2.new(1, 0, 0.4, 0)
                            self.thumbstickFrame.Position = UDim2.new(0, 0, 0.6, 0)
                        else
                            self.thumbstickFrame.Size = UDim2.new(0.4, 0, 0.6666666666666666, 0)
                            self.thumbstickFrame.Position = UDim2.new(0, 0, 0.3333333333333333, 0)
                        end
                    end

                    self.thumbstickFrame = Instance.new('Frame')
                    self.thumbstickFrame.BorderSizePixel = 0
                    self.thumbstickFrame.Name = 'DynamicThumbstickFrame'
                    self.thumbstickFrame.Visible = false
                    self.thumbstickFrame.BackgroundTransparency = 1
                    self.thumbstickFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                    self.thumbstickFrame.Active = false

                    layoutThumbstickFrame(false)

                    self.startImage = Instance.new('ImageLabel')
                    self.startImage.Name = 'ThumbstickStart'
                    self.startImage.Visible = true
                    self.startImage.BackgroundTransparency = 1
                    self.startImage.Image = TOUCH_CONTROLS_SHEET
                    self.startImage.ImageRectOffset = Vector2.new(1, 1)
                    self.startImage.ImageRectSize = Vector2.new(144, 144)
                    self.startImage.ImageColor3 = Color3.new(0, 0, 0)
                    self.startImage.AnchorPoint = Vector2.new(0.5, 0.5)
                    self.startImage.Position = UDim2.new(0, self.thumbstickRingSize * 3.3, 1, 
-self.thumbstickRingSize * 2.8)
                    self.startImage.Size = UDim2.new(0, self.thumbstickRingSize * 3.7, 0, self.thumbstickRingSize * 3.7)
                    self.startImage.ZIndex = 10
                    self.startImage.Parent = self.thumbstickFrame
                    self.endImage = Instance.new('ImageLabel')
                    self.endImage.Name = 'ThumbstickEnd'
                    self.endImage.Visible = true
                    self.endImage.BackgroundTransparency = 1
                    self.endImage.Image = TOUCH_CONTROLS_SHEET
                    self.endImage.ImageRectOffset = Vector2.new(1, 1)
                    self.endImage.ImageRectSize = Vector2.new(144, 144)
                    self.endImage.AnchorPoint = Vector2.new(0.5, 0.5)
                    self.endImage.Position = self.startImage.Position
                    self.endImage.Size = UDim2.new(0, self.thumbstickSize * 0.8, 0, self.thumbstickSize * 0.8)
                    self.endImage.ZIndex = 10
                    self.endImage.Parent = self.thumbstickFrame

                    for i = 1, NUM_MIDDLE_IMAGES do
                        self.middleImages[i] = Instance.new('ImageLabel')
                        self.middleImages[i].Name = 'ThumbstickMiddle'
                        self.middleImages[i].Visible = false
                        self.middleImages[i].BackgroundTransparency = 1
                        self.middleImages[i].Image = TOUCH_CONTROLS_SHEET
                        self.middleImages[i].ImageRectOffset = Vector2.new(1, 1)
                        self.middleImages[i].ImageRectSize = Vector2.new(144, 144)
                        self.middleImages[i].ImageTransparency = MIDDLE_TRANSPARENCIES[i]
                        self.middleImages[i].AnchorPoint = Vector2.new(0.5, 0.5)
                        self.middleImages[i].ZIndex = 9
                        self.middleImages[i].Parent = self.thumbstickFrame
                    end

                    local CameraChangedConn

                    local function onCurrentCameraChanged()
                        if CameraChangedConn then
                            CameraChangedConn.Disconnect(CameraChangedConn)

                            CameraChangedConn = nil
                        end

                        local newCamera = workspace.CurrentCamera

                        if newCamera then
                            local function onViewportSizeChanged()
                                local size = newCamera.ViewportSize
                                local portraitMode = size.X < size.Y

                                layoutThumbstickFrame(portraitMode)
                            end

                            CameraChangedConn = newCamera.GetPropertyChangedSignal(newCamera, 'ViewportSize'):Connect(onViewportSizeChanged)

                            onViewportSizeChanged()
                        end
                    end

                    workspace.GetPropertyChangedSignal(workspace, 'CurrentCamera'):Connect(onCurrentCameraChanged)

                    if workspace.CurrentCamera then
                        onCurrentCameraChanged()
                    end

                    self.moveTouchStartPosition = nil
                    self.startImageFadeTween = nil
                    self.endImageFadeTween = nil
                    self.middleImageFadeTweens = {}
                    self.onRenderSteppedConn = RunService.RenderStepped:Connect(function(
                    )
                        if self.tweenInAlphaStart ~= nil then
                            local delta = tick() - self.tweenInAlphaStart
                            local fadeInTime = (self.fadeInAndOutHalfDuration * 2 * self.fadeInAndOutBalance)

                            self.thumbstickFrame.BackgroundTransparency = 1 - FADE_IN_OUT_MAX_ALPHA * math.min(delta / fadeInTime, 1)

                            if delta > fadeInTime then
                                self.tweenOutAlphaStart = tick()
                                self.tweenInAlphaStart = nil
                            end
                        elseif self.tweenOutAlphaStart ~= nil then
                            local delta = tick() - self.tweenOutAlphaStart
                            local fadeOutTime = (self.fadeInAndOutHalfDuration * 2) - (self.fadeInAndOutHalfDuration * 2 * self.fadeInAndOutBalance)

                            self.thumbstickFrame.BackgroundTransparency = 1 - FADE_IN_OUT_MAX_ALPHA + FADE_IN_OUT_MAX_ALPHA * math.min(delta / fadeOutTime, 1)

                            if delta > fadeOutTime then
                                self.tweenOutAlphaStart = nil
                            end
                        end
                    end)
                    self.onTouchEndedConn = UserInputService.TouchEnded:connect(function(
                        inputObject
                    )
                        if inputObject == self.moveTouchObject then
                            self.OnInputEnded(self)
                        end
                    end)

                    GuiService.MenuOpened:connect(function()
                        if self.moveTouchObject then
                            self.OnInputEnded(self)
                        end
                    end)

                    local playerGui = LocalPlayer.FindFirstChildOfClass(LocalPlayer, 'PlayerGui')

                    while not playerGui do
                        LocalPlayer.ChildAdded:wait()

                        playerGui = LocalPlayer.FindFirstChildOfClass(LocalPlayer, 'PlayerGui')
                    end

                    local playerGuiChangedConn
                    local originalScreenOrientationWasLandscape = playerGui.CurrentScreenOrientation == Enum.ScreenOrientation.LandscapeLeft or playerGui.CurrentScreenOrientation == Enum.ScreenOrientation.LandscapeRight

                    local function longShowBackground()
                        self.fadeInAndOutHalfDuration = 2.5
                        self.fadeInAndOutBalance = 0.05
                        self.tweenInAlphaStart = tick()
                    end

                    playerGuiChangedConn = playerGui.GetPropertyChangedSignal(playerGui, 'CurrentScreenOrientation'):Connect(function(
                    )
                        if (originalScreenOrientationWasLandscape and playerGui.CurrentScreenOrientation == Enum.ScreenOrientation.Portrait) or (not originalScreenOrientationWasLandscape and playerGui.CurrentScreenOrientation ~= Enum.ScreenOrientation.Portrait) then
                            playerGuiChangedConn.disconnect(playerGuiChangedConn)
                            longShowBackground()

                            if originalScreenOrientationWasLandscape then
                                self.hasFadedBackgroundInPortrait = true
                            else
                                self.hasFadedBackgroundInLandscape = true
                            end
                        end
                    end)
                    self.thumbstickFrame.Parent = parentFrame

                    if game.IsLoaded(game) then
                        longShowBackground()
                    else
                        coroutine.wrap(function()
                            game.Loaded:Wait()
                            longShowBackground()
                        end)()
                    end
                end

                return DynamicThumbstick
            end
            _Gamepad = function()
                local UserInputService = game.GetService(game, 'UserInputService')
                local ContextActionService = game.GetService(game, 'ContextActionService')
                local ZERO_VECTOR3 = Vector3.new(0, 0, 0)
                local NONE = Enum.UserInputType.None
                local thumbstickDeadzone = 0.2
                local BaseCharacterController = _BaseCharacterController()
                local Gamepad = setmetatable({}, BaseCharacterController)

                Gamepad.__index = Gamepad
                Gamepad.new = function(CONTROL_ACTION_PRIORITY)
                    local self = setmetatable(BaseCharacterController.new(), Gamepad)

                    self.CONTROL_ACTION_PRIORITY = CONTROL_ACTION_PRIORITY
                    self.forwardValue = 0
                    self.backwardValue = 0
                    self.leftValue = 0
                    self.rightValue = 0
                    self.activeGamepad = NONE
                    self.gamepadConnectedConn = nil
                    self.gamepadDisconnectedConn = nil

                    return self
                end
                Gamepad.Enable = function(self, enable)
                    if not UserInputService.GamepadEnabled then
                        return false
                    end
                    if enable == self.enabled then
                        return true
                    end

                    self.forwardValue = 0
                    self.backwardValue = 0
                    self.leftValue = 0
                    self.rightValue = 0
                    self.moveVector = ZERO_VECTOR3
                    self.isJumping = false

                    if enable then
                        self.activeGamepad = self.GetHighestPriorityGamepad(self)

                        if self.activeGamepad ~= NONE then
                            self.BindContextActions(self)
                            self.ConnectGamepadConnectionListeners(self)
                        else
                            return false
                        end
                    else
                        self.UnbindContextActions(self)
                        self.DisconnectGamepadConnectionListeners(self)

                        self.activeGamepad = NONE
                    end

                    self.enabled = enable

                    return true
                end
                Gamepad.GetHighestPriorityGamepad = function(self)
                    local connectedGamepads = UserInputService.GetConnectedGamepads(UserInputService)
                    local bestGamepad = NONE

                    for _, gamepad in pairs(connectedGamepads)do
                        if gamepad.Value < bestGamepad.Value then
                            bestGamepad = gamepad
                        end
                    end

                    return bestGamepad
                end
                Gamepad.BindContextActions = function(self)
                    if self.activeGamepad == NONE then
                        return false
                    end

                    local handleJumpAction = function(
                        actionName,
                        inputState,
                        inputObject
                    )
                        self.isJumping = (inputState == Enum.UserInputState.Begin)

                        return Enum.ContextActionResult.Sink
                    end
                    local handleThumbstickInput = function(
                        actionName,
                        inputState,
                        inputObject
                    )
                        if inputState == Enum.UserInputState.Cancel then
                            self.moveVector = ZERO_VECTOR3

                            return Enum.ContextActionResult.Sink
                        end
                        if self.activeGamepad ~= inputObject.UserInputType then
                            return Enum.ContextActionResult.Pass
                        end
                        if inputObject.KeyCode ~= Enum.KeyCode.Thumbstick1 then
                            return
                        end
                        if inputObject.Position.magnitude > thumbstickDeadzone then
                            self.moveVector = Vector3.new(inputObject.Position.X, 0, 
-inputObject.Position.Y)
                        else
                            self.moveVector = ZERO_VECTOR3
                        end

                        return Enum.ContextActionResult.Sink
                    end

                    ContextActionService.BindActivate(ContextActionService, self.activeGamepad, Enum.KeyCode.ButtonR2)
                    ContextActionService.BindActionAtPriority(ContextActionService, 'jumpAction', handleJumpAction, false, self.CONTROL_ACTION_PRIORITY, Enum.KeyCode.ButtonA)
                    ContextActionService.BindActionAtPriority(ContextActionService, 'moveThumbstick', handleThumbstickInput, false, self.CONTROL_ACTION_PRIORITY, Enum.KeyCode.Thumbstick1)

                    return true
                end
                Gamepad.UnbindContextActions = function(self)
                    if self.activeGamepad ~= NONE then
                        ContextActionService.UnbindActivate(ContextActionService, self.activeGamepad, Enum.KeyCode.ButtonR2)
                    end

                    ContextActionService.UnbindAction(ContextActionService, 'moveThumbstick')
                    ContextActionService.UnbindAction(ContextActionService, 'jumpAction')
                end
                Gamepad.OnNewGamepadConnected = function(self)
                    local bestGamepad = self.GetHighestPriorityGamepad(self)

                    if bestGamepad == self.activeGamepad then
                        return
                    end
                    if bestGamepad == NONE then
                        warn('Gamepad:OnNewGamepadConnected found no connected gamepads')
                        self.UnbindContextActions(self)

                        return
                    end
                    if self.activeGamepad ~= NONE then
                        self.UnbindContextActions(self)
                    end

                    self.activeGamepad = bestGamepad

                    self.BindContextActions(self)
                end
                Gamepad.OnCurrentGamepadDisconnected = function(self)
                    if self.activeGamepad ~= NONE then
                        ContextActionService.UnbindActivate(ContextActionService, self.activeGamepad, Enum.KeyCode.ButtonR2)
                    end

                    local bestGamepad = self.GetHighestPriorityGamepad(self)

                    if self.activeGamepad ~= NONE and bestGamepad == self.activeGamepad then
                        warn(
[[Gamepad:OnCurrentGamepadDisconnected found the supposedly disconnected gamepad in connectedGamepads.]])
                        self.UnbindContextActions(self)

                        self.activeGamepad = NONE

                        return
                    end
                    if bestGamepad == NONE then
                        self.UnbindContextActions(self)

                        self.activeGamepad = NONE
                    else
                        self.activeGamepad = bestGamepad

                        ContextActionService.BindActivate(ContextActionService, self.activeGamepad, Enum.KeyCode.ButtonR2)
                    end
                end
                Gamepad.ConnectGamepadConnectionListeners = function(self)
                    self.gamepadConnectedConn = UserInputService.GamepadConnected:Connect(function(
                        gamepadEnum
                    )
                        self.OnNewGamepadConnected(self)
                    end)
                    self.gamepadDisconnectedConn = UserInputService.GamepadDisconnected:Connect(function(
                        gamepadEnum
                    )
                        if self.activeGamepad == gamepadEnum then
                            self.OnCurrentGamepadDisconnected(self)
                        end
                    end)
                end
                Gamepad.DisconnectGamepadConnectionListeners = function(self)
                    if self.gamepadConnectedConn then
                        self.gamepadConnectedConn:Disconnect()

                        self.gamepadConnectedConn = nil
                    end
                    if self.gamepadDisconnectedConn then
                        self.gamepadDisconnectedConn:Disconnect()

                        self.gamepadDisconnectedConn = nil
                    end
                end

                return Gamepad
            end
            _Keyboard = function()
                local UserInputService = game.GetService(game, 'UserInputService')
                local ContextActionService = game.GetService(game, 'ContextActionService')
                local ZERO_VECTOR3 = Vector3.new(0, 0, 0)
                local BaseCharacterController = _BaseCharacterController()
                local Keyboard = setmetatable({}, BaseCharacterController)

                Keyboard.__index = Keyboard
                Keyboard.new = function(CONTROL_ACTION_PRIORITY)
                    local self = setmetatable(BaseCharacterController.new(), Keyboard)

                    self.CONTROL_ACTION_PRIORITY = CONTROL_ACTION_PRIORITY
                    self.textFocusReleasedConn = nil
                    self.textFocusGainedConn = nil
                    self.windowFocusReleasedConn = nil
                    self.forwardValue = 0
                    self.backwardValue = 0
                    self.leftValue = 0
                    self.rightValue = 0
                    self.jumpEnabled = true

                    return self
                end
                Keyboard.Enable = function(self, enable)
                    if not UserInputService.KeyboardEnabled then
                        return false
                    end
                    if enable == self.enabled then
                        return true
                    end

                    self.forwardValue = 0
                    self.backwardValue = 0
                    self.leftValue = 0
                    self.rightValue = 0
                    self.moveVector = ZERO_VECTOR3
                    self.jumpRequested = false

                    self.UpdateJump(self)

                    if enable then
                        self.BindContextActions(self)
                        self.ConnectFocusEventListeners(self)
                    else
                        self.UnbindContextActions(self)
                        self.DisconnectFocusEventListeners(self)
                    end

                    self.enabled = enable

                    return true
                end
                Keyboard.UpdateMovement = function(self, inputState)
                    if inputState == Enum.UserInputState.Cancel then
                        self.moveVector = ZERO_VECTOR3
                    else
                        self.moveVector = Vector3.new(self.leftValue + self.rightValue, 0, self.forwardValue + self.backwardValue)
                    end
                end
                Keyboard.UpdateJump = function(self)
                    self.isJumping = self.jumpRequested
                end
                Keyboard.BindContextActions = function(self)
                    local handleMoveForward = function(
                        actionName,
                        inputState,
                        inputObject
                    )
                        self.forwardValue = (inputState == Enum.UserInputState.Begin) and 
-1 or 0

                        self.UpdateMovement(self, inputState)

                        return Enum.ContextActionResult.Pass
                    end
                    local handleMoveBackward = function(
                        actionName,
                        inputState,
                        inputObject
                    )
                        self.backwardValue = (inputState == Enum.UserInputState.Begin) and 1 or 0

                        self.UpdateMovement(self, inputState)

                        return Enum.ContextActionResult.Pass
                    end
                    local handleMoveLeft = function(
                        actionName,
                        inputState,
                        inputObject
                    )
                        self.leftValue = (inputState == Enum.UserInputState.Begin) and 
-1 or 0

                        self.UpdateMovement(self, inputState)

                        return Enum.ContextActionResult.Pass
                    end
                    local handleMoveRight = function(
                        actionName,
                        inputState,
                        inputObject
                    )
                        self.rightValue = (inputState == Enum.UserInputState.Begin) and 1 or 0

                        self.UpdateMovement(self, inputState)

                        return Enum.ContextActionResult.Pass
                    end
                    local handleJumpAction = function(
                        actionName,
                        inputState,
                        inputObject
                    )
                        self.jumpRequested = self.jumpEnabled and (inputState == Enum.UserInputState.Begin)

                        self.UpdateJump(self)

                        return Enum.ContextActionResult.Pass
                    end

                    ContextActionService.BindActionAtPriority(ContextActionService, 'moveForwardAction', handleMoveForward, false, self.CONTROL_ACTION_PRIORITY, Enum.PlayerActions.CharacterForward)
                    ContextActionService.BindActionAtPriority(ContextActionService, 'moveBackwardAction', handleMoveBackward, false, self.CONTROL_ACTION_PRIORITY, Enum.PlayerActions.CharacterBackward)
                    ContextActionService.BindActionAtPriority(ContextActionService, 'moveLeftAction', handleMoveLeft, false, self.CONTROL_ACTION_PRIORITY, Enum.PlayerActions.CharacterLeft)
                    ContextActionService.BindActionAtPriority(ContextActionService, 'moveRightAction', handleMoveRight, false, self.CONTROL_ACTION_PRIORITY, Enum.PlayerActions.CharacterRight)
                    ContextActionService.BindActionAtPriority(ContextActionService, 'jumpAction', handleJumpAction, false, self.CONTROL_ACTION_PRIORITY, Enum.PlayerActions.CharacterJump)
                end
                Keyboard.UnbindContextActions = function(self)
                    ContextActionService.UnbindAction(ContextActionService, 'moveForwardAction')
                    ContextActionService.UnbindAction(ContextActionService, 'moveBackwardAction')
                    ContextActionService.UnbindAction(ContextActionService, 'moveLeftAction')
                    ContextActionService.UnbindAction(ContextActionService, 'moveRightAction')
                    ContextActionService.UnbindAction(ContextActionService, 'jumpAction')
                end
                Keyboard.ConnectFocusEventListeners = function(self)
                    local function onFocusReleased()
                        self.moveVector = ZERO_VECTOR3
                        self.forwardValue = 0
                        self.backwardValue = 0
                        self.leftValue = 0
                        self.rightValue = 0
                        self.jumpRequested = false

                        self.UpdateJump(self)
                    end
                    local function onTextFocusGained(textboxFocused)
                        self.jumpRequested = false

                        self.UpdateJump(self)
                    end

                    self.textFocusReleasedConn = UserInputService.TextBoxFocusReleased:Connect(onFocusReleased)
                    self.textFocusGainedConn = UserInputService.TextBoxFocused:Connect(onTextFocusGained)
                    self.windowFocusReleasedConn = UserInputService.WindowFocused:Connect(onFocusReleased)
                end
                Keyboard.DisconnectFocusEventListeners = function(self)
                    if self.textFocusReleasedCon then
                        self.textFocusReleasedCon:Disconnect()

                        self.textFocusReleasedCon = nil
                    end
                    if self.textFocusGainedConn then
                        self.textFocusGainedConn:Disconnect()

                        self.textFocusGainedConn = nil
                    end
                    if self.windowFocusReleasedConn then
                        self.windowFocusReleasedConn:Disconnect()

                        self.windowFocusReleasedConn = nil
                    end
                end

                return Keyboard
            end
            _ControlModule = function()
                local ControlModule = {}

                ControlModule.__index = ControlModule

                local Players = game.GetService(game, 'Players')
                local RunService = game.GetService(game, 'RunService')
                local UserInputService = game.GetService(game, 'UserInputService')
                local Workspace = game.GetService(game, 'Workspace')
                local UserGameSettings = UserSettings():GetService('UserGameSettings')
                local Keyboard = _Keyboard()
                local Gamepad = _Gamepad()
                local DynamicThumbstick = _DynamicThumbstick()
                local FFlagUserMakeThumbstickDynamic

                do
                    local success, value = pcall(function()
                        return UserSettings():IsUserFeatureEnabled('UserMakeThumbstickDynamic')
                    end)

                    FFlagUserMakeThumbstickDynamic = success and value
                end

                local TouchThumbstick = FFlagUserMakeThumbstickDynamic and DynamicThumbstick or _TouchThumbstick()
                local ClickToMove = _ClickToMoveController()
                local TouchJump = _TouchJump()
                local VehicleController = _VehicleController()
                local CONTROL_ACTION_PRIORITY = Enum.ContextActionPriority.Default.Value
                local movementEnumToModuleMap = {
                    [Enum.TouchMovementMode.DPad] = DynamicThumbstick,
                    [Enum.DevTouchMovementMode.DPad] = DynamicThumbstick,
                    [Enum.TouchMovementMode.Thumbpad] = DynamicThumbstick,
                    [Enum.DevTouchMovementMode.Thumbpad] = DynamicThumbstick,
                    [Enum.TouchMovementMode.Thumbstick] = TouchThumbstick,
                    [Enum.DevTouchMovementMode.Thumbstick] = TouchThumbstick,
                    [Enum.TouchMovementMode.DynamicThumbstick] = DynamicThumbstick,
                    [Enum.DevTouchMovementMode.DynamicThumbstick] = DynamicThumbstick,
                    [Enum.TouchMovementMode.ClickToMove] = ClickToMove,
                    [Enum.DevTouchMovementMode.ClickToMove] = ClickToMove,
                    [Enum.TouchMovementMode.Default] = DynamicThumbstick,
                    [Enum.ComputerMovementMode.Default] = Keyboard,
                    [Enum.ComputerMovementMode.KeyboardMouse] = Keyboard,
                    [Enum.DevComputerMovementMode.KeyboardMouse] = Keyboard,
                    [Enum.DevComputerMovementMode.Scriptable] = nil,
                    [Enum.ComputerMovementMode.ClickToMove] = ClickToMove,
                    [Enum.DevComputerMovementMode.ClickToMove] = ClickToMove,
                }
                local computerInputTypeToModuleMap = {
                    [Enum.UserInputType.Keyboard] = Keyboard,
                    [Enum.UserInputType.MouseButton1] = Keyboard,
                    [Enum.UserInputType.MouseButton2] = Keyboard,
                    [Enum.UserInputType.MouseButton3] = Keyboard,
                    [Enum.UserInputType.MouseWheel] = Keyboard,
                    [Enum.UserInputType.MouseMovement] = Keyboard,
                    [Enum.UserInputType.Gamepad1] = Gamepad,
                    [Enum.UserInputType.Gamepad2] = Gamepad,
                    [Enum.UserInputType.Gamepad3] = Gamepad,
                    [Enum.UserInputType.Gamepad4] = Gamepad,
                }
                local lastInputType

                ControlModule.new = function()
                    local self = setmetatable({}, ControlModule)

                    self.controllers = {}
                    self.activeControlModule = nil
                    self.activeController = nil
                    self.touchJumpController = nil
                    self.moveFunction = Players.LocalPlayer.Move
                    self.humanoid = nil
                    self.lastInputType = Enum.UserInputType.None
                    self.humanoidSeatedConn = nil
                    self.vehicleController = nil
                    self.touchControlFrame = nil
                    self.vehicleController = VehicleController.new(CONTROL_ACTION_PRIORITY)

                    Players.LocalPlayer.CharacterAdded:Connect(function(char)
                        self.OnCharacterAdded(self, char)
                    end)
                    Players.LocalPlayer.CharacterRemoving:Connect(function(
                        char
                    )
                        self.OnCharacterRemoving(self, char)
                    end)

                    if Players.LocalPlayer.Character then
                        self.OnCharacterAdded(self, Players.LocalPlayer.Character)
                    end

                    RunService.BindToRenderStep(RunService, 'ControlScriptRenderstep', Enum.RenderPriority.Input.Value, function(
                        dt
                    )
                        self.OnRenderStepped(self, dt)
                    end)
                    UserInputService.LastInputTypeChanged:Connect(function(
                        newLastInputType
                    )
                        self.OnLastInputTypeChanged(self, newLastInputType)
                    end)
                    UserGameSettings.GetPropertyChangedSignal(UserGameSettings, 'TouchMovementMode'):Connect(function(
                    )
                        self.OnTouchMovementModeChange(self)
                    end)
                    Players.LocalPlayer:GetPropertyChangedSignal('DevTouchMovementMode'):Connect(function(
                    )
                        self.OnTouchMovementModeChange(self)
                    end)
                    UserGameSettings.GetPropertyChangedSignal(UserGameSettings, 'ComputerMovementMode'):Connect(function(
                    )
                        self.OnComputerMovementModeChange(self)
                    end)
                    Players.LocalPlayer:GetPropertyChangedSignal('DevComputerMovementMode'):Connect(function(
                    )
                        self.OnComputerMovementModeChange(self)
                    end)

                    self.playerGui = nil
                    self.touchGui = nil
                    self.playerGuiAddedConn = nil

                    if UserInputService.TouchEnabled then
                        self.playerGui = Players.LocalPlayer:FindFirstChildOfClass('PlayerGui')

                        if self.playerGui then
                            self.CreateTouchGuiContainer(self)
                            self.OnLastInputTypeChanged(self, UserInputService.GetLastInputType(UserInputService))
                        else
                            self.playerGuiAddedConn = Players.LocalPlayer.ChildAdded:Connect(function(
                                child
                            )
                                if child.IsA(child, 'PlayerGui') then
                                    self.playerGui = child

                                    self.CreateTouchGuiContainer(self)
                                    self.playerGuiAddedConn:Disconnect()

                                    self.playerGuiAddedConn = nil

                                    self.OnLastInputTypeChanged(self, UserInputService.GetLastInputType(UserInputService))
                                end
                            end)
                        end
                    else
                        self.OnLastInputTypeChanged(self, UserInputService.GetLastInputType(UserInputService))
                    end

                    return self
                end
                ControlModule.GetMoveVector = function(self)
                    if self.activeController then
                        return self.activeController:GetMoveVector()
                    end

                    return Vector3.new(0, 0, 0)
                end
                ControlModule.GetActiveController = function(self)
                    return self.activeController
                end
                ControlModule.EnableActiveControlModule = function(self)
                    if self.activeControlModule == ClickToMove then
                        self.activeController:Enable(true, Players.LocalPlayer.DevComputerMovementMode == Enum.DevComputerMovementMode.UserChoice, self.touchJumpController)
                    elseif self.touchControlFrame then
                        self.activeController:Enable(true, self.touchControlFrame)
                    else
                        self.activeController:Enable(true)
                    end
                end
                ControlModule.Enable = function(self, enable)
                    if not self.activeController then
                        return
                    end
                    if enable == nil then
                        enable = true
                    end
                    if enable then
                        self.EnableActiveControlModule(self)
                    else
                        self.Disable(self)
                    end
                end
                ControlModule.Disable = function(self)
                    if self.activeController then
                        self.activeController:Enable(false)

                        if self.moveFunction then
                            self.moveFunction(Players.LocalPlayer, Vector3.new(0, 0, 0), true)
                        end
                    end
                end
                ControlModule.SelectComputerMovementModule = function(self)
                    if not (UserInputService.KeyboardEnabled or UserInputService.GamepadEnabled) then
                        return nil, false
                    end

                    local computerModule
                    local DevMovementMode = Players.LocalPlayer.DevComputerMovementMode

                    if DevMovementMode == Enum.DevComputerMovementMode.UserChoice then
                        computerModule = computerInputTypeToModuleMap[lastInputType]

                        if UserGameSettings.ComputerMovementMode == Enum.ComputerMovementMode.ClickToMove and computerModule == Keyboard then
                            computerModule = ClickToMove
                        end
                    else
                        computerModule = movementEnumToModuleMap[DevMovementMode]

                        if (not computerModule) and DevMovementMode ~= Enum.DevComputerMovementMode.Scriptable then
                            warn(
[[No character control module is associated with DevComputerMovementMode ]], DevMovementMode)
                        end
                    end
                    if computerModule then
                        return computerModule, true
                    elseif DevMovementMode == Enum.DevComputerMovementMode.Scriptable then
                        return nil, true
                    else
                        return nil, false
                    end
                end
                ControlModule.SelectTouchModule = function(self)
                    if not UserInputService.TouchEnabled then
                        return nil, false
                    end

                    local touchModule
                    local DevMovementMode = Players.LocalPlayer.DevTouchMovementMode

                    if DevMovementMode == Enum.DevTouchMovementMode.UserChoice then
                        touchModule = movementEnumToModuleMap[UserGameSettings.TouchMovementMode]
                    elseif DevMovementMode == Enum.DevTouchMovementMode.Scriptable then
                        return nil, true
                    else
                        touchModule = movementEnumToModuleMap[DevMovementMode]
                    end

                    return touchModule, true
                end

                local function calculateRawMoveVector(
                    humanoid,
                    cameraRelativeMoveVector
                )
                    local camera = Workspace.CurrentCamera

                    if not camera then
                        return cameraRelativeMoveVector
                    end
                    if humanoid.GetState(humanoid) == Enum.HumanoidStateType.Swimming then
                        return camera.CFrame:VectorToWorldSpace(cameraRelativeMoveVector)
                    end

                    local c, s
                    local _, _, _, R00, R01, R02, _, _, R12, _, _, R22 = camera.CFrame:GetComponents()

                    if R12 < 1 and R12 > -1 then
                        c = R22
                        s = R02
                    else
                        c = R00
                        s = -R01 * math.sign(R12)
                    end

                    local norm = math.sqrt(c * c + s * s)

                    return Vector3.new((c * cameraRelativeMoveVector.x + s * cameraRelativeMoveVector.z) / norm, 0, (c * cameraRelativeMoveVector.z - s * cameraRelativeMoveVector.x) / norm)
                end

                ControlModule.OnRenderStepped = function(self, dt)
                    if self.activeController and self.activeController.enabled and self.humanoid then
                        self.activeController:OnRenderStepped(dt)

                        local moveVector = self.activeController:GetMoveVector()
                        local cameraRelative = self.activeController:IsMoveVectorCameraRelative()
                        local clickToMoveController = self.GetClickToMoveController(self)

                        if self.activeController ~= clickToMoveController then
                            if moveVector.magnitude > 0 then
                                clickToMoveController.CleanupPath(clickToMoveController)
                            else
                                clickToMoveController.OnRenderStepped(clickToMoveController, dt)

                                moveVector = clickToMoveController.GetMoveVector(clickToMoveController)
                                cameraRelative = clickToMoveController.IsMoveVectorCameraRelative(clickToMoveController)
                            end
                        end

                        local vehicleConsumedInput = false

                        if self.vehicleController then
                            moveVector, vehicleConsumedInput = self.vehicleController:Update(moveVector, cameraRelative, self.activeControlModule == Gamepad)
                        end
                        if cameraRelative then
                            moveVector = calculateRawMoveVector(self.humanoid, moveVector)
                        end

                        self.moveFunction(Players.LocalPlayer, moveVector, false)

                        self.humanoid.Jump = self.activeController:GetIsJumping() or (self.touchJumpController and self.touchJumpController:GetIsJumping())
                    end
                end
                ControlModule.OnHumanoidSeated = function(
                    self,
                    active,
                    currentSeatPart
                )
                    if active then
                        if currentSeatPart and currentSeatPart.IsA(currentSeatPart, 'VehicleSeat') then
                            if not self.vehicleController then
                                self.vehicleController = self.vehicleController.new(CONTROL_ACTION_PRIORITY)
                            end

                            self.vehicleController:Enable(true, currentSeatPart)
                        end
                    else
                        if self.vehicleController then
                            self.vehicleController:Enable(false, currentSeatPart)
                        end
                    end
                end
                ControlModule.OnCharacterAdded = function(self, char)
                    self.humanoid = char.FindFirstChildOfClass(char, 'Humanoid')

                    while not self.humanoid do
                        char.ChildAdded:wait()

                        self.humanoid = char.FindFirstChildOfClass(char, 'Humanoid')
                    end

                    if self.touchGui then
                        self.touchGui.Enabled = true
                    end
                    if self.humanoidSeatedConn then
                        self.humanoidSeatedConn:Disconnect()

                        self.humanoidSeatedConn = nil
                    end

                    self.humanoidSeatedConn = self.humanoid.Seated:Connect(function(
                        active,
                        currentSeatPart
                    )
                        self.OnHumanoidSeated(self, active, currentSeatPart)
                    end)
                end
                ControlModule.OnCharacterRemoving = function(self, char)
                    self.humanoid = nil

                    if self.touchGui then
                        self.touchGui.Enabled = false
                    end
                end
                ControlModule.SwitchToController = function(
                    self,
                    controlModule
                )
                    if not controlModule then
                        if self.activeController then
                            self.activeController:Enable(false)
                        end

                        self.activeController = nil
                        self.activeControlModule = nil
                    else
                        if not self.controllers[controlModule] then
                            self.controllers[controlModule] = controlModule.new(CONTROL_ACTION_PRIORITY)
                        end
                        if self.activeController ~= self.controllers[controlModule] then
                            if self.activeController then
                                self.activeController:Enable(false)
                            end

                            self.activeController = self.controllers[controlModule]
                            self.activeControlModule = controlModule

                            if self.touchControlFrame and (self.activeControlModule == ClickToMove or self.activeControlModule == TouchThumbstick or self.activeControlModule == DynamicThumbstick) then
                                if not self.controllers[TouchJump] then
                                    self.controllers[TouchJump] = TouchJump.new()
                                end

                                self.touchJumpController = self.controllers[TouchJump]

                                self.touchJumpController:Enable(true, self.touchControlFrame)
                            else
                                if self.touchJumpController then
                                    self.touchJumpController:Enable(false)
                                end
                            end

                            self.EnableActiveControlModule(self)
                        end
                    end
                end
                ControlModule.OnLastInputTypeChanged = function(
                    self,
                    newLastInputType
                )
                    if lastInputType == newLastInputType then
                        warn('LastInputType Change listener called with current type.')
                    end

                    lastInputType = newLastInputType

                    if lastInputType == Enum.UserInputType.Touch then
                        local touchModule, success = self.SelectTouchModule(self)

                        if success then
                            while not self.touchControlFrame do
                                wait()
                            end

                            self.SwitchToController(self, touchModule)
                        end
                    elseif computerInputTypeToModuleMap[lastInputType] ~= nil then
                        local computerModule = self.SelectComputerMovementModule(self)

                        if computerModule then
                            self.SwitchToController(self, computerModule)
                        end
                    end
                end
                ControlModule.OnComputerMovementModeChange = function(self)
                    local controlModule, success = self.SelectComputerMovementModule(self)

                    if success then
                        self.SwitchToController(self, controlModule)
                    end
                end
                ControlModule.OnTouchMovementModeChange = function(self)
                    local touchModule, success = self.SelectTouchModule(self)

                    if success then
                        while not self.touchControlFrame do
                            wait()
                        end

                        self.SwitchToController(self, touchModule)
                    end
                end
                ControlModule.CreateTouchGuiContainer = function(self)
                    if self.touchGui then
                        self.touchGui:Destroy()
                    end

                    self.touchGui = Instance.new('ScreenGui')
                    self.touchGui.Name = 'TouchGui'
                    self.touchGui.ResetOnSpawn = false
                    self.touchGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                    self.touchGui.Enabled = self.humanoid ~= nil
                    self.touchControlFrame = Instance.new('Frame')
                    self.touchControlFrame.Name = 'TouchControlFrame'
                    self.touchControlFrame.Size = UDim2.new(1, 0, 1, 0)
                    self.touchControlFrame.BackgroundTransparency = 1
                    self.touchControlFrame.Parent = self.touchGui
                    self.touchGui.Parent = self.playerGui
                end
                ControlModule.GetClickToMoveController = function(self)
                    if not self.controllers[ClickToMove] then
                        self.controllers[ClickToMove] = ClickToMove.new(CONTROL_ACTION_PRIORITY)
                    end

                    return self.controllers[ClickToMove]
                end
                ControlModule.IsJumping = function(self)
                    if self.activeController then
                        return self.activeController:GetIsJumping() or (self.touchJumpController and self.touchJumpController:GetIsJumping())
                    end

                    return false
                end

                return ControlModule.new()
            end
            _PlayerModule = function()
                local PlayerModule = {}

                PlayerModule.__index = PlayerModule
                PlayerModule.new = function()
                    local self = setmetatable({}, PlayerModule)

                    self.cameras = _CameraModule()
                    self.controls = _ControlModule()

                    return self
                end
                PlayerModule.GetCameras = function(self)
                    return self.cameras
                end
                PlayerModule.GetControls = function(self)
                    return self.controls
                end
                PlayerModule.GetClickToMoveController = function(self)
                    return self.controls:GetClickToMoveController()
                end

                return PlayerModule.new()
            end
            _sounds = function()
                local SetState = Instance.new('BindableEvent', script)
                local Players = game.GetService(game, 'Players')
                local RunService = game.GetService(game, 'RunService')
                local SOUND_DATA = {
                    Climbing = {
                        SoundId = 'rbxasset://sounds/action_footsteps_plastic.mp3',
                        Looped = true,
                    },
                    Died = {
                        SoundId = 'rbxasset://sounds/uuhhh.mp3',
                    },
                    FreeFalling = {
                        SoundId = 'rbxasset://sounds/action_falling.mp3',
                        Looped = true,
                    },
                    GettingUp = {
                        SoundId = 'rbxasset://sounds/action_get_up.mp3',
                    },
                    Jumping = {
                        SoundId = 'rbxasset://sounds/action_jump.mp3',
                    },
                    Landing = {
                        SoundId = 'rbxasset://sounds/action_jump_land.mp3',
                    },
                    Running = {
                        SoundId = 'rbxasset://sounds/action_footsteps_plastic.mp3',
                        Looped = true,
                        Pitch = 1.85,
                    },
                    Splash = {
                        SoundId = 'rbxasset://sounds/impact_water.mp3',
                    },
                    Swimming = {
                        SoundId = 'rbxasset://sounds/action_swim.mp3',
                        Looped = true,
                        Pitch = 1.6,
                    },
                }

                local function waitForFirst(...)
                    local shunt = Instance.new('BindableEvent')
                    local slots = {...}

                    local function fire(...)
                        for i = 1, #slots do
                            slots[i]:Disconnect()
                        end

                        return shunt.Fire(shunt, ...)
                    end

                    for i = 1, #slots do
                        slots[i] = slots[i]:Connect(fire)
                    end

                    return shunt.Event:Wait()
                end
                local function map(x, inMin, inMax, outMin, outMax)
                    return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin
                end
                local function playSound(sound)
                    sound.TimePosition = 0
                    sound.Playing = true
                end
                local function stopSound(sound)
                    sound.Playing = false
                    sound.TimePosition = 0
                end
                local function shallowCopy(t)
                    local out = {}

                    for k, v in pairs(t)do
                        out[k] = v
                    end

                    return out
                end
                local function initializeSoundSystem(
                    player,
                    humanoid,
                    rootPart
                )
                    local sounds = {}

                    for name, props in pairs(SOUND_DATA)do
                        local sound = Instance.new('Sound')

                        sound.Name = name
                        sound.Archivable = false
                        sound.EmitterSize = 5
                        sound.MaxDistance = 150
                        sound.Volume = 0.65

                        for propName, propValue in pairs(props)do
                            sound[propName] = propValue
                        end

                        sound.Parent = rootPart
                        sounds[name] = sound
                    end

                    local playingLoopedSounds = {}

                    local function stopPlayingLoopedSounds(except)
                        for sound in pairs(shallowCopy(playingLoopedSounds))do
                            if sound ~= except then
                                sound.Playing = false
                                playingLoopedSounds[sound] = nil
                            end
                        end
                    end

                    local stateTransitions = {
                        [Enum.HumanoidStateType.FallingDown] = function()
                            stopPlayingLoopedSounds()
                        end,
                        [Enum.HumanoidStateType.GettingUp] = function()
                            stopPlayingLoopedSounds()
                            playSound(sounds.GettingUp)
                        end,
                        [Enum.HumanoidStateType.Jumping] = function()
                            stopPlayingLoopedSounds()
                            playSound(sounds.Jumping)
                        end,
                        [Enum.HumanoidStateType.Swimming] = function()
                            local verticalSpeed = math.abs(rootPart.Velocity.Y)

                            if verticalSpeed > 0.1 then
                                sounds.Splash.Volume = math.clamp(map(verticalSpeed, 100, 350, 0.28, 1), 0, 1)

                                playSound(sounds.Splash)
                            end

                            stopPlayingLoopedSounds(sounds.Swimming)

                            sounds.Swimming.Playing = true
                            playingLoopedSounds[sounds.Swimming] = true
                        end,
                        [Enum.HumanoidStateType.Freefall] = function()
                            sounds.FreeFalling.Volume = 0

                            stopPlayingLoopedSounds(sounds.FreeFalling)

                            playingLoopedSounds[sounds.FreeFalling] = true
                        end,
                        [Enum.HumanoidStateType.Landed] = function()
                            stopPlayingLoopedSounds()

                            local verticalSpeed = math.abs(rootPart.Velocity.Y)

                            if verticalSpeed > 75 then
                                sounds.Landing.Volume = math.clamp(map(verticalSpeed, 50, 100, 0, 1), 0, 1)

                                playSound(sounds.Landing)
                            end
                        end,
                        [Enum.HumanoidStateType.Running] = function()
                            stopPlayingLoopedSounds(sounds.Running)

                            sounds.Running.Playing = true
                            playingLoopedSounds[sounds.Running] = true
                        end,
                        [Enum.HumanoidStateType.Climbing] = function()
                            local sound = sounds.Climbing

                            if math.abs(rootPart.Velocity.Y) > 0.1 then
                                sound.Playing = true

                                stopPlayingLoopedSounds(sound)
                            else
                                stopPlayingLoopedSounds()
                            end

                            playingLoopedSounds[sound] = true
                        end,
                        [Enum.HumanoidStateType.Seated] = function()
                            stopPlayingLoopedSounds()
                        end,
                        [Enum.HumanoidStateType.Dead] = function()
                            stopPlayingLoopedSounds()
                            playSound(sounds.Died)
                        end,
                    }
                    local loopedSoundUpdaters = {
                        [sounds.Climbing] = function(dt, sound, vel)
                            sound.Playing = vel.Magnitude > 0.1
                        end,
                        [sounds.FreeFalling] = function(dt, sound, vel)
                            if vel.Magnitude > 75 then
                                sound.Volume = math.clamp(sound.Volume + 0.9 * dt, 0, 1)
                            else
                                sound.Volume = 0
                            end
                        end,
                        [sounds.Running] = function(dt, sound, vel)
                            sound.Playing = vel.Magnitude > 0.5 and humanoid.MoveDirection.Magnitude > 0.5
                        end,
                    }
                    local stateRemap = {
                        [Enum.HumanoidStateType.RunningNoPhysics] = Enum.HumanoidStateType.Running,
                    }
                    local activeState = stateRemap[humanoid.GetState(humanoid)] or humanoid.GetState(humanoid)
                    local activeConnections = {}
                    local stateChangedConn = humanoid.StateChanged:Connect(function(
                        _,
                        state
                    )
                        state = stateRemap[state] or state

                        if state ~= activeState then
                            local transitionFunc = stateTransitions[state]

                            if transitionFunc then
                                transitionFunc()
                            end

                            activeState = state
                        end
                    end)
                    local customStateChangedConn = SetState.Event:Connect(function(
                        state
                    )
                        state = stateRemap[state] or state

                        if state ~= activeState then
                            local transitionFunc = stateTransitions[state]

                            if transitionFunc then
                                transitionFunc()
                            end

                            activeState = state
                        end
                    end)
                    local steppedConn = RunService.Stepped:Connect(function(
                        _,
                        worldDt
                    )
                        for sound in pairs(playingLoopedSounds)do
                            local updater = loopedSoundUpdaters[sound]

                            if updater then
                                updater(worldDt, sound, rootPart.Velocity)
                            end
                        end
                    end)
                    local humanoidAncestryChangedConn
                    local rootPartAncestryChangedConn
                    local characterAddedConn

                    local function terminate()
                        stateChangedConn.Disconnect(stateChangedConn)
                        customStateChangedConn.Disconnect(customStateChangedConn)
                        steppedConn.Disconnect(steppedConn)
                        humanoidAncestryChangedConn.Disconnect(humanoidAncestryChangedConn)
                        rootPartAncestryChangedConn.Disconnect(rootPartAncestryChangedConn)
                        characterAddedConn.Disconnect(characterAddedConn)
                    end

                    humanoidAncestryChangedConn = humanoid.AncestryChanged:Connect(function(
                        _,
                        parent
                    )
                        if not parent then
                            terminate()
                        end
                    end)
                    rootPartAncestryChangedConn = rootPart.AncestryChanged:Connect(function(
                        _,
                        parent
                    )
                        if not parent then
                            terminate()
                        end
                    end)
                    characterAddedConn = player.CharacterAdded:Connect(terminate)
                end
                local function playerAdded(player)
                    local function characterAdded(character)
                        if not character.Parent then
                            waitForFirst(character.AncestryChanged, player.CharacterAdded)
                        end
                        if player.Character ~= character or not character.Parent then
                            return
                        end

                        local humanoid = character.FindFirstChildOfClass(character, 'Humanoid')

                        while character.IsDescendantOf(character, game) and not humanoid do
                            waitForFirst(character.ChildAdded, character.AncestryChanged, player.CharacterAdded)

                            humanoid = character.FindFirstChildOfClass(character, 'Humanoid')
                        end

                        if player.Character ~= character or not character.IsDescendantOf(character, game) then
                            return
                        end

                        local rootPart = character.FindFirstChild(character, 'HumanoidRootPart')

                        while character.IsDescendantOf(character, game) and not rootPart do
                            waitForFirst(character.ChildAdded, character.AncestryChanged, humanoid.AncestryChanged, player.CharacterAdded)

                            rootPart = character.FindFirstChild(character, 'HumanoidRootPart')
                        end

                        if rootPart and humanoid.IsDescendantOf(humanoid, game) and character.IsDescendantOf(character, game) and player.Character == character then
                            initializeSoundSystem(player, humanoid, rootPart)
                        end
                    end

                    if player.Character then
                        characterAdded(player.Character)
                    end

                    player.CharacterAdded:Connect(characterAdded)
                end

                Players.PlayerAdded:Connect(playerAdded)

                for _, player in ipairs(Players.GetPlayers(Players))do
                    playerAdded(player)
                end

                return SetState
            end
            _StateTracker = function()
                local EPSILON = 0.1
                local SPEED = {
                    onRunning = true,
                    onClimbing = true,
                }
                local INAIR = {
                    onFreeFall = true,
                    onJumping = true,
                }
                local STATEMAP = {
                    onRunning = Enum.HumanoidStateType.Running,
                    onJumping = Enum.HumanoidStateType.Jumping,
                    onFreeFall = Enum.HumanoidStateType.Freefall,
                }
                local StateTracker = {}

                StateTracker.__index = StateTracker
                StateTracker.new = function(humanoid, soundState)
                    local self = setmetatable({}, StateTracker)

                    self.Humanoid = humanoid
                    self.HRP = humanoid.RootPart
                    self.Speed = 0
                    self.State = 'onRunning'
                    self.Jumped = false
                    self.JumpTick = tick()
                    self.SoundState = soundState
                    self._ChangedEvent = Instance.new('BindableEvent')
                    self.Changed = self._ChangedEvent.Event

                    return self
                end
                StateTracker.Destroy = function(self)
                    self._ChangedEvent:Destroy()
                end
                StateTracker.RequestedJump = function(self)
                    self.Jumped = true
                    self.JumpTick = tick()
                end
                StateTracker.OnStep = function(
                    self,
                    gravityUp,
                    grounded,
                    isMoving
                )
                    local cVelocity = self.HRP.Velocity
                    local gVelocity = cVelocity.Dot(cVelocity, gravityUp)
                    local oldState, oldSpeed = self.State, self.Speed
                    local newState
                    local newSpeed = cVelocity.Magnitude

                    if (not grounded) then
                        if (gVelocity > 0) then
                            if (self.Jumped) then
                                newState = 'onJumping'
                            else
                                newState = 'onFreeFall'
                            end
                        else
                            if (self.Jumped) then
                                self.Jumped = false
                            end

                            newState = 'onFreeFall'
                        end
                    else
                        if (self.Jumped and tick() - self.JumpTick > 0.1) then
                            self.Jumped = false
                        end

                        newSpeed = (cVelocity - gVelocity * gravityUp).Magnitude
                        newState = 'onRunning'
                    end

                    newSpeed = isMoving and newSpeed or 0

                    if (oldState ~= newState or (SPEED[newState] and math.abs(oldSpeed - newSpeed) > EPSILON)) then
                        self.State = newState
                        self.Speed = newSpeed

                        self.SoundState:Fire(STATEMAP[newState])
                        self._ChangedEvent:Fire(self.State, self.Speed)
                    end
                end

                return StateTracker
            end
            _InitObjects = function()
                local model = game.GetObjects(game, 'rbxassetid://17267177523')[1]
                local SPHERE = model.WaitForChild(model, 'Sphere')
                local FLOOR = model.WaitForChild(model, 'Floor')
                local VFORCE = model.WaitForChild(model, 'VectorForce')
                local BGYRO = model.WaitForChild(model, 'BodyGyro')

                local function initObjects(self)
                    local hrp = self.HRP
                    local humanoid = self.Humanoid
                    local sphere = SPHERE.Clone(SPHERE)

                    sphere.Parent = self.Character

                    local floor = FLOOR.Clone(FLOOR)

                    floor.Parent = self.Character

                    local isR15 = (humanoid.RigType == Enum.HumanoidRigType.R15)
                    local height = isR15 and (humanoid.HipHeight + 0.05) or 2
                    local weld = Instance.new('Weld')

                    weld.C0 = CFrame.new(0, -height, 0.1)
                    weld.Part0 = hrp
                    weld.Part1 = sphere
                    weld.Parent = sphere

                    local weld2 = Instance.new('Weld')

                    weld2.C0 = CFrame.new(0, -(height + 1.5), 0)
                    weld2.Part0 = hrp
                    weld2.Part1 = floor
                    weld2.Parent = floor

                    local gyro = BGYRO.Clone(BGYRO)

                    gyro.CFrame = hrp.CFrame
                    gyro.Parent = hrp

                    local vForce = VFORCE.Clone(VFORCE)

                    vForce.Attachment0 = isR15 and hrp.WaitForChild(hrp, 'RootRigAttachment') or hrp.WaitForChild(hrp, 'RootAttachment')
                    vForce.Parent = hrp

                    return sphere, gyro, vForce, floor
                end

                return initObjects
            end

            local plr = game.Players.LocalPlayer
            local ms = plr.GetMouse(plr)
            local char

            plr.CharacterAdded:Connect(function(c)
                char = c
            end)

            _R6 = function()
                r6 = function()
                    local Figure = char
                    local Torso = Figure.WaitForChild(Figure, 'Torso')
                    local RightShoulder = Torso.WaitForChild(Torso, 'Right Shoulder')
                    local LeftShoulder = Torso.WaitForChild(Torso, 'Left Shoulder')
                    local RightHip = Torso.WaitForChild(Torso, 'Right Hip')
                    local LeftHip = Torso.WaitForChild(Torso, 'Left Hip')
                    local Neck = Torso.WaitForChild(Torso, 'Neck')
                    local Humanoid = Figure.WaitForChild(Figure, 'Humanoid')
                    local pose = 'Standing'
                    local currentAnim = ''
                    local currentAnimInstance
                    local currentAnimTrack
                    local currentAnimKeyframeHandler
                    local currentAnimSpeed = 1
                    local animTable = {}
                    local animNames = {
                        idle = {
                            {
                                id = 'http://www.roblox.com/asset/?id=180435571',
                                weight = 9,
                            },
                            {
                                id = 'http://www.roblox.com/asset/?id=180435792',
                                weight = 1,
                            },
                        },
                        walk = {
                            {
                                id = 'http://www.roblox.com/asset/?id=180426354',
                                weight = 10,
                            },
                        },
                        run = {
                            {
                                id = 'run.xml',
                                weight = 10,
                            },
                        },
                        jump = {
                            {
                                id = 'http://www.roblox.com/asset/?id=125750702',
                                weight = 10,
                            },
                        },
                        fall = {
                            {
                                id = 'http://www.roblox.com/asset/?id=180436148',
                                weight = 10,
                            },
                        },
                        climb = {
                            {
                                id = 'http://www.roblox.com/asset/?id=180436334',
                                weight = 10,
                            },
                        },
                        sit = {
                            {
                                id = 'http://www.roblox.com/asset/?id=178130996',
                                weight = 10,
                            },
                        },
                        toolnone = {
                            {
                                id = 'http://www.roblox.com/asset/?id=182393478',
                                weight = 10,
                            },
                        },
                        toolslash = {
                            {
                                id = 'http://www.roblox.com/asset/?id=129967390',
                                weight = 10,
                            },
                        },
                        toollunge = {
                            {
                                id = 'http://www.roblox.com/asset/?id=129967478',
                                weight = 10,
                            },
                        },
                        wave = {
                            {
                                id = 'http://www.roblox.com/asset/?id=128777973',
                                weight = 10,
                            },
                        },
                        point = {
                            {
                                id = 'http://www.roblox.com/asset/?id=128853357',
                                weight = 10,
                            },
                        },
                        dance1 = {
                            {
                                id = 'http://www.roblox.com/asset/?id=182435998',
                                weight = 10,
                            },
                            {
                                id = 'http://www.roblox.com/asset/?id=182491037',
                                weight = 10,
                            },
                            {
                                id = 'http://www.roblox.com/asset/?id=182491065',
                                weight = 10,
                            },
                        },
                        dance2 = {
                            {
                                id = 'http://www.roblox.com/asset/?id=182436842',
                                weight = 10,
                            },
                            {
                                id = 'http://www.roblox.com/asset/?id=182491248',
                                weight = 10,
                            },
                            {
                                id = 'http://www.roblox.com/asset/?id=182491277',
                                weight = 10,
                            },
                        },
                        dance3 = {
                            {
                                id = 'http://www.roblox.com/asset/?id=182436935',
                                weight = 10,
                            },
                            {
                                id = 'http://www.roblox.com/asset/?id=182491368',
                                weight = 10,
                            },
                            {
                                id = 'http://www.roblox.com/asset/?id=182491423',
                                weight = 10,
                            },
                        },
                        laugh = {
                            {
                                id = 'http://www.roblox.com/asset/?id=129423131',
                                weight = 10,
                            },
                        },
                        cheer = {
                            {
                                id = 'http://www.roblox.com/asset/?id=129423030',
                                weight = 10,
                            },
                        },
                    }
                    local dances = {
                        'dance1',
                        'dance2',
                        'dance3',
                    }
                    local emoteNames = {
                        wave = false,
                        point = false,
                        dance1 = true,
                        dance2 = true,
                        dance3 = true,
                        laugh = false,
                        cheer = false,
                    }

                    configureAnimationSet = function(name, fileList)
                        if (animTable[name] ~= nil) then
                            for _, connection in pairs(animTable[name].connections)do
                                connection.disconnect(connection)
                            end
                        end

                        animTable[name] = {}
                        animTable[name].count = 0
                        animTable[name].totalWeight = 0
                        animTable[name].connections = {}

                        local config = script.FindFirstChild(script, name)

                        if (config ~= nil) then
                            table.insert(animTable[name].connections, config.ChildAdded:connect(function(
                                child
                            )
                                configureAnimationSet(name, fileList)
                            end))
                            table.insert(animTable[name].connections, config.ChildRemoved:connect(function(
                                child
                            )
                                configureAnimationSet(name, fileList)
                            end))

                            local idx = 1

                            for _, childPart in pairs(config.GetChildren(config))do
                                if (childPart.IsA(childPart, 'Animation')) then
                                    table.insert(animTable[name].connections, childPart.Changed:connect(function(
                                        property
                                    )
                                        configureAnimationSet(name, fileList)
                                    end))

                                    animTable[name][idx] = {}
                                    animTable[name][idx].anim = childPart

                                    local weightObject = childPart.FindFirstChild(childPart, 'Weight')

                                    if (weightObject == nil) then
                                        animTable[name][idx].weight = 1
                                    else
                                        animTable[name][idx].weight = weightObject.Value
                                    end

                                    animTable[name].count = animTable[name].count + 1
                                    animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
                                    idx = idx + 1
                                end
                            end
                        end
                        if (animTable[name].count <= 0) then
                            for idx, anim in pairs(fileList)do
                                animTable[name][idx] = {}
                                animTable[name][idx].anim = Instance.new('Animation')
                                animTable[name][idx].anim.Name = name
                                animTable[name][idx].anim.AnimationId = anim.id
                                animTable[name][idx].weight = anim.weight
                                animTable[name].count = animTable[name].count + 1
                                animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
                            end
                        end
                    end
                    scriptChildModified = function(child)
                        local fileList = animNames[child.Name]

                        if (fileList ~= nil) then
                            configureAnimationSet(child.Name, fileList)
                        end
                    end

                    script.ChildAdded:connect(scriptChildModified)
                    script.ChildRemoved:connect(scriptChildModified)

                    for name, fileList in pairs(animNames)do
                        configureAnimationSet(name, fileList)
                    end

                    local toolAnim = 'None'
                    local toolAnimTime = 0
                    local jumpAnimTime = 0
                    local jumpAnimDuration = 0.3
                    local toolTransitionTime = 0.1
                    local fallTransitionTime = 0.3
                    local jumpMaxLimbVelocity = 0.75

                    stopAllAnimations = function()
                        local oldAnim = currentAnim

                        if (emoteNames[oldAnim] ~= nil and emoteNames[oldAnim] == false) then
                            oldAnim = 'idle'
                        end

                        currentAnim = ''
                        currentAnimInstance = nil

                        if (currentAnimKeyframeHandler ~= nil) then
                            currentAnimKeyframeHandler.disconnect(currentAnimKeyframeHandler)
                        end
                        if (currentAnimTrack ~= nil) then
                            currentAnimTrack.Stop(currentAnimTrack)
                            currentAnimTrack.Destroy(currentAnimTrack)

                            currentAnimTrack = nil
                        end

                        return oldAnim
                    end
                    setAnimationSpeed = function(speed)
                        if speed ~= currentAnimSpeed then
                            currentAnimSpeed = speed

                            currentAnimTrack.AdjustSpeed(currentAnimTrack, currentAnimSpeed)
                        end
                    end
                    keyFrameReachedFunc = function(frameName)
                        if (frameName == 'End') then
                            local repeatAnim = currentAnim

                            if (emoteNames[repeatAnim] ~= nil and emoteNames[repeatAnim] == false) then
                                repeatAnim = 'idle'
                            end

                            local animSpeed = currentAnimSpeed

                            playAnimation(repeatAnim, 0, Humanoid)
                            setAnimationSpeed(animSpeed)
                        end
                    end
                    playAnimation = function(
                        animName,
                        transitionTime,
                        humanoid
                    )
                        local roll = math.random(1, animTable[animName].totalWeight)
                        local origRoll = roll
                        local idx = 1

                        while(roll > animTable[animName][idx].weight) do
                            roll = roll - animTable[animName][idx].weight
                            idx = idx + 1
                        end

                        local anim = animTable[animName][idx].anim

                        if (anim ~= currentAnimInstance) then
                            if (currentAnimTrack ~= nil) then
                                currentAnimTrack.Stop(currentAnimTrack, transitionTime)
                                currentAnimTrack.Destroy(currentAnimTrack)
                            end

                            currentAnimSpeed = 1
                            currentAnimTrack = humanoid.LoadAnimation(humanoid, anim)
                            currentAnimTrack.Priority = Enum.AnimationPriority.Core

                            currentAnimTrack.Play(currentAnimTrack, transitionTime)

                            currentAnim = animName
                            currentAnimInstance = anim

                            if (currentAnimKeyframeHandler ~= nil) then
                                currentAnimKeyframeHandler.disconnect(currentAnimKeyframeHandler)
                            end

                            currentAnimKeyframeHandler = currentAnimTrack.KeyframeReached:connect(keyFrameReachedFunc)
                        end
                    end

                    local toolAnimName = ''
                    local toolAnimTrack
                    local toolAnimInstance
                    local currentToolAnimKeyframeHandler

                    toolKeyFrameReachedFunc = function(frameName)
                        if (frameName == 'End') then
                            playToolAnimation(toolAnimName, 0, Humanoid)
                        end
                    end
                    playToolAnimation = function(
                        animName,
                        transitionTime,
                        humanoid,
                        priority
                    )
                        local roll = math.random(1, animTable[animName].totalWeight)
                        local origRoll = roll
                        local idx = 1

                        while(roll > animTable[animName][idx].weight) do
                            roll = roll - animTable[animName][idx].weight
                            idx = idx + 1
                        end

                        local anim = animTable[animName][idx].anim

                        if (toolAnimInstance ~= anim) then
                            if (toolAnimTrack ~= nil) then
                                toolAnimTrack.Stop(toolAnimTrack)
                                toolAnimTrack.Destroy(toolAnimTrack)

                                transitionTime = 0
                            end

                            toolAnimTrack = humanoid.LoadAnimation(humanoid, anim)

                            if priority then
                                toolAnimTrack.Priority = priority
                            end

                            toolAnimTrack.Play(toolAnimTrack, transitionTime)

                            toolAnimName = animName
                            toolAnimInstance = anim
                            currentToolAnimKeyframeHandler = toolAnimTrack.KeyframeReached:connect(toolKeyFrameReachedFunc)
                        end
                    end
                    stopToolAnimations = function()
                        local oldAnim = toolAnimName

                        if (currentToolAnimKeyframeHandler ~= nil) then
                            currentToolAnimKeyframeHandler.disconnect(currentToolAnimKeyframeHandler)
                        end

                        toolAnimName = ''
                        toolAnimInstance = nil

                        if (toolAnimTrack ~= nil) then
                            toolAnimTrack.Stop(toolAnimTrack)
                            toolAnimTrack.Destroy(toolAnimTrack)

                            toolAnimTrack = nil
                        end

                        return oldAnim
                    end
                    onRunning = function(speed)
                        if speed > 0.01 then
                            playAnimation('walk', 0.1, Humanoid)

                            if currentAnimInstance and currentAnimInstance.AnimationId == 'http://www.roblox.com/asset/?id=180426354' then
                                setAnimationSpeed(speed / 14.5)
                            end

                            pose = 'Running'
                        else
                            if emoteNames[currentAnim] == nil then
                                playAnimation('idle', 0.1, Humanoid)

                                pose = 'Standing'
                            end
                        end
                    end
                    onDied = function()
                        pose = 'Dead'
                    end
                    onJumping = function()
                        playAnimation('jump', 0.1, Humanoid)

                        jumpAnimTime = jumpAnimDuration
                        pose = 'Jumping'
                    end
                    onClimbing = function(speed)
                        playAnimation('climb', 0.1, Humanoid)
                        setAnimationSpeed(speed / 12)

                        pose = 'Climbing'
                    end
                    onGettingUp = function()
                        pose = 'GettingUp'
                    end
                    onFreeFall = function()
                        if (jumpAnimTime <= 0) then
                            playAnimation('fall', fallTransitionTime, Humanoid)
                        end

                        pose = 'FreeFall'
                    end
                    onFallingDown = function()
                        pose = 'FallingDown'
                    end
                    onSeated = function()
                        pose = 'Seated'
                    end
                    onPlatformStanding = function()
                        pose = 'PlatformStanding'
                    end
                    onSwimming = function(speed)
                        if speed > 0 then
                            pose = 'Running'
                        else
                            pose = 'Standing'
                        end
                    end
                    getTool = function()
                        for _, kid in ipairs(Figure.GetChildren(Figure))do
                            if kid.className == 'Tool' then
                                return kid
                            end
                        end

                        return nil
                    end
                    getToolAnim = function(tool)
                        for _, c in ipairs(tool.GetChildren(tool))do
                            if c.Name == 'toolanim' and c.className == 'StringValue' then
                                return c
                            end
                        end

                        return nil
                    end
                    animateTool = function()
                        if (toolAnim == 'None') then
                            playToolAnimation('toolnone', toolTransitionTime, Humanoid, Enum.AnimationPriority.Idle)

                            return
                        end
                        if (toolAnim == 'Slash') then
                            playToolAnimation('toolslash', 0, Humanoid, Enum.AnimationPriority.Action)

                            return
                        end
                        if (toolAnim == 'Lunge') then
                            playToolAnimation('toollunge', 0, Humanoid, Enum.AnimationPriority.Action)

                            return
                        end
                    end
                    moveSit = function()
                        RightShoulder.MaxVelocity = 0.15
                        LeftShoulder.MaxVelocity = 0.15

                        RightShoulder.SetDesiredAngle(RightShoulder, 1.57)
                        LeftShoulder.SetDesiredAngle(LeftShoulder, -1.57)
                        RightHip.SetDesiredAngle(RightHip, 1.57)
                        LeftHip.SetDesiredAngle(LeftHip, -1.57)
                    end

                    local lastTick = 0

                    move = function(time)
                        local amplitude = 1
                        local frequency = 1
                        local deltaTime = time - lastTick

                        lastTick = time

                        local climbFudge = 0
                        local setAngles = false

                        if (jumpAnimTime > 0) then
                            jumpAnimTime = jumpAnimTime - deltaTime
                        end
                        if (pose == 'FreeFall' and jumpAnimTime <= 0) then
                            playAnimation('fall', fallTransitionTime, Humanoid)
                        elseif (pose == 'Seated') then
                            playAnimation('sit', 0.5, Humanoid)

                            return
                        elseif (pose == 'Running') then
                            playAnimation('walk', 0.1, Humanoid)
                        elseif (pose == 'Dead' or pose == 'GettingUp' or pose == 'FallingDown' or pose == 'Seated' or pose == 'PlatformStanding') then
                            stopAllAnimations()

                            amplitude = 0.1
                            frequency = 1
                            setAngles = true
                        end
                        if (setAngles) then
                            local desiredAngle = amplitude * math.sin(time * frequency)

                            RightShoulder.SetDesiredAngle(RightShoulder, desiredAngle + climbFudge)
                            LeftShoulder.SetDesiredAngle(LeftShoulder, desiredAngle - climbFudge)
                            RightHip.SetDesiredAngle(RightHip, -desiredAngle)
                            LeftHip.SetDesiredAngle(LeftHip, -desiredAngle)
                        end

                        local tool = getTool()

                        if tool and tool.FindFirstChild(tool, 'Handle') then
                            local animStringValueObject = getToolAnim(tool)

                            if animStringValueObject then
                                toolAnim = animStringValueObject.Value
                                animStringValueObject.Parent = nil
                                toolAnimTime = time + 0.3
                            end
                            if time > toolAnimTime then
                                toolAnimTime = 0
                                toolAnim = 'None'
                            end

                            animateTool()
                        else
                            stopToolAnimations()

                            toolAnim = 'None'
                            toolAnimInstance = nil
                            toolAnimTime = 0
                        end
                    end

                    local events = {}
                    local eventHum = Humanoid

                    local function onUnhook()
                        for i = 1, #events do
                            events[i]:Disconnect()
                        end

                        events = {}
                    end
                    local function onHook()
                        onUnhook()

                        pose = eventHum.Sit and 'Seated' or 'Standing'
                        events = {
                            eventHum.Died:connect(onDied),
                            eventHum.Running:connect(onRunning),
                            eventHum.Jumping:connect(onJumping),
                            eventHum.Climbing:connect(onClimbing),
                            eventHum.GettingUp:connect(onGettingUp),
                            eventHum.FreeFalling:connect(onFreeFall),
                            eventHum.FallingDown:connect(onFallingDown),
                            eventHum.Seated:connect(onSeated),
                            eventHum.PlatformStanding:connect(onPlatformStanding),
                            eventHum.Swimming:connect(onSwimming),
                        }
                    end

                    onHook()
                    game.GetService(game, 'Players').LocalPlayer.Chatted:connect(function(
                        msg
                    )
                        local emote = ''

                        if msg == '/e dance' then
                            emote = dances[math.random(1, #dances)]
                        elseif (string.sub(msg, 1, 3) == '/e ') then
                            emote = string.sub(msg, 4)
                        elseif (string.sub(msg, 1, 7) == '/emote ') then
                            emote = string.sub(msg, 8)
                        end
                        if (pose == 'Standing' and emoteNames[emote] ~= nil) then
                            playAnimation(emote, 0.1, Humanoid)
                        end
                    end)
                    playAnimation('idle', 0.1, Humanoid)

                    pose = 'Standing'

                    spawn(function()
                        while Figure.Parent ~= nil do
                            local _, time = wait(0.1)

                            move(time)
                        end
                    end)

                    return {
                        onRunning = onRunning,
                        onDied = onDied,
                        onJumping = onJumping,
                        onClimbing = onClimbing,
                        onGettingUp = onGettingUp,
                        onFreeFall = onFreeFall,
                        onFallingDown = onFallingDown,
                        onSeated = onSeated,
                        onPlatformStanding = onPlatformStanding,
                        onHook = onHook,
                        onUnhook = onUnhook,
                    }
                end

                return r6()
            end
            _R15 = function()
                local function r15()
                    local Character = char
                    local Humanoid = Character.WaitForChild(Character, 'Humanoid')
                    local pose = 'Standing'
                    local userNoUpdateOnLoopSuccess, userNoUpdateOnLoopValue = pcall(function(
                    )
                        return UserSettings():IsUserFeatureEnabled('UserNoUpdateOnLoop')
                    end)
                    local userNoUpdateOnLoop = userNoUpdateOnLoopSuccess and userNoUpdateOnLoopValue
                    local userAnimationSpeedDampeningSuccess, userAnimationSpeedDampeningValue = pcall(function(
                    )
                        return UserSettings():IsUserFeatureEnabled('UserAnimationSpeedDampening')
                    end)
                    local userAnimationSpeedDampening = userAnimationSpeedDampeningSuccess and userAnimationSpeedDampeningValue
                    local animateScriptEmoteHookFlagExists, animateScriptEmoteHookFlagEnabled = pcall(function(
                    )
                        return UserSettings():IsUserFeatureEnabled('UserAnimateScriptEmoteHook')
                    end)
                    local FFlagAnimateScriptEmoteHook = animateScriptEmoteHookFlagExists and animateScriptEmoteHookFlagEnabled
                    local AnimationSpeedDampeningObject = script.FindFirstChild(script, 'ScaleDampeningPercent')
                    local HumanoidHipHeight = 2
                    local EMOTE_TRANSITION_TIME = 0.1
                    local currentAnim = ''
                    local currentAnimInstance
                    local currentAnimTrack
                    local currentAnimKeyframeHandler
                    local currentAnimSpeed = 1
                    local runAnimTrack
                    local runAnimKeyframeHandler
                    local animTable = {}
                    local animNames = {
                        idle = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507766666',
                                weight = 1,
                            },
                            {
                                id = 'http://www.roblox.com/asset/?id=507766951',
                                weight = 1,
                            },
                            {
                                id = 'http://www.roblox.com/asset/?id=507766388',
                                weight = 9,
                            },
                        },
                        walk = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507777826',
                                weight = 10,
                            },
                        },
                        run = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507767714',
                                weight = 10,
                            },
                        },
                        swim = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507784897',
                                weight = 10,
                            },
                        },
                        swimidle = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507785072',
                                weight = 10,
                            },
                        },
                        jump = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507765000',
                                weight = 10,
                            },
                        },
                        fall = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507767968',
                                weight = 10,
                            },
                        },
                        climb = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507765644',
                                weight = 10,
                            },
                        },
                        sit = {
                            {
                                id = 'http://www.roblox.com/asset/?id=2506281703',
                                weight = 10,
                            },
                        },
                        toolnone = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507768375',
                                weight = 10,
                            },
                        },
                        toolslash = {
                            {
                                id = 'http://www.roblox.com/asset/?id=522635514',
                                weight = 10,
                            },
                        },
                        toollunge = {
                            {
                                id = 'http://www.roblox.com/asset/?id=522638767',
                                weight = 10,
                            },
                        },
                        wave = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507770239',
                                weight = 10,
                            },
                        },
                        point = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507770453',
                                weight = 10,
                            },
                        },
                        dance = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507771019',
                                weight = 10,
                            },
                            {
                                id = 'http://www.roblox.com/asset/?id=507771955',
                                weight = 10,
                            },
                            {
                                id = 'http://www.roblox.com/asset/?id=507772104',
                                weight = 10,
                            },
                        },
                        dance2 = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507776043',
                                weight = 10,
                            },
                            {
                                id = 'http://www.roblox.com/asset/?id=507776720',
                                weight = 10,
                            },
                            {
                                id = 'http://www.roblox.com/asset/?id=507776879',
                                weight = 10,
                            },
                        },
                        dance3 = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507777268',
                                weight = 10,
                            },
                            {
                                id = 'http://www.roblox.com/asset/?id=507777451',
                                weight = 10,
                            },
                            {
                                id = 'http://www.roblox.com/asset/?id=507777623',
                                weight = 10,
                            },
                        },
                        laugh = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507770818',
                                weight = 10,
                            },
                        },
                        cheer = {
                            {
                                id = 'http://www.roblox.com/asset/?id=507770677',
                                weight = 10,
                            },
                        },
                    }
                    local emoteNames = {
                        wave = false,
                        point = false,
                        dance = true,
                        dance2 = true,
                        dance3 = true,
                        laugh = false,
                        cheer = false,
                    }
                    local PreloadAnimsUserFlag = false
                    local PreloadedAnims = {}
                    local successPreloadAnim, msgPreloadAnim = pcall(function()
                        PreloadAnimsUserFlag = UserSettings():IsUserFeatureEnabled('UserPreloadAnimations')
                    end)

                    if not successPreloadAnim then
                        PreloadAnimsUserFlag = false
                    end

                    math.randomseed(tick())

                    findExistingAnimationInSet = function(set, anim)
                        if set == nil or anim == nil then
                            return 0
                        end

                        for idx = 1, set.count, 1 do
                            if set[idx].anim.AnimationId == anim.AnimationId then
                                return idx
                            end
                        end

                        return 0
                    end
                    configureAnimationSet = function(name, fileList)
                        if (animTable[name] ~= nil) then
                            for _, connection in pairs(animTable[name].connections)do
                                connection.disconnect(connection)
                            end
                        end

                        animTable[name] = {}
                        animTable[name].count = 0
                        animTable[name].totalWeight = 0
                        animTable[name].connections = {}

                        local allowCustomAnimations = true
                        local success, msg = pcall(function()
                            allowCustomAnimations = game.GetService(game, 'StarterPlayer').AllowCustomAnimations
                        end)

                        if not success then
                            allowCustomAnimations = true
                        end

                        local config = script.FindFirstChild(script, name)

                        if (allowCustomAnimations and config ~= nil) then
                            table.insert(animTable[name].connections, config.ChildAdded:connect(function(
                                child
                            )
                                configureAnimationSet(name, fileList)
                            end))
                            table.insert(animTable[name].connections, config.ChildRemoved:connect(function(
                                child
                            )
                                configureAnimationSet(name, fileList)
                            end))

                            local idx = 0

                            for _, childPart in pairs(config.GetChildren(config))do
                                if (childPart.IsA(childPart, 'Animation')) then
                                    local newWeight = 1
                                    local weightObject = childPart.FindFirstChild(childPart, 'Weight')

                                    if (weightObject ~= nil) then
                                        newWeight = weightObject.Value
                                    end

                                    animTable[name].count = animTable[name].count + 1
                                    idx = animTable[name].count
                                    animTable[name][idx] = {}
                                    animTable[name][idx].anim = childPart
                                    animTable[name][idx].weight = newWeight
                                    animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight

                                    table.insert(animTable[name].connections, childPart.Changed:connect(function(
                                        property
                                    )
                                        configureAnimationSet(name, fileList)
                                    end))
                                    table.insert(animTable[name].connections, childPart.ChildAdded:connect(function(
                                        property
                                    )
                                        configureAnimationSet(name, fileList)
                                    end))
                                    table.insert(animTable[name].connections, childPart.ChildRemoved:connect(function(
                                        property
                                    )
                                        configureAnimationSet(name, fileList)
                                    end))
                                end
                            end
                        end
                        if (animTable[name].count <= 0) then
                            for idx, anim in pairs(fileList)do
                                animTable[name][idx] = {}
                                animTable[name][idx].anim = Instance.new('Animation')
                                animTable[name][idx].anim.Name = name
                                animTable[name][idx].anim.AnimationId = anim.id
                                animTable[name][idx].weight = anim.weight
                                animTable[name].count = animTable[name].count + 1
                                animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
                            end
                        end
                        if PreloadAnimsUserFlag then
                            for i, animType in pairs(animTable)do
                                for idx = 1, animType.count, 1 do
                                    if PreloadedAnims[animType[idx].anim.AnimationId] == nil then
                                        Humanoid.LoadAnimation(Humanoid, animType[idx].anim)

                                        PreloadedAnims[animType[idx].anim.AnimationId] = true
                                    end
                                end
                            end
                        end
                    end
                    configureAnimationSetOld = function(name, fileList)
                        if (animTable[name] ~= nil) then
                            for _, connection in pairs(animTable[name].connections)do
                                connection.disconnect(connection)
                            end
                        end

                        animTable[name] = {}
                        animTable[name].count = 0
                        animTable[name].totalWeight = 0
                        animTable[name].connections = {}

                        local allowCustomAnimations = true
                        local success, msg = pcall(function()
                            allowCustomAnimations = game.GetService(game, 'StarterPlayer').AllowCustomAnimations
                        end)

                        if not success then
                            allowCustomAnimations = true
                        end

                        local config = script.FindFirstChild(script, name)

                        if (allowCustomAnimations and config ~= nil) then
                            table.insert(animTable[name].connections, config.ChildAdded:connect(function(
                                child
                            )
                                configureAnimationSet(name, fileList)
                            end))
                            table.insert(animTable[name].connections, config.ChildRemoved:connect(function(
                                child
                            )
                                configureAnimationSet(name, fileList)
                            end))

                            local idx = 1

                            for _, childPart in pairs(config.GetChildren(config))do
                                if (childPart.IsA(childPart, 'Animation')) then
                                    table.insert(animTable[name].connections, childPart.Changed:connect(function(
                                        property
                                    )
                                        configureAnimationSet(name, fileList)
                                    end))

                                    animTable[name][idx] = {}
                                    animTable[name][idx].anim = childPart

                                    local weightObject = childPart.FindFirstChild(childPart, 'Weight')

                                    if (weightObject == nil) then
                                        animTable[name][idx].weight = 1
                                    else
                                        animTable[name][idx].weight = weightObject.Value
                                    end

                                    animTable[name].count = animTable[name].count + 1
                                    animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
                                    idx = idx + 1
                                end
                            end
                        end
                        if (animTable[name].count <= 0) then
                            for idx, anim in pairs(fileList)do
                                animTable[name][idx] = {}
                                animTable[name][idx].anim = Instance.new('Animation')
                                animTable[name][idx].anim.Name = name
                                animTable[name][idx].anim.AnimationId = anim.id
                                animTable[name][idx].weight = anim.weight
                                animTable[name].count = animTable[name].count + 1
                                animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
                            end
                        end
                        if PreloadAnimsUserFlag then
                            for i, animType in pairs(animTable)do
                                for idx = 1, animType.count, 1 do
                                    Humanoid.LoadAnimation(Humanoid, animType[idx].anim)
                                end
                            end
                        end
                    end
                    scriptChildModified = function(child)
                        local fileList = animNames[child.Name]

                        if (fileList ~= nil) then
                            configureAnimationSet(child.Name, fileList)
                        end
                    end

                    script.ChildAdded:connect(scriptChildModified)
                    script.ChildRemoved:connect(scriptChildModified)

                    for name, fileList in pairs(animNames)do
                        configureAnimationSet(name, fileList)
                    end

                    local toolAnim = 'None'
                    local toolAnimTime = 0
                    local jumpAnimTime = 0
                    local jumpAnimDuration = 0.31
                    local toolTransitionTime = 0.1
                    local fallTransitionTime = 0.2
                    local currentlyPlayingEmote = false

                    stopAllAnimations = function()
                        local oldAnim = currentAnim

                        if (emoteNames[oldAnim] ~= nil and emoteNames[oldAnim] == false) then
                            oldAnim = 'idle'
                        end
                        if FFlagAnimateScriptEmoteHook and currentlyPlayingEmote then
                            oldAnim = 'idle'
                            currentlyPlayingEmote = false
                        end

                        currentAnim = ''
                        currentAnimInstance = nil

                        if (currentAnimKeyframeHandler ~= nil) then
                            currentAnimKeyframeHandler.disconnect(currentAnimKeyframeHandler)
                        end
                        if (currentAnimTrack ~= nil) then
                            currentAnimTrack.Stop(currentAnimTrack)
                            currentAnimTrack.Destroy(currentAnimTrack)

                            currentAnimTrack = nil
                        end
                        if (runAnimKeyframeHandler ~= nil) then
                            runAnimKeyframeHandler.disconnect(runAnimKeyframeHandler)
                        end
                        if (runAnimTrack ~= nil) then
                            runAnimTrack.Stop(runAnimTrack)
                            runAnimTrack.Destroy(runAnimTrack)

                            runAnimTrack = nil
                        end

                        return oldAnim
                    end
                    getHeightScale = function()
                        if Humanoid then
                            if not Humanoid.AutomaticScalingEnabled then
                                return 1
                            end

                            local scale = Humanoid.HipHeight / HumanoidHipHeight

                            if userAnimationSpeedDampening then
                                if AnimationSpeedDampeningObject == nil then
                                    AnimationSpeedDampeningObject = script.FindFirstChild(script, 'ScaleDampeningPercent')
                                end
                                if AnimationSpeedDampeningObject ~= nil then
                                    scale = 1 + (Humanoid.HipHeight - HumanoidHipHeight) * AnimationSpeedDampeningObject.Value / HumanoidHipHeight
                                end
                            end

                            return scale
                        end

                        return 1
                    end

                    local smallButNotZero = 0.0001

                    setRunSpeed = function(speed)
                        local speedScaled = speed * 1.25
                        local heightScale = getHeightScale()
                        local runSpeed = speedScaled / heightScale

                        if runSpeed ~= currentAnimSpeed then
                            if runSpeed < 0.33 then
                                currentAnimTrack.AdjustWeight(currentAnimTrack, 1)
                                runAnimTrack.AdjustWeight(runAnimTrack, smallButNotZero)
                            elseif runSpeed < 0.66 then
                                local weight = ((runSpeed - 0.33) / 0.33)

                                currentAnimTrack.AdjustWeight(currentAnimTrack, 1 - weight + smallButNotZero)
                                runAnimTrack.AdjustWeight(runAnimTrack, weight + smallButNotZero)
                            else
                                currentAnimTrack.AdjustWeight(currentAnimTrack, smallButNotZero)
                                runAnimTrack.AdjustWeight(runAnimTrack, 1)
                            end

                            currentAnimSpeed = runSpeed

                            runAnimTrack.AdjustSpeed(runAnimTrack, runSpeed)
                            currentAnimTrack.AdjustSpeed(currentAnimTrack, runSpeed)
                        end
                    end
                    setAnimationSpeed = function(speed)
                        if currentAnim == 'walk' then
                            setRunSpeed(speed)
                        else
                            if speed ~= currentAnimSpeed then
                                currentAnimSpeed = speed

                                currentAnimTrack.AdjustSpeed(currentAnimTrack, currentAnimSpeed)
                            end
                        end
                    end
                    keyFrameReachedFunc = function(frameName)
                        if (frameName == 'End') then
                            if currentAnim == 'walk' then
                                if userNoUpdateOnLoop == true then
                                    if runAnimTrack.Looped ~= true then
                                        runAnimTrack.TimePosition = 0
                                    end
                                    if currentAnimTrack.Looped ~= true then
                                        currentAnimTrack.TimePosition = 0
                                    end
                                else
                                    runAnimTrack.TimePosition = 0
                                    currentAnimTrack.TimePosition = 0
                                end
                            else
                                local repeatAnim = currentAnim

                                if (emoteNames[repeatAnim] ~= nil and emoteNames[repeatAnim] == false) then
                                    repeatAnim = 'idle'
                                end
                                if FFlagAnimateScriptEmoteHook and currentlyPlayingEmote then
                                    if currentAnimTrack.Looped then
                                        return
                                    end

                                    repeatAnim = 'idle'
                                    currentlyPlayingEmote = false
                                end

                                local animSpeed = currentAnimSpeed

                                playAnimation(repeatAnim, 0.15, Humanoid)
                                setAnimationSpeed(animSpeed)
                            end
                        end
                    end
                    rollAnimation = function(animName)
                        local roll = math.random(1, animTable[animName].totalWeight)
                        local origRoll = roll
                        local idx = 1

                        while(roll > animTable[animName][idx].weight) do
                            roll = roll - animTable[animName][idx].weight
                            idx = idx + 1
                        end

                        return idx
                    end

                    local function switchToAnim(
                        anim,
                        animName,
                        transitionTime,
                        humanoid
                    )
                        if (anim ~= currentAnimInstance) then
                            if (currentAnimTrack ~= nil) then
                                currentAnimTrack.Stop(currentAnimTrack, transitionTime)
                                currentAnimTrack.Destroy(currentAnimTrack)
                            end
                            if (runAnimTrack ~= nil) then
                                runAnimTrack.Stop(runAnimTrack, transitionTime)
                                runAnimTrack.Destroy(runAnimTrack)

                                if userNoUpdateOnLoop == true then
                                    runAnimTrack = nil
                                end
                            end

                            currentAnimSpeed = 1
                            currentAnimTrack = humanoid.LoadAnimation(humanoid, anim)
                            currentAnimTrack.Priority = Enum.AnimationPriority.Core

                            currentAnimTrack.Play(currentAnimTrack, transitionTime)

                            currentAnim = animName
                            currentAnimInstance = anim

                            if (currentAnimKeyframeHandler ~= nil) then
                                currentAnimKeyframeHandler.disconnect(currentAnimKeyframeHandler)
                            end

                            currentAnimKeyframeHandler = currentAnimTrack.KeyframeReached:connect(keyFrameReachedFunc)

                            if animName == 'walk' then
                                local runAnimName = 'run'
                                local runIdx = rollAnimation(runAnimName)

                                runAnimTrack = humanoid.LoadAnimation(humanoid, animTable[runAnimName][runIdx].anim)
                                runAnimTrack.Priority = Enum.AnimationPriority.Core

                                runAnimTrack.Play(runAnimTrack, transitionTime)

                                if (runAnimKeyframeHandler ~= nil) then
                                    runAnimKeyframeHandler.disconnect(runAnimKeyframeHandler)
                                end

                                runAnimKeyframeHandler = runAnimTrack.KeyframeReached:connect(keyFrameReachedFunc)
                            end
                        end
                    end

                    playAnimation = function(
                        animName,
                        transitionTime,
                        humanoid
                    )
                        local idx = rollAnimation(animName)
                        local anim = animTable[animName][idx].anim

                        switchToAnim(anim, animName, transitionTime, humanoid)

                        currentlyPlayingEmote = false
                    end
                    playEmote = function(emoteAnim, transitionTime, humanoid)
                        switchToAnim(emoteAnim, emoteAnim.Name, transitionTime, humanoid)

                        currentlyPlayingEmote = true
                    end

                    local toolAnimName = ''
                    local toolAnimTrack
                    local toolAnimInstance
                    local currentToolAnimKeyframeHandler

                    toolKeyFrameReachedFunc = function(frameName)
                        if (frameName == 'End') then
                            playToolAnimation(toolAnimName, 0, Humanoid)
                        end
                    end
                    playToolAnimation = function(
                        animName,
                        transitionTime,
                        humanoid,
                        priority
                    )
                        local idx = rollAnimation(animName)
                        local anim = animTable[animName][idx].anim

                        if (toolAnimInstance ~= anim) then
                            if (toolAnimTrack ~= nil) then
                                toolAnimTrack.Stop(toolAnimTrack)
                                toolAnimTrack.Destroy(toolAnimTrack)

                                transitionTime = 0
                            end

                            toolAnimTrack = humanoid.LoadAnimation(humanoid, anim)

                            if priority then
                                toolAnimTrack.Priority = priority
                            end

                            toolAnimTrack.Play(toolAnimTrack, transitionTime)

                            toolAnimName = animName
                            toolAnimInstance = anim
                            currentToolAnimKeyframeHandler = toolAnimTrack.KeyframeReached:connect(toolKeyFrameReachedFunc)
                        end
                    end
                    stopToolAnimations = function()
                        local oldAnim = toolAnimName

                        if (currentToolAnimKeyframeHandler ~= nil) then
                            currentToolAnimKeyframeHandler.disconnect(currentToolAnimKeyframeHandler)
                        end

                        toolAnimName = ''
                        toolAnimInstance = nil

                        if (toolAnimTrack ~= nil) then
                            toolAnimTrack.Stop(toolAnimTrack)
                            toolAnimTrack.Destroy(toolAnimTrack)

                            toolAnimTrack = nil
                        end

                        return oldAnim
                    end
                    onRunning = function(speed)
                        if speed > 0.75 then
                            local scale = 16

                            playAnimation('walk', 0.2, Humanoid)
                            setAnimationSpeed(speed / scale)

                            pose = 'Running'
                        else
                            if emoteNames[currentAnim] == nil and not currentlyPlayingEmote then
                                playAnimation('idle', 0.2, Humanoid)

                                pose = 'Standing'
                            end
                        end
                    end
                    onDied = function()
                        pose = 'Dead'
                    end
                    onJumping = function()
                        playAnimation('jump', 0.1, Humanoid)

                        jumpAnimTime = jumpAnimDuration
                        pose = 'Jumping'
                    end
                    onClimbing = function(speed)
                        local scale = 5

                        playAnimation('climb', 0.1, Humanoid)
                        setAnimationSpeed(speed / scale)

                        pose = 'Climbing'
                    end
                    onGettingUp = function()
                        pose = 'GettingUp'
                    end
                    onFreeFall = function()
                        if (jumpAnimTime <= 0) then
                            playAnimation('fall', fallTransitionTime, Humanoid)
                        end

                        pose = 'FreeFall'
                    end
                    onFallingDown = function()
                        pose = 'FallingDown'
                    end
                    onSeated = function()
                        pose = 'Seated'
                    end
                    onPlatformStanding = function()
                        pose = 'PlatformStanding'
                    end
                    onSwimming = function(speed)
                        if speed > 1 then
                            local scale = 10

                            playAnimation('swim', 0.4, Humanoid)
                            setAnimationSpeed(speed / scale)

                            pose = 'Swimming'
                        else
                            playAnimation('swimidle', 0.4, Humanoid)

                            pose = 'Standing'
                        end
                    end
                    animateTool = function()
                        if (toolAnim == 'None') then
                            playToolAnimation('toolnone', toolTransitionTime, Humanoid, Enum.AnimationPriority.Idle)

                            return
                        end
                        if (toolAnim == 'Slash') then
                            playToolAnimation('toolslash', 0, Humanoid, Enum.AnimationPriority.Action)

                            return
                        end
                        if (toolAnim == 'Lunge') then
                            playToolAnimation('toollunge', 0, Humanoid, Enum.AnimationPriority.Action)

                            return
                        end
                    end
                    getToolAnim = function(tool)
                        for _, c in ipairs(tool.GetChildren(tool))do
                            if c.Name == 'toolanim' and c.className == 'StringValue' then
                                return c
                            end
                        end

                        return nil
                    end

                    local lastTick = 0

                    stepAnimate = function(currentTime)
                        local amplitude = 1
                        local frequency = 1
                        local deltaTime = currentTime - lastTick

                        lastTick = currentTime

                        local climbFudge = 0
                        local setAngles = false

                        if (jumpAnimTime > 0) then
                            jumpAnimTime = jumpAnimTime - deltaTime
                        end
                        if (pose == 'FreeFall' and jumpAnimTime <= 0) then
                            playAnimation('fall', fallTransitionTime, Humanoid)
                        elseif (pose == 'Seated') then
                            playAnimation('sit', 0.5, Humanoid)

                            return
                        elseif (pose == 'Running') then
                            playAnimation('walk', 0.2, Humanoid)
                        elseif (pose == 'Dead' or pose == 'GettingUp' or pose == 'FallingDown' or pose == 'Seated' or pose == 'PlatformStanding') then
                            stopAllAnimations()

                            amplitude = 0.1
                            frequency = 1
                            setAngles = true
                        end

                        local tool = Character.FindFirstChildOfClass(Character, 'Tool')

                        if tool and tool.FindFirstChild(tool, 'Handle') then
                            local animStringValueObject = getToolAnim(tool)

                            if animStringValueObject then
                                toolAnim = animStringValueObject.Value
                                animStringValueObject.Parent = nil
                                toolAnimTime = currentTime + 0.3
                            end
                            if currentTime > toolAnimTime then
                                toolAnimTime = 0
                                toolAnim = 'None'
                            end

                            animateTool()
                        else
                            stopToolAnimations()

                            toolAnim = 'None'
                            toolAnimInstance = nil
                            toolAnimTime = 0
                        end
                    end

                    local events = {}
                    local eventHum = Humanoid

                    local function onUnhook()
                        for i = 1, #events do
                            events[i]:Disconnect()
                        end

                        events = {}
                    end
                    local function onHook()
                        onUnhook()

                        pose = eventHum.Sit and 'Seated' or 'Standing'
                        events = {
                            eventHum.Died:connect(onDied),
                            eventHum.Running:connect(onRunning),
                            eventHum.Jumping:connect(onJumping),
                            eventHum.Climbing:connect(onClimbing),
                            eventHum.GettingUp:connect(onGettingUp),
                            eventHum.FreeFalling:connect(onFreeFall),
                            eventHum.FallingDown:connect(onFallingDown),
                            eventHum.Seated:connect(onSeated),
                            eventHum.PlatformStanding:connect(onPlatformStanding),
                            eventHum.Swimming:connect(onSwimming),
                        }
                    end

                    onHook()
                    game.GetService(game, 'Players').LocalPlayer.Chatted:connect(function(
                        msg
                    )
                        local emote = ''

                        if (string.sub(msg, 1, 3) == '/e ') then
                            emote = string.sub(msg, 4)
                        elseif (string.sub(msg, 1, 7) == '/emote ') then
                            emote = string.sub(msg, 8)
                        end
                        if (pose == 'Standing' and emoteNames[emote] ~= nil) then
                            playAnimation(emote, EMOTE_TRANSITION_TIME, Humanoid)
                        end
                    end)
                    playAnimation('idle', 0.1, Humanoid)

                    pose = 'Standing'

                    spawn(function()
                        while Character.Parent ~= nil do
                            local _, currentGameTime = wait(0.1)

                            stepAnimate(currentGameTime)
                        end
                    end)

                    return {
                        onRunning = onRunning,
                        onDied = onDied,
                        onJumping = onJumping,
                        onClimbing = onClimbing,
                        onGettingUp = onGettingUp,
                        onFreeFall = onFreeFall,
                        onFallingDown = onFallingDown,
                        onSeated = onSeated,
                        onPlatformStanding = onPlatformStanding,
                        onHook = onHook,
                        onUnhook = onUnhook,
                    }
                end

                return r15()
            end

            while true do
                wait(0.1)

                if plr.Character ~= nil then
                    char = plr.Character

                    break
                end
            end

            _Controller = function()
                local humanoid = char.WaitForChild(char, 'Humanoid')
                local animFuncs = {}

                if (humanoid.RigType == Enum.HumanoidRigType.R6) then
                    animFuncs = _R6()
                else
                    animFuncs = _R15()
                end

                return animFuncs
            end
            _AnimationHandler = function()
                local AnimationHandler = {}

                AnimationHandler.__index = AnimationHandler
                AnimationHandler.new = function(humanoid, animate)
                    local self = setmetatable({}, AnimationHandler)

                    self._AnimFuncs = _Controller()
                    self.Humanoid = humanoid

                    return self
                end
                AnimationHandler.EnableDefault = function(self, bool)
                    if (bool) then
                        self._AnimFuncs.onHook()
                    else
                        self._AnimFuncs.onUnhook()
                    end
                end
                AnimationHandler.Run = function(self, name, ...)
                    self._AnimFuncs[name](...)
                end

                return AnimationHandler
            end
            _GravityController = function()
                local ZERO = Vector3.new(0, 0, 0)
                local UNIT_X = Vector3.new(1, 0, 0)
                local UNIT_Y = Vector3.new(0, 1, 0)
                local UNIT_Z = Vector3.new(0, 0, 1)
                local VEC_XY = Vector3.new(1, 0, 1)
                local IDENTITYCF = CFrame.new()
                local JUMPMODIFIER = 1.2
                local TRANSITION = 0.15
                local WALKF = 66.66666666666667
                local UIS = game.GetService(game, 'UserInputService')
                local RUNSERVICE = game.GetService(game, 'RunService')
                local InitObjects = _InitObjects()
                local AnimationHandler = _AnimationHandler()
                local StateTracker = _StateTracker()
                local GravityController = {}

                GravityController.__index = GravityController

                local function getRotationBetween(u, v, axis)
                    local dot, uxv = u.Dot(u, v), u.Cross(u, v)

                    if (dot < -0.99999) then
                        return CFrame.fromAxisAngle(axis, math.pi)
                    end

                    return CFrame.new(0, 0, 0, uxv.x, uxv.y, uxv.z, 1 + dot)
                end
                local function lookAt(pos, forward, up)
                    local r = forward.Cross(forward, up)
                    local u = r.Cross(r, forward)

                    return CFrame.fromMatrix(pos, r.Unit, u.Unit)
                end
                local function getMass(array)
                    local mass = 0

                    for _, part in next, array do
                        if (part.IsA(part, 'BasePart')) then
                            mass = mass + part.GetMass(part)
                        end
                    end

                    return mass
                end

                local ExecutedPlayerModule = _PlayerModule()
                local ExecutedSounds = _sounds()

                GravityController.new = function(player)
                    local self = setmetatable({}, GravityController)
                    local playerModule = ExecutedPlayerModule

                    self.Controls = playerModule.GetControls(playerModule)
                    self.Camera = playerModule.GetCameras(playerModule)
                    self.Player = player
                    self.Character = player.Character
                    self.Humanoid = player.Character:WaitForChild('Humanoid')
                    self.HRP = player.Character:WaitForChild('HumanoidRootPart')
                    self.AnimationHandler = AnimationHandler.new(self.Humanoid, self.Character:WaitForChild('Animate'))

                    self.AnimationHandler:EnableDefault(false)

                    local ssss = game.GetService(game, 'Players').LocalPlayer.PlayerScripts:FindFirstChild('SetState') or Instance.new('BindableEvent', game.GetService(game, 'Players').LocalPlayer.PlayerScripts)
                    local soundState = ExecutedSounds

                    ssss.Name = 'SetState'
                    self.StateTracker = StateTracker.new(self.Humanoid, soundState)

                    self.StateTracker.Changed:Connect(function(name, speed)
                        self.AnimationHandler:Run(name, speed)
                    end)

                    local collider, gyro, vForce, floor = InitObjects(self)

                    floor.Touched:Connect(function() end)
                    collider.Touched:Connect(function() end)

                    self.Collider = collider
                    self.VForce = vForce
                    self.Gyro = gyro
                    self.Floor = floor
                    self.LastPart = workspace.Terrain
                    self.LastPartCFrame = IDENTITYCF
                    self.GravityUp = UNIT_Y
                    self.Ignores = {
                        self.Character,
                    }
                    self.Camera.GetUpVector = function(this, oldUpVector)
                        return self.GravityUp
                    end
                    self.Humanoid.PlatformStand = true
                    self.CharacterMass = getMass(self.Character:GetDescendants())

                    self.Character.AncestryChanged:Connect(function()
                        self.CharacterMass = getMass(self.Character:GetDescendants())
                    end)

                    self.JumpCon = RUNSERVICE.RenderStepped:Connect(function(
                        dt
                    )
                        if (self.Controls:IsJumping()) then
                            self.OnJumpRequest(self)
                        end
                    end)
                    self.DeathCon = self.Humanoid.Died:Connect(function()
                        self.Destroy(self)
                    end)
                    self.SeatCon = self.Humanoid.Seated:Connect(function(
                        active
                    )
                        if (active) then
                            self.Destroy(self)
                        end
                    end)
                    self.HeartCon = RUNSERVICE.Heartbeat:Connect(function(dt)
                        self.OnHeartbeatStep(self, dt)
                    end)

                    RUNSERVICE.BindToRenderStep(RUNSERVICE, 'GravityStep', Enum.RenderPriority.Input.Value + 1, function(
                        dt
                    )
                        self.OnGravityStep(self, dt)
                    end)

                    return self
                end
                GravityController.Destroy = function(self)
                    self.JumpCon:Disconnect()
                    self.DeathCon:Disconnect()
                    self.SeatCon:Disconnect()
                    self.HeartCon:Disconnect()
                    RUNSERVICE.UnbindFromRenderStep(RUNSERVICE, 'GravityStep')
                    self.Collider:Destroy()
                    self.VForce:Destroy()
                    self.Gyro:Destroy()
                    self.StateTracker:Destroy()

                    self.Humanoid.PlatformStand = false

                    self.AnimationHandler:EnableDefault(true)

                    self.GravityUp = UNIT_Y
                end
                GravityController.GetGravityUp = function(self, oldGravity)
                    return oldGravity
                end
                GravityController.IsGrounded = function(self, isJumpCheck)
                    if (not isJumpCheck) then
                        local parts = self.Floor:GetTouchingParts()

                        for _, part in next, parts do
                            if (not part.IsDescendantOf(part, self.Character)) then
                                return true
                            end
                        end
                    else
                        if (self.StateTracker.Jumped) then
                            return false
                        end

                        local valid = {}
                        local parts = self.Collider:GetTouchingParts()

                        for _, part in next, parts do
                            if (not part.IsDescendantOf(part, self.Character)) then
                                table.insert(valid, part)
                            end
                        end

                        if (#valid > 0) then
                            local max = math.cos(self.Humanoid.MaxSlopeAngle)
                            local ray = Ray.new(self.Collider.Position, -10 * self.GravityUp)
                            local hit, pos, normal = workspace.FindPartOnRayWithWhitelist(workspace, ray, valid, true)

                            if (hit and max <= self.GravityUp:Dot(normal)) then
                                return true
                            end
                        end
                    end

                    return false
                end
                GravityController.OnJumpRequest = function(self)
                    if (not self.StateTracker.Jumped and self.IsGrounded(self, true)) then
                        local hrpVel = self.HRP.Velocity

                        self.HRP.Velocity = hrpVel + self.GravityUp * self.Humanoid.JumpPower * JUMPMODIFIER

                        self.StateTracker:RequestedJump()
                    end
                end
                GravityController.GetMoveVector = function(self)
                    return self.Controls:GetMoveVector()
                end
                GravityController.OnHeartbeatStep = function(self, dt)
                    local ray = Ray.new(self.Collider.Position, -1.1 * self.GravityUp)
                    local hit, pos, normal = workspace.FindPartOnRayWithIgnoreList(workspace, ray, self.Ignores)
                    local lastPart = self.LastPart

                    if (hit and lastPart and lastPart == hit) then
                        local offset = self.LastPartCFrame:ToObjectSpace(self.HRP.CFrame)

                        self.HRP.CFrame = hit.CFrame:ToWorldSpace(offset)
                    end

                    self.LastPart = hit
                    self.LastPartCFrame = hit and hit.CFrame
                end
                GravityController.OnGravityStep = function(self, dt)
                    local oldGravity = self.GravityUp
                    local newGravity = self.GetGravityUp(self, oldGravity)
                    local rotation = getRotationBetween(oldGravity, newGravity, workspace.CurrentCamera.CFrame.RightVector)

                    rotation = IDENTITYCF.Lerp(IDENTITYCF, rotation, TRANSITION)
                    self.GravityUp = rotation * oldGravity

                    local camCF = workspace.CurrentCamera.CFrame
                    local fDot = camCF.LookVector:Dot(newGravity)
                    local cForward = math.abs(fDot) > 0.5 and -math.sign(fDot) * camCF.UpVector or camCF.LookVector
                    local left = cForward.Cross(cForward, -newGravity).Unit
                    local forward = -left.Cross(left, newGravity).Unit
                    local move = self.GetMoveVector(self)
                    local worldMove = forward * move.z - left * move.x

                    worldMove = worldMove.Dot(worldMove, worldMove) > 1 and worldMove.Unit or worldMove

                    local isInputMoving = worldMove.Dot(worldMove, worldMove) > 0
                    local hrpCFLook = self.HRP.CFrame.LookVector
                    local charF = hrpCFLook.Dot(hrpCFLook, forward) * forward + hrpCFLook.Dot(hrpCFLook, left) * left
                    local charR = charF.Cross(charF, newGravity).Unit
                    local newCharCF = CFrame.fromMatrix(ZERO, charR, newGravity, 
-charF)
                    local newCharRotation = IDENTITYCF

                    if (isInputMoving) then
                        newCharRotation = IDENTITYCF.Lerp(IDENTITYCF, getRotationBetween(charF, worldMove, newGravity), 0.7)
                    end

                    local g = workspace.Gravity
                    local gForce = g * self.CharacterMass * (UNIT_Y - newGravity)
                    local cVelocity = self.HRP.Velocity
                    local tVelocity = self.Humanoid.WalkSpeed * worldMove
                    local gVelocity = cVelocity.Dot(cVelocity, newGravity) * newGravity
                    local hVelocity = cVelocity - gVelocity

                    if (hVelocity.Dot(hVelocity, hVelocity) < 1) then
                        hVelocity = ZERO
                    end

                    local dVelocity = tVelocity - hVelocity
                    local walkForceM = math.min(10000, WALKF * self.CharacterMass * dVelocity.Magnitude / (dt * 60))
                    local walkForce = walkForceM > 0 and dVelocity.Unit * walkForceM or ZERO
                    local charRotation = newCharRotation * newCharCF

                    if (self.Camera:IsCamRelative()) then
                        local lv = workspace.CurrentCamera.CFrame.LookVector
                        local hlv = lv - charRotation.UpVector:Dot(lv) * charRotation.UpVector

                        charRotation = lookAt(ZERO, hlv, charRotation.UpVector)
                    end

                    self.StateTracker:OnStep(self.GravityUp, self.IsGrounded(self), isInputMoving)

                    self.VForce.Force = walkForce + gForce
                    self.Gyro.CFrame = charRotation
                end

                return GravityController
            end
            _Draw3D = function()
                local module = {}

                module.StyleGuide = {
                    Point = {
                        Thickness = 0.5,
                        Color = Color3.new(0, 1, 0),
                    },
                    Line = {
                        Thickness = 0.1,
                        Color = Color3.new(1, 1, 0),
                    },
                    Ray = {
                        Thickness = 0.1,
                        Color = Color3.new(1, 0, 1),
                    },
                    Triangle = {Thickness = 0.05},
                    CFrame = {
                        Thickness = 0.1,
                        RightColor3 = Color3.new(1, 0, 0),
                        UpColor3 = Color3.new(0, 1, 0),
                        BackColor3 = Color3.new(0, 0, 1),
                        PartProperties = {
                            Material = Enum.Material.SmoothPlastic,
                        },
                    },
                }

                local WEDGE = Instance.new('WedgePart')

                WEDGE.Material = Enum.Material.SmoothPlastic
                WEDGE.Anchored = true
                WEDGE.CanCollide = false

                local PART = Instance.new('Part')

                PART.Size = Vector3.new(0.1, 0.1, 0.1)
                PART.Anchored = true
                PART.CanCollide = false
                PART.TopSurface = Enum.SurfaceType.Smooth
                PART.BottomSurface = Enum.SurfaceType.Smooth
                PART.Material = Enum.Material.SmoothPlastic

                local function draw(properties, style)
                    local part = PART.Clone(PART)

                    for k, v in next, properties do
                        part[k] = v
                    end

                    if (style) then
                        for k, v in next, style do
                            if (k ~= 'Thickness') then
                                part[k] = v
                            end
                        end
                    end

                    return part
                end

                module.Draw = function(parent, properties)
                    properties.Parent = parent

                    return draw(properties, nil)
                end
                module.Point = function(parent, cf_v3)
                    local thickness = module.StyleGuide.Point.Thickness

                    return draw({
                        Size = Vector3.new(thickness, thickness, thickness),
                        CFrame = (typeof(cf_v3) == 'CFrame' and cf_v3 or CFrame.new(cf_v3)),
                        Parent = parent,
                    }, module.StyleGuide.Point)
                end
                module.Line = function(parent, a, b)
                    local thickness = module.StyleGuide.Line.Thickness

                    return draw({
                        CFrame = CFrame.new((a + b) / 2, b),
                        Size = Vector3.new(thickness, thickness, (b - a).Magnitude),
                        Parent = parent,
                    }, module.StyleGuide.Line)
                end
                module.Ray = function(parent, origin, direction)
                    local thickness = module.StyleGuide.Ray.Thickness

                    return draw({
                        CFrame = CFrame.new(origin + direction / 2, origin + direction),
                        Size = Vector3.new(thickness, thickness, direction.Magnitude),
                        Parent = parent,
                    }, module.StyleGuide.Ray)
                end
                module.Triangle = function(parent, a, b, c)
                    local ab, ac, bc = b - a, c - a, c - b
                    local abd, acd, bcd = ab.Dot(ab, ab), ac.Dot(ac, ac), bc.Dot(bc, bc)

                    if (abd > acd and abd > bcd) then
                        c, a = a, c
                    elseif (acd > bcd and acd > abd) then
                        a, b = b, a
                    end

                    ab, ac, bc = b - a, c - a, c - b

                    local right = ac.Cross(ac, ab).Unit
                    local up = bc.Cross(bc, right).Unit
                    local back = bc.Unit
                    local height = math.abs(ab.Dot(ab, up))
                    local width1 = math.abs(ab.Dot(ab, back))
                    local width2 = math.abs(ac.Dot(ac, back))
                    local thickness = module.StyleGuide.Triangle.Thickness
                    local w1 = WEDGE.Clone(WEDGE)

                    w1.Size = Vector3.new(thickness, height, width1)
                    w1.CFrame = CFrame.fromMatrix((a + b) / 2, right, up, back)
                    w1.Parent = parent

                    local w2 = WEDGE.Clone(WEDGE)

                    w2.Size = Vector3.new(thickness, height, width2)
                    w2.CFrame = CFrame.fromMatrix((a + c) / 2, -right, up, -back)
                    w2.Parent = parent

                    for k, v in next, module.StyleGuide.Triangle do
                        if (k ~= 'Thickness') then
                            w1[k] = v
                            w2[k] = v
                        end
                    end

                    return w1, w2
                end
                module.CFrame = function(parent, cf)
                    local origin = cf.Position
                    local r = cf.RightVector
                    local u = cf.UpVector
                    local b = -cf.LookVector
                    local thickness = module.StyleGuide.CFrame.Thickness
                    local right = draw({
                        CFrame = CFrame.new(origin + r / 2, origin + r),
                        Size = Vector3.new(thickness, thickness, r.Magnitude),
                        Color = module.StyleGuide.CFrame.RightColor3,
                        Parent = parent,
                    }, module.StyleGuide.CFrame.PartProperties)
                    local up = draw({
                        CFrame = CFrame.new(origin + u / 2, origin + u),
                        Size = Vector3.new(thickness, thickness, r.Magnitude),
                        Color = module.StyleGuide.CFrame.UpColor3,
                        Parent = parent,
                    }, module.StyleGuide.CFrame.PartProperties)
                    local back = draw({
                        CFrame = CFrame.new(origin + b / 2, origin + b),
                        Size = Vector3.new(thickness, thickness, u.Magnitude),
                        Color = module.StyleGuide.CFrame.BackColor3,
                        Parent = parent,
                    }, module.StyleGuide.CFrame.PartProperties)

                    return right, up, back
                end

                return module
            end
            _Draw2D = function()
                local module = {}

                module.StyleGuide = {
                    Point = {
                        BorderSizePixel = 0,
                        Size = UDim2.new(0, 4, 0, 4),
                        BorderColor3 = Color3.new(0, 0, 0),
                        BackgroundColor3 = Color3.new(0, 1, 0),
                    },
                    Line = {
                        Thickness = 1,
                        BorderSizePixel = 0,
                        BorderColor3 = Color3.new(0, 0, 0),
                        BackgroundColor3 = Color3.new(0, 1, 0),
                    },
                    Ray = {
                        Thickness = 1,
                        BorderSizePixel = 0,
                        BorderColor3 = Color3.new(0, 0, 0),
                        BackgroundColor3 = Color3.new(0, 1, 0),
                    },
                    Triangle = {
                        ImageTransparency = 0,
                        ImageColor3 = Color3.new(0, 1, 0),
                    },
                }

                local HALF = Vector2.new(0.5, 0.5)
                local RIGHT = 'rbxassetid://2798177521'
                local LEFT = 'rbxassetid://2798177955'
                local IMG = Instance.new('ImageLabel')

                IMG.BackgroundTransparency = 1
                IMG.AnchorPoint = HALF
                IMG.BorderSizePixel = 0

                local FRAME = Instance.new('Frame')

                FRAME.BorderSizePixel = 0
                FRAME.Size = UDim2.new(0, 0, 0, 0)
                FRAME.BackgroundColor3 = Color3.new(1, 1, 1)
                draw = function(properties, style)
                    local frame = FRAME.Clone(FRAME)

                    for k, v in next, properties do
                        frame[k] = v
                    end

                    if (style) then
                        for k, v in next, style do
                            if (k ~= 'Thickness') then
                                frame[k] = v
                            end
                        end
                    end

                    return frame
                end
                module.Draw = function(parent, properties)
                    properties.Parent = parent

                    return draw(properties, nil)
                end
                module.Point = function(parent, v2)
                    return draw({
                        AnchorPoint = HALF,
                        Position = UDim2.new(0, v2.x, 0, v2.y),
                        Parent = parent,
                    }, module.StyleGuide.Point)
                end
                module.Line = function(parent, a, b)
                    local v = (b - a)
                    local m = (a + b) / 2

                    return draw({
                        AnchorPoint = HALF,
                        Position = UDim2.new(0, m.x, 0, m.y),
                        Size = UDim2.new(0, module.StyleGuide.Line.Thickness, 0, v.magnitude),
                        Rotation = math.deg(math.atan2(v.y, v.x)) - 90,
                        BackgroundColor3 = Color3.new(1, 1, 0),
                        Parent = parent,
                    }, module.StyleGuide.Line)
                end
                module.Ray = function(parent, origin, direction)
                    local a, b = origin, origin + direction
                    local v = (b - a)
                    local m = (a + b) / 2

                    return draw({
                        AnchorPoint = HALF,
                        Position = UDim2.new(0, m.x, 0, m.y),
                        Size = UDim2.new(0, module.StyleGuide.Ray.Thickness, 0, v.magnitude),
                        Rotation = math.deg(math.atan2(v.y, v.x)) - 90,
                        Parent = parent,
                    }, module.StyleGuide.Ray)
                end
                module.Triangle = function(parent, a, b, c)
                    local ab, ac, bc = b - a, c - a, c - b
                    local abd, acd, bcd = ab.Dot(ab, ab), ac.Dot(ac, ac), bc.Dot(bc, bc)

                    if (abd > acd and abd > bcd) then
                        c, a = a, c
                    elseif (acd > bcd and acd > abd) then
                        a, b = b, a
                    end

                    ab, ac, bc = b - a, c - a, c - b

                    local unit = bc.unit
                    local height = unit.Cross(unit, ab)
                    local flip = (height >= 0)
                    local theta = math.deg(math.atan2(unit.y, unit.x)) + (flip and 0 or 180)
                    local m1 = (a + b) / 2
                    local m2 = (a + c) / 2
                    local w1 = IMG.Clone(IMG)

                    w1.Image = flip and RIGHT or LEFT
                    w1.AnchorPoint = HALF
                    w1.Size = UDim2.new(0, math.abs(unit.Dot(unit, ab)), 0, height)
                    w1.Position = UDim2.new(0, m1.x, 0, m1.y)
                    w1.Rotation = theta
                    w1.Parent = parent

                    local w2 = IMG.Clone(IMG)

                    w2.Image = flip and LEFT or RIGHT
                    w2.AnchorPoint = HALF
                    w2.Size = UDim2.new(0, math.abs(unit.Dot(unit, ac)), 0, height)
                    w2.Position = UDim2.new(0, m2.x, 0, m2.y)
                    w2.Rotation = theta
                    w2.Parent = parent

                    for k, v in next, module.StyleGuide.Triangle do
                        w1[k] = v
                        w2[k] = v
                    end

                    return w1, w2
                end

                return module
            end
            _DrawClass = function()
                local Draw2DModule = _Draw2D()
                local Draw3DModule = _Draw3D()
                local DrawClass = {}
                local DrawClassStorage = setmetatable({}, {
                    __mode = 'k',
                })

                DrawClass.__index = DrawClass
                DrawClass.new = function(parent)
                    local self = setmetatable({}, DrawClass)

                    self.Parent = parent
                    DrawClassStorage[self] = {}
                    self.Draw3D = {}

                    for key, func in next, Draw3DModule do
                        self.Draw3D[key] = function(...)
                            local returns = {
                                func(self.Parent, ...),
                            }

                            for i = 1, #returns do
                                table.insert(DrawClassStorage[self], returns[i])
                            end

                            return unpack(returns)
                        end
                    end

                    self.Draw2D = {}

                    for key, func in next, Draw2DModule do
                        self.Draw2D[key] = function(...)
                            local returns = {
                                func(self.Parent, ...),
                            }

                            for i = 1, #returns do
                                table.insert(DrawClassStorage[self], returns[i])
                            end

                            return unpack(returns)
                        end
                    end

                    return self
                end
                DrawClass.Clear = function(self)
                    local t = DrawClassStorage[self]

                    while(#t > 0) do
                        local part = table.remove(t)

                        if (part) then
                            part.Destroy(part)
                        end
                    end

                    DrawClassStorage[self] = {}
                end

                return DrawClass
            end

            local PLAYERS = game.GetService(game, 'Players')
            local GravityController = _GravityController()
            local Controller = GravityController.new(PLAYERS.LocalPlayer)
            local DrawClass = _DrawClass()
            local PI2 = math.pi * 2
            local ZERO = Vector3.new(0, 0, 0)
            local LOWER_RADIUS_OFFSET = 3
            local NUM_DOWN_RAYS = 24
            local ODD_DOWN_RAY_START_RADIUS = 3
            local EVEN_DOWN_RAY_START_RADIUS = 2
            local ODD_DOWN_RAY_END_RADIUS = 1.66666
            local EVEN_DOWN_RAY_END_RADIUS = 1
            local NUM_FEELER_RAYS = 9
            local FEELER_LENGTH = 2
            local FEELER_START_OFFSET = 2
            local FEELER_RADIUS = 3.5
            local FEELER_APEX_OFFSET = 1
            local FEELER_WEIGHTING = 8

            GetGravityUp = function(self, oldGravityUp)
                local ignoreList = {}

                for i, player in next, PLAYERS.GetPlayers(PLAYERS)do
                    ignoreList[i] = player.Character
                end

                local hrpCF = self.HRP.CFrame
                local isR15 = (self.Humanoid.RigType == Enum.HumanoidRigType.R15)
                local origin = isR15 and hrpCF.p or hrpCF.p + 0.35 * oldGravityUp
                local radialVector = math.abs(hrpCF.LookVector:Dot(oldGravityUp)) < 0.999 and hrpCF.LookVector:Cross(oldGravityUp) or hrpCF.RightVector:Cross(oldGravityUp)
                local centerRayLength = 25
                local centerRay = Ray.new(origin, -centerRayLength * oldGravityUp)
                local centerHit, centerHitPoint, centerHitNormal = workspace.FindPartOnRayWithIgnoreList(workspace, centerRay, ignoreList)
                local downHitCount = 0
                local totalHitCount = 0
                local centerRayHitCount = 0
                local evenRayHitCount = 0
                local oddRayHitCount = 0
                local mainDownNormal = ZERO

                if (centerHit) then
                    mainDownNormal = centerHitNormal
                    centerRayHitCount = 0
                end

                local downRaySum = ZERO

                for i = 1, NUM_DOWN_RAYS do
                    local dtheta = PI2 * ((i - 1) / NUM_DOWN_RAYS)
                    local angleWeight = 0.25 + 0.75 * math.abs(math.cos(dtheta))
                    local isEvenRay = (i % 2 == 0)
                    local startRadius = isEvenRay and EVEN_DOWN_RAY_START_RADIUS or ODD_DOWN_RAY_START_RADIUS
                    local endRadius = isEvenRay and EVEN_DOWN_RAY_END_RADIUS or ODD_DOWN_RAY_END_RADIUS
                    local downRayLength = centerRayLength
                    local offset = CFrame.fromAxisAngle(oldGravityUp, dtheta) * radialVector
                    local dir = (LOWER_RADIUS_OFFSET * -oldGravityUp + (endRadius - startRadius) * offset)
                    local ray = Ray.new(origin + startRadius * offset, downRayLength * dir.unit)
                    local hit, hitPoint, hitNormal = workspace.FindPartOnRayWithIgnoreList(workspace, ray, ignoreList)

                    if (hit) then
                        downRaySum = downRaySum + angleWeight * hitNormal
                        downHitCount = downHitCount + 1

                        if isEvenRay then
                            evenRayHitCount = evenRayHitCount + 1
                        else
                            oddRayHitCount = oddRayHitCount + 1
                        end
                    end
                end

                local feelerHitCount = 0
                local feelerNormalSum = ZERO

                for i = 1, NUM_FEELER_RAYS do
                    local dtheta = 2 * math.pi * ((i - 1) / NUM_FEELER_RAYS)
                    local angleWeight = 0.25 + 0.75 * math.abs(math.cos(dtheta))
                    local offset = CFrame.fromAxisAngle(oldGravityUp, dtheta) * radialVector
                    local dir = (FEELER_RADIUS * offset + LOWER_RADIUS_OFFSET * 
-oldGravityUp).unit
                    local feelerOrigin = origin - FEELER_APEX_OFFSET * -oldGravityUp + FEELER_START_OFFSET * dir
                    local ray = Ray.new(feelerOrigin, FEELER_LENGTH * dir)
                    local hit, hitPoint, hitNormal = workspace.FindPartOnRayWithIgnoreList(workspace, ray, ignoreList)

                    if (hit) then
                        feelerNormalSum = feelerNormalSum + FEELER_WEIGHTING * angleWeight * hitNormal
                        feelerHitCount = feelerHitCount + 1
                    end
                end

                if (centerRayHitCount + downHitCount + feelerHitCount > 0) then
                    local normalSum = mainDownNormal + downRaySum + feelerNormalSum

                    if (normalSum ~= ZERO) then
                        return normalSum.unit
                    end
                end

                return oldGravityUp
            end
            Controller.GetGravityUp = GetGravityUp

            return true
        end

        __DARKLUA_BUNDLE_MODULES.b = function()
            local v = __DARKLUA_BUNDLE_MODULES.cache.b

            if not v then
                v = {
                    c = __modImpl(),
                }
                __DARKLUA_BUNDLE_MODULES.cache.b = v
            end

            return v.c
        end
    end
    do
        local function __modImpl()
            local nodes = {}
            local selection

            local function missing(t, f, fallback)
                if type(f) == t then
                    return f
                end

                return fallback
            end

            local cloneref = missing('function', cloneref, function(...)
                return ...
            end)
            local service = setmetatable({}, {
                __index = function(self, name)
                    self[name] = cloneref(game.GetService(game, name))

                    return self[name]
                end,
            })
            local oldgame = game
            local game = workspace.Parent
            local EmbeddedModules = {
                Explorer = function()
                    local Main, Lib, Apps, Settings
                    local Explorer, Properties, ScriptViewer, Notebook
                    local API, RMD, env, service, plr, create, createSimple

                    local function initDeps(data)
                        Main = data.Main
                        Lib = data.Lib
                        Apps = data.Apps
                        Settings = data.Settings
                        API = data.API
                        RMD = data.RMD
                        env = data.env
                        service = data.service
                        plr = data.plr
                        create = data.create
                        createSimple = data.createSimple
                    end
                    local function initAfterMain()
                        Explorer = Apps.Explorer
                        Properties = Apps.Properties
                        ScriptViewer = Apps.ScriptViewer
                        Notebook = Apps.Notebook
                    end
                    local function main()
                        local Explorer = {}
                        local tree, listEntries, explorerOrders, searchResults, specResults = {}, {}, {}, {}, {}
                        local expanded
                        local entryTemplate, treeFrame, toolBar, descendantAddedCon, descendantRemovingCon, itemChangedCon
                        local ffa = game.FindFirstAncestorWhichIsA
                        local getDescendants = game.GetDescendants
                        local getTextSize = service.TextService.GetTextSize
                        local updateDebounce, refreshDebounce = false, false
                        local nilNode = {
                            Obj = Instance.new('Folder'),
                        }
                        local idCounter = 0
                        local scrollV, scrollH, clipboard
                        local renameBox, renamingNode, searchFunc
                        local sortingEnabled, autoUpdateSearch
                        local table, math = table, math
                        local nilMap, nilCons = {}, {}
                        local connectSignal = game.DescendantAdded.Connect
                        local addObject, removeObject, moveObject

                        addObject = function(root)
                            if nodes[root] then
                                return
                            end

                            local isNil = false
                            local rootParObj = ffa(root, 'Instance')
                            local par = nodes[rootParObj]

                            if not par then
                                if nilMap[root] then
                                    nilCons[root] = nilCons[root] or {
                                        connectSignal(root.ChildAdded, addObject),
                                        connectSignal(root.AncestryChanged, moveObject),
                                    }
                                    par = nilNode
                                    isNil = true
                                else
                                    return
                                end
                            elseif nilMap[rootParObj] or par == nilNode then
                                nilMap[root] = true
                                nilCons[root] = nilCons[root] or {
                                    connectSignal(root.ChildAdded, addObject),
                                    connectSignal(root.AncestryChanged, moveObject),
                                }
                                isNil = true
                            end

                            local newNode = {
                                Obj = root,
                                Parent = par,
                            }

                            nodes[root] = newNode

                            if sortingEnabled and expanded[par] and par.Sorted then
                                local left, right = 1, #par
                                local floor = math.floor
                                local sorter = Explorer.NodeSorter
                                local pos = (right == 0 and 1)

                                if not pos then
                                    while true do
                                        if left >= right then
                                            if sorter(newNode, par[left]) then
                                                pos = left
                                            else
                                                pos = left + 1
                                            end

                                            break
                                        end

                                        local mid = floor((left + right) / 2)

                                        if sorter(newNode, par[mid]) then
                                            right = mid - 1
                                        else
                                            left = mid + 1
                                        end
                                    end
                                end

                                table.insert(par, pos, newNode)
                            else
                                par[#par + 1] = newNode
                                par.Sorted = nil
                            end

                            local insts = getDescendants(root)

                            for i = 1, #insts do
                                local __DARKLUA_CONTINUE_576 = false

                                repeat
                                    local obj = insts[i]

                                    if nodes[obj] then
                                        __DARKLUA_CONTINUE_576 = true

                                        break
                                    end

                                    local par = nodes[ffa(obj, 'Instance')]

                                    if not par then
                                        __DARKLUA_CONTINUE_576 = true

                                        break
                                    end

                                    local newNode = {
                                        Obj = obj,
                                        Parent = par,
                                    }

                                    nodes[obj] = newNode
                                    par[#par + 1] = newNode

                                    if isNil then
                                        nilMap[obj] = true
                                        nilCons[obj] = nilCons[obj] or {
                                            connectSignal(obj.ChildAdded, addObject),
                                            connectSignal(obj.AncestryChanged, moveObject),
                                        }
                                    end

                                    __DARKLUA_CONTINUE_576 = true
                                until true

                                if not __DARKLUA_CONTINUE_576 then
                                    break
                                end
                            end

                            if searchFunc and autoUpdateSearch then
                                searchFunc({newNode})
                            end
                            if not updateDebounce and Explorer.IsNodeVisible(par) then
                                if expanded[par] then
                                    Explorer.PerformUpdate()
                                elseif not refreshDebounce then
                                    Explorer.PerformRefresh()
                                end
                            end
                        end
                        removeObject = function(root)
                            local node = nodes[root]

                            if not node then
                                return
                            end
                            if nilMap[node.Obj] then
                                moveObject(node.Obj)

                                return
                            end

                            local par = node.Parent

                            if par then
                                par.HasDel = true
                            end

                            local function recur(root)
                                for i = 1, #root do
                                    local node = root[i]

                                    if not node.Del then
                                        nodes[node.Obj] = nil

                                        if #node > 0 then
                                            recur(node)
                                        end
                                    end
                                end
                            end

                            recur(node)

                            node.Del = true
                            nodes[root] = nil

                            if par and not updateDebounce and Explorer.IsNodeVisible(par) then
                                if expanded[par] then
                                    Explorer.PerformUpdate()
                                elseif not refreshDebounce then
                                    Explorer.PerformRefresh()
                                end
                            end
                        end
                        moveObject = function(obj)
                            local node = nodes[obj]

                            if not node then
                                return
                            end

                            local oldPar = node.Parent
                            local newPar = nodes[ffa(obj, 'Instance')]

                            if oldPar == newPar then
                                return
                            end
                            if not newPar then
                                if nilMap[obj] then
                                    newPar = nilNode
                                else
                                    return
                                end
                            elseif nilMap[newPar.Obj] or newPar == nilNode then
                                nilMap[obj] = true
                                nilCons[obj] = nilCons[obj] or {
                                    connectSignal(obj.ChildAdded, addObject),
                                    connectSignal(obj.AncestryChanged, moveObject),
                                }
                            end
                            if oldPar then
                                local parPos = table.find(oldPar, node)

                                if parPos then
                                    table.remove(oldPar, parPos)
                                end
                            end

                            node.Id = nil
                            node.Parent = newPar

                            if sortingEnabled and expanded[newPar] and newPar.Sorted then
                                local left, right = 1, #newPar
                                local floor = math.floor
                                local sorter = Explorer.NodeSorter
                                local pos = (right == 0 and 1)

                                if not pos then
                                    while true do
                                        if left >= right then
                                            if sorter(node, newPar[left]) then
                                                pos = left
                                            else
                                                pos = left + 1
                                            end

                                            break
                                        end

                                        local mid = floor((left + right) / 2)

                                        if sorter(node, newPar[mid]) then
                                            right = mid - 1
                                        else
                                            left = mid + 1
                                        end
                                    end
                                end

                                table.insert(newPar, pos, node)
                            else
                                newPar[#newPar + 1] = node
                                newPar.Sorted = nil
                            end
                            if searchFunc and searchResults[node] then
                                local currentNode = node.Parent

                                while currentNode and (not searchResults[currentNode] or expanded[currentNode] == 0) do
                                    expanded[currentNode] = true
                                    searchResults[currentNode] = true
                                    currentNode = currentNode.Parent
                                end
                            end
                            if not updateDebounce and (Explorer.IsNodeVisible(newPar) or Explorer.IsNodeVisible(oldPar)) then
                                if expanded[newPar] or expanded[oldPar] then
                                    Explorer.PerformUpdate()
                                elseif not refreshDebounce then
                                    Explorer.PerformRefresh()
                                end
                            end
                        end
                        Explorer.ViewWidth = 0
                        Explorer.Index = 0
                        Explorer.EntryIndent = 20
                        Explorer.FreeWidth = 32
                        Explorer.GuiElems = {}
                        Explorer.InitRenameBox = function()
                            renameBox = create({
                                {
                                    1,
                                    'TextBox',
                                    {
                                        BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                        BorderColor3 = Color3.new(0.062745101749897, 0.51764708757401, 1),
                                        BorderMode = 2,
                                        ClearTextOnFocus = false,
                                        Font = 3,
                                        Name = 'RenameBox',
                                        PlaceholderColor3 = Color3.new(0.69803923368454, 0.69803923368454, 0.69803923368454),
                                        Position = UDim2.new(0, 26, 0, 2),
                                        Size = UDim2.new(0, 200, 0, 16),
                                        Text = '',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                        TextXAlignment = 0,
                                        Visible = false,
                                        ZIndex = 2,
                                    },
                                },
                            })
                            renameBox.Parent = Explorer.Window.GuiElems.Content.List

                            renameBox.FocusLost:Connect(function()
                                if not renamingNode then
                                    return
                                end

                                pcall(function()
                                    renamingNode.Obj.Name = renameBox.Text
                                end)

                                renamingNode = nil

                                Explorer.Refresh()
                            end)
                            renameBox.Focused:Connect(function()
                                renameBox.SelectionStart = 1
                                renameBox.CursorPosition = #renameBox.Text + 1
                            end)
                        end
                        Explorer.SetRenamingNode = function(node)
                            renamingNode = node
                            renameBox.Text = tostring(node.Obj)

                            renameBox.CaptureFocus(renameBox)
                            Explorer.Refresh()
                        end
                        Explorer.SetSortingEnabled = function(val)
                            sortingEnabled = val
                            Settings.Explorer.Sorting = val
                        end
                        Explorer.UpdateView = function()
                            local maxNodes = math.ceil(treeFrame.AbsoluteSize.Y / 20)
                            local maxX = treeFrame.AbsoluteSize.X
                            local totalWidth = Explorer.ViewWidth + Explorer.FreeWidth

                            scrollV.VisibleSpace = maxNodes
                            scrollV.TotalSpace = #tree + 1
                            scrollH.VisibleSpace = maxX
                            scrollH.TotalSpace = totalWidth
                            scrollV.Gui.Visible = #tree + 1 > maxNodes
                            scrollH.Gui.Visible = totalWidth > maxX

                            local oldSize = treeFrame.Size

                            treeFrame.Size = UDim2.new(1, (scrollV.Gui.Visible and 
-16 or 0), 1, (scrollH.Gui.Visible and -39 or -23))

                            if oldSize ~= treeFrame.Size then
                                Explorer.UpdateView()
                            else
                                scrollV.Update(scrollV)
                                scrollH.Update(scrollH)

                                renameBox.Size = UDim2.new(0, maxX - 100, 0, 16)

                                if scrollV.Gui.Visible and scrollH.Gui.Visible then
                                    scrollV.Gui.Size = UDim2.new(0, 16, 1, -39)
                                    scrollH.Gui.Size = UDim2.new(1, -16, 0, 16)
                                    Explorer.Window.GuiElems.Content.ScrollCorner.Visible = true
                                else
                                    scrollV.Gui.Size = UDim2.new(0, 16, 1, -23)
                                    scrollH.Gui.Size = UDim2.new(1, 0, 0, 16)
                                    Explorer.Window.GuiElems.Content.ScrollCorner.Visible = false
                                end

                                Explorer.Index = scrollV.Index
                            end
                        end
                        Explorer.NodeSorter = function(a, b)
                            if a.Del or b.Del then
                                return false
                            end

                            local aClass = a.Class
                            local bClass = b.Class

                            if not aClass then
                                aClass = a.Obj.ClassName
                                a.Class = aClass
                            end
                            if not bClass then
                                bClass = b.Obj.ClassName
                                b.Class = bClass
                            end

                            local aOrder = explorerOrders[aClass]
                            local bOrder = explorerOrders[bClass]

                            if not aOrder then
                                aOrder = RMD.Classes[aClass] and tonumber(RMD.Classes[aClass].ExplorerOrder) or 9999
                                explorerOrders[aClass] = aOrder
                            end
                            if not bOrder then
                                bOrder = RMD.Classes[bClass] and tonumber(RMD.Classes[bClass].ExplorerOrder) or 9999
                                explorerOrders[bClass] = bOrder
                            end
                            if aOrder ~= bOrder then
                                return aOrder < bOrder
                            else
                                local aName, bName = tostring(a.Obj), tostring(b.Obj)

                                if aName ~= bName then
                                    return aName < bName
                                elseif aClass ~= bClass then
                                    return aClass < bClass
                                else
                                    local aId = a.Id

                                    if not aId then
                                        aId = idCounter
                                        idCounter = (idCounter + 0.001) % 999999999
                                        a.Id = aId
                                    end

                                    local bId = b.Id

                                    if not bId then
                                        bId = idCounter
                                        idCounter = (idCounter + 0.001) % 999999999
                                        b.Id = bId
                                    end

                                    return aId < bId
                                end
                            end
                        end
                        Explorer.Update = function()
                            table.clear(tree)

                            local maxNameWidth, maxDepth, count = 0, 1, 1
                            local nameCache = {}
                            local font = Enum.Font.SourceSans
                            local size = Vector2.new(math.huge, 20)
                            local useNameWidth = Settings.Explorer.UseNameWidth
                            local tSort = table.sort
                            local sortFunc = Explorer.NodeSorter
                            local isSearching = (expanded == Explorer.SearchExpanded)
                            local textServ = service.TextService

                            local function recur(root, depth)
                                if depth > maxDepth then
                                    maxDepth = depth
                                end

                                depth = depth + 1

                                if sortingEnabled and not root.Sorted then
                                    tSort(root, sortFunc)

                                    root.Sorted = true
                                end

                                for i = 1, #root do
                                    local __DARKLUA_CONTINUE_580 = false

                                    repeat
                                        local n = root[i]

                                        if (isSearching and not searchResults[n]) or n.Del then
                                            __DARKLUA_CONTINUE_580 = true

                                            break
                                        end
                                        if useNameWidth then
                                            local nameWidth = n.NameWidth

                                            if not nameWidth then
                                                local objName = tostring(n.Obj)

                                                nameWidth = nameCache[objName]

                                                if not nameWidth then
                                                    nameWidth = getTextSize(textServ, objName, 14, font, size).X
                                                    nameCache[objName] = nameWidth
                                                end

                                                n.NameWidth = nameWidth
                                            end
                                            if nameWidth > maxNameWidth then
                                                maxNameWidth = nameWidth
                                            end
                                        end

                                        tree[count] = n
                                        count = count + 1

                                        if expanded[n] and #n > 0 then
                                            recur(n, depth)
                                        end

                                        __DARKLUA_CONTINUE_580 = true
                                    until true

                                    if not __DARKLUA_CONTINUE_580 then
                                        break
                                    end
                                end
                            end

                            recur(nodes[game], 1)

                            if env.getnilinstances then
                                if not (isSearching and not searchResults[nilNode]) then
                                    tree[count] = nilNode
                                    count = count + 1

                                    if expanded[nilNode] then
                                        recur(nilNode, 2)
                                    end
                                end
                            end

                            Explorer.MaxNameWidth = maxNameWidth
                            Explorer.MaxDepth = maxDepth
                            Explorer.ViewWidth = useNameWidth and Explorer.EntryIndent * maxDepth + maxNameWidth + 26 or Explorer.EntryIndent * maxDepth + 226

                            Explorer.UpdateView()
                        end
                        Explorer.StartDrag = function(offX, offY)
                            if Explorer.Dragging then
                                return
                            end

                            for i, v in next, selection.List do
                                local Obj = v.Obj

                                if Obj.Parent == game or Obj.IsA(Obj, 'Player') then
                                    return
                                end
                            end

                            Explorer.Dragging = true

                            local dragTree = treeFrame.Clone(treeFrame)

                            dragTree.ClearAllChildren(dragTree)

                            for i, v in pairs(listEntries)do
                                local node = tree[i + Explorer.Index]

                                if node and selection.Map[node] then
                                    local clone = v.Clone(v)

                                    clone.Active = false
                                    clone.Indent.Expand.Visible = false
                                    clone.Parent = dragTree
                                end
                            end

                            local newGui = Instance.new('ScreenGui')

                            newGui.DisplayOrder = Main.DisplayOrders.Menu
                            dragTree.Parent = newGui

                            Lib.ShowGui(newGui)

                            local dragOutline = create({
                                {
                                    1,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        Name = 'DragSelect',
                                        Size = UDim2.new(1, 0, 1, 0),
                                    },
                                },
                                {
                                    2,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BorderSizePixel = 0,
                                        Name = 'Line',
                                        Parent = {1},
                                        Size = UDim2.new(1, 0, 0, 1),
                                        ZIndex = 2,
                                    },
                                },
                                {
                                    3,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BorderSizePixel = 0,
                                        Name = 'Line',
                                        Parent = {1},
                                        Position = UDim2.new(0, 0, 1, -1),
                                        Size = UDim2.new(1, 0, 0, 1),
                                        ZIndex = 2,
                                    },
                                },
                                {
                                    4,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BorderSizePixel = 0,
                                        Name = 'Line',
                                        Parent = {1},
                                        Size = UDim2.new(0, 1, 1, 0),
                                        ZIndex = 2,
                                    },
                                },
                                {
                                    5,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BorderSizePixel = 0,
                                        Name = 'Line',
                                        Parent = {1},
                                        Position = UDim2.new(1, -1, 0, 0),
                                        Size = UDim2.new(0, 1, 1, 0),
                                        ZIndex = 2,
                                    },
                                },
                            })

                            dragOutline.Parent = treeFrame

                            local mouse = Main.Mouse or service.Players.LocalPlayer:GetMouse()

                            local function move()
                                local posX = mouse.X - offX
                                local posY = mouse.Y - offY

                                dragTree.Position = UDim2.new(0, posX, 0, posY)

                                for i = 1, #listEntries do
                                    local entry = listEntries[i]

                                    if Lib.CheckMouseInGui(entry) then
                                        dragOutline.Position = UDim2.new(0, entry.Indent.Position.X.Offset - scrollH.Index, 0, entry.Position.Y.Offset)
                                        dragOutline.Size = UDim2.new(0, entry.Size.X.Offset - entry.Indent.Position.X.Offset, 0, 20)
                                        dragOutline.Visible = true

                                        return
                                    end
                                end

                                dragOutline.Visible = false
                            end

                            move()

                            local input = service.UserInputService
                            local mouseEvent, releaseEvent

                            mouseEvent = input.InputChanged:Connect(function(
                                input
                            )
                                if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                    move()
                                end
                            end)
                            releaseEvent = input.InputEnded:Connect(function(
                                input
                            )
                                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                    releaseEvent.Disconnect(releaseEvent)
                                    mouseEvent.Disconnect(mouseEvent)
                                    newGui.Destroy(newGui)
                                    dragOutline.Destroy(dragOutline)

                                    Explorer.Dragging = false

                                    for i = 1, #listEntries do
                                        if Lib.CheckMouseInGui(listEntries[i]) then
                                            local node = tree[i + Explorer.Index]

                                            if node then
                                                if selection.Map[node] then
                                                    return
                                                end

                                                local newPar = node.Obj
                                                local sList = selection.List

                                                for i = 1, #sList do
                                                    local n = sList[i]

                                                    pcall(function()
                                                        n.Obj.Parent = newPar
                                                    end)
                                                end

                                                Explorer.ViewNode(sList[1])
                                            end

                                            break
                                        end
                                    end
                                end
                            end)
                        end
                        Explorer.NewListEntry = function(index)
                            local newEntry = entryTemplate.Clone(entryTemplate)

                            newEntry.Position = UDim2.new(0, 0, 0, 20 * (index - 1))

                            local isRenaming = false

                            newEntry.InputBegan:Connect(function(input)
                                local node = tree[index + Explorer.Index]

                                if not node or selection.Map[node] or (input.UserInputType ~= Enum.UserInputType.MouseMovement and input.UserInputType ~= Enum.UserInputType.Touch) then
                                    return
                                end

                                newEntry.Indent.BackgroundColor3 = Settings.Theme.Button
                                newEntry.Indent.BorderSizePixel = 0
                                newEntry.Indent.BackgroundTransparency = 0
                            end)
                            newEntry.InputEnded:Connect(function(input)
                                local node = tree[index + Explorer.Index]

                                if not node or selection.Map[node] or (input.UserInputType ~= Enum.UserInputType.MouseMovement and input.UserInputType ~= Enum.UserInputType.Touch) then
                                    return
                                end

                                newEntry.Indent.BackgroundTransparency = 1
                            end)
                            newEntry.MouseButton1Down:Connect(function() end)
                            newEntry.MouseButton1Up:Connect(function() end)
                            newEntry.InputBegan:Connect(function(input)
                                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                    local releaseEvent, mouseEvent
                                    local mouse = Main.Mouse or plr.GetMouse(plr)
                                    local startX, startY

                                    if input.UserInputType == Enum.UserInputType.Touch then
                                        startX = input.Position.X
                                        startY = input.Position.Y
                                    else
                                        startX = mouse.X
                                        startY = mouse.Y
                                    end

                                    local listOffsetX = startX - treeFrame.AbsolutePosition.X
                                    local listOffsetY = startY - treeFrame.AbsolutePosition.Y

                                    releaseEvent = service.UserInputService.InputEnded:Connect(function(
                                        input
                                    )
                                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                            releaseEvent.Disconnect(releaseEvent)
                                            mouseEvent.Disconnect(mouseEvent)
                                        end
                                    end)
                                    mouseEvent = service.UserInputService.InputChanged:Connect(function(
                                        input
                                    )
                                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                            local currentX, currentY

                                            if input.UserInputType == Enum.UserInputType.Touch then
                                                currentX = input.Position.X
                                                currentY = input.Position.Y
                                            else
                                                currentX = mouse.X
                                                currentY = mouse.Y
                                            end

                                            local deltaX = currentX - startX
                                            local deltaY = currentY - startY
                                            local dist = math.sqrt(deltaX ^ 2 + deltaY ^ 2)

                                            if dist > 5 then
                                                releaseEvent.Disconnect(releaseEvent)
                                                mouseEvent.Disconnect(mouseEvent)

                                                isRenaming = false

                                                Explorer.StartDrag(listOffsetX, listOffsetY)
                                            end
                                        end
                                    end)
                                end
                            end)
                            newEntry.MouseButton2Down:Connect(function() end)
                            newEntry.Indent.Expand.InputBegan:Connect(function(
                                input
                            )
                                local node = tree[index + Explorer.Index]

                                if not node or (input.UserInputType ~= Enum.UserInputType.MouseMovement and input.UserInputType ~= Enum.UserInputType.Touch) then
                                    return
                                end
                                if input.UserInputType == Enum.UserInputType.Touch then
                                    Explorer.MiscIcons:DisplayByKey(newEntry.Indent.Expand.Icon, expanded[node] and 'Collapse_Over' or 'Expand_Over')
                                elseif input.UserInputType == Enum.UserInputType.MouseMovement then
                                    Explorer.MiscIcons:DisplayByKey(newEntry.Indent.Expand.Icon, expanded[node] and 'Collapse_Over' or 'Expand_Over')
                                end
                            end)
                            newEntry.Indent.Expand.InputEnded:Connect(function(
                                input
                            )
                                local node = tree[index + Explorer.Index]

                                if not node or (input.UserInputType ~= Enum.UserInputType.MouseMovement and input.UserInputType ~= Enum.UserInputType.Touch) then
                                    return
                                end
                                if input.UserInputType == Enum.UserInputType.Touch then
                                    Explorer.MiscIcons:DisplayByKey(newEntry.Indent.Expand.Icon, expanded[node] and 'Collapse' or 'Expand')
                                elseif input.UserInputType == Enum.UserInputType.MouseMovement then
                                    Explorer.MiscIcons:DisplayByKey(newEntry.Indent.Expand.Icon, expanded[node] and 'Collapse' or 'Expand')
                                end
                            end)
                            newEntry.Indent.Expand.MouseButton1Down:Connect(function(
                            )
                                local node = tree[index + Explorer.Index]

                                if not node or #node == 0 then
                                    return
                                end

                                expanded[node] = not expanded[node]

                                Explorer.Update()
                                Explorer.Refresh()
                            end)

                            newEntry.Parent = treeFrame

                            return newEntry
                        end
                        Explorer.Refresh = function()
                            local maxNodes = math.max(math.ceil((treeFrame.AbsoluteSize.Y) / 20), 0)
                            local renameNodeVisible = false
                            local isa = game.IsA

                            for i = 1, maxNodes do
                                local entry = listEntries[i]

                                if not listEntries[i] then
                                    entry = Explorer.NewListEntry(i)
                                    listEntries[i] = entry

                                    Explorer.ClickSystem:Add(entry)
                                end

                                local node = tree[i + Explorer.Index]

                                if node then
                                    local obj = node.Obj
                                    local depth = Explorer.EntryIndent * Explorer.NodeDepth(node)

                                    entry.Visible = true
                                    entry.Position = UDim2.new(0, -scrollH.Index, 0, entry.Position.Y.Offset)
                                    entry.Size = UDim2.new(0, Explorer.ViewWidth, 0, 20)
                                    entry.Indent.EntryName.Text = tostring(node.Obj)
                                    entry.Indent.Position = UDim2.new(0, depth, 0, 0)
                                    entry.Indent.Size = UDim2.new(1, -depth, 1, 0)
                                    entry.Indent.EntryName.TextTruncate = (Settings.Explorer.UseNameWidth and Enum.TextTruncate.None or Enum.TextTruncate.AtEnd)

                                    Explorer.MiscIcons:DisplayExplorerIcons(entry.Indent.Icon, obj.ClassName)

                                    if selection.Map[node] then
                                        entry.Indent.BackgroundColor3 = Settings.Theme.ListSelection
                                        entry.Indent.BorderSizePixel = 0
                                        entry.Indent.BackgroundTransparency = 0
                                    else
                                        if Lib.CheckMouseInGui(entry) then
                                            entry.Indent.BackgroundColor3 = Settings.Theme.Button
                                        else
                                            entry.Indent.BackgroundTransparency = 1
                                        end
                                    end
                                    if node == renamingNode then
                                        renameNodeVisible = true
                                        renameBox.Position = UDim2.new(0, depth + 25 - scrollH.Index, 0, entry.Position.Y.Offset + 2)
                                        renameBox.Visible = true
                                    end
                                    if #node > 0 and expanded[node] ~= 0 then
                                        if Lib.CheckMouseInGui(entry.Indent.Expand) then
                                            Explorer.MiscIcons:DisplayByKey(entry.Indent.Expand.Icon, expanded[node] and 'Collapse_Over' or 'Expand_Over')
                                        else
                                            Explorer.MiscIcons:DisplayByKey(entry.Indent.Expand.Icon, expanded[node] and 'Collapse' or 'Expand')
                                        end

                                        entry.Indent.Expand.Visible = true
                                    else
                                        entry.Indent.Expand.Visible = false
                                    end
                                else
                                    entry.Visible = false
                                end
                            end

                            if not renameNodeVisible then
                                renameBox.Visible = false
                            end

                            for i = maxNodes + 1, #listEntries do
                                Explorer.ClickSystem:Remove(listEntries[i])
                                listEntries[i]:Destroy()

                                listEntries[i] = nil
                            end
                        end
                        Explorer.PerformUpdate = function(instant)
                            updateDebounce = true

                            Lib.FastWait(not instant and 0.1)

                            if not updateDebounce then
                                return
                            end

                            updateDebounce = false

                            if not Explorer.Window:IsVisible() then
                                return
                            end

                            Explorer.Update()
                            Explorer.Refresh()
                        end
                        Explorer.ForceUpdate = function(norefresh)
                            updateDebounce = false

                            Explorer.Update()

                            if not norefresh then
                                Explorer.Refresh()
                            end
                        end
                        Explorer.PerformRefresh = function()
                            refreshDebounce = true

                            Lib.FastWait(0.1)

                            refreshDebounce = false

                            if updateDebounce or not Explorer.Window:IsVisible() then
                                return
                            end

                            Explorer.Refresh()
                        end
                        Explorer.IsNodeVisible = function(node)
                            if not node then
                                return
                            end

                            local curNode = node.Parent

                            while curNode do
                                if not expanded[curNode] then
                                    return false
                                end

                                curNode = curNode.Parent
                            end

                            return true
                        end
                        Explorer.NodeDepth = function(node)
                            local depth = 0

                            if node == nilNode then
                                return 1
                            end

                            local curNode = node.Parent

                            while curNode do
                                if curNode == nilNode then
                                    depth = depth + 1
                                end

                                curNode = curNode.Parent
                                depth = depth + 1
                            end

                            return depth
                        end
                        Explorer.SetupConnections = function()
                            if descendantAddedCon then
                                descendantAddedCon.Disconnect(descendantAddedCon)
                            end
                            if descendantRemovingCon then
                                descendantRemovingCon.Disconnect(descendantRemovingCon)
                            end
                            if itemChangedCon then
                                itemChangedCon.Disconnect(itemChangedCon)
                            end
                            if Main.Elevated then
                                descendantAddedCon = game.DescendantAdded:Connect(addObject)
                                descendantRemovingCon = game.DescendantRemoving:Connect(removeObject)
                            else
                                descendantAddedCon = game.DescendantAdded:Connect(function(
                                    obj
                                )
                                    pcall(addObject, obj)
                                end)
                                descendantRemovingCon = game.DescendantRemoving:Connect(function(
                                    obj
                                )
                                    pcall(removeObject, obj)
                                end)
                            end
                            if Settings.Explorer.UseNameWidth then
                                itemChangedCon = game.ItemChanged:Connect(function(
                                    obj,
                                    prop
                                )
                                    if prop == 'Parent' and nodes[obj] then
                                        moveObject(obj)
                                    elseif prop == 'Name' and nodes[obj] then
                                        nodes[obj].NameWidth = nil
                                    end
                                end)
                            else
                                itemChangedCon = game.ItemChanged:Connect(function(
                                    obj,
                                    prop
                                )
                                    if prop == 'Parent' and nodes[obj] then
                                        moveObject(obj)
                                    end
                                end)
                            end
                        end
                        Explorer.ViewNode = function(node)
                            if not node then
                                return
                            end

                            Explorer.MakeNodeVisible(node)
                            Explorer.ForceUpdate(true)

                            local visibleSpace = scrollV.VisibleSpace

                            for i, v in next, tree do
                                if v == node then
                                    local relative = i - 1

                                    if Explorer.Index > relative then
                                        scrollV.Index = relative
                                    elseif Explorer.Index + visibleSpace - 1 <= relative then
                                        scrollV.Index = relative - visibleSpace + 2
                                    end
                                end
                            end

                            scrollV.Update(scrollV)

                            Explorer.Index = scrollV.Index

                            Explorer.Refresh()
                        end
                        Explorer.ViewObj = function(obj)
                            Explorer.ViewNode(nodes[obj])
                        end
                        Explorer.MakeNodeVisible = function(node, expandRoot)
                            if not node then
                                return
                            end

                            local hasExpanded = false

                            if expandRoot and not expanded[node] then
                                expanded[node] = true
                                hasExpanded = true
                            end

                            local currentNode = node.Parent

                            while currentNode do
                                hasExpanded = true
                                expanded[currentNode] = true
                                currentNode = currentNode.Parent
                            end

                            if hasExpanded and not updateDebounce then
                                coroutine.wrap(Explorer.PerformUpdate)(true)
                            end
                        end
                        Explorer.ShowRightClick = function(MousePos)
                            local Mouse = MousePos or Main.Mouse
                            local context = Explorer.RightClickContext
                            local absoluteSize = context.Gui.AbsoluteSize

                            context.MaxHeight = (absoluteSize.Y <= 600 and (absoluteSize.Y - 40)) or nil

                            context.Clear(context)

                            local sList = selection.List
                            local sMap = selection.Map
                            local emptyClipboard = #clipboard == 0
                            local presentClasses = {}
                            local apiClasses = API.Classes

                            for i = 1, #sList do
                                local node = sList[i]
                                local class = node.Class
                                local obj = node.Obj

                                if not presentClasses.isViableDecompileScript then
                                    presentClasses.isViableDecompileScript = env.isViableDecompileScript(obj)
                                end
                                if not class then
                                    class = obj.ClassName
                                    node.Class = class
                                end

                                local curClass = apiClasses[class]

                                while curClass and not presentClasses[curClass.Name] do
                                    presentClasses[curClass.Name] = true
                                    curClass = curClass.Superclass
                                end
                            end

                            context.AddRegistered(context, 'CUT')
                            context.AddRegistered(context, 'COPY')
                            context.AddRegistered(context, 'PASTE', emptyClipboard)
                            context.AddRegistered(context, 'DUPLICATE')
                            context.AddRegistered(context, 'DELETE')
                            context.AddRegistered(context, 'RENAME', #sList ~= 1)
                            context.AddDivider(context)
                            context.AddRegistered(context, 'GROUP')
                            context.AddRegistered(context, 'UNGROUP')
                            context.AddRegistered(context, 'SELECT_CHILDREN')
                            context.AddRegistered(context, 'JUMP_TO_PARENT')
                            context.AddRegistered(context, 'EXPAND_ALL')
                            context.AddRegistered(context, 'COLLAPSE_ALL')
                            context.AddDivider(context)

                            if expanded == Explorer.SearchExpanded then
                                context.AddRegistered(context, 'CLEAR_SEARCH_AND_JUMP_TO')
                            end
                            if env.setclipboard then
                                context.AddRegistered(context, 'COPY_PATH')
                            end

                            context.AddRegistered(context, 'INSERT_OBJECT')
                            context.QueueDivider(context)

                            if presentClasses.BasePart or presentClasses.Model then
                                context.AddRegistered(context, 'TELEPORT_TO')
                                context.AddRegistered(context, 'VIEW_OBJECT')
                            end
                            if presentClasses.Tween then
                                context.AddRegistered(context, 'PLAY_TWEEN')
                            end
                            if presentClasses.Animation then
                                context.AddRegistered(context, 'LOAD_ANIMATION')
                                context.AddRegistered(context, 'STOP_ANIMATION')
                            end
                            if presentClasses.TouchTransmitter then
                                context.AddRegistered(context, 'FIRE_TOUCHTRANSMITTER', firetouchinterest == nil)
                            end
                            if presentClasses.ClickDetector then
                                context.AddRegistered(context, 'FIRE_CLICKDETECTOR', fireclickdetector == nil)
                            end
                            if presentClasses.ProximityPrompt then
                                context.AddRegistered(context, 'FIRE_PROXIMITYPROMPT', fireproximityprompt == nil)
                            end
                            if presentClasses.Player then
                                context.AddRegistered(context, 'SELECT_CHARACTER')
                                context.AddRegistered(context, 'VIEW_PLAYER')
                            end
                            if presentClasses.Players then
                                context.AddRegistered(context, 'SELECT_LOCAL_PLAYER')
                                context.AddRegistered(context, 'SELECT_ALL_CHARACTERS')
                            end
                            if presentClasses.LuaSourceContainer then
                                context.AddRegistered(context, 'VIEW_SCRIPT', not presentClasses.isViableDecompileScript or env.decompile == nil)
                                context.AddRegistered(context, 'SAVE_SCRIPT', not presentClasses.isViableDecompileScript or env.decompile == nil or env.writefile == nil)
                                context.AddRegistered(context, 'SAVE_BYTECODE', not presentClasses.isViableDecompileScript or env.getscriptbytecode == nil or env.writefile == nil)
                            end
                            if sMap[nilNode] then
                                context.AddRegistered(context, 'REFRESH_NIL')
                                context.AddRegistered(context, 'HIDE_NIL')
                            end

                            Explorer.LastRightClickX, Explorer.LastRightClickY = Mouse.X, Mouse.Y

                            context.Show(context, Mouse.X, Mouse.Y)
                        end
                        Explorer.InitRightClick = function()
                            local context = Lib.ContextMenu.new()

                            context.Register(context, 'CUT', {
                                Name = 'Cut',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'Cut',
                                DisabledIcon = 'Cut_Disabled',
                                Shortcut = 'Ctrl+Z',
                                OnClick = function()
                                    local destroy, clone = game.Destroy, game.Clone
                                    local sList, newClipboard = selection.List, {}
                                    local count = 1

                                    for i = 1, #sList do
                                        local inst = sList[i].Obj
                                        local s, cloned = pcall(clone, inst)

                                        if s and cloned then
                                            newClipboard[count] = cloned
                                            count = count + 1
                                        end

                                        pcall(destroy, inst)
                                    end

                                    clipboard = newClipboard

                                    selection.Clear(selection)
                                end,
                            })
                            context.Register(context, 'COPY', {
                                Name = 'Copy',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'Copy',
                                DisabledIcon = 'Copy_Disabled',
                                Shortcut = 'Ctrl+C',
                                OnClick = function()
                                    local clone = game.Clone
                                    local sList, newClipboard = selection.List, {}
                                    local count = 1

                                    for i = 1, #sList do
                                        local inst = sList[i].Obj
                                        local s, cloned = pcall(clone, inst)

                                        if s and cloned then
                                            newClipboard[count] = cloned
                                            count = count + 1
                                        end
                                    end

                                    clipboard = newClipboard
                                end,
                            })
                            context.Register(context, 'PASTE', {
                                Name = 'Paste Into',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'Paste',
                                DisabledIcon = 'Paste_Disabled',
                                Shortcut = 'Ctrl+Shift+V',
                                OnClick = function()
                                    local sList = selection.List
                                    local newSelection = {}
                                    local count = 1

                                    for i = 1, #sList do
                                        local node = sList[i]
                                        local inst = node.Obj

                                        Explorer.MakeNodeVisible(node, true)

                                        for c = 1, #clipboard do
                                            local cloned = clipboard[c]:Clone()

                                            if cloned then
                                                cloned.Parent = inst

                                                local clonedNode = nodes[cloned]

                                                if clonedNode then
                                                    newSelection[count] = clonedNode
                                                    count = count + 1
                                                end
                                            end
                                        end
                                    end

                                    selection.SetTable(selection, newSelection)

                                    if #newSelection > 0 then
                                        Explorer.ViewNode(newSelection[1])
                                    end
                                end,
                            })
                            context.Register(context, 'DUPLICATE', {
                                Name = 'Duplicate',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'Copy',
                                DisabledIcon = 'Copy_Disabled',
                                Shortcut = 'Ctrl+D',
                                OnClick = function()
                                    local clone = game.Clone
                                    local sList = selection.List
                                    local newSelection = {}
                                    local count = 1

                                    for i = 1, #sList do
                                        local node = sList[i]
                                        local inst = node.Obj
                                        local instPar = node.Parent and node.Parent.Obj

                                        Explorer.MakeNodeVisible(node)

                                        local s, cloned = pcall(clone, inst)

                                        if s and cloned then
                                            cloned.Parent = instPar

                                            local clonedNode = nodes[cloned]

                                            if clonedNode then
                                                newSelection[count] = clonedNode
                                                count = count + 1
                                            end
                                        end
                                    end

                                    selection.SetTable(selection, newSelection)

                                    if #newSelection > 0 then
                                        Explorer.ViewNode(newSelection[1])
                                    end
                                end,
                            })
                            context.Register(context, 'DELETE', {
                                Name = 'Delete',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'Delete',
                                DisabledIcon = 'Delete_Disabled',
                                Shortcut = 'Del',
                                OnClick = function()
                                    local destroy = game.Destroy
                                    local sList = selection.List

                                    for i = 1, #sList do
                                        pcall(destroy, sList[i].Obj)
                                    end

                                    selection.Clear(selection)
                                end,
                            })
                            context.Register(context, 'RENAME', {
                                Name = 'Rename',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'Rename',
                                DisabledIcon = 'Rename_Disabled',
                                Shortcut = 'F2',
                                OnClick = function()
                                    local sList = selection.List

                                    if sList[1] then
                                        Explorer.SetRenamingNode(sList[1])
                                    end
                                end,
                            })
                            context.Register(context, 'GROUP', {
                                Name = 'Group',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'Group',
                                DisabledIcon = 'Group_Disabled',
                                Shortcut = 'Ctrl+G',
                                OnClick = function()
                                    local sList = selection.List

                                    if #sList == 0 then
                                        return
                                    end

                                    local model = Instance.new('Model', sList[#sList].Obj.Parent)

                                    for i = 1, #sList do
                                        pcall(function()
                                            sList[i].Obj.Parent = model
                                        end)
                                    end

                                    if nodes[model] then
                                        selection.Set(selection, nodes[model])
                                        Explorer.ViewNode(nodes[model])
                                    end
                                end,
                            })
                            context.Register(context, 'UNGROUP', {
                                Name = 'Ungroup',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'Ungroup',
                                DisabledIcon = 'Ungroup_Disabled',
                                Shortcut = 'Ctrl+U',
                                OnClick = function()
                                    local newSelection = {}
                                    local count = 1
                                    local isa = game.IsA

                                    local function ungroup(node)
                                        local par = node.Parent.Obj
                                        local ch = {}
                                        local chCount = 1

                                        for i = 1, #node do
                                            local n = node[i]

                                            newSelection[count] = n
                                            ch[chCount] = n
                                            count = count + 1
                                            chCount = chCount + 1
                                        end
                                        for i = 1, #ch do
                                            pcall(function()
                                                ch[i].Obj.Parent = par
                                            end)
                                        end

                                        node.Obj:Destroy()
                                    end

                                    for i, v in next, selection.List do
                                        if isa(v.Obj, 'Model') then
                                            ungroup(v)
                                        end
                                    end

                                    selection.SetTable(selection, newSelection)

                                    if #newSelection > 0 then
                                        Explorer.ViewNode(newSelection[1])
                                    end
                                end,
                            })
                            context.Register(context, 'SELECT_CHILDREN', {
                                Name = 'Select Children',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'SelectChildren',
                                DisabledIcon = 'SelectChildren_Disabled',
                                OnClick = function()
                                    local newSelection = {}
                                    local count = 1
                                    local sList = selection.List

                                    for i = 1, #sList do
                                        local node = sList[i]

                                        for ind = 1, #node do
                                            local cNode = node[ind]

                                            if ind == 1 then
                                                Explorer.MakeNodeVisible(cNode)
                                            end

                                            newSelection[count] = cNode
                                            count = count + 1
                                        end
                                    end

                                    selection.SetTable(selection, newSelection)

                                    if #newSelection > 0 then
                                        Explorer.ViewNode(newSelection[1])
                                    else
                                        Explorer.Refresh()
                                    end
                                end,
                            })
                            context.Register(context, 'JUMP_TO_PARENT', {
                                Name = 'Jump to Parent',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'JumpToParent',
                                OnClick = function()
                                    local newSelection = {}
                                    local count = 1
                                    local sList = selection.List

                                    for i = 1, #sList do
                                        local node = sList[i]

                                        if node.Parent then
                                            newSelection[count] = node.Parent
                                            count = count + 1
                                        end
                                    end

                                    selection.SetTable(selection, newSelection)

                                    if #newSelection > 0 then
                                        Explorer.ViewNode(newSelection[1])
                                    else
                                        Explorer.Refresh()
                                    end
                                end,
                            })
                            context.Register(context, 'TELEPORT_TO', {
                                Name = 'Teleport To',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'TeleportTo',
                                OnClick = function()
                                    local sList = selection.List
                                    local plrRP = plr.Character and plr.Character:FindFirstChild('HumanoidRootPart')

                                    if not plrRP then
                                        return
                                    end

                                    for _, node in next, sList do
                                        local Obj = node.Obj

                                        if Obj.IsA(Obj, 'BasePart') then
                                            if Obj.CanCollide then
                                                plr.Character:MoveTo(Obj.Position)
                                            else
                                                plrRP.CFrame = CFrame.new(Obj.Position + Settings.Explorer.TeleportToOffset)
                                            end

                                            break
                                        elseif Obj.IsA(Obj, 'Model') then
                                            if Obj.PrimaryPart then
                                                if Obj.PrimaryPart.CanCollide then
                                                    plr.Character:MoveTo(Obj.PrimaryPart.Position)
                                                else
                                                    plrRP.CFrame = CFrame.new(Obj.PrimaryPart.Position + Settings.Explorer.TeleportToOffset)
                                                end

                                                break
                                            else
                                                local part = Obj.FindFirstChildWhichIsA(Obj, 'BasePart', true)

                                                if part and nodes[part] then
                                                    if part.CanCollide then
                                                        plr.Character:MoveTo(part.Position)
                                                    else
                                                        plrRP.CFrame = CFrame.new(part.Position + Settings.Explorer.TeleportToOffset)
                                                    end

                                                    break
                                                elseif Obj.WorldPivot then
                                                    plrRP.CFrame = Obj.WorldPivot
                                                end
                                            end
                                        end
                                    end
                                end,
                            })

                            local OldAnimation

                            context.Register(context, 'PLAY_TWEEN', {
                                Name = 'Play Tween',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'Play',
                                OnClick = function()
                                    local sList = selection.List

                                    for i = 1, #sList do
                                        local node = sList[i]
                                        local Obj = node.Obj

                                        if Obj.IsA(Obj, 'Tween') then
                                            Obj.Play(Obj)
                                        end
                                    end
                                end,
                            })

                            local OldAnimation

                            context.Register(context, 'LOAD_ANIMATION', {
                                Name = 'Load Animation',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'Play',
                                OnClick = function()
                                    local sList = selection.List
                                    local Humanoid = plr.Character and plr.Character:FindFirstChild('Humanoid')

                                    if not Humanoid then
                                        return
                                    end

                                    for i = 1, #sList do
                                        local node = sList[i]
                                        local Obj = node.Obj

                                        if Obj.IsA(Obj, 'Animation') then
                                            if OldAnimation then
                                                OldAnimation.Stop(OldAnimation)
                                            end

                                            OldAnimation = Humanoid.LoadAnimation(Humanoid, Obj)

                                            OldAnimation.Play(OldAnimation)

                                            break
                                        end
                                    end
                                end,
                            })
                            context.Register(context, 'STOP_ANIMATION', {
                                Name = 'Stop Animation',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'Pause',
                                OnClick = function()
                                    local sList = selection.List
                                    local Humanoid = plr.Character and plr.Character:FindFirstChild('Humanoid')

                                    if not Humanoid then
                                        return
                                    end

                                    for i = 1, #sList do
                                        local node = sList[i]
                                        local Obj = node.Obj

                                        if Obj.IsA(Obj, 'Animation') then
                                            if OldAnimation then
                                                OldAnimation.Stop(OldAnimation)
                                            end

                                            Humanoid.LoadAnimation(Humanoid, Obj):Stop()

                                            break
                                        end
                                    end
                                end,
                            })
                            context.Register(context, 'EXPAND_ALL', {
                                Name = 'Expand All',
                                OnClick = function()
                                    local sList = selection.List

                                    local function expand(node)
                                        expanded[node] = true

                                        for i = 1, #node do
                                            if #node[i] > 0 then
                                                expand(node[i])
                                            end
                                        end
                                    end

                                    for i = 1, #sList do
                                        expand(sList[i])
                                    end

                                    Explorer.ForceUpdate()
                                end,
                            })
                            context.Register(context, 'COLLAPSE_ALL', {
                                Name = 'Collapse All',
                                OnClick = function()
                                    local sList = selection.List

                                    local function expand(node)
                                        expanded[node] = nil

                                        for i = 1, #node do
                                            if #node[i] > 0 then
                                                expand(node[i])
                                            end
                                        end
                                    end

                                    for i = 1, #sList do
                                        expand(sList[i])
                                    end

                                    Explorer.ForceUpdate()
                                end,
                            })
                            context.Register(context, 'CLEAR_SEARCH_AND_JUMP_TO', {
                                Name = 'Clear Search and Jump to',
                                OnClick = function()
                                    local newSelection = {}
                                    local count = 1
                                    local sList = selection.List

                                    for i = 1, #sList do
                                        newSelection[count] = sList[i]
                                        count = count + 1
                                    end

                                    selection.SetTable(selection, newSelection)
                                    Explorer.ClearSearch()

                                    if #newSelection > 0 then
                                        Explorer.ViewNode(newSelection[1])
                                    end
                                end,
                            })

                            local clth = function(str)
                                if str.sub(str, 1, 28) == 'game:GetService("Workspace")' then
                                    str = str.gsub(str, 'game:GetService%("Workspace"%)', 'workspace', 1)
                                end
                                if str.sub(str, 1, 27 + #plr.Name) == 'game:GetService("Players").' .. plr.Name then
                                    str = str.gsub(str, 'game:GetService%("Players"%).' .. plr.Name, 'game:GetService("Players").LocalPlayer', 1)
                                end

                                return str
                            end

                            context.Register(context, 'COPY_PATH', {
                                Name = 'Copy Path',
                                IconMap = Explorer.ClassIcons,
                                Icon = 50,
                                OnClick = function()
                                    local sList = selection.List

                                    if #sList == 1 then
                                        env.setclipboard(clth(Explorer.GetInstancePath(sList[1].Obj)))
                                    elseif #sList > 1 then
                                        local resList = {
                                            '{',
                                        }
                                        local count = 2

                                        for i = 1, #sList do
                                            local path = '\t' .. clth(Explorer.GetInstancePath(sList[i].Obj)) .. ','

                                            if #path > 0 then
                                                resList[count] = path
                                                count = count + 1
                                            end
                                        end

                                        resList[count] = '}'

                                        env.setclipboard(table.concat(resList, '\n'))
                                    end
                                end,
                            })
                            context.Register(context, 'INSERT_OBJECT', {
                                Name = 'Insert Object',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'InsertObject',
                                OnClick = function()
                                    local mouse = Main.Mouse
                                    local x, y = Explorer.LastRightClickX or mouse.X, Explorer.LastRightClickY or mouse.Y

                                    Explorer.InsertObjectContext:Show(x, y)
                                end,
                            })
                            context.Register(context, 'VIEW_OBJECT', {
                                Name = 'View Object (Right click to reset)',
                                IconMap = Explorer.ClassIcons,
                                Icon = 5,
                                OnClick = function()
                                    local sList = selection.List
                                    local isa = game.IsA

                                    for i = 1, #sList do
                                        local node = sList[i]

                                        if isa(node.Obj, 'BasePart') or isa(node.Obj, 'Model') then
                                            workspace.CurrentCamera.CameraSubject = node.Obj

                                            break
                                        end
                                    end
                                end,
                                OnRightClick = function()
                                    workspace.CurrentCamera.CameraSubject = plr.Character
                                end,
                            })
                            context.Register(context, 'FIRE_TOUCHTRANSMITTER', {
                                Name = 'Fire TouchTransmitter',
                                IconMap = Explorer.ClassIcons,
                                Icon = 37,
                                OnClick = function()
                                    local hrp = plr.Character and plr.Character:FindFirstChild('HumanoidRootPart')

                                    if not hrp then
                                        return
                                    end

                                    for _, v in ipairs(selection.List)do
                                        if v.Obj and v.Obj:IsA('TouchTransmitter') then
                                            firetouchinterest(hrp, v.Obj.Parent, 0)
                                        end
                                    end
                                end,
                            })
                            context.Register(context, 'FIRE_CLICKDETECTOR', {
                                Name = 'Fire ClickDetector',
                                IconMap = Explorer.ClassIcons,
                                Icon = 41,
                                OnClick = function()
                                    local hrp = plr.Character and plr.Character:FindFirstChild('HumanoidRootPart')

                                    if not hrp then
                                        return
                                    end

                                    for _, v in ipairs(selection.List)do
                                        if v.Obj and v.Obj:IsA('ClickDetector') then
                                            fireclickdetector(v.Obj)
                                        end
                                    end
                                end,
                            })
                            context.Register(context, 'FIRE_PROXIMITYPROMPT', {
                                Name = 'Fire ProximityPrompt',
                                IconMap = Explorer.ClassIcons,
                                Icon = 124,
                                OnClick = function()
                                    local hrp = plr.Character and plr.Character:FindFirstChild('HumanoidRootPart')

                                    if not hrp then
                                        return
                                    end

                                    for _, v in ipairs(selection.List)do
                                        if v.Obj and v.Obj:IsA('ProximityPrompt') then
                                            fireproximityprompt(v.Obj)
                                        end
                                    end
                                end,
                            })
                            context.Register(context, 'VIEW_SCRIPT', {
                                Name = 'View Script',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'ViewScript',
                                OnClick = function()
                                    local scr = selection.List[1] and selection.List[1].Obj

                                    if scr then
                                        ScriptViewer.ViewScript(scr)
                                    end
                                end,
                            })
                            context.Register(context, 'SAVE_SCRIPT', {
                                Name = 'Save Script',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'Save',
                                OnClick = function()
                                    for _, v in next, selection.List do
                                        if v.Obj:IsA('LuaSourceContainer') and env.isViableDecompileScript(v.Obj) then
                                            local success, source = pcall(env.decompile, v.Obj)

                                            if not success or not source then
                                                source = ('-- DEX - %s failed to decompile %s').format(('-- DEX - %s failed to decompile %s'), env.executor, v.Obj.ClassName)
                                            end

                                            local fileName = ('%i.%s.%s.Source.txt').format(('%i.%s.%s.Source.txt'), game.PlaceId, v.Obj.ClassName, env.parsefile(v.Obj.Name))

                                            env.writefile(fileName, source)
                                            task.wait(0.2)
                                        end
                                    end
                                end,
                            })
                            context.Register(context, 'SAVE_BYTECODE', {
                                Name = 'Save Script Bytecode',
                                IconMap = Explorer.MiscIcons,
                                Icon = 'Save',
                                OnClick = function()
                                    for _, v in next, selection.List do
                                        if v.Obj:IsA('LuaSourceContainer') and env.isViableDecompileScript(v.Obj) then
                                            local success, bytecode = pcall(getscriptbytecode, v.Obj)

                                            if success and type(bytecode) == 'string' then
                                                local fileName = ('%i.%s.%s.Bytecode.txt').format(('%i.%s.%s.Bytecode.txt'), game.PlaceId, v.Obj.ClassName, env.parsefile(v.Obj.Name))

                                                env.writefile(fileName, bytecode)
                                                task.wait(0.2)
                                            end
                                        end
                                    end
                                end,
                            })
                            context.Register(context, 'SELECT_CHARACTER', {
                                Name = 'Select Character',
                                IconMap = Explorer.ClassIcons,
                                Icon = 9,
                                OnClick = function()
                                    local newSelection = {}
                                    local count = 1
                                    local sList = selection.List
                                    local isa = game.IsA

                                    for i = 1, #sList do
                                        local node = sList[i]

                                        if isa(node.Obj, 'Player') and nodes[node.Obj.Character] then
                                            newSelection[count] = nodes[node.Obj.Character]
                                            count = count + 1
                                        end
                                    end

                                    selection.SetTable(selection, newSelection)

                                    if #newSelection > 0 then
                                        Explorer.ViewNode(newSelection[1])
                                    else
                                        Explorer.Refresh()
                                    end
                                end,
                            })
                            context.Register(context, 'VIEW_PLAYER', {
                                Name = 'View Player',
                                IconMap = Explorer.ClassIcons,
                                Icon = 5,
                                OnClick = function()
                                    local newSelection = {}
                                    local count = 1
                                    local sList = selection.List
                                    local isa = game.IsA

                                    for i = 1, #sList do
                                        local node = sList[i]
                                        local Obj = node.Obj

                                        if Obj.IsA(Obj, 'Player') and Obj.Character then
                                            workspace.CurrentCamera.CameraSubject = Obj.Character

                                            break
                                        end
                                    end
                                end,
                            })
                            context.Register(context, 'SELECT_LOCAL_PLAYER', {
                                Name = 'Select Local Player',
                                IconMap = Explorer.ClassIcons,
                                Icon = 9,
                                OnClick = function()
                                    pcall(function()
                                        if nodes[plr] then
                                            selection.Set(selection, nodes[plr])
                                            Explorer.ViewNode(nodes[plr])
                                        end
                                    end)
                                end,
                            })
                            context.Register(context, 'SELECT_ALL_CHARACTERS', {
                                Name = 'Select All Characters',
                                IconMap = Explorer.ClassIcons,
                                Icon = 2,
                                OnClick = function()
                                    local newSelection = {}
                                    local sList = selection.List

                                    for i, v in next, service.Players:GetPlayers()do
                                        if v.Character and nodes[v.Character] then
                                            if i == 1 then
                                                Explorer.MakeNodeVisible(v.Character)
                                            end

                                            table.insert(newSelection, nodes[v.Character])
                                        end
                                    end

                                    selection.SetTable(selection, newSelection)

                                    if #newSelection > 0 then
                                        Explorer.ViewNode(newSelection[1])
                                    else
                                        Explorer.Refresh()
                                    end
                                end,
                            })
                            context.Register(context, 'REFRESH_NIL', {
                                Name = 'Refresh Nil Instances',
                                OnClick = function()
                                    Explorer.RefreshNilInstances()
                                end,
                            })
                            context.Register(context, 'HIDE_NIL', {
                                Name = 'Hide Nil Instances',
                                OnClick = function()
                                    Explorer.HideNilInstances()
                                end,
                            })

                            Explorer.RightClickContext = context
                        end
                        Explorer.HideNilInstances = function()
                            table.clear(nilMap)

                            local disconnectCon = Instance.new('Folder').ChildAdded:Connect(function(
                            ) end).Disconnect

                            for i, v in next, nilCons do
                                disconnectCon(v[1])
                                disconnectCon(v[2])
                            end

                            table.clear(nilCons)

                            for i = 1, #nilNode do
                                coroutine.wrap(removeObject)(nilNode[i].Obj)
                            end

                            Explorer.Update()
                            Explorer.Refresh()
                        end
                        Explorer.RefreshNilInstances = function()
                            if not env.getnilinstances then
                                return
                            end

                            local nilInsts = env.getnilinstances()
                            local game = game
                            local getDescs = game.GetDescendants

                            for i = 1, #nilInsts do
                                local obj = nilInsts[i]

                                if obj ~= game then
                                    nilMap[obj] = true

                                    local descs = getDescs(obj)

                                    for j = 1, #descs do
                                        nilMap[descs[j] ] = true
                                    end
                                end
                            end
                            for i = 1, #nilInsts do
                                local obj = nilInsts[i]
                                local node = nodes[obj]

                                if not node then
                                    coroutine.wrap(addObject)(obj)
                                end
                            end

                            Explorer.Update()
                            Explorer.Refresh()
                        end
                        Explorer.GetInstancePath = function(obj)
                            local ffc = game.FindFirstChild
                            local getCh = game.GetChildren
                            local path = ''
                            local curObj = obj
                            local ts = tostring
                            local match = string.match
                            local gsub = string.gsub
                            local tableFind = table.find
                            local useGetCh = Settings.Explorer.CopyPathUseGetChildren
                            local formatLuaString = Lib.FormatLuaString

                            while curObj do
                                if curObj == game then
                                    path = 'game' .. path

                                    break
                                end

                                local className = curObj.ClassName
                                local curName = ts(curObj)
                                local indexName

                                if match(curName, '^[%a_][%w_]*$') then
                                    indexName = '.' .. curName
                                else
                                    local cleanName = formatLuaString(curName)

                                    indexName = '["' .. cleanName .. '"]'
                                end

                                local parObj = curObj.Parent

                                if parObj then
                                    local fc = ffc(parObj, curName)

                                    if useGetCh and fc and fc ~= curObj then
                                        local parCh = getCh(parObj)
                                        local fcInd = tableFind(parCh, curObj)

                                        indexName = ':GetChildren()[' .. fcInd .. ']'
                                    elseif parObj == game and API.Classes[className] and API.Classes[className].Tags.Service then
                                        indexName = ':GetService("' .. className .. '")'
                                    end
                                elseif parObj == nil then
                                    local getnil = 
[[local getNil = function(name, class) for _, v in next, getnilinstances() do if v.ClassName == class and v.Name == name then return v end end end]]
                                    local gotnil = '\n\ngetNil("%s", "%s")'

                                    indexName = getnil .. gotnil.format(gotnil, curObj.Name, className)
                                end

                                path = indexName .. path
                                curObj = parObj
                            end

                            return path
                        end
                        Explorer.DefaultProps = {
                            BasePart = {
                                Position = function(Obj)
                                    local Player = service.Players.LocalPlayer

                                    if Player.Character and Player.Character:FindFirstChild('HumanoidRootPart') then
                                        Obj.Position = (Player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 
-10)).p
                                    end

                                    return Obj.Position
                                end,
                                Anchored = true,
                            },
                            GuiObject = {
                                Position = function(Obj)
                                    return (Obj.Parent:IsA('ScreenGui') and UDim2.new(0.5, 0, 0.5, 0)) or Obj.Position
                                end,
                                Active = true,
                            },
                        }
                        Explorer.InitInsertObject = function()
                            local context = Lib.ContextMenu.new()

                            context.SearchEnabled = true
                            context.MaxHeight = 400

                            context.ApplyTheme(context, {
                                ContentColor = Settings.Theme.Main2,
                                OutlineColor = Settings.Theme.Outline1,
                                DividerColor = Settings.Theme.Outline1,
                                TextColor = Settings.Theme.Text,
                                HighlightColor = Settings.Theme.ButtonHover,
                            })

                            local classes = {}

                            for i, class in next, API.Classes do
                                local tags = class.Tags

                                if not tags.NotCreatable and not tags.Service then
                                    local rmdEntry = RMD.Classes[class.Name]

                                    classes[#classes + 1] = {
                                        class,
                                        rmdEntry and rmdEntry.ClassCategory or 'Uncategorized',
                                    }
                                end
                            end

                            table.sort(classes, function(a, b)
                                if a[2] ~= b[2] then
                                    return a[2] < b[2]
                                else
                                    return a[1].Name < b[1].Name
                                end
                            end)

                            local function defaultProps(obj)
                                for class, props in pairs(Explorer.DefaultProps)do
                                    if obj.IsA(obj, class) then
                                        for prop, value in pairs(props)do
                                            obj[prop] = (type(value) == 'function' and value(obj)) or value
                                        end
                                    end
                                end
                            end
                            local function onClick(className)
                                local sList = selection.List
                                local instNew = Instance.new

                                for i = 1, #sList do
                                    local node = sList[i]
                                    local obj = node.Obj

                                    Explorer.MakeNodeVisible(node, true)

                                    local success, obj = pcall(instNew, className, obj)

                                    if success and obj then
                                        defaultProps(obj)
                                    end
                                end
                            end

                            local lastCategory = ''

                            for i = 1, #classes do
                                local class = classes[i][1]
                                local rmdEntry = RMD.Classes[class.Name]
                                local iconInd = rmdEntry and tonumber(rmdEntry.ExplorerImageIndex) or 0
                                local category = classes[i][2]

                                if lastCategory ~= category then
                                    context.AddDivider(context, category)

                                    lastCategory = category
                                end

                                context.Add(context, {
                                    Name = class.Name,
                                    IconMap = Explorer.ClassIcons,
                                    Icon = iconInd,
                                    OnClick = onClick,
                                })
                            end

                            Explorer.InsertObjectContext = context
                        end
                        Explorer._SearchFilters = {}

                        do
                            local Filters = Explorer._SearchFilters

                            local function NewFilter(list, func)
                                for _, v in next, list do
                                    Filters[v.lower(v) .. ':'] = func
                                end
                            end

                            local Only = {
                                remotes = {
                                    'RemoteEvent',
                                    'RemoteFunction',
                                    'BindableEvent',
                                    'BindableFunction',
                                },
                                scripts = {
                                    'Script',
                                    'LocalScript',
                                    'ModuleScript',
                                },
                                players = {
                                    'Player',
                                },
                            }

                            NewFilter({
                                'parent',
                                'p',
                            }, function(Obj, str)
                                return Obj.Parent and (Obj.Parent.Name:lower()):find(str)
                            end)
                            NewFilter({
                                'class',
                                'c',
                            }, function(Obj, str)
                                return (Obj.ClassName:lower()):find(str)
                            end)
                            NewFilter({
                                'isa',
                                'i',
                            }, function(Obj, str)
                                return Obj.IsA(Obj, str)
                            end)
                            NewFilter({
                                'only',
                                'o',
                            }, function(Obj, str)
                                local Special = Only[str]

                                return Special and table.find(Special, Obj.ClassName)
                            end)
                        end

                        Explorer.DoSearch = function(query)
                            table.clear(Explorer.SearchExpanded)
                            table.clear(searchResults)

                            expanded = (#query == 0 and Explorer.Expanded) or Explorer.SearchExpanded

                            local tostr = tostring
                            local tfind = table.find
                            local Filters = Explorer._SearchFilters
                            local expandTable = Explorer.SearchExpanded
                            local allnodes = nodes[game]
                            local defaultSearch = (function(Obj, str)
                                return (Obj.Name:lower()):find(str, 1, true)
                            end)

                            local function searchTable(root, str, func)
                                local expandedpar = false

                                for _, node in ipairs(root)do
                                    if func(node.Obj, str) then
                                        expandTable[node] = 0
                                        searchResults[node] = true

                                        if not expandedpar then
                                            local parnode = node.Parent

                                            while parnode and (not searchResults[parnode] or expandTable[parnode] == 0) do
                                                expanded[parnode] = true
                                                searchResults[parnode] = true
                                                parnode = parnode.Parent
                                            end

                                            expandedpar = true
                                        end
                                    end
                                    if #node > 0 then
                                        searchTable(node, str, func)
                                    end
                                end
                            end
                            local function Search(query)
                                if query.len(query) == 0 then
                                    return
                                end

                                local lower = query.lower(query)
                                local split = lower.split(lower, ':')
                                local Filter = (Filters[split[1] .. ':']) or nil

                                if Filter then
                                    searchTable(allnodes, (split[2] or ''), Filter)
                                else
                                    searchTable(allnodes, (lower or ''), defaultSearch)
                                end
                            end

                            for _, v in ipairs(query.split(query, ','))do
                                if v.len(v) > 0 then
                                    Search(v)
                                end
                            end

                            Explorer.ForceUpdate()
                        end
                        Explorer.ClearSearch = function()
                            Explorer.GuiElems.SearchBar.Text = ''
                            expanded = Explorer.Expanded
                            searchFunc = nil
                        end
                        Explorer.InitSearch = function()
                            local TweenService = service.TweenService
                            local SearchFrame = Explorer.GuiElems.ToolBar.SearchFrame
                            local searchBox = SearchFrame.SearchBox

                            Explorer.GuiElems.SearchBar = searchBox

                            local TweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quint)
                            local Tweens = {
                                Start = TweenService.Create(TweenService, SearchFrame.UIStroke, TweenInfo, {
                                    Color = Color3.fromRGB(0, 120, 215),
                                }),
                                End = TweenService.Create(TweenService, SearchFrame.UIStroke, TweenInfo, {
                                    Color = Color3.fromRGB(42, 42, 42),
                                }),
                            }

                            searchBox.FocusLost:Connect(function()
                                Tweens.End:Play()
                            end)
                            searchBox.Focused:Connect(function()
                                Tweens.Start:Play()
                            end)
                            Lib.ViewportTextBox.convert(searchBox)
                            searchBox.FocusLost:Connect(function()
                                Explorer.DoSearch(searchBox.Text)
                            end)
                        end
                        Explorer.InitEntryTemplate = function()
                            entryTemplate = create({
                                {
                                    1,
                                    'TextButton',
                                    {
                                        AutoButtonColor = false,
                                        BackgroundColor3 = Color3.new(0, 0, 0),
                                        BackgroundTransparency = 1,
                                        BorderColor3 = Color3.new(0, 0, 0),
                                        Font = 3,
                                        Name = 'Entry',
                                        Position = UDim2.new(0, 1, 0, 1),
                                        Size = UDim2.new(0, 250, 0, 20),
                                        Text = '',
                                        TextSize = 14,
                                    },
                                },
                                {
                                    2,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.04313725605607, 0.35294118523598, 0.68627452850342),
                                        BackgroundTransparency = 1,
                                        BorderColor3 = Color3.new(0.33725491166115, 0.49019610881805, 0.73725491762161),
                                        BorderSizePixel = 0,
                                        Name = 'Indent',
                                        Parent = {1},
                                        Position = UDim2.new(0, 20, 0, 0),
                                        Size = UDim2.new(1, -20, 1, 0),
                                    },
                                },
                                {
                                    3,
                                    'TextLabel',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        Font = 3,
                                        Name = 'EntryName',
                                        Parent = {2},
                                        Position = UDim2.new(0, 26, 0, 0),
                                        Size = UDim2.new(1, -26, 1, 0),
                                        Text = 'Workspace',
                                        TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                        TextSize = 14,
                                        TextXAlignment = 0,
                                    },
                                },
                                {
                                    4,
                                    'TextButton',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        ClipsDescendants = true,
                                        Font = 3,
                                        Name = 'Expand',
                                        Parent = {2},
                                        Position = UDim2.new(0, -20, 0, 0),
                                        Size = UDim2.new(0, 20, 0, 20),
                                        Text = '',
                                        TextSize = 14,
                                    },
                                },
                                {
                                    5,
                                    'ImageLabel',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        Image = 'rbxassetid://5642383285',
                                        ImageRectOffset = Vector2.new(144, 16),
                                        ImageRectSize = Vector2.new(16, 16),
                                        Name = 'Icon',
                                        Parent = {4},
                                        Position = UDim2.new(0, 2, 0, 2),
                                        ScaleType = 4,
                                        Size = UDim2.new(0, 16, 0, 16),
                                    },
                                },
                                {
                                    6,
                                    'ImageLabel',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        ImageRectOffset = Vector2.new(304, 0),
                                        ImageRectSize = Vector2.new(16, 16),
                                        Name = 'Icon',
                                        Parent = {2},
                                        Position = UDim2.new(0, 4, 0, 2),
                                        ScaleType = 4,
                                        Size = UDim2.new(0, 16, 0, 16),
                                    },
                                },
                            })

                            local sys = Lib.ClickSystem.new()

                            sys.AllowedButtons = {1, 2}

                            sys.OnDown:Connect(function(item, combo, button)
                                local ind = table.find(listEntries, item)

                                if not ind then
                                    return
                                end

                                local node = tree[ind + Explorer.Index]

                                if not node then
                                    return
                                end

                                local entry = listEntries[ind]

                                if button == 1 then
                                    if combo == 2 then
                                        if node.Obj:IsA('LuaSourceContainer') then
                                            ScriptViewer.ViewScript(node.Obj)
                                        elseif #node > 0 and expanded[node] ~= 0 then
                                            expanded[node] = not expanded[node]

                                            Explorer.Update()
                                        end
                                    end
                                    if Properties.SelectObject(node.Obj) then
                                        sys.IsRenaming = false

                                        return
                                    end

                                    sys.IsRenaming = selection.Map[node]

                                    if Lib.IsShiftDown() then
                                        if not selection.Piviot then
                                            return
                                        end

                                        local fromIndex = table.find(tree, selection.Piviot)
                                        local toIndex = table.find(tree, node)

                                        if not fromIndex or not toIndex then
                                            return
                                        end

                                        fromIndex, toIndex = math.min(fromIndex, toIndex), math.max(fromIndex, toIndex)

                                        local sList = selection.List

                                        for i = #sList, 1, -1 do
                                            local elem = sList[i]

                                            if selection.ShiftSet[elem] then
                                                selection.Map[elem] = nil

                                                table.remove(sList, i)
                                            end
                                        end

                                        selection.ShiftSet = {}

                                        for i = fromIndex, toIndex do
                                            local elem = tree[i]

                                            if not selection.Map[elem] then
                                                selection.ShiftSet[elem] = true
                                                selection.Map[elem] = true
                                                sList[#sList + 1] = elem
                                            end
                                        end

                                        selection.Changed:Fire()
                                    elseif Lib.IsCtrlDown() then
                                        selection.ShiftSet = {}

                                        if selection.Map[node] then
                                            selection.Remove(selection, node)
                                        else
                                            selection.Add(selection, node)
                                        end

                                        selection.Piviot = node
                                        sys.IsRenaming = false
                                    elseif not selection.Map[node] then
                                        selection.ShiftSet = {}

                                        selection.Set(selection, node)

                                        selection.Piviot = node
                                    end
                                elseif button == 2 then
                                    if Properties.SelectObject(node.Obj) then
                                        return
                                    end
                                    if not Lib.IsCtrlDown() and not selection.Map[node] then
                                        selection.ShiftSet = {}

                                        selection.Set(selection, node)

                                        selection.Piviot = node

                                        Explorer.Refresh()
                                    end
                                end

                                Explorer.Refresh()
                            end)
                            sys.OnRelease:Connect(function(
                                item,
                                combo,
                                button,
                                position
                            )
                                local ind = table.find(listEntries, item)

                                if not ind then
                                    return
                                end

                                local node = tree[ind + Explorer.Index]

                                if not node then
                                    return
                                end
                                if button == 1 then
                                    if selection.Map[node] and not Lib.IsShiftDown() and not Lib.IsCtrlDown() then
                                        selection.ShiftSet = {}

                                        selection.Set(selection, node)

                                        selection.Piviot = node

                                        Explorer.Refresh()
                                    end

                                    local id = sys.ClickId

                                    Lib.FastWait(sys.ComboTime)

                                    if combo == 1 and id == sys.ClickId and sys.IsRenaming and selection.Map[node] then
                                        Explorer.SetRenamingNode(node)
                                    end
                                elseif button == 2 then
                                    Explorer.ShowRightClick(position)
                                end
                            end)

                            Explorer.ClickSystem = sys
                        end
                        Explorer.InitDelCleaner = function()
                            coroutine.wrap(function()
                                local fw = Lib.FastWait

                                while true do
                                    local processed = false
                                    local c = 0

                                    for _, node in next, nodes do
                                        if node.HasDel then
                                            local delInd

                                            for i = 1, #node do
                                                if node[i].Del then
                                                    delInd = i

                                                    break
                                                end
                                            end

                                            if delInd then
                                                for i = delInd + 1, #node do
                                                    local cn = node[i]

                                                    if not cn.Del then
                                                        node[delInd] = cn
                                                        delInd = delInd + 1
                                                    end
                                                end
                                                for i = delInd, #node do
                                                    node[i] = nil
                                                end
                                            end

                                            node.HasDel = false
                                            processed = true

                                            fw()
                                        end

                                        c = c + 1

                                        if c > 10000 then
                                            c = 0

                                            fw()
                                        end
                                    end

                                    if processed and not refreshDebounce then
                                        Explorer.PerformRefresh()
                                    end

                                    fw(0.5)
                                end
                            end)()
                        end
                        Explorer.UpdateSelectionVisuals = function()
                            local holder = Explorer.SelectionVisualsHolder
                            local isa = game.IsA
                            local clone = game.Clone

                            if not holder then
                                holder = Instance.new('ScreenGui')
                                holder.Name = 'ExplorerSelections'
                                holder.DisplayOrder = Main.DisplayOrders.Core

                                Lib.ShowGui(holder)

                                Explorer.SelectionVisualsHolder = holder
                                Explorer.SelectionVisualCons = {}

                                local guiTemplate = create({
                                    {
                                        1,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Size = UDim2.new(0, 100, 0, 100),
                                        },
                                    },
                                    {
                                        2,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.04313725605607, 0.35294118523598, 0.68627452850342),
                                            BorderSizePixel = 0,
                                            Parent = {1},
                                            Position = UDim2.new(0, -1, 0, -1),
                                            Size = UDim2.new(1, 2, 0, 1),
                                        },
                                    },
                                    {
                                        3,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.04313725605607, 0.35294118523598, 0.68627452850342),
                                            BorderSizePixel = 0,
                                            Parent = {1},
                                            Position = UDim2.new(0, -1, 1, 0),
                                            Size = UDim2.new(1, 2, 0, 1),
                                        },
                                    },
                                    {
                                        4,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.04313725605607, 0.35294118523598, 0.68627452850342),
                                            BorderSizePixel = 0,
                                            Parent = {1},
                                            Position = UDim2.new(0, -1, 0, 0),
                                            Size = UDim2.new(0, 1, 1, 0),
                                        },
                                    },
                                    {
                                        5,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.04313725605607, 0.35294118523598, 0.68627452850342),
                                            BorderSizePixel = 0,
                                            Parent = {1},
                                            Position = UDim2.new(1, 0, 0, 0),
                                            Size = UDim2.new(0, 1, 1, 0),
                                        },
                                    },
                                })

                                Explorer.SelectionVisualGui = guiTemplate

                                local boxTemplate = Instance.new('SelectionBox')

                                boxTemplate.LineThickness = 0.03
                                boxTemplate.Color3 = Color3.fromRGB(0, 170, 255)
                                Explorer.SelectionVisualBox = boxTemplate
                            end

                            holder.ClearAllChildren(holder)

                            for i, v in pairs(Explorer.SelectionVisualGui:GetChildren())do
                                v.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
                            end

                            local attachCons = Explorer.SelectionVisualCons

                            for i = 1, #attachCons do
                                attachCons[i].Destroy()
                            end

                            table.clear(attachCons)

                            local partEnabled = Settings.Explorer.PartSelectionBox
                            local guiEnabled = Settings.Explorer.GuiSelectionBox

                            if not partEnabled and not guiEnabled then
                                return
                            end

                            local svg = Explorer.SelectionVisualGui
                            local svb = Explorer.SelectionVisualBox
                            local attachTo = Lib.AttachTo
                            local sList = selection.List
                            local count = 1
                            local boxCount = 0
                            local workspaceNode = nodes[workspace]

                            for i = 1, #sList do
                                if boxCount > 1000 then
                                    break
                                end

                                local node = sList[i]
                                local obj = node.Obj

                                if node ~= workspaceNode then
                                    if isa(obj, 'GuiObject') and guiEnabled then
                                        local newVisual = clone(svg)

                                        attachCons[count] = attachTo(newVisual, {
                                            Target = obj,
                                            Resize = true,
                                        })
                                        count = count + 1
                                        newVisual.Parent = holder
                                        boxCount = boxCount + 1
                                    elseif isa(obj, 'PVInstance') and partEnabled then
                                        local newBox = clone(svb)

                                        newBox.Adornee = obj
                                        newBox.Parent = holder
                                        boxCount = boxCount + 1
                                    end
                                end
                            end
                        end
                        Explorer.Init = function()
                            Explorer.ClassIcons = Lib.IconMap.newLinear('rbxasset://textures/ClassImages.PNG', 16, 16)
                            Explorer.MiscIcons = Main.MiscIcons
                            clipboard = {}
                            selection = Lib.Set.new()
                            selection.ShiftSet = {}

                            selection.Changed:Connect(Properties.ShowExplorerProps)

                            Explorer.Selection = selection

                            Explorer.InitRightClick()
                            Explorer.InitInsertObject()
                            Explorer.SetSortingEnabled(Settings.Explorer.Sorting)

                            Explorer.Expanded = setmetatable({}, {
                                __mode = 'k',
                            })
                            Explorer.SearchExpanded = setmetatable({}, {
                                __mode = 'k',
                            })
                            expanded = Explorer.Expanded
                            nilNode.Obj.Name = 'Nil Instances'
                            nilNode.Locked = true

                            local explorerItems = create({
                                {
                                    1,
                                    'Folder',
                                    {
                                        Name = 'ExplorerItems',
                                    },
                                },
                                {
                                    2,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.20392157137394, 0.20392157137394, 0.20392157137394),
                                        BorderSizePixel = 0,
                                        Name = 'ToolBar',
                                        Parent = {1},
                                        Size = UDim2.new(1, 0, 0, 22),
                                    },
                                },
                                {
                                    3,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.14901961386204, 0.14901961386204, 0.14901961386204),
                                        BorderColor3 = Color3.new(0.1176470592618, 0.1176470592618, 0.1176470592618),
                                        BorderSizePixel = 0,
                                        Name = 'SearchFrame',
                                        Parent = {2},
                                        Position = UDim2.new(0, 3, 0, 1),
                                        Size = UDim2.new(1, -6, 0, 18),
                                    },
                                },
                                {
                                    4,
                                    'TextBox',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        ClearTextOnFocus = false,
                                        Font = 3,
                                        Name = 'SearchBox',
                                        Parent = {3},
                                        PlaceholderColor3 = Color3.new(0.39215689897537, 0.39215689897537, 0.39215689897537),
                                        PlaceholderText = 'Search workspace',
                                        Position = UDim2.new(0, 4, 0, 0),
                                        Size = UDim2.new(1, -24, 0, 18),
                                        Text = '',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                        TextXAlignment = 0,
                                    },
                                },
                                {
                                    5,
                                    'UICorner',
                                    {
                                        CornerRadius = UDim.new(0, 2),
                                        Parent = {3},
                                    },
                                },
                                {
                                    6,
                                    'UIStroke',
                                    {
                                        Thickness = 1.4,
                                        Parent = {3},
                                        Color = Color3.fromRGB(42, 42, 42),
                                    },
                                },
                                {
                                    7,
                                    'TextButton',
                                    {
                                        AutoButtonColor = false,
                                        BackgroundColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        Font = 3,
                                        Name = 'Reset',
                                        Parent = {3},
                                        Position = UDim2.new(1, -17, 0, 1),
                                        Size = UDim2.new(0, 16, 0, 16),
                                        Text = '',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                    },
                                },
                                {
                                    8,
                                    'ImageLabel',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        Image = 'rbxassetid://5034718129',
                                        ImageColor3 = Color3.new(0.39215686917305, 0.39215686917305, 0.39215686917305),
                                        Parent = {7},
                                        Size = UDim2.new(0, 16, 0, 16),
                                    },
                                },
                                {
                                    9,
                                    'TextButton',
                                    {
                                        AutoButtonColor = false,
                                        BackgroundColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        Font = 3,
                                        Name = 'Refresh',
                                        Parent = {2},
                                        Position = UDim2.new(1, -20, 0, 1),
                                        Size = UDim2.new(0, 18, 0, 18),
                                        Text = '',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                        Visible = false,
                                    },
                                },
                                {
                                    10,
                                    'ImageLabel',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        Image = 'rbxassetid://5642310344',
                                        Parent = {9},
                                        Position = UDim2.new(0, 3, 0, 3),
                                        Size = UDim2.new(0, 12, 0, 12),
                                    },
                                },
                                {
                                    11,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                                        BorderSizePixel = 0,
                                        Name = 'ScrollCorner',
                                        Parent = {1},
                                        Position = UDim2.new(1, -16, 1, -16),
                                        Size = UDim2.new(0, 16, 0, 16),
                                        Visible = false,
                                    },
                                },
                                {
                                    12,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        ClipsDescendants = true,
                                        Name = 'List',
                                        Parent = {1},
                                        Position = UDim2.new(0, 0, 0, 23),
                                        Size = UDim2.new(1, 0, 1, -23),
                                    },
                                },
                            })

                            toolBar = explorerItems.ToolBar
                            treeFrame = explorerItems.List
                            Explorer.GuiElems.ToolBar = toolBar
                            Explorer.GuiElems.TreeFrame = treeFrame
                            scrollV = Lib.ScrollBar.new()
                            scrollV.WheelIncrement = 3
                            scrollV.Gui.Position = UDim2.new(1, -16, 0, 23)

                            scrollV.SetScrollFrame(scrollV, treeFrame)
                            scrollV.Scrolled:Connect(function()
                                Explorer.Index = scrollV.Index

                                Explorer.Refresh()
                            end)

                            scrollH = Lib.ScrollBar.new(true)
                            scrollH.Increment = 5
                            scrollH.WheelIncrement = Explorer.EntryIndent
                            scrollH.Gui.Position = UDim2.new(0, 0, 1, -16)

                            scrollH.Scrolled:Connect(function()
                                Explorer.Refresh()
                            end)

                            local window = Lib.Window.new()

                            Explorer.Window = window

                            window.SetTitle(window, 'Explorer')

                            window.GuiElems.Line.Position = UDim2.new(0, 0, 0, 22)

                            Explorer.InitEntryTemplate()

                            toolBar.Parent = window.GuiElems.Content
                            treeFrame.Parent = window.GuiElems.Content
                            explorerItems.ScrollCorner.Parent = window.GuiElems.Content
                            scrollV.Gui.Parent = window.GuiElems.Content
                            scrollH.Gui.Parent = window.GuiElems.Content

                            Explorer.InitRenameBox()
                            Explorer.InitSearch()
                            Explorer.InitDelCleaner()
                            selection.Changed:Connect(Explorer.UpdateSelectionVisuals)
                            window.GuiElems.Main:GetPropertyChangedSignal('AbsoluteSize'):Connect(function(
                            )
                                if Explorer.Active then
                                    Explorer.UpdateView()
                                    Explorer.Refresh()
                                end
                            end)
                            window.OnActivate:Connect(function()
                                Explorer.Active = true

                                Explorer.UpdateView()
                                Explorer.Update()
                                Explorer.Refresh()
                            end)
                            window.OnRestore:Connect(function()
                                Explorer.Active = true

                                Explorer.UpdateView()
                                Explorer.Update()
                                Explorer.Refresh()
                            end)
                            window.OnDeactivate:Connect(function()
                                Explorer.Active = false
                            end)
                            window.OnMinimize:Connect(function()
                                Explorer.Active = false
                            end)

                            autoUpdateSearch = Settings.Explorer.AutoUpdateSearch
                            nodes[game] = {Obj = game}
                            expanded[nodes[game] ] = true

                            if env.getnilinstances then
                                nodes[nilNode.Obj] = nilNode
                            end

                            Explorer.SetupConnections()

                            local insts = getDescendants(game)

                            if Main.Elevated then
                                for i = 1, #insts do
                                    local __DARKLUA_CONTINUE_651 = false

                                    repeat
                                        local obj = insts[i]
                                        local par = nodes[ffa(obj, 'Instance')]

                                        if not par then
                                            __DARKLUA_CONTINUE_651 = true

                                            break
                                        end

                                        local newNode = {
                                            Obj = obj,
                                            Parent = par,
                                        }

                                        nodes[obj] = newNode
                                        par[#par + 1] = newNode
                                        __DARKLUA_CONTINUE_651 = true
                                    until true

                                    if not __DARKLUA_CONTINUE_651 then
                                        break
                                    end
                                end
                            else
                                for i = 1, #insts do
                                    local __DARKLUA_CONTINUE_652 = false

                                    repeat
                                        local obj = insts[i]
                                        local s, parObj = pcall(ffa, obj, 'Instance')
                                        local par = nodes[parObj]

                                        if not par then
                                            __DARKLUA_CONTINUE_652 = true

                                            break
                                        end

                                        local newNode = {
                                            Obj = obj,
                                            Parent = par,
                                        }

                                        nodes[obj] = newNode
                                        par[#par + 1] = newNode
                                        __DARKLUA_CONTINUE_652 = true
                                    until true

                                    if not __DARKLUA_CONTINUE_652 then
                                        break
                                    end
                                end
                            end
                        end

                        return Explorer
                    end

                    return {
                        InitDeps = initDeps,
                        InitAfterMain = initAfterMain,
                        Main = main,
                    }
                end,
                Properties = function()
                    local Main, Lib, Apps, Settings
                    local Explorer, Properties, ScriptViewer, Notebook
                    local API, RMD, env, service, plr, create, createSimple

                    local function initDeps(data)
                        Main = data.Main
                        Lib = data.Lib
                        Apps = data.Apps
                        Settings = data.Settings
                        API = data.API
                        RMD = data.RMD
                        env = data.env
                        service = data.service
                        plr = data.plr
                        create = data.create
                        createSimple = data.createSimple
                    end
                    local function initAfterMain()
                        Explorer = Apps.Explorer
                        Properties = Apps.Properties
                        ScriptViewer = Apps.ScriptViewer
                        Notebook = Apps.Notebook
                    end
                    local function main()
                        local Properties = {}
                        local window, toolBar, propsFrame
                        local scrollV, scrollH
                        local categoryOrder
                        local props, viewList, expanded, indexableProps, propEntries, autoUpdateObjs = {}, {}, {}, {}, {}, {}
                        local inputBox, inputTextBox, inputProp
                        local checkboxes, propCons = {}, {}
                        local table, string = table, string
                        local getPropChangedSignal = game.GetPropertyChangedSignal
                        local getAttributeChangedSignal = game.GetAttributeChangedSignal
                        local isa = game.IsA
                        local getAttribute = game.GetAttribute
                        local setAttribute = game.SetAttribute

                        Properties.GuiElems = {}
                        Properties.Index = 0
                        Properties.ViewWidth = 0
                        Properties.MinInputWidth = 100
                        Properties.EntryIndent = 16
                        Properties.EntryOffset = 4
                        Properties.NameWidthCache = {}
                        Properties.SubPropCache = {}
                        Properties.ClassLists = {}
                        Properties.SearchText = ''
                        Properties.AddAttributeProp = {
                            Category = 'Attributes',
                            Class = '',
                            Name = '',
                            SpecialRow = 'AddAttribute',
                            Tags = {},
                        }
                        Properties.SoundPreviewProp = {
                            Category = 'Data',
                            ValueType = {
                                Name = 'SoundPlayer',
                            },
                            Class = 'Sound',
                            Name = 'Preview',
                            Tags = {},
                        }
                        Properties.IgnoreProps = {
                            DataModel = {
                                PrivateServerId = true,
                                PrivateServerOwnerId = true,
                                VIPServerId = true,
                                VIPServerOwnerId = true,
                            },
                        }
                        Properties.ExpandableTypes = {
                            Vector2 = true,
                            Vector3 = true,
                            UDim = true,
                            UDim2 = true,
                            CFrame = true,
                            Rect = true,
                            PhysicalProperties = true,
                            Ray = true,
                            NumberRange = true,
                            Faces = true,
                            Axes = true,
                        }
                        Properties.ExpandableProps = {
                            ['Sound.SoundId'] = true,
                        }
                        Properties.CollapsedCategories = {
                            ['Surface Inputs'] = true,
                            Surface = true,
                        }
                        Properties.ConflictSubProps = {
                            Vector2 = {
                                'X',
                                'Y',
                            },
                            Vector3 = {
                                'X',
                                'Y',
                                'Z',
                            },
                            UDim = {
                                'Scale',
                                'Offset',
                            },
                            UDim2 = {
                                'X',
                                'X.Scale',
                                'X.Offset',
                                'Y',
                                'Y.Scale',
                                'Y.Offset',
                            },
                            CFrame = {
                                'Position',
                                'Position.X',
                                'Position.Y',
                                'Position.Z',
                                'RightVector',
                                'RightVector.X',
                                'RightVector.Y',
                                'RightVector.Z',
                                'UpVector',
                                'UpVector.X',
                                'UpVector.Y',
                                'UpVector.Z',
                                'LookVector',
                                'LookVector.X',
                                'LookVector.Y',
                                'LookVector.Z',
                            },
                            Rect = {
                                'Min.X',
                                'Min.Y',
                                'Max.X',
                                'Max.Y',
                            },
                            PhysicalProperties = {
                                'Density',
                                'Elasticity',
                                'ElasticityWeight',
                                'Friction',
                                'FrictionWeight',
                            },
                            Ray = {
                                'Origin',
                                'Origin.X',
                                'Origin.Y',
                                'Origin.Z',
                                'Direction',
                                'Direction.X',
                                'Direction.Y',
                                'Direction.Z',
                            },
                            NumberRange = {
                                'Min',
                                'Max',
                            },
                            Faces = {
                                'Back',
                                'Bottom',
                                'Front',
                                'Left',
                                'Right',
                                'Top',
                            },
                            Axes = {
                                'X',
                                'Y',
                                'Z',
                            },
                        }
                        Properties.ConflictIgnore = {
                            BasePart = {ResizableFaces = true},
                        }
                        Properties.RoundableTypes = {
                            float = true,
                            double = true,
                            Color3 = true,
                            UDim = true,
                            UDim2 = true,
                            Vector2 = true,
                            Vector3 = true,
                            NumberRange = true,
                            Rect = true,
                            NumberSequence = true,
                            ColorSequence = true,
                            Ray = true,
                            CFrame = true,
                        }
                        Properties.TypeNameConvert = {
                            number = 'double',
                            boolean = 'bool',
                        }
                        Properties.ToNumberTypes = {
                            int = true,
                            int64 = true,
                            float = true,
                            double = true,
                        }
                        Properties.DefaultPropValue = {
                            string = '',
                            bool = false,
                            double = 0,
                            UDim = UDim.new(0, 0),
                            UDim2 = UDim2.new(0, 0, 0, 0),
                            BrickColor = BrickColor.new('Medium stone grey'),
                            Color3 = Color3.new(1, 1, 1),
                            Vector2 = Vector2.new(0, 0),
                            Vector3 = Vector3.new(0, 0, 0),
                            NumberSequence = NumberSequence.new(1),
                            ColorSequence = ColorSequence.new(Color3.new(1, 1, 1)),
                            NumberRange = NumberRange.new(0),
                            Rect = Rect.new(0, 0, 0, 0),
                        }
                        Properties.AllowedAttributeTypes = {
                            'string',
                            'boolean',
                            'number',
                            'UDim',
                            'UDim2',
                            'BrickColor',
                            'Color3',
                            'Vector2',
                            'Vector3',
                            'NumberSequence',
                            'ColorSequence',
                            'NumberRange',
                            'Rect',
                        }
                        Properties.StringToValue = function(prop, str)
                            local typeData = prop.ValueType
                            local typeName = typeData.Name

                            if typeName == 'string' or typeName == 'Content' then
                                return str
                            elseif Properties.ToNumberTypes[typeName] then
                                return tonumber(str)
                            elseif typeName == 'Vector2' then
                                local vals = str.split(str, ',')
                                local x, y = tonumber(vals[1]), tonumber(vals[2])

                                if x and y and #vals >= 2 then
                                    return Vector2.new(x, y)
                                end
                            elseif typeName == 'Vector3' then
                                local vals = str.split(str, ',')
                                local x, y, z = tonumber(vals[1]), tonumber(vals[2]), tonumber(vals[3])

                                if x and y and z and #vals >= 3 then
                                    return Vector3.new(x, y, z)
                                end
                            elseif typeName == 'UDim' then
                                local vals = str.split(str, ',')
                                local scale, offset = tonumber(vals[1]), tonumber(vals[2])

                                if scale and offset and #vals >= 2 then
                                    return UDim.new(scale, offset)
                                end
                            elseif typeName == 'UDim2' then
                                local vals = str.gsub(str, '[{}]', ''):split(',')
                                local xScale, xOffset, yScale, yOffset = tonumber(vals[1]), tonumber(vals[2]), tonumber(vals[3]), tonumber(vals[4])

                                if xScale and xOffset and yScale and yOffset and #vals >= 4 then
                                    return UDim2.new(xScale, xOffset, yScale, yOffset)
                                end
                            elseif typeName == 'CFrame' then
                                local vals = str.split(str, ',')
                                local s, result = pcall(CFrame.new, unpack(vals))

                                if s and #vals >= 12 then
                                    return result
                                end
                            elseif typeName == 'Rect' then
                                local vals = str.split(str, ',')
                                local s, result = pcall(Rect.new, unpack(vals))

                                if s and #vals >= 4 then
                                    return result
                                end
                            elseif typeName == 'Ray' then
                                local vals = str.gsub(str, '[{}]', ''):split(',')
                                local s, origin = pcall(Vector3.new, unpack(vals, 1, 3))
                                local s2, direction = pcall(Vector3.new, unpack(vals, 4, 6))

                                if s and s2 and #vals >= 6 then
                                    return Ray.new(origin, direction)
                                end
                            elseif typeName == 'NumberRange' then
                                local vals = str.split(str, ',')
                                local s, result = pcall(NumberRange.new, unpack(vals))

                                if s and #vals >= 1 then
                                    return result
                                end
                            elseif typeName == 'Color3' then
                                local vals = str.gsub(str, '[{}]', ''):split(',')
                                local s, result = pcall(Color3.fromRGB, unpack(vals))

                                if s and #vals >= 3 then
                                    return result
                                end
                            end

                            return nil
                        end
                        Properties.ValueToString = function(prop, val)
                            local typeData = prop.ValueType
                            local typeName = typeData.Name

                            if typeName == 'Color3' then
                                return Lib.ColorToBytes(val)
                            elseif typeName == 'NumberRange' then
                                return val.Min .. ', ' .. val.Max
                            end

                            return tostring(val)
                        end
                        Properties.GetIndexableProps = function(obj, classData)
                            if not Main.Elevated then
                                if not pcall(function()
                                    return obj.ClassName
                                end) then
                                    return nil
                                end
                            end

                            local ignoreProps = Properties.IgnoreProps[classData.Name] or {}
                            local result = {}
                            local count = 1
                            local props = classData.Properties

                            for i = 1, #props do
                                local prop = props[i]

                                if not ignoreProps[prop.Name] then
                                    local s = pcall(function()
                                        return obj[prop.Name]
                                    end)

                                    if s then
                                        result[count] = prop
                                        count = count + 1
                                    end
                                end
                            end

                            return result
                        end
                        Properties.FindFirstObjWhichIsA = function(class)
                            local classList = Properties.ClassLists[class] or {}

                            if classList and #classList > 0 then
                                return classList[1]
                            end

                            return nil
                        end
                        Properties.ComputeConflicts = function(p)
                            local maxConflictCheck = Settings.Properties.MaxConflictCheck
                            local sList = Explorer.Selection.List
                            local classLists = Properties.ClassLists
                            local stringSplit = string.split
                            local t_clear = table.clear
                            local conflictIgnore = Properties.ConflictIgnore
                            local conflictMap = {}
                            local propList = p and {p} or props

                            if p then
                                local gName = p.Class .. '.' .. p.Name

                                autoUpdateObjs[gName] = nil

                                local subProps = Properties.ConflictSubProps[p.ValueType.Name] or {}

                                for i = 1, #subProps do
                                    autoUpdateObjs[gName .. '.' .. subProps[i] ] = nil
                                end
                            else
                                table.clear(autoUpdateObjs)
                            end
                            if #sList > 0 then
                                for i = 1, #propList do
                                    local prop = propList[i]
                                    local propName, propClass = prop.Name, prop.Class
                                    local typeData = prop.RootType or prop.ValueType
                                    local typeName = typeData.Name
                                    local attributeName = prop.AttributeName
                                    local gName = propClass .. '.' .. propName
                                    local checked = 0
                                    local subProps = Properties.ConflictSubProps[typeName] or {}
                                    local subPropCount = #subProps
                                    local toCheck = subPropCount + 1
                                    local conflictsFound = 0
                                    local indexNames = {}
                                    local ignored = conflictIgnore[propClass] and conflictIgnore[propClass][propName]
                                    local truthyCheck = (typeName == 'PhysicalProperties')
                                    local isAttribute = prop.IsAttribute
                                    local isMultiType = prop.MultiType

                                    t_clear(conflictMap)

                                    if not isMultiType then
                                        local firstVal, firstObj, firstSet
                                        local classList = classLists[prop.Class] or {}

                                        for c = 1, #classList do
                                            local obj = classList[c]

                                            if not firstSet then
                                                if isAttribute then
                                                    firstVal = getAttribute(obj, attributeName)

                                                    if firstVal ~= nil then
                                                        firstObj = obj
                                                        firstSet = true
                                                    end
                                                else
                                                    firstVal = obj[propName]
                                                    firstObj = obj
                                                    firstSet = true
                                                end
                                                if ignored then
                                                    break
                                                end
                                            else
                                                local propVal, skip

                                                if isAttribute then
                                                    propVal = getAttribute(obj, attributeName)

                                                    if propVal == nil then
                                                        skip = true
                                                    end
                                                else
                                                    propVal = obj[propName]
                                                end
                                                if not skip then
                                                    if not conflictMap[1] then
                                                        if truthyCheck then
                                                            if (firstVal and true or false) ~= (propVal and true or false) then
                                                                conflictMap[1] = true
                                                                conflictsFound = conflictsFound + 1
                                                            end
                                                        elseif firstVal ~= propVal then
                                                            conflictMap[1] = true
                                                            conflictsFound = conflictsFound + 1
                                                        end
                                                    end
                                                    if subPropCount > 0 then
                                                        for sPropInd = 1, subPropCount do
                                                            local indexes = indexNames[sPropInd]

                                                            if not indexes then
                                                                indexes = stringSplit(subProps[sPropInd], '.')
                                                                indexNames[sPropInd] = indexes
                                                            end

                                                            local firstValSub = firstVal
                                                            local propValSub = propVal

                                                            for j = 1, #indexes do
                                                                if not firstValSub or not propValSub then
                                                                    break
                                                                end

                                                                local indexName = indexes[j]

                                                                firstValSub = firstValSub[indexName]
                                                                propValSub = propValSub[indexName]
                                                            end

                                                            local mapInd = sPropInd + 1

                                                            if not conflictMap[mapInd] and firstValSub ~= propValSub then
                                                                conflictMap[mapInd] = true
                                                                conflictsFound = conflictsFound + 1
                                                            end
                                                        end
                                                    end
                                                    if conflictsFound == toCheck then
                                                        break
                                                    end
                                                end
                                            end

                                            checked = checked + 1

                                            if checked == maxConflictCheck then
                                                break
                                            end
                                        end

                                        if not conflictMap[1] then
                                            autoUpdateObjs[gName] = firstObj
                                        end

                                        for sPropInd = 1, subPropCount do
                                            if not conflictMap[sPropInd + 1] then
                                                autoUpdateObjs[gName .. '.' .. subProps[sPropInd] ] = firstObj
                                            end
                                        end
                                    end
                                end
                            end
                            if p then
                                Properties.Refresh()
                            end
                        end
                        Settings.Properties.ShowAttributes = true
                        Properties.ShowExplorerProps = function()
                            local maxConflictCheck = Settings.Properties.MaxConflictCheck
                            local sList = Explorer.Selection.List
                            local foundClasses = {}
                            local propCount = 1
                            local elevated = Main.Elevated
                            local showDeprecated, showHidden = Settings.Properties.ShowDeprecated, Settings.Properties.ShowHidden
                            local Classes = API.Classes
                            local classLists = {}
                            local lower = string.lower
                            local RMDCustomOrders = RMD.PropertyOrders
                            local getAttributes = game.GetAttributes
                            local maxAttrs = Settings.Properties.MaxAttributes
                            local showingAttrs = Settings.Properties.ShowAttributes
                            local foundAttrs = {}
                            local attrCount = 0
                            local typeof = typeof
                            local typeNameConvert = Properties.TypeNameConvert

                            table.clear(props)

                            for i = 1, #sList do
                                local node = sList[i]
                                local obj = node.Obj
                                local class = node.Class

                                if not class then
                                    class = obj.ClassName
                                    node.Class = class
                                end

                                local apiClass = Classes[class]

                                while apiClass do
                                    local APIClassName = apiClass.Name

                                    if not foundClasses[APIClassName] then
                                        local apiProps = indexableProps[APIClassName]

                                        if not apiProps then
                                            apiProps = Properties.GetIndexableProps(obj, apiClass)
                                            indexableProps[APIClassName] = apiProps
                                        end

                                        for i = 1, #apiProps do
                                            local prop = apiProps[i]
                                            local tags = prop.Tags

                                            if (not tags.Deprecated or showDeprecated) and (not tags.Hidden or showHidden) then
                                                props[propCount] = prop
                                                propCount = propCount + 1
                                            end
                                        end

                                        foundClasses[APIClassName] = true
                                    end

                                    local classList = classLists[APIClassName]

                                    if not classList then
                                        classList = {}
                                        classLists[APIClassName] = classList
                                    end

                                    classList[#classList + 1] = obj
                                    apiClass = apiClass.Superclass
                                end

                                if showingAttrs and attrCount < maxAttrs then
                                    local attrs = getAttributes(obj)

                                    for name, val in pairs(attrs)do
                                        local typ = typeof(val)

                                        if not foundAttrs[name] then
                                            local category = (typ == 'Instance' and 'Class') or (typ == 'EnumItem' and 'Enum') or 'Other'
                                            local valType = {
                                                Name = typeNameConvert[typ] or typ,
                                                Category = category,
                                            }
                                            local attrProp = {
                                                IsAttribute = true,
                                                Name = 'ATTR_' .. name,
                                                AttributeName = name,
                                                DisplayName = name,
                                                Class = 'Instance',
                                                ValueType = valType,
                                                Category = 'Attributes',
                                                Tags = {},
                                            }

                                            props[propCount] = attrProp
                                            propCount = propCount + 1
                                            attrCount = attrCount + 1
                                            foundAttrs[name] = {typ, attrProp}

                                            if attrCount == maxAttrs then
                                                break
                                            end
                                        elseif foundAttrs[name][1] ~= typ then
                                            foundAttrs[name][2].MultiType = true
                                            foundAttrs[name][2].Tags.ReadOnly = true
                                            foundAttrs[name][2].ValueType = {
                                                Name = 'string',
                                            }
                                        end
                                    end
                                end
                            end

                            table.sort(props, function(a, b)
                                if a.Category ~= b.Category then
                                    return (categoryOrder[a.Category] or 9999) < (categoryOrder[b.Category] or 9999)
                                else
                                    local aOrder = (RMDCustomOrders[a.Class] and RMDCustomOrders[a.Class][a.Name]) or 9999999
                                    local bOrder = (RMDCustomOrders[b.Class] and RMDCustomOrders[b.Class][b.Name]) or 9999999

                                    if aOrder ~= bOrder then
                                        return aOrder < bOrder
                                    else
                                        return lower(a.Name) < lower(b.Name)
                                    end
                                end
                            end)

                            Properties.ClassLists = classLists

                            Properties.ComputeConflicts()

                            if #props > 0 then
                                props[#props + 1] = Properties.AddAttributeProp
                            end

                            Properties.Update()
                            Properties.Refresh()
                        end
                        Properties.UpdateView = function()
                            local maxEntries = math.ceil(propsFrame.AbsoluteSize.Y / 23)
                            local maxX = propsFrame.AbsoluteSize.X
                            local totalWidth = Properties.ViewWidth + Properties.MinInputWidth

                            scrollV.VisibleSpace = maxEntries
                            scrollV.TotalSpace = #viewList + 1
                            scrollH.VisibleSpace = maxX
                            scrollH.TotalSpace = totalWidth
                            scrollV.Gui.Visible = #viewList + 1 > maxEntries
                            scrollH.Gui.Visible = Settings.Properties.ScaleType == 0 and totalWidth > maxX

                            local oldSize = propsFrame.Size

                            propsFrame.Size = UDim2.new(1, (scrollV.Gui.Visible and 
-16 or 0), 1, (scrollH.Gui.Visible and -39 or -23))

                            if oldSize ~= propsFrame.Size then
                                Properties.UpdateView()
                            else
                                scrollV.Update(scrollV)
                                scrollH.Update(scrollH)

                                if scrollV.Gui.Visible and scrollH.Gui.Visible then
                                    scrollV.Gui.Size = UDim2.new(0, 16, 1, -39)
                                    scrollH.Gui.Size = UDim2.new(1, -16, 0, 16)
                                    Properties.Window.GuiElems.Content.ScrollCorner.Visible = true
                                else
                                    scrollV.Gui.Size = UDim2.new(0, 16, 1, -23)
                                    scrollH.Gui.Size = UDim2.new(1, 0, 0, 16)
                                    Properties.Window.GuiElems.Content.ScrollCorner.Visible = false
                                end

                                Properties.Index = scrollV.Index
                            end
                        end
                        Properties.MakeSubProp = function(
                            prop,
                            subName,
                            valueType,
                            displayName
                        )
                            local subProp = {}

                            for i, v in pairs(prop)do
                                subProp[i] = v
                            end

                            subProp.RootType = subProp.RootType or subProp.ValueType
                            subProp.ValueType = valueType
                            subProp.SubName = subProp.SubName and (subProp.SubName .. subName) or subName
                            subProp.DisplayName = displayName

                            return subProp
                        end
                        Properties.GetExpandedProps = function(prop)
                            local result = {}
                            local typeData = prop.ValueType
                            local typeName = typeData.Name
                            local makeSubProp = Properties.MakeSubProp

                            if typeName == 'Vector2' then
                                result[1] = makeSubProp(prop, '.X', {
                                    Name = 'float',
                                })
                                result[2] = makeSubProp(prop, '.Y', {
                                    Name = 'float',
                                })
                            elseif typeName == 'Vector3' then
                                result[1] = makeSubProp(prop, '.X', {
                                    Name = 'float',
                                })
                                result[2] = makeSubProp(prop, '.Y', {
                                    Name = 'float',
                                })
                                result[3] = makeSubProp(prop, '.Z', {
                                    Name = 'float',
                                })
                            elseif typeName == 'CFrame' then
                                result[1] = makeSubProp(prop, '.Position', {
                                    Name = 'Vector3',
                                })
                                result[2] = makeSubProp(prop, '.RightVector', {
                                    Name = 'Vector3',
                                })
                                result[3] = makeSubProp(prop, '.UpVector', {
                                    Name = 'Vector3',
                                })
                                result[4] = makeSubProp(prop, '.LookVector', {
                                    Name = 'Vector3',
                                })
                            elseif typeName == 'UDim' then
                                result[1] = makeSubProp(prop, '.Scale', {
                                    Name = 'float',
                                })
                                result[2] = makeSubProp(prop, '.Offset', {
                                    Name = 'int',
                                })
                            elseif typeName == 'UDim2' then
                                result[1] = makeSubProp(prop, '.X', {
                                    Name = 'UDim',
                                })
                                result[2] = makeSubProp(prop, '.Y', {
                                    Name = 'UDim',
                                })
                            elseif typeName == 'Rect' then
                                result[1] = makeSubProp(prop, '.Min.X', {
                                    Name = 'float',
                                }, 'X0')
                                result[2] = makeSubProp(prop, '.Min.Y', {
                                    Name = 'float',
                                }, 'Y0')
                                result[3] = makeSubProp(prop, '.Max.X', {
                                    Name = 'float',
                                }, 'X1')
                                result[4] = makeSubProp(prop, '.Max.Y', {
                                    Name = 'float',
                                }, 'Y1')
                            elseif typeName == 'PhysicalProperties' then
                                result[1] = makeSubProp(prop, '.Density', {
                                    Name = 'float',
                                })
                                result[2] = makeSubProp(prop, '.Elasticity', {
                                    Name = 'float',
                                })
                                result[3] = makeSubProp(prop, '.ElasticityWeight', {
                                    Name = 'float',
                                })
                                result[4] = makeSubProp(prop, '.Friction', {
                                    Name = 'float',
                                })
                                result[5] = makeSubProp(prop, '.FrictionWeight', {
                                    Name = 'float',
                                })
                            elseif typeName == 'Ray' then
                                result[1] = makeSubProp(prop, '.Origin', {
                                    Name = 'Vector3',
                                })
                                result[2] = makeSubProp(prop, '.Direction', {
                                    Name = 'Vector3',
                                })
                            elseif typeName == 'NumberRange' then
                                result[1] = makeSubProp(prop, '.Min', {
                                    Name = 'float',
                                })
                                result[2] = makeSubProp(prop, '.Max', {
                                    Name = 'float',
                                })
                            elseif typeName == 'Faces' then
                                result[1] = makeSubProp(prop, '.Back', {
                                    Name = 'bool',
                                })
                                result[2] = makeSubProp(prop, '.Bottom', {
                                    Name = 'bool',
                                })
                                result[3] = makeSubProp(prop, '.Front', {
                                    Name = 'bool',
                                })
                                result[4] = makeSubProp(prop, '.Left', {
                                    Name = 'bool',
                                })
                                result[5] = makeSubProp(prop, '.Right', {
                                    Name = 'bool',
                                })
                                result[6] = makeSubProp(prop, '.Top', {
                                    Name = 'bool',
                                })
                            elseif typeName == 'Axes' then
                                result[1] = makeSubProp(prop, '.X', {
                                    Name = 'bool',
                                })
                                result[2] = makeSubProp(prop, '.Y', {
                                    Name = 'bool',
                                })
                                result[3] = makeSubProp(prop, '.Z', {
                                    Name = 'bool',
                                })
                            end
                            if prop.Name == 'SoundId' and prop.Class == 'Sound' then
                                result[1] = Properties.SoundPreviewProp
                            end

                            return result
                        end
                        Properties.Update = function()
                            table.clear(viewList)

                            local nameWidthCache = Properties.NameWidthCache
                            local lastCategory
                            local count = 1
                            local maxWidth, maxDepth = 0, 1
                            local textServ = service.TextService
                            local getTextSize = textServ.GetTextSize
                            local font = Enum.Font.SourceSans
                            local size = Vector2.new(math.huge, 20)
                            local stringSplit = string.split
                            local entryIndent = Properties.EntryIndent
                            local isFirstScaleType = Settings.Properties.ScaleType == 0
                            local find, lower = string.find, string.lower
                            local searchText = (#Properties.SearchText > 0 and lower(Properties.SearchText))

                            local function recur(props, depth)
                                for i = 1, #props do
                                    local prop = props[i]
                                    local propName = prop.Name
                                    local subName = prop.SubName
                                    local category = prop.Category
                                    local visible

                                    if searchText and depth == 1 then
                                        if find(lower(propName), searchText, 1, true) then
                                            visible = true
                                        end
                                    else
                                        visible = true
                                    end
                                    if visible and lastCategory ~= category then
                                        viewList[count] = {CategoryName = category}
                                        count = count + 1
                                        lastCategory = category
                                    end
                                    if (expanded['CAT_' .. category] and visible) or prop.SpecialRow then
                                        if depth > 1 then
                                            prop.Depth = depth

                                            if depth > maxDepth then
                                                maxDepth = depth
                                            end
                                        end
                                        if isFirstScaleType then
                                            local nameArr = subName and stringSplit(subName, '.')
                                            local displayName = prop.DisplayName or (nameArr and nameArr[#nameArr]) or propName
                                            local nameWidth = nameWidthCache[displayName]

                                            if not nameWidth then
                                                nameWidth = getTextSize(textServ, displayName, 14, font, size).X
                                                nameWidthCache[displayName] = nameWidth
                                            end

                                            local totalWidth = nameWidth + entryIndent * depth

                                            if totalWidth > maxWidth then
                                                maxWidth = totalWidth
                                            end
                                        end

                                        viewList[count] = prop
                                        count = count + 1

                                        local fullName = prop.Class .. '.' .. prop.Name .. (prop.SubName or '')

                                        if expanded[fullName] then
                                            local nextDepth = depth + 1
                                            local expandedProps = Properties.GetExpandedProps(prop)

                                            if #expandedProps > 0 then
                                                recur(expandedProps, nextDepth)
                                            end
                                        end
                                    end
                                end
                            end

                            recur(props, 1)

                            inputProp = nil
                            Properties.ViewWidth = maxWidth + 9 + Properties.EntryOffset

                            Properties.UpdateView()
                        end
                        Properties.NewPropEntry = function(index)
                            local newEntry = Properties.EntryTemplate:Clone()
                            local nameFrame = newEntry.NameFrame
                            local valueFrame = newEntry.ValueFrame
                            local newCheckbox = Lib.Checkbox.new(1)

                            newCheckbox.Gui.Position = UDim2.new(0, 3, 0, 3)
                            newCheckbox.Gui.Parent = valueFrame

                            newCheckbox.OnInput:Connect(function()
                                local prop = viewList[index + Properties.Index]

                                if not prop then
                                    return
                                end
                                if prop.ValueType.Name == 'PhysicalProperties' then
                                    Properties.SetProp(prop, newCheckbox.Toggled and true or nil)
                                else
                                    Properties.SetProp(prop, newCheckbox.Toggled)
                                end
                            end)

                            checkboxes[index] = newCheckbox

                            local iconFrame = Main.MiscIcons:GetLabel()

                            iconFrame.Position = UDim2.new(0, 2, 0, 3)
                            iconFrame.Parent = newEntry.ValueFrame.RightButton
                            newEntry.Position = UDim2.new(0, 0, 0, 23 * (index - 1))

                            nameFrame.Expand.InputBegan:Connect(function(input)
                                local prop = viewList[index + Properties.Index]

                                if not prop or (input.UserInputType ~= Enum.UserInputType.MouseMovement and input.UserInputType ~= Enum.UserInputType.Touch) then
                                    return
                                end

                                local fullName = (prop.CategoryName and 'CAT_' .. prop.CategoryName) or prop.Class .. '.' .. prop.Name .. (prop.SubName or '')

                                Main.MiscIcons:DisplayByKey(newEntry.NameFrame.Expand.Icon, expanded[fullName] and 'Collapse_Over' or 'Expand_Over')
                            end)
                            nameFrame.Expand.InputEnded:Connect(function(input)
                                local prop = viewList[index + Properties.Index]

                                if not prop or (input.UserInputType ~= Enum.UserInputType.MouseMovement and input.UserInputType ~= Enum.UserInputType.Touch) then
                                    return
                                end

                                local fullName = (prop.CategoryName and 'CAT_' .. prop.CategoryName) or prop.Class .. '.' .. prop.Name .. (prop.SubName or '')

                                Main.MiscIcons:DisplayByKey(newEntry.NameFrame.Expand.Icon, expanded[fullName] and 'Collapse' or 'Expand')
                            end)
                            nameFrame.Expand.MouseButton1Down:Connect(function()
                                local prop = viewList[index + Properties.Index]

                                if not prop then
                                    return
                                end

                                local fullName = (prop.CategoryName and 'CAT_' .. prop.CategoryName) or prop.Class .. '.' .. prop.Name .. (prop.SubName or '')

                                if not prop.CategoryName and not Properties.ExpandableTypes[prop.ValueType and prop.ValueType.Name] and not Properties.ExpandableProps[fullName] then
                                    return
                                end

                                expanded[fullName] = not expanded[fullName]

                                Properties.Update()
                                Properties.Refresh()
                            end)
                            nameFrame.PropName.InputBegan:Connect(function(
                                input
                            )
                                local prop = viewList[index + Properties.Index]

                                if not prop then
                                    return
                                end
                                if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and not nameFrame.PropName.TextFits then
                                    local fullNameFrame = Properties.FullNameFrame
                                    local nameArr = string.split(prop.Class .. '.' .. prop.Name .. (prop.SubName or ''), '.')
                                    local dispName = prop.DisplayName or nameArr[#nameArr]
                                    local sizeX = service.TextService:GetTextSize(dispName, 14, Enum.Font.SourceSans, Vector2.new(math.huge, 20)).X

                                    fullNameFrame.TextLabel.Text = dispName
                                    fullNameFrame.Size = UDim2.new(0, sizeX + 4, 0, 22)
                                    fullNameFrame.Visible = true
                                    Properties.FullNameFrameIndex = index

                                    Properties.FullNameFrameAttach.SetData(fullNameFrame, {Target = nameFrame})
                                    Properties.FullNameFrameAttach.Enable()
                                end
                            end)
                            nameFrame.PropName.InputEnded:Connect(function(
                                input
                            )
                                if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and Properties.FullNameFrameIndex == index then
                                    Properties.FullNameFrame.Visible = false

                                    Properties.FullNameFrameAttach.Disable()
                                end
                            end)
                            valueFrame.ValueBox.MouseButton1Down:Connect(function(
                            )
                                local prop = viewList[index + Properties.Index]

                                if not prop then
                                    return
                                end

                                Properties.SetInputProp(prop, index)
                            end)
                            valueFrame.ColorButton.MouseButton1Down:Connect(function(
                            )
                                local prop = viewList[index + Properties.Index]

                                if not prop then
                                    return
                                end

                                Properties.SetInputProp(prop, index, 'color')
                            end)
                            valueFrame.RightButton.MouseButton1Click:Connect(function(
                            )
                                local prop = viewList[index + Properties.Index]

                                if not prop then
                                    return
                                end

                                local fullName = prop.Class .. '.' .. prop.Name .. (prop.SubName or '')
                                local inputFullName = inputProp and (inputProp.Class .. '.' .. inputProp.Name .. (inputProp.SubName or ''))

                                if fullName == inputFullName and inputProp.ValueType.Category == 'Class' then
                                    inputProp = nil

                                    Properties.SetProp(prop, nil)
                                else
                                    Properties.SetInputProp(prop, index, 'right')
                                end
                            end)
                            nameFrame.ToggleAttributes.MouseButton1Click:Connect(function(
                            )
                                Settings.Properties.ShowAttributes = not Settings.Properties.ShowAttributes

                                Properties.ShowExplorerProps()
                            end)
                            newEntry.RowButton.MouseButton1Click:Connect(function(
                            )
                                Properties.DisplayAddAttributeWindow()
                            end)
                            newEntry.EditAttributeButton.MouseButton1Down:Connect(function(
                            )
                                local prop = viewList[index + Properties.Index]

                                if not prop then
                                    return
                                end

                                Properties.DisplayAttributeContext(prop)
                            end)
                            valueFrame.SoundPreview.ControlButton.MouseButton1Click:Connect(function(
                            )
                                if Properties.PreviewSound and Properties.PreviewSound.Playing then
                                    Properties.SetSoundPreview(false)
                                else
                                    local soundObj = Properties.FindFirstObjWhichIsA('Sound')

                                    if soundObj then
                                        Properties.SetSoundPreview(soundObj)
                                    end
                                end
                            end)
                            valueFrame.SoundPreview.InputBegan:Connect(function(
                                input
                            )
                                if input.UserInputType ~= Enum.UserInputType.MouseButton1 and input.UserInputType ~= Enum.UserInputType.Touch then
                                    return
                                end

                                local releaseEvent, inputEvent

                                releaseEvent = service.UserInputService.InputEnded:Connect(function(
                                    input
                                )
                                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                        releaseEvent.Disconnect(releaseEvent)

                                        if inputEvent then
                                            inputEvent.Disconnect(inputEvent)
                                        end
                                    end
                                end)

                                local timeLine = newEntry.ValueFrame.SoundPreview.TimeLine
                                local soundObj = Properties.FindFirstObjWhichIsA('Sound')

                                if soundObj then
                                    Properties.SetSoundPreview(soundObj, true)
                                end

                                local function update(input)
                                    local sound = Properties.PreviewSound

                                    if not sound or sound.TimeLength == 0 then
                                        return
                                    end

                                    local inputX = (input.UserInputType == Enum.UserInputType.Touch) and input.Position.X or input.Position.X
                                    local timeLineSize = timeLine.AbsoluteSize
                                    local relaX = inputX - timeLine.AbsolutePosition.X

                                    if timeLineSize.X <= 1 then
                                        return
                                    end
                                    if relaX < 0 then
                                        relaX = 0
                                    elseif relaX >= timeLineSize.X then
                                        relaX = timeLineSize.X - 1
                                    end

                                    local perc = (relaX / (timeLineSize.X - 1))

                                    sound.TimePosition = perc * sound.TimeLength
                                    timeLine.Slider.Position = UDim2.new(perc, -4, 0, 
-8)
                                end

                                update(input)

                                inputEvent = service.UserInputService.InputChanged:Connect(function(
                                    input
                                )
                                    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                        update(input)
                                    end
                                end)
                            end)

                            newEntry.Parent = propsFrame

                            return {
                                Gui = newEntry,
                                GuiElems = {
                                    NameFrame = nameFrame,
                                    ValueFrame = valueFrame,
                                    PropName = nameFrame.PropName,
                                    ValueBox = valueFrame.ValueBox,
                                    Expand = nameFrame.Expand,
                                    ColorButton = valueFrame.ColorButton,
                                    ColorPreview = valueFrame.ColorButton.ColorPreview,
                                    Gradient = valueFrame.ColorButton.ColorPreview.UIGradient,
                                    EnumArrow = valueFrame.EnumArrow,
                                    Checkbox = valueFrame.Checkbox,
                                    RightButton = valueFrame.RightButton,
                                    RightButtonIcon = iconFrame,
                                    RowButton = newEntry.RowButton,
                                    EditAttributeButton = newEntry.EditAttributeButton,
                                    ToggleAttributes = nameFrame.ToggleAttributes,
                                    SoundPreview = valueFrame.SoundPreview,
                                    SoundPreviewSlider = valueFrame.SoundPreview.TimeLine.Slider,
                                },
                            }
                        end
                        Properties.GetSoundPreviewEntry = function()
                            for i = 1, #viewList do
                                if viewList[i] == Properties.SoundPreviewProp then
                                    return propEntries[i - Properties.Index]
                                end
                            end
                        end
                        Properties.SetSoundPreview = function(soundObj, noplay)
                            local sound = Properties.PreviewSound

                            if not sound then
                                sound = Instance.new('Sound')
                                sound.Name = 'Preview'

                                sound.Paused:Connect(function()
                                    local entry = Properties.GetSoundPreviewEntry()

                                    if entry then
                                        Main.MiscIcons:DisplayByKey(entry.GuiElems.SoundPreview.ControlButton.Icon, 'Play')
                                    end
                                end)
                                sound.Resumed:Connect(function()
                                    Properties.Refresh()
                                end)
                                sound.Ended:Connect(function()
                                    local entry = Properties.GetSoundPreviewEntry()

                                    if entry then
                                        entry.GuiElems.SoundPreviewSlider.Position = UDim2.new(0, 
-4, 0, -8)
                                    end

                                    Properties.Refresh()
                                end)

                                sound.Parent = window.Gui
                                Properties.PreviewSound = sound
                            end
                            if not soundObj then
                                sound.Pause(sound)
                            else
                                local newId = sound.SoundId ~= soundObj.SoundId

                                sound.SoundId = soundObj.SoundId
                                sound.PlaybackSpeed = soundObj.PlaybackSpeed
                                sound.Volume = soundObj.Volume

                                if newId then
                                    sound.TimePosition = 0
                                end
                                if not noplay then
                                    sound.Resume(sound)
                                end

                                coroutine.wrap(function()
                                    local previewTime = tick()

                                    Properties.SoundPreviewTime = previewTime

                                    while previewTime == Properties.SoundPreviewTime and sound.Playing do
                                        local entry = Properties.GetSoundPreviewEntry()

                                        if entry then
                                            local tl = sound.TimeLength
                                            local perc = sound.TimePosition / (tl == 0 and 1 or tl)

                                            entry.GuiElems.SoundPreviewSlider.Position = UDim2.new(perc, 
-4, 0, -8)
                                        end

                                        Lib.FastWait()
                                    end
                                end)()
                                Properties.Refresh()
                            end
                        end
                        Properties.DisplayAttributeContext = function(prop)
                            local context = Properties.AttributeContext

                            if not context then
                                context = Lib.ContextMenu.new()
                                context.Iconless = true
                                context.Width = 80
                            end

                            context.Clear(context)
                            context.Add(context, {
                                Name = 'Edit',
                                OnClick = function()
                                    Properties.DisplayAddAttributeWindow(prop)
                                end,
                            })
                            context.Add(context, {
                                Name = 'Delete',
                                OnClick = function()
                                    Properties.SetProp(prop, nil, true)
                                    Properties.ShowExplorerProps()
                                end,
                            })
                            context.Show(context)
                        end
                        Properties.DisplayAddAttributeWindow = function(
                            editAttr
                        )
                            local win = Properties.AddAttributeWindow

                            if not win then
                                win = Lib.Window.new()
                                win.Alignable = false
                                win.Resizable = false

                                win.SetTitle(win, 'Add Attribute')
                                win.SetSize(win, 200, 130)

                                local saveButton = Lib.Button.new()
                                local nameLabel = Lib.Label.new()

                                nameLabel.Text = 'Name'
                                nameLabel.Position = UDim2.new(0, 30, 0, 10)
                                nameLabel.Size = UDim2.new(0, 40, 0, 20)

                                win.Add(win, nameLabel)

                                local nameBox = Lib.ViewportTextBox.new()

                                nameBox.Position = UDim2.new(0, 75, 0, 10)
                                nameBox.Size = UDim2.new(0, 120, 0, 20)

                                win.Add(win, nameBox, 'NameBox')
                                nameBox.TextBox:GetPropertyChangedSignal('Text'):Connect(function(
                                )
                                    saveButton.SetDisabled(saveButton, #nameBox.GetText(nameBox) == 0)
                                end)

                                local typeLabel = Lib.Label.new()

                                typeLabel.Text = 'Type'
                                typeLabel.Position = UDim2.new(0, 30, 0, 40)
                                typeLabel.Size = UDim2.new(0, 40, 0, 20)

                                win.Add(win, typeLabel)

                                local typeChooser = Lib.DropDown.new()

                                typeChooser.CanBeEmpty = false
                                typeChooser.Position = UDim2.new(0, 75, 0, 40)
                                typeChooser.Size = UDim2.new(0, 120, 0, 20)

                                typeChooser.SetOptions(typeChooser, Properties.AllowedAttributeTypes)
                                win.Add(win, typeChooser, 'TypeChooser')

                                local errorLabel = Lib.Label.new()

                                errorLabel.Text = ''
                                errorLabel.Position = UDim2.new(0, 5, 1, -45)
                                errorLabel.Size = UDim2.new(1, -10, 0, 20)
                                errorLabel.TextColor3 = Settings.Theme.Important
                                win.ErrorLabel = errorLabel

                                win.Add(win, errorLabel, 'Error')

                                local cancelButton = Lib.Button.new()

                                cancelButton.Text = 'Cancel'
                                cancelButton.Position = UDim2.new(1, -97, 1, -25)
                                cancelButton.Size = UDim2.new(0, 92, 0, 20)

                                cancelButton.OnClick:Connect(function()
                                    win.Close(win)
                                end)
                                win.Add(win, cancelButton)

                                saveButton.Text = 'Save'
                                saveButton.Position = UDim2.new(0, 5, 1, -25)
                                saveButton.Size = UDim2.new(0, 92, 0, 20)

                                saveButton.OnClick:Connect(function()
                                    local name = nameBox.GetText(nameBox)

                                    if #name > 100 then
                                        errorLabel.Text = 'Error: Name over 100 chars'

                                        return
                                    elseif name.sub(name, 1, 3) == 'RBX' then
                                        errorLabel.Text = "Error: Name begins with 'RBX'"

                                        return
                                    end

                                    local typ = typeChooser.Selected
                                    local valType = {
                                        Name = Properties.TypeNameConvert[typ] or typ,
                                        Category = 'DataType',
                                    }
                                    local attrProp = {
                                        IsAttribute = true,
                                        Name = 'ATTR_' .. name,
                                        AttributeName = name,
                                        DisplayName = name,
                                        Class = 'Instance',
                                        ValueType = valType,
                                        Category = 'Attributes',
                                        Tags = {},
                                    }

                                    Settings.Properties.ShowAttributes = true

                                    Properties.SetProp(attrProp, Properties.DefaultPropValue[valType.Name], true, Properties.EditingAttribute)
                                    Properties.ShowExplorerProps()
                                    win.Close(win)
                                end)
                                win.Add(win, saveButton, 'SaveButton')

                                Properties.AddAttributeWindow = win
                            end

                            Properties.EditingAttribute = editAttr

                            win.SetTitle(win, editAttr and 'Edit Attribute ' .. editAttr.AttributeName or 'Add Attribute')

                            win.Elements.Error.Text = ''

                            win.Elements.NameBox:SetText('')
                            win.Elements.SaveButton:SetDisabled(true)
                            win.Elements.TypeChooser:SetSelected(1)
                            win.Show(win)
                        end
                        Properties.IsTextEditable = function(prop)
                            local typeData = prop.ValueType
                            local typeName = typeData.Name

                            return typeName ~= 'bool' and typeData.Category ~= 'Enum' and typeData.Category ~= 'Class' and typeName ~= 'BrickColor'
                        end
                        Properties.DisplayEnumDropdown = function(entryIndex)
                            local context = Properties.EnumContext

                            if not context then
                                context = Lib.ContextMenu.new()
                                context.Iconless = true
                                context.MaxHeight = 200
                                context.ReverseYOffset = 22
                                Properties.EnumDropdown = context
                            end
                            if not inputProp or inputProp.ValueType.Category ~= 'Enum' then
                                return
                            end

                            local prop = inputProp
                            local entry = propEntries[entryIndex]
                            local valueFrame = entry.GuiElems.ValueFrame
                            local enum = Enum[prop.ValueType.Name]

                            if not enum then
                                return
                            end

                            local sorted = {}

                            for name, enum in next, enum.GetEnumItems(enum)do
                                sorted[#sorted + 1] = enum
                            end

                            table.sort(sorted, function(a, b)
                                return a.Name < b.Name
                            end)
                            context.Clear(context)

                            local function onClick(name)
                                if prop ~= inputProp then
                                    return
                                end

                                local enumItem = enum[name]

                                inputProp = nil

                                Properties.SetProp(prop, enumItem)
                            end

                            for i = 1, #sorted do
                                local enumItem = sorted[i]

                                context.Add(context, {
                                    Name = enumItem.Name,
                                    OnClick = onClick,
                                })
                            end

                            context.Width = valueFrame.AbsoluteSize.X

                            context.Show(context, valueFrame.AbsolutePosition.X, valueFrame.AbsolutePosition.Y + 22)
                        end
                        Properties.DisplayBrickColorEditor = function(
                            prop,
                            entryIndex,
                            col
                        )
                            local editor = Properties.BrickColorEditor

                            if not editor then
                                editor = Lib.BrickColorPicker.new()
                                editor.Gui.DisplayOrder = Main.DisplayOrders.Menu
                                editor.ReverseYOffset = 22

                                editor.OnSelect:Connect(function(col)
                                    if not editor.CurrentProp or editor.CurrentProp.ValueType.Name ~= 'BrickColor' then
                                        return
                                    end
                                    if editor.CurrentProp == inputProp then
                                        inputProp = nil
                                    end

                                    Properties.SetProp(editor.CurrentProp, BrickColor.new(col))
                                end)
                                editor.OnMoreColors:Connect(function()
                                    editor.Close(editor)

                                    local colProp

                                    for i, v in pairs(API.Classes.BasePart.Properties)do
                                        if v.Name == 'Color' then
                                            colProp = v

                                            break
                                        end
                                    end

                                    Properties.DisplayColorEditor(colProp, editor.SavedColor.Color)
                                end)

                                Properties.BrickColorEditor = editor
                            end

                            local entry = propEntries[entryIndex]
                            local valueFrame = entry.GuiElems.ValueFrame

                            editor.CurrentProp = prop
                            editor.SavedColor = col

                            if prop and prop.Class == 'BasePart' and prop.Name == 'BrickColor' then
                                editor.SetMoreColorsVisible(editor, true)
                            else
                                editor.SetMoreColorsVisible(editor, false)
                            end

                            editor.Show(editor, valueFrame.AbsolutePosition.X, valueFrame.AbsolutePosition.Y + 22)
                        end
                        Properties.DisplayColorEditor = function(prop, col)
                            local editor = Properties.ColorEditor

                            if not editor then
                                editor = Lib.ColorPicker.new()

                                editor.OnSelect:Connect(function(col)
                                    if not editor.CurrentProp then
                                        return
                                    end

                                    local typeName = editor.CurrentProp.ValueType.Name

                                    if typeName ~= 'Color3' and typeName ~= 'BrickColor' then
                                        return
                                    end

                                    local colVal = (typeName == 'Color3' and col or BrickColor.new(col))

                                    if editor.CurrentProp == inputProp then
                                        inputProp = nil
                                    end

                                    Properties.SetProp(editor.CurrentProp, colVal)
                                end)

                                Properties.ColorEditor = editor
                            end

                            editor.CurrentProp = prop

                            if col then
                                editor.SetColor(editor, col)
                            else
                                local firstVal = Properties.GetFirstPropVal(prop)

                                if firstVal then
                                    editor.SetColor(editor, firstVal)
                                end
                            end

                            editor.Show(editor)
                        end
                        Properties.DisplayNumberSequenceEditor = function(
                            prop,
                            seq
                        )
                            local editor = Properties.NumberSequenceEditor

                            if not editor then
                                editor = Lib.NumberSequenceEditor.new()

                                editor.OnSelect:Connect(function(val)
                                    if not editor.CurrentProp or editor.CurrentProp.ValueType.Name ~= 'NumberSequence' then
                                        return
                                    end
                                    if editor.CurrentProp == inputProp then
                                        inputProp = nil
                                    end

                                    Properties.SetProp(editor.CurrentProp, val)
                                end)

                                Properties.NumberSequenceEditor = editor
                            end

                            editor.CurrentProp = prop

                            if seq then
                                editor.SetSequence(editor, seq)
                            else
                                local firstVal = Properties.GetFirstPropVal(prop)

                                if firstVal then
                                    editor.SetSequence(editor, firstVal)
                                end
                            end

                            editor.Show(editor)
                        end
                        Properties.DisplayColorSequenceEditor = function(
                            prop,
                            seq
                        )
                            local editor = Properties.ColorSequenceEditor

                            if not editor then
                                editor = Lib.ColorSequenceEditor.new()

                                editor.OnSelect:Connect(function(val)
                                    if not editor.CurrentProp or editor.CurrentProp.ValueType.Name ~= 'ColorSequence' then
                                        return
                                    end
                                    if editor.CurrentProp == inputProp then
                                        inputProp = nil
                                    end

                                    Properties.SetProp(editor.CurrentProp, val)
                                end)

                                Properties.ColorSequenceEditor = editor
                            end

                            editor.CurrentProp = prop

                            if seq then
                                editor.SetSequence(editor, seq)
                            else
                                local firstVal = Properties.GetFirstPropVal(prop)

                                if firstVal then
                                    editor.SetSequence(editor, firstVal)
                                end
                            end

                            editor.Show(editor)
                        end
                        Properties.GetFirstPropVal = function(prop)
                            local first = Properties.FindFirstObjWhichIsA(prop.Class)

                            if first then
                                return Properties.GetPropVal(prop, first)
                            end
                        end
                        Properties.GetPropVal = function(prop, obj)
                            if prop.MultiType then
                                return '<Multiple Types>'
                            end
                            if not obj then
                                return
                            end

                            local propVal

                            if prop.IsAttribute then
                                propVal = getAttribute(obj, prop.AttributeName)

                                if propVal == nil then
                                    return nil
                                end

                                local typ = typeof(propVal)
                                local currentType = Properties.TypeNameConvert[typ] or typ

                                if prop.RootType then
                                    if prop.RootType.Name ~= currentType then
                                        return nil
                                    end
                                elseif prop.ValueType.Name ~= currentType then
                                    return nil
                                end
                            else
                                propVal = obj[prop.Name]
                            end
                            if prop.SubName then
                                local indexes = string.split(prop.SubName, '.')

                                for i = 1, #indexes do
                                    local indexName = indexes[i]

                                    if #indexName > 0 and propVal then
                                        propVal = propVal[indexName]
                                    end
                                end
                            end

                            return propVal
                        end
                        Properties.SelectObject = function(obj)
                            if inputProp and inputProp.ValueType.Category == 'Class' then
                                local prop = inputProp

                                inputProp = nil

                                if isa(obj, prop.ValueType.Name) then
                                    Properties.SetProp(prop, obj)
                                else
                                    Properties.Refresh()
                                end

                                return true
                            end

                            return false
                        end
                        Properties.DisplayProp = function(prop, entryIndex)
                            local propName = prop.Name
                            local typeData = prop.ValueType
                            local typeName = typeData.Name
                            local tags = prop.Tags
                            local gName = prop.Class .. '.' .. prop.Name .. (prop.SubName or '')
                            local propObj = autoUpdateObjs[gName]
                            local entryData = propEntries[entryIndex]
                            local UDim2 = UDim2
                            local guiElems = entryData.GuiElems
                            local valueFrame = guiElems.ValueFrame
                            local valueBox = guiElems.ValueBox
                            local colorButton = guiElems.ColorButton
                            local colorPreview = guiElems.ColorPreview
                            local gradient = guiElems.Gradient
                            local enumArrow = guiElems.EnumArrow
                            local checkbox = guiElems.Checkbox
                            local rightButton = guiElems.RightButton
                            local soundPreview = guiElems.SoundPreview
                            local propVal = Properties.GetPropVal(prop, propObj)
                            local inputFullName = inputProp and (inputProp.Class .. '.' .. inputProp.Name .. (inputProp.SubName or ''))
                            local offset = 4
                            local endOffset = 6

                            if (typeName == 'Color3' or typeName == 'BrickColor' or typeName == 'ColorSequence') then
                                colorButton.Visible = true
                                enumArrow.Visible = false

                                if propVal then
                                    gradient.Color = (typeName == 'Color3' and ColorSequence.new(propVal)) or (typeName == 'BrickColor' and ColorSequence.new(propVal.Color)) or propVal
                                else
                                    gradient.Color = ColorSequence.new(Color3.new(1, 1, 1))
                                end

                                colorPreview.BorderColor3 = (typeName == 'ColorSequence' and Color3.new(1, 1, 1) or Color3.new(0, 0, 0))
                                offset = 22
                                endOffset = 24 + (typeName == 'ColorSequence' and 20 or 0)
                            elseif typeData.Category == 'Enum' then
                                colorButton.Visible = false
                                enumArrow.Visible = not prop.Tags.ReadOnly
                                endOffset = 22
                            elseif (gName == inputFullName and typeData.Category == 'Class') or typeName == 'NumberSequence' then
                                colorButton.Visible = false
                                enumArrow.Visible = false
                                endOffset = 26
                            else
                                colorButton.Visible = false
                                enumArrow.Visible = false
                            end

                            valueBox.Position = UDim2.new(0, offset, 0, 0)
                            valueBox.Size = UDim2.new(1, -endOffset, 1, 0)

                            if inputFullName == gName and typeData.Category == 'Class' then
                                Main.MiscIcons:DisplayByKey(guiElems.RightButtonIcon, 'Delete')

                                guiElems.RightButtonIcon.Visible = true
                                rightButton.Text = ''
                                rightButton.Visible = true
                            elseif typeName == 'NumberSequence' or typeName == 'ColorSequence' then
                                guiElems.RightButtonIcon.Visible = false
                                rightButton.Text = '...'
                                rightButton.Visible = true
                            else
                                rightButton.Visible = false
                            end
                            if typeName == 'bool' or typeName == 'PhysicalProperties' then
                                valueBox.Visible = false
                                checkbox.Visible = true
                                soundPreview.Visible = false
                                checkboxes[entryIndex].Disabled = tags.ReadOnly

                                if typeName == 'PhysicalProperties' and autoUpdateObjs[gName] then
                                    checkboxes[entryIndex]:SetState(propVal and true or false)
                                else
                                    checkboxes[entryIndex]:SetState(propVal)
                                end
                            elseif typeName == 'SoundPlayer' then
                                valueBox.Visible = false
                                checkbox.Visible = false
                                soundPreview.Visible = true

                                local playing = Properties.PreviewSound and Properties.PreviewSound.Playing

                                Main.MiscIcons:DisplayByKey(soundPreview.ControlButton.Icon, playing and 'Pause' or 'Play')
                            else
                                valueBox.Visible = true
                                checkbox.Visible = false
                                soundPreview.Visible = false

                                if propVal ~= nil then
                                    if typeName == 'Color3' then
                                        valueBox.Text = '[' .. Lib.ColorToBytes(propVal) .. ']'
                                    elseif typeData.Category == 'Enum' then
                                        valueBox.Text = propVal.Name
                                    elseif Properties.RoundableTypes[typeName] and Settings.Properties.NumberRounding then
                                        local rawStr = Properties.ValueToString(prop, propVal)

                                        valueBox.Text = rawStr.gsub(rawStr, '-?%d+%.%d+', function(
                                            num
                                        )
                                            return tostring(tonumber(('%.' .. Settings.Properties.NumberRounding .. 'f'):format(num)))
                                        end)
                                    else
                                        valueBox.Text = Properties.ValueToString(prop, propVal)
                                    end
                                else
                                    valueBox.Text = ''
                                end

                                valueBox.TextColor3 = tags.ReadOnly and Settings.Theme.PlaceholderText or Settings.Theme.Text
                            end
                        end
                        Properties.Refresh = function()
                            local maxEntries = math.max(math.ceil((propsFrame.AbsoluteSize.Y) / 23), 0)
                            local maxX = propsFrame.AbsoluteSize.X
                            local valueWidth = math.max(Properties.MinInputWidth, maxX - Properties.ViewWidth)
                            local inputPropVisible = false
                            local isa = game.IsA
                            local UDim2 = UDim2
                            local stringSplit = string.split
                            local scaleType = Settings.Properties.ScaleType

                            for i = 1, #propCons do
                                propCons[i]:Disconnect()
                            end

                            table.clear(propCons)

                            Properties.FullNameFrame.Visible = false

                            Properties.FullNameFrameAttach.Disable()

                            for i = 1, maxEntries do
                                local entryData = propEntries[i]

                                if not propEntries[i] then
                                    entryData = Properties.NewPropEntry(i)
                                    propEntries[i] = entryData
                                end

                                local entry = entryData.Gui
                                local guiElems = entryData.GuiElems
                                local nameFrame = guiElems.NameFrame
                                local propNameLabel = guiElems.PropName
                                local valueFrame = guiElems.ValueFrame
                                local expand = guiElems.Expand
                                local valueBox = guiElems.ValueBox
                                local propNameBox = guiElems.PropName
                                local rightButton = guiElems.RightButton
                                local editAttributeButton = guiElems.EditAttributeButton
                                local toggleAttributes = guiElems.ToggleAttributes
                                local prop = viewList[i + Properties.Index]

                                if prop then
                                    local entryXOffset = (scaleType == 0 and scrollH.Index or 0)

                                    entry.Visible = true
                                    entry.Position = UDim2.new(0, -entryXOffset, 0, entry.Position.Y.Offset)
                                    entry.Size = UDim2.new(scaleType == 0 and 0 or 1, scaleType == 0 and Properties.ViewWidth + valueWidth or 0, 0, 22)

                                    if prop.SpecialRow then
                                        if prop.SpecialRow == 'AddAttribute' then
                                            nameFrame.Visible = false
                                            valueFrame.Visible = false
                                            guiElems.RowButton.Visible = true
                                        end
                                    else
                                        nameFrame.Visible = true
                                        guiElems.RowButton.Visible = false

                                        local depth = Properties.EntryIndent * (prop.Depth or 1)
                                        local leftOffset = depth + Properties.EntryOffset

                                        nameFrame.Position = UDim2.new(0, leftOffset, 0, 0)
                                        propNameLabel.Size = UDim2.new(1, -2 - (scaleType == 0 and 0 or 6), 1, 0)

                                        local gName = (prop.CategoryName and 'CAT_' .. prop.CategoryName) or prop.Class .. '.' .. prop.Name .. (prop.SubName or '')

                                        if prop.CategoryName then
                                            entry.BackgroundColor3 = Settings.Theme.Main1
                                            valueFrame.Visible = false
                                            propNameBox.Text = prop.CategoryName
                                            propNameBox.Font = Enum.Font.SourceSansBold
                                            expand.Visible = true
                                            propNameBox.TextColor3 = Settings.Theme.Text
                                            nameFrame.BackgroundTransparency = 1
                                            nameFrame.Size = UDim2.new(1, 0, 1, 0)
                                            editAttributeButton.Visible = false

                                            local showingAttrs = Settings.Properties.ShowAttributes

                                            toggleAttributes.Position = UDim2.new(1, 
-85 - leftOffset, 0, 0)
                                            toggleAttributes.Text = (showingAttrs and '[Setting: ON]' or '[Setting: OFF]')
                                            toggleAttributes.TextColor3 = Settings.Theme.Text
                                            toggleAttributes.Visible = (prop.CategoryName == 'Attributes')
                                        else
                                            local propName = prop.Name
                                            local typeData = prop.ValueType
                                            local typeName = typeData.Name
                                            local tags = prop.Tags
                                            local propObj = autoUpdateObjs[gName]
                                            local attributeOffset = (prop.IsAttribute and 20 or 0)

                                            editAttributeButton.Visible = (prop.IsAttribute and not prop.RootType)
                                            toggleAttributes.Visible = false

                                            if scaleType == 0 then
                                                nameFrame.Size = UDim2.new(0, Properties.ViewWidth - leftOffset - 1, 1, 0)
                                                valueFrame.Position = UDim2.new(0, Properties.ViewWidth, 0, 0)
                                                valueFrame.Size = UDim2.new(0, valueWidth - attributeOffset, 1, 0)
                                            else
                                                nameFrame.Size = UDim2.new(0.5, 
-leftOffset - 1, 1, 0)
                                                valueFrame.Position = UDim2.new(0.5, 0, 0, 0)
                                                valueFrame.Size = UDim2.new(0.5, 
-attributeOffset, 1, 0)
                                            end

                                            local nameArr = stringSplit(gName, '.')

                                            propNameBox.Text = prop.DisplayName or nameArr[#nameArr]
                                            propNameBox.Font = Enum.Font.SourceSans
                                            entry.BackgroundColor3 = Settings.Theme.Main2
                                            valueFrame.Visible = true
                                            expand.Visible = typeData.Category == 'DataType' and Properties.ExpandableTypes[typeName] or Properties.ExpandableProps[gName]
                                            propNameBox.TextColor3 = tags.ReadOnly and Settings.Theme.PlaceholderText or Settings.Theme.Text

                                            Properties.DisplayProp(prop, i)

                                            if propObj then
                                                if prop.IsAttribute then
                                                    propCons[#propCons + 1] = getAttributeChangedSignal(propObj, prop.AttributeName):Connect(function(
                                                    )
                                                        Properties.DisplayProp(prop, i)
                                                    end)
                                                else
                                                    propCons[#propCons + 1] = getPropChangedSignal(propObj, propName):Connect(function(
                                                    )
                                                        Properties.DisplayProp(prop, i)
                                                    end)
                                                end
                                            end

                                            local beforeVisible = valueBox.Visible
                                            local inputFullName = inputProp and (inputProp.Class .. '.' .. inputProp.Name .. (inputProp.SubName or ''))

                                            if gName == inputFullName then
                                                nameFrame.BackgroundColor3 = Settings.Theme.ListSelection
                                                nameFrame.BackgroundTransparency = 0

                                                if typeData.Category == 'Class' or typeData.Category == 'Enum' or typeName == 'BrickColor' then
                                                    valueFrame.BackgroundColor3 = Settings.Theme.TextBox
                                                    valueFrame.BackgroundTransparency = 0
                                                    valueBox.Visible = true
                                                else
                                                    inputPropVisible = true

                                                    local scale = (scaleType == 0 and 0 or 0.5)
                                                    local offset = (scaleType == 0 and Properties.ViewWidth - scrollH.Index or 0)
                                                    local endOffset = 0

                                                    if typeName == 'Color3' or typeName == 'ColorSequence' then
                                                        offset = offset + 22
                                                    end
                                                    if typeName == 'NumberSequence' or typeName == 'ColorSequence' then
                                                        endOffset = 20
                                                    end

                                                    inputBox.Position = UDim2.new(scale, offset, 0, entry.Position.Y.Offset)
                                                    inputBox.Size = UDim2.new(1 - scale, 
-offset - endOffset - attributeOffset, 0, 22)
                                                    inputBox.Visible = true
                                                    valueBox.Visible = false
                                                end
                                            else
                                                nameFrame.BackgroundColor3 = Settings.Theme.Main1
                                                nameFrame.BackgroundTransparency = 1
                                                valueFrame.BackgroundColor3 = Settings.Theme.Main1
                                                valueFrame.BackgroundTransparency = 1
                                                valueBox.Visible = beforeVisible
                                            end
                                        end
                                        if prop.CategoryName or Properties.ExpandableTypes[prop.ValueType and prop.ValueType.Name] or Properties.ExpandableProps[gName] then
                                            if Lib.CheckMouseInGui(expand) then
                                                Main.MiscIcons:DisplayByKey(expand.Icon, expanded[gName] and 'Collapse_Over' or 'Expand_Over')
                                            else
                                                Main.MiscIcons:DisplayByKey(expand.Icon, expanded[gName] and 'Collapse' or 'Expand')
                                            end

                                            expand.Visible = true
                                        else
                                            expand.Visible = false
                                        end
                                    end

                                    entry.Visible = true
                                else
                                    entry.Visible = false
                                end
                            end

                            if not inputPropVisible then
                                inputBox.Visible = false
                            end

                            for i = maxEntries + 1, #propEntries do
                                propEntries[i].Gui:Destroy()

                                propEntries[i] = nil
                                checkboxes[i] = nil
                            end
                        end
                        Properties.SetProp = function(
                            prop,
                            val,
                            noupdate,
                            prevAttribute
                        )
                            local sList = Explorer.Selection.List
                            local propName = prop.Name
                            local subName = prop.SubName
                            local propClass = prop.Class
                            local typeData = prop.ValueType
                            local typeName = typeData.Name
                            local attributeName = prop.AttributeName
                            local rootTypeData = prop.RootType
                            local rootTypeName = rootTypeData and rootTypeData.Name
                            local fullName = prop.Class .. '.' .. prop.Name .. (prop.SubName or '')
                            local Vector3 = Vector3

                            for i = 1, #sList do
                                local node = sList[i]
                                local obj = node.Obj

                                if isa(obj, propClass) then
                                    pcall(function()
                                        local setVal = val
                                        local root

                                        if prop.IsAttribute then
                                            root = getAttribute(obj, attributeName)
                                        else
                                            root = obj[propName]
                                        end
                                        if prevAttribute then
                                            if prevAttribute.ValueType.Name == typeName then
                                                setVal = getAttribute(obj, prevAttribute.AttributeName) or setVal
                                            end

                                            setAttribute(obj, prevAttribute.AttributeName, nil)
                                        end
                                        if rootTypeName then
                                            if rootTypeName == 'Vector2' then
                                                setVal = Vector2.new((subName == '.X' and setVal) or root.X, (subName == '.Y' and setVal) or root.Y)
                                            elseif rootTypeName == 'Vector3' then
                                                setVal = Vector3.new((subName == '.X' and setVal) or root.X, (subName == '.Y' and setVal) or root.Y, (subName == '.Z' and setVal) or root.Z)
                                            elseif rootTypeName == 'UDim' then
                                                setVal = UDim.new((subName == '.Scale' and setVal) or root.Scale, (subName == '.Offset' and setVal) or root.Offset)
                                            elseif rootTypeName == 'UDim2' then
                                                local rootX, rootY = root.X, root.Y
                                                local X_UDim = (subName == '.X' and setVal) or UDim.new((subName == '.X.Scale' and setVal) or rootX.Scale, (subName == '.X.Offset' and setVal) or rootX.Offset)
                                                local Y_UDim = (subName == '.Y' and setVal) or UDim.new((subName == '.Y.Scale' and setVal) or rootY.Scale, (subName == '.Y.Offset' and setVal) or rootY.Offset)

                                                setVal = UDim2.new(X_UDim, Y_UDim)
                                            elseif rootTypeName == 'CFrame' then
                                                local rootPos, rootRight, rootUp, rootLook = root.Position, root.RightVector, root.UpVector, root.LookVector
                                                local pos = (subName == '.Position' and setVal) or Vector3.new((subName == '.Position.X' and setVal) or rootPos.X, (subName == '.Position.Y' and setVal) or rootPos.Y, (subName == '.Position.Z' and setVal) or rootPos.Z)
                                                local rightV = (subName == '.RightVector' and setVal) or Vector3.new((subName == '.RightVector.X' and setVal) or rootRight.X, (subName == '.RightVector.Y' and setVal) or rootRight.Y, (subName == '.RightVector.Z' and setVal) or rootRight.Z)
                                                local upV = (subName == '.UpVector' and setVal) or Vector3.new((subName == '.UpVector.X' and setVal) or rootUp.X, (subName == '.UpVector.Y' and setVal) or rootUp.Y, (subName == '.UpVector.Z' and setVal) or rootUp.Z)
                                                local lookV = (subName == '.LookVector' and setVal) or Vector3.new((subName == '.LookVector.X' and setVal) or rootLook.X, (subName == '.RightVector.Y' and setVal) or rootLook.Y, (subName == '.RightVector.Z' and setVal) or rootLook.Z)

                                                setVal = CFrame.fromMatrix(pos, rightV, upV, 
-lookV)
                                            elseif rootTypeName == 'Rect' then
                                                local rootMin, rootMax = root.Min, root.Max
                                                local min = Vector2.new((subName == '.Min.X' and setVal) or rootMin.X, (subName == '.Min.Y' and setVal) or rootMin.Y)
                                                local max = Vector2.new((subName == '.Max.X' and setVal) or rootMax.X, (subName == '.Max.Y' and setVal) or rootMax.Y)

                                                setVal = Rect.new(min, max)
                                            elseif rootTypeName == 'PhysicalProperties' then
                                                local rootProps = PhysicalProperties.new(obj.Material)
                                                local density = (subName == '.Density' and setVal) or (root and root.Density) or rootProps.Density
                                                local friction = (subName == '.Friction' and setVal) or (root and root.Friction) or rootProps.Friction
                                                local elasticity = (subName == '.Elasticity' and setVal) or (root and root.Elasticity) or rootProps.Elasticity
                                                local frictionWeight = (subName == '.FrictionWeight' and setVal) or (root and root.FrictionWeight) or rootProps.FrictionWeight
                                                local elasticityWeight = (subName == '.ElasticityWeight' and setVal) or (root and root.ElasticityWeight) or rootProps.ElasticityWeight

                                                setVal = PhysicalProperties.new(density, friction, elasticity, frictionWeight, elasticityWeight)
                                            elseif rootTypeName == 'Ray' then
                                                local rootOrigin, rootDirection = root.Origin, root.Direction
                                                local origin = (subName == '.Origin' and setVal) or Vector3.new((subName == '.Origin.X' and setVal) or rootOrigin.X, (subName == '.Origin.Y' and setVal) or rootOrigin.Y, (subName == '.Origin.Z' and setVal) or rootOrigin.Z)
                                                local direction = (subName == '.Direction' and setVal) or Vector3.new((subName == '.Direction.X' and setVal) or rootDirection.X, (subName == '.Direction.Y' and setVal) or rootDirection.Y, (subName == '.Direction.Z' and setVal) or rootDirection.Z)

                                                setVal = Ray.new(origin, direction)
                                            elseif rootTypeName == 'Faces' then
                                                local faces = {}
                                                local faceList = {
                                                    'Back',
                                                    'Bottom',
                                                    'Front',
                                                    'Left',
                                                    'Right',
                                                    'Top',
                                                }

                                                for _, face in pairs(faceList)do
                                                    local val

                                                    if subName == '.' .. face then
                                                        val = setVal
                                                    else
                                                        val = root[face]
                                                    end
                                                    if val then
                                                        faces[#faces + 1] = Enum.NormalId[face]
                                                    end
                                                end

                                                setVal = Faces.new(unpack(faces))
                                            elseif rootTypeName == 'Axes' then
                                                local axes = {}
                                                local axesList = {
                                                    'X',
                                                    'Y',
                                                    'Z',
                                                }

                                                for _, axe in pairs(axesList)do
                                                    local val

                                                    if subName == '.' .. axe then
                                                        val = setVal
                                                    else
                                                        val = root[axe]
                                                    end
                                                    if val then
                                                        axes[#axes + 1] = Enum.Axis[axe]
                                                    end
                                                end

                                                setVal = Axes.new(unpack(axes))
                                            elseif rootTypeName == 'NumberRange' then
                                                setVal = NumberRange.new(subName == '.Min' and setVal or root.Min, subName == '.Max' and setVal or root.Max)
                                            end
                                        end
                                        if typeName == 'PhysicalProperties' and setVal then
                                            setVal = root or PhysicalProperties.new(obj.Material)
                                        end
                                        if prop.IsAttribute then
                                            setAttribute(obj, attributeName, setVal)
                                        else
                                            obj[propName] = setVal
                                        end
                                    end)
                                end
                            end

                            if not noupdate then
                                Properties.ComputeConflicts(prop)
                            end
                        end
                        Properties.InitInputBox = function()
                            inputBox = create({
                                {
                                    1,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.14901961386204, 0.14901961386204, 0.14901961386204),
                                        BorderSizePixel = 0,
                                        Name = 'InputBox',
                                        Size = UDim2.new(0, 200, 0, 22),
                                        Visible = false,
                                        ZIndex = 2,
                                    },
                                },
                                {
                                    2,
                                    'TextBox',
                                    {
                                        BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                        BackgroundTransparency = 1,
                                        BorderColor3 = Color3.new(0.062745101749897, 0.51764708757401, 1),
                                        BorderSizePixel = 0,
                                        ClearTextOnFocus = false,
                                        Font = 3,
                                        Parent = {1},
                                        PlaceholderColor3 = Color3.new(0.69803923368454, 0.69803923368454, 0.69803923368454),
                                        Position = UDim2.new(0, 3, 0, 0),
                                        Size = UDim2.new(1, -6, 1, 0),
                                        Text = '',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                        TextXAlignment = 0,
                                        ZIndex = 2,
                                    },
                                },
                            })
                            inputTextBox = inputBox.TextBox
                            inputBox.BackgroundColor3 = Settings.Theme.TextBox
                            inputBox.Parent = Properties.Window.GuiElems.Content.List

                            inputTextBox.FocusLost:Connect(function()
                                if not inputProp then
                                    return
                                end

                                local prop = inputProp

                                inputProp = nil

                                local val = Properties.StringToValue(prop, inputTextBox.Text)

                                if val then
                                    Properties.SetProp(prop, val)
                                else
                                    Properties.Refresh()
                                end
                            end)
                            inputTextBox.Focused:Connect(function()
                                inputTextBox.SelectionStart = 1
                                inputTextBox.CursorPosition = #inputTextBox.Text + 1
                            end)
                            Lib.ViewportTextBox.convert(inputTextBox)
                        end
                        Properties.SetInputProp = function(
                            prop,
                            entryIndex,
                            special
                        )
                            local typeData = prop.ValueType
                            local typeName = typeData.Name
                            local fullName = prop.Class .. '.' .. prop.Name .. (prop.SubName or '')
                            local propObj = autoUpdateObjs[fullName]
                            local propVal = Properties.GetPropVal(prop, propObj)

                            if prop.Tags.ReadOnly then
                                return
                            end

                            inputProp = prop

                            if special then
                                if special == 'color' then
                                    if typeName == 'Color3' then
                                        inputTextBox.Text = propVal and Properties.ValueToString(prop, propVal) or ''

                                        Properties.DisplayColorEditor(prop, propVal)
                                    elseif typeName == 'BrickColor' then
                                        Properties.DisplayBrickColorEditor(prop, entryIndex, propVal)
                                    elseif typeName == 'ColorSequence' then
                                        inputTextBox.Text = propVal and Properties.ValueToString(prop, propVal) or ''

                                        Properties.DisplayColorSequenceEditor(prop, propVal)
                                    end
                                elseif special == 'right' then
                                    if typeName == 'NumberSequence' then
                                        inputTextBox.Text = propVal and Properties.ValueToString(prop, propVal) or ''

                                        Properties.DisplayNumberSequenceEditor(prop, propVal)
                                    elseif typeName == 'ColorSequence' then
                                        inputTextBox.Text = propVal and Properties.ValueToString(prop, propVal) or ''

                                        Properties.DisplayColorSequenceEditor(prop, propVal)
                                    end
                                end
                            else
                                if Properties.IsTextEditable(prop) then
                                    inputTextBox.Text = propVal and Properties.ValueToString(prop, propVal) or ''

                                    inputTextBox.CaptureFocus(inputTextBox)
                                elseif typeData.Category == 'Enum' then
                                    Properties.DisplayEnumDropdown(entryIndex)
                                elseif typeName == 'BrickColor' then
                                    Properties.DisplayBrickColorEditor(prop, entryIndex, propVal)
                                end
                            end

                            Properties.Refresh()
                        end
                        Properties.InitSearch = function()
                            local TweenService = service.TweenService
                            local SearchFrame = Properties.GuiElems.ToolBar.SearchFrame
                            local searchBox = SearchFrame.SearchBox
                            local TweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quint)
                            local Tweens = {
                                Start = TweenService.Create(TweenService, SearchFrame.UIStroke, TweenInfo, {
                                    Color = Color3.fromRGB(0, 120, 215),
                                }),
                                End = TweenService.Create(TweenService, SearchFrame.UIStroke, TweenInfo, {
                                    Color = Color3.fromRGB(42, 42, 42),
                                }),
                            }

                            Lib.ViewportTextBox.convert(searchBox)
                            searchBox.FocusLost:Connect(function()
                                Tweens.End:Play()
                            end)
                            searchBox.Focused:Connect(function()
                                Tweens.Start:Play()
                            end)
                            searchBox.GetPropertyChangedSignal(searchBox, 'Text'):Connect(function(
                            )
                                Properties.SearchText = searchBox.Text

                                Properties.Update()
                                Properties.Refresh()
                            end)
                        end
                        Properties.InitEntryStuff = function()
                            Properties.EntryTemplate = create({
                                {
                                    1,
                                    'TextButton',
                                    {
                                        AutoButtonColor = false,
                                        BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                        BorderColor3 = Color3.new(0.1294117718935, 0.1294117718935, 0.1294117718935),
                                        Font = 3,
                                        Name = 'Entry',
                                        Position = UDim2.new(0, 1, 0, 1),
                                        Size = UDim2.new(0, 250, 0, 22),
                                        Text = '',
                                        TextSize = 14,
                                    },
                                },
                                {
                                    2,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.04313725605607, 0.35294118523598, 0.68627452850342),
                                        BackgroundTransparency = 1,
                                        BorderColor3 = Color3.new(0.33725491166115, 0.49019610881805, 0.73725491762161),
                                        BorderSizePixel = 0,
                                        Name = 'NameFrame',
                                        Parent = {1},
                                        Position = UDim2.new(0, 20, 0, 0),
                                        Size = UDim2.new(1, -40, 1, 0),
                                    },
                                },
                                {
                                    3,
                                    'TextLabel',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        Font = 3,
                                        Name = 'PropName',
                                        Parent = {2},
                                        Position = UDim2.new(0, 2, 0, 0),
                                        Size = UDim2.new(1, -2, 1, 0),
                                        Text = 'Anchored',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                        TextTransparency = 0.10000000149012,
                                        TextTruncate = 1,
                                        TextXAlignment = 0,
                                    },
                                },
                                {
                                    4,
                                    'TextButton',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        ClipsDescendants = true,
                                        Font = 3,
                                        Name = 'Expand',
                                        Parent = {2},
                                        Position = UDim2.new(0, -20, 0, 1),
                                        Size = UDim2.new(0, 20, 0, 20),
                                        Text = '',
                                        TextSize = 14,
                                        Visible = false,
                                    },
                                },
                                {
                                    5,
                                    'ImageLabel',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        Image = 'rbxassetid://5642383285',
                                        ImageRectOffset = Vector2.new(144, 16),
                                        ImageRectSize = Vector2.new(16, 16),
                                        Name = 'Icon',
                                        Parent = {4},
                                        Position = UDim2.new(0, 2, 0, 2),
                                        ScaleType = 4,
                                        Size = UDim2.new(0, 16, 0, 16),
                                    },
                                },
                                {
                                    6,
                                    'TextButton',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        Font = 4,
                                        Name = 'ToggleAttributes',
                                        Parent = {2},
                                        Position = UDim2.new(1, -85, 0, 0),
                                        Size = UDim2.new(0, 85, 0, 22),
                                        Text = '[SETTING: OFF]',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                        TextTransparency = 0.10000000149012,
                                        Visible = false,
                                    },
                                },
                                {
                                    7,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.04313725605607, 0.35294118523598, 0.68627452850342),
                                        BackgroundTransparency = 1,
                                        BorderColor3 = Color3.new(0.33725491166115, 0.49019607901573, 0.73725491762161),
                                        BorderSizePixel = 0,
                                        Name = 'ValueFrame',
                                        Parent = {1},
                                        Position = UDim2.new(1, -100, 0, 0),
                                        Size = UDim2.new(0, 80, 1, 0),
                                    },
                                },
                                {
                                    8,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14117647707462),
                                        BorderColor3 = Color3.new(0.33725491166115, 0.49019610881805, 0.73725491762161),
                                        BorderSizePixel = 0,
                                        Name = 'Line',
                                        Parent = {7},
                                        Position = UDim2.new(0, -1, 0, 0),
                                        Size = UDim2.new(0, 1, 1, 0),
                                    },
                                },
                                {
                                    9,
                                    'TextButton',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        Font = 3,
                                        Name = 'ColorButton',
                                        Parent = {7},
                                        Size = UDim2.new(0, 20, 0, 22),
                                        Text = '',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                        Visible = false,
                                    },
                                },
                                {
                                    10,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BorderColor3 = Color3.new(0, 0, 0),
                                        Name = 'ColorPreview',
                                        Parent = {9},
                                        Position = UDim2.new(0, 5, 0, 6),
                                        Size = UDim2.new(0, 10, 0, 10),
                                    },
                                },
                                {
                                    11,
                                    'UIGradient',
                                    {
                                        Parent = {10},
                                    },
                                },
                                {
                                    12,
                                    'Frame',
                                    {
                                        BackgroundTransparency = 1,
                                        Name = 'EnumArrow',
                                        Parent = {7},
                                        Position = UDim2.new(1, -16, 0, 3),
                                        Size = UDim2.new(0, 16, 0, 16),
                                        Visible = false,
                                    },
                                },
                                {
                                    13,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                        BorderSizePixel = 0,
                                        Parent = {12},
                                        Position = UDim2.new(0, 8, 0, 9),
                                        Size = UDim2.new(0, 1, 0, 1),
                                    },
                                },
                                {
                                    14,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                        BorderSizePixel = 0,
                                        Parent = {12},
                                        Position = UDim2.new(0, 7, 0, 8),
                                        Size = UDim2.new(0, 3, 0, 1),
                                    },
                                },
                                {
                                    15,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                        BorderSizePixel = 0,
                                        Parent = {12},
                                        Position = UDim2.new(0, 6, 0, 7),
                                        Size = UDim2.new(0, 5, 0, 1),
                                    },
                                },
                                {
                                    16,
                                    'TextButton',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        Font = 3,
                                        Name = 'ValueBox',
                                        Parent = {7},
                                        Position = UDim2.new(0, 4, 0, 0),
                                        Size = UDim2.new(1, -8, 1, 0),
                                        Text = '',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                        TextTransparency = 0.10000000149012,
                                        TextTruncate = 1,
                                        TextXAlignment = 0,
                                    },
                                },
                                {
                                    17,
                                    'TextButton',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        Font = 3,
                                        Name = 'RightButton',
                                        Parent = {7},
                                        Position = UDim2.new(1, -20, 0, 0),
                                        Size = UDim2.new(0, 20, 0, 22),
                                        Text = '...',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                        Visible = false,
                                    },
                                },
                                {
                                    18,
                                    'TextButton',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        Font = 3,
                                        Name = 'SettingsButton',
                                        Parent = {7},
                                        Position = UDim2.new(1, -20, 0, 0),
                                        Size = UDim2.new(0, 20, 0, 22),
                                        Text = '',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                        Visible = false,
                                    },
                                },
                                {
                                    19,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        Name = 'SoundPreview',
                                        Parent = {7},
                                        Size = UDim2.new(1, 0, 1, 0),
                                        Visible = false,
                                    },
                                },
                                {
                                    20,
                                    'TextButton',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        Font = 3,
                                        Name = 'ControlButton',
                                        Parent = {19},
                                        Size = UDim2.new(0, 20, 0, 22),
                                        Text = '',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                    },
                                },
                                {
                                    21,
                                    'ImageLabel',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        Image = 'rbxassetid://5642383285',
                                        ImageRectOffset = Vector2.new(144, 16),
                                        ImageRectSize = Vector2.new(16, 16),
                                        Name = 'Icon',
                                        Parent = {20},
                                        Position = UDim2.new(0, 2, 0, 3),
                                        ScaleType = 4,
                                        Size = UDim2.new(0, 16, 0, 16),
                                    },
                                },
                                {
                                    22,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.3137255012989, 0.3137255012989, 0.3137255012989),
                                        BorderSizePixel = 0,
                                        Name = 'TimeLine',
                                        Parent = {19},
                                        Position = UDim2.new(0, 26, 0.5, -1),
                                        Size = UDim2.new(1, -34, 0, 2),
                                    },
                                },
                                {
                                    23,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.2352941185236, 0.2352941185236, 0.2352941185236),
                                        BorderColor3 = Color3.new(0.1294117718935, 0.1294117718935, 0.1294117718935),
                                        Name = 'Slider',
                                        Parent = {22},
                                        Position = UDim2.new(0, -4, 0, -8),
                                        Size = UDim2.new(0, 8, 0, 18),
                                    },
                                },
                                {
                                    24,
                                    'TextButton',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        Font = 3,
                                        Name = 'EditAttributeButton',
                                        Parent = {1},
                                        Position = UDim2.new(1, -20, 0, 0),
                                        Size = UDim2.new(0, 20, 0, 22),
                                        Text = '',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                    },
                                },
                                {
                                    25,
                                    'ImageLabel',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        Image = 'rbxassetid://5034718180',
                                        ImageTransparency = 0.20000000298023,
                                        Name = 'Icon',
                                        Parent = {24},
                                        Position = UDim2.new(0, 2, 0, 3),
                                        Size = UDim2.new(0, 16, 0, 16),
                                    },
                                },
                                {
                                    26,
                                    'TextButton',
                                    {
                                        AutoButtonColor = false,
                                        BackgroundColor3 = Color3.new(0.2352941185236, 0.2352941185236, 0.2352941185236),
                                        BorderSizePixel = 0,
                                        Font = 3,
                                        Name = 'RowButton',
                                        Parent = {1},
                                        Size = UDim2.new(1, 0, 1, 0),
                                        Text = 'Add Attribute',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                        TextTransparency = 0.10000000149012,
                                        Visible = false,
                                    },
                                },
                            })

                            local fullNameFrame = Lib.Frame.new()
                            local label = Lib.Label.new()

                            label.Parent = fullNameFrame.Gui
                            label.Position = UDim2.new(0, 2, 0, 0)
                            label.Size = UDim2.new(1, -4, 1, 0)
                            fullNameFrame.Visible = false
                            fullNameFrame.Parent = window.Gui
                            Properties.FullNameFrame = fullNameFrame
                            Properties.FullNameFrameAttach = Lib.AttachTo(fullNameFrame)
                        end
                        Properties.Init = function()
                            local guiItems = create({
                                {
                                    1,
                                    'Folder',
                                    {
                                        Name = 'Items',
                                    },
                                },
                                {
                                    2,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.20392157137394, 0.20392157137394, 0.20392157137394),
                                        BorderSizePixel = 0,
                                        Name = 'ToolBar',
                                        Parent = {1},
                                        Size = UDim2.new(1, 0, 0, 22),
                                    },
                                },
                                {
                                    3,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.14901961386204, 0.14901961386204, 0.14901961386204),
                                        BorderColor3 = Color3.new(0.1176470592618, 0.1176470592618, 0.1176470592618),
                                        BorderSizePixel = 0,
                                        Name = 'SearchFrame',
                                        Parent = {2},
                                        Position = UDim2.new(0, 3, 0, 1),
                                        Size = UDim2.new(1, -6, 0, 18),
                                    },
                                },
                                {
                                    4,
                                    'TextBox',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        ClearTextOnFocus = false,
                                        Font = 3,
                                        Name = 'SearchBox',
                                        Parent = {3},
                                        PlaceholderColor3 = Color3.new(0.39215689897537, 0.39215689897537, 0.39215689897537),
                                        PlaceholderText = 'Search properties',
                                        Position = UDim2.new(0, 4, 0, 0),
                                        Size = UDim2.new(1, -24, 0, 18),
                                        Text = '',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                        TextXAlignment = 0,
                                    },
                                },
                                {
                                    5,
                                    'UICorner',
                                    {
                                        CornerRadius = UDim.new(0, 2),
                                        Parent = {3},
                                    },
                                },
                                {
                                    6,
                                    'UIStroke',
                                    {
                                        Thickness = 1.4,
                                        Parent = {3},
                                        Color = Color3.fromRGB(42, 42, 42),
                                    },
                                },
                                {
                                    7,
                                    'TextButton',
                                    {
                                        AutoButtonColor = false,
                                        BackgroundColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        Font = 3,
                                        Name = 'Reset',
                                        Parent = {3},
                                        Position = UDim2.new(1, -17, 0, 1),
                                        Size = UDim2.new(0, 16, 0, 16),
                                        Text = '',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                    },
                                },
                                {
                                    8,
                                    'ImageLabel',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        Image = 'rbxassetid://5034718129',
                                        ImageColor3 = Color3.new(0.39215686917305, 0.39215686917305, 0.39215686917305),
                                        Parent = {7},
                                        Size = UDim2.new(0, 16, 0, 16),
                                    },
                                },
                                {
                                    9,
                                    'TextButton',
                                    {
                                        AutoButtonColor = false,
                                        BackgroundColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        Font = 3,
                                        Name = 'Refresh',
                                        Parent = {2},
                                        Position = UDim2.new(1, -20, 0, 1),
                                        Size = UDim2.new(0, 18, 0, 18),
                                        Text = '',
                                        TextColor3 = Color3.new(1, 1, 1),
                                        TextSize = 14,
                                        Visible = false,
                                    },
                                },
                                {
                                    10,
                                    'ImageLabel',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        Image = 'rbxassetid://5642310344',
                                        Parent = {9},
                                        Position = UDim2.new(0, 3, 0, 3),
                                        Size = UDim2.new(0, 12, 0, 12),
                                    },
                                },
                                {
                                    11,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                                        BorderSizePixel = 0,
                                        Name = 'ScrollCorner',
                                        Parent = {1},
                                        Position = UDim2.new(1, -16, 1, -16),
                                        Size = UDim2.new(0, 16, 0, 16),
                                        Visible = false,
                                    },
                                },
                                {
                                    12,
                                    'Frame',
                                    {
                                        BackgroundColor3 = Color3.new(1, 1, 1),
                                        BackgroundTransparency = 1,
                                        ClipsDescendants = true,
                                        Name = 'List',
                                        Parent = {1},
                                        Position = UDim2.new(0, 0, 0, 23),
                                        Size = UDim2.new(1, 0, 1, -23),
                                    },
                                },
                            })

                            categoryOrder = API.CategoryOrder

                            for category, _ in next, categoryOrder do
                                if not Properties.CollapsedCategories[category] then
                                    expanded['CAT_' .. category] = true
                                end
                            end

                            expanded['Sound.SoundId'] = true
                            window = Lib.Window.new()
                            Properties.Window = window

                            window.SetTitle(window, 'Properties')

                            toolBar = guiItems.ToolBar
                            propsFrame = guiItems.List
                            Properties.GuiElems.ToolBar = toolBar
                            Properties.GuiElems.PropsFrame = propsFrame

                            Properties.InitEntryStuff()
                            window.GuiElems.Main:GetPropertyChangedSignal('AbsoluteSize'):Connect(function(
                            )
                                if Properties.Window:IsContentVisible() then
                                    Properties.UpdateView()
                                    Properties.Refresh()
                                end
                            end)
                            window.OnActivate:Connect(function()
                                Properties.UpdateView()
                                Properties.Update()
                                Properties.Refresh()
                            end)
                            window.OnRestore:Connect(function()
                                Properties.UpdateView()
                                Properties.Update()
                                Properties.Refresh()
                            end)

                            scrollV = Lib.ScrollBar.new()
                            scrollV.WheelIncrement = 3
                            scrollV.Gui.Position = UDim2.new(1, -16, 0, 23)

                            scrollV.SetScrollFrame(scrollV, propsFrame)
                            scrollV.Scrolled:Connect(function()
                                Properties.Index = scrollV.Index

                                Properties.Refresh()
                            end)

                            scrollH = Lib.ScrollBar.new(true)
                            scrollH.Increment = 5
                            scrollH.WheelIncrement = 20
                            scrollH.Gui.Position = UDim2.new(0, 0, 1, -16)

                            scrollH.Scrolled:Connect(function()
                                Properties.Refresh()
                            end)

                            window.GuiElems.Line.Position = UDim2.new(0, 0, 0, 22)
                            toolBar.Parent = window.GuiElems.Content
                            propsFrame.Parent = window.GuiElems.Content
                            guiItems.ScrollCorner.Parent = window.GuiElems.Content
                            scrollV.Gui.Parent = window.GuiElems.Content
                            scrollH.Gui.Parent = window.GuiElems.Content

                            Properties.InitInputBox()
                            Properties.InitSearch()
                        end

                        return Properties
                    end

                    return {
                        InitDeps = initDeps,
                        InitAfterMain = initAfterMain,
                        Main = main,
                    }
                end,
                ScriptViewer = function()
                    local Main, Lib, Apps, Settings
                    local Explorer, Properties, ScriptViewer, Notebook
                    local API, RMD, env, service, plr, create, createSimple

                    local function initDeps(data)
                        Main = data.Main
                        Lib = data.Lib
                        Apps = data.Apps
                        Settings = data.Settings
                        API = data.API
                        RMD = data.RMD
                        env = data.env
                        service = data.service
                        plr = data.plr
                        create = data.create
                        createSimple = data.createSimple
                    end
                    local function initAfterMain()
                        Explorer = Apps.Explorer
                        Properties = Apps.Properties
                        ScriptViewer = Apps.ScriptViewer
                        Notebook = Apps.Notebook
                    end
                    local function main()
                        local ScriptViewer = {}
                        local window, codeFrame
                        local PreviousScr

                        ScriptViewer.ViewScript = function(scr)
                            local success, source = pcall(env.decompile, scr)

                            if not success or not source then
                                source, PreviousScr = ('-- DEX - %s failed to decompile %s').format(('-- DEX - %s failed to decompile %s'), env.executor, scr.ClassName), nil
                            else
                                PreviousScr = scr
                            end

                            codeFrame.SetText(codeFrame, source.gsub(source, '\0', '\\0'))
                            window.Show(window)
                        end
                        ScriptViewer.Init = function()
                            window = Lib.Window.new()

                            window.SetTitle(window, 'Script Viewer')
                            window.Resize(window, 500, 400)

                            ScriptViewer.Window = window
                            codeFrame = Lib.CodeFrame.new()
                            codeFrame.Frame.Position = UDim2.new(0, 0, 0, 20)
                            codeFrame.Frame.Size = UDim2.new(1, 0, 1, -20)
                            codeFrame.Frame.Parent = window.GuiElems.Content

                            local copy = Instance.new('TextButton', window.GuiElems.Content)

                            copy.BackgroundTransparency = 1
                            copy.Size = UDim2.new(0.5, 0, 0, 20)
                            copy.Text = 'Copy to Clipboard'
                            copy.TextColor3 = Color3.new(1, 1, 1)

                            copy.MouseButton1Click:Connect(function()
                                local source = codeFrame.GetText(codeFrame)

                                env.setclipboard(source)
                            end)

                            local save = Instance.new('TextButton', window.GuiElems.Content)

                            save.BackgroundTransparency = 1
                            save.Position = UDim2.new(0.35, 0, 0, 0)
                            save.Size = UDim2.new(0.3, 0, 0, 20)
                            save.Text = 'Save to File'
                            save.TextColor3 = Color3.new(1, 1, 1)

                            save.MouseButton1Click:Connect(function()
                                local source = codeFrame.GetText(codeFrame)
                                local filename = 'Place_' .. game.PlaceId .. '_Script_' .. os.time() .. '.txt'

                                env.writefile(filename, source)

                                if env.movefileas then
                                    env.movefileas(filename, '.txt')
                                end
                            end)

                            local dumpbtn = Instance.new('TextButton', window.GuiElems.Content)

                            dumpbtn.BackgroundTransparency = 1
                            dumpbtn.Position = UDim2.new(0.7, 0, 0, 0)
                            dumpbtn.Size = UDim2.new(0.3, 0, 0, 20)
                            dumpbtn.Text = 'Dump Functions'
                            dumpbtn.TextColor3 = Color3.new(1, 1, 1)

                            dumpbtn.MouseButton1Click:Connect(function()
                                if PreviousScr ~= nil then
                                    pcall(function()
                                        local getgc = getgc or get_gc_objects
                                        local getupvalues = (debug and debug.getupvalues) or getupvalues or getupvals
                                        local getconstants = (debug and debug.getconstants) or getconstants or getconsts
                                        local getinfo = (debug and (debug.getinfo or debug.info)) or getinfo
                                        local original = (
[[

-- // Function Dumper made by King.Kevin
-- // Script Path: %s

--[[]]).format((
[[

-- // Function Dumper made by King.Kevin
-- // Script Path: %s

--[[]]), PreviousScr.GetFullName(PreviousScr))
                                        local dump = original
                                        local functions, function_count, data_base = {}, 0, {}

                                        functions.add_to_dump = function(
                                            self,
                                            str,
                                            indentation,
                                            new_line
                                        )
                                            local new_line = new_line or true

                                            dump = dump .. ('%s%s%s').format(('%s%s%s'), string.rep('\t\t', indentation), tostring(str), new_line and '\n' or '')
                                        end
                                        functions.get_function_name = function(
                                            self,
                                            func
                                        )
                                            local n = getinfo(func).name

                                            return n ~= '' and n or 'Unknown Name'
                                        end
                                        functions.dump_table = function(
                                            self,
                                            input,
                                            indent,
                                            index
                                        )
                                            local indent = indent < 0 and 0 or indent

                                            functions.add_to_dump(functions, ('%s [%s] %s').format(('%s [%s] %s'), tostring(index), tostring(typeof(input)), tostring(input)), indent - 1)

                                            local count = 0

                                            for index, value in pairs(input)do
                                                count = count + 1

                                                if type(value) == 'function' then
                                                    functions.add_to_dump(functions, ('%d [function] = %s').format(('%d [function] = %s'), count, functions.get_function_name(functions, value)), indent)
                                                elseif type(value) == 'table' then
                                                    if not data_base[value] then
                                                        data_base[value] = true

                                                        functions.add_to_dump(functions, ('%d [table]:').format(('%d [table]:'), count), indent)
                                                        functions.dump_table(functions, value, indent + 1, index)
                                                    else
                                                        functions.add_to_dump(functions, ('%d [table] (Recursive table detected)').format(('%d [table] (Recursive table detected)'), count), indent)
                                                    end
                                                else
                                                    functions.add_to_dump(functions, ('%d [%s] = %s').format(('%d [%s] = %s'), count, tostring(typeof(value)), tostring(value)), indent)
                                                end
                                            end
                                        end
                                        functions.dump_function = function(
                                            self,
                                            input,
                                            indent
                                        )
                                            functions.add_to_dump(functions, ('\nFunction Dump: %s').format(('\nFunction Dump: %s'), functions.get_function_name(functions, input)), indent)
                                            functions.add_to_dump(functions, ('\nFunction Upvalues: %s').format(('\nFunction Upvalues: %s'), functions.get_function_name(functions, input)), indent)

                                            for index, upvalue in pairs(getupvalues(input))do
                                                if type(upvalue) == 'function' then
                                                    functions.add_to_dump(functions, ('%d [function] = %s').format(('%d [function] = %s'), index, functions.get_function_name(functions, upvalue)), indent + 1)
                                                elseif type(upvalue) == 'table' then
                                                    if not data_base[upvalue] then
                                                        data_base[upvalue] = true

                                                        functions.add_to_dump(functions, ('%d [table]:').format(('%d [table]:'), index), indent + 1)
                                                        functions.dump_table(functions, upvalue, indent + 2, index)
                                                    else
                                                        functions.add_to_dump(functions, ('%d [table] (Recursive table detected)').format(('%d [table] (Recursive table detected)'), index), indent + 1)
                                                    end
                                                else
                                                    functions.add_to_dump(functions, ('%d [%s] = %s').format(('%d [%s] = %s'), index, tostring(typeof(upvalue)), tostring(upvalue)), indent + 1)
                                                end
                                            end

                                            functions.add_to_dump(functions, ('\nFunction Constants: %s').format(('\nFunction Constants: %s'), functions.get_function_name(functions, input)), indent)

                                            for index, constant in pairs(getconstants(input))do
                                                if type(constant) == 'function' then
                                                    functions.add_to_dump(functions, ('%d [function] = %s').format(('%d [function] = %s'), index, functions.get_function_name(functions, constant)), indent + 1)
                                                elseif type(constant) == 'table' then
                                                    if not data_base[constant] then
                                                        data_base[constant] = true

                                                        functions.add_to_dump(functions, ('%d [table]:').format(('%d [table]:'), index), indent + 1)
                                                        functions.dump_table(functions, constant, indent + 2, index)
                                                    else
                                                        functions.add_to_dump(functions, ('%d [table] (Recursive table detected)').format(('%d [table] (Recursive table detected)'), index), indent + 1)
                                                    end
                                                else
                                                    functions.add_to_dump(functions, ('%d [%s] = %s').format(('%d [%s] = %s'), index, tostring(typeof(constant)), tostring(constant)), indent + 1)
                                                end
                                            end
                                        end

                                        for _, _function in pairs(getgc())do
                                            if typeof(_function) == 'function' and getfenv(_function).script and getfenv(_function).script == PreviousScr then
                                                functions.dump_function(functions, _function, 0)
                                                functions.add_to_dump(functions, '\n' .. ('=').rep(('='), 100), 0, false)
                                            end
                                        end

                                        local source = codeFrame.GetText(codeFrame)

                                        if dump ~= original then
                                            source = source .. dump .. ']]'
                                        end

                                        codeFrame.SetText(codeFrame, source)
                                    end)
                                end
                            end)
                        end

                        return ScriptViewer
                    end

                    return {
                        InitDeps = initDeps,
                        InitAfterMain = initAfterMain,
                        Main = main,
                    }
                end,
                Lib = function()
                    local Main, Lib, Apps, Settings
                    local Explorer, Properties, ScriptViewer, Notebook
                    local API, RMD, env, service, plr, create, createSimple

                    local function initDeps(data)
                        Main = data.Main
                        Lib = data.Lib
                        Apps = data.Apps
                        Settings = data.Settings
                        API = data.API
                        RMD = data.RMD
                        env = data.env
                        service = data.service
                        plr = data.plr
                        create = data.create
                        createSimple = data.createSimple
                    end
                    local function initAfterMain()
                        Explorer = Apps.Explorer
                        Properties = Apps.Properties
                        ScriptViewer = Apps.ScriptViewer
                        Notebook = Apps.Notebook
                    end
                    local function main()
                        local Lib = {}
                        local renderStepped = service.RunService.RenderStepped
                        local signalWait = renderStepped.wait
                        local PH = newproxy()
                        local SIGNAL = newproxy()

                        local function initObj(props, mt)
                            local type = type

                            local function copy(t)
                                local res = {}

                                for i, v in pairs(t)do
                                    if v == SIGNAL then
                                        res[i] = Lib.Signal.new()
                                    elseif type(v) == 'table' then
                                        res[i] = copy(v)
                                    else
                                        res[i] = v
                                    end
                                end

                                return res
                            end

                            local newObj = copy(props)

                            return setmetatable(newObj, mt)
                        end
                        local function getGuiMT(props, funcs)
                            return {
                                __index = function(self, ind)
                                    if not props[ind] then
                                        return funcs[ind] or self.Gui[ind]
                                    end
                                end,
                                __newindex = function(self, ind, val)
                                    if not props[ind] then
                                        self.Gui[ind] = val
                                    else
                                        rawset(self, ind, val)
                                    end
                                end,
                            }
                        end

                        Lib.FormatLuaString = (function()
                            local string = string
                            local gsub = string.gsub
                            local format = string.format
                            local char = string.char
                            local cleanTable = {
                                ['"'] = '\\"',
                                ['\\'] = '\\\\',
                            }

                            for i = 0, 31 do
                                cleanTable[char(i)] = '\\' .. format('%03d', i)
                            end
                            for i = 127, 255 do
                                cleanTable[char(i)] = '\\' .. format('%03d', i)
                            end

                            return function(str)
                                return gsub(str, '["\\\0-\31\127-\255]', cleanTable)
                            end
                        end)()
                        Lib.CheckMouseInGui = function(gui)
                            if gui == nil then
                                return false
                            end

                            local mouse = Main.Mouse
                            local guiPosition = gui.AbsolutePosition
                            local guiSize = gui.AbsoluteSize

                            return mouse.X >= guiPosition.X and mouse.X < guiPosition.X + guiSize.X and mouse.Y >= guiPosition.Y and mouse.Y < guiPosition.Y + guiSize.Y
                        end
                        Lib.IsShiftDown = function()
                            return service.UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) or service.UserInputService:IsKeyDown(Enum.KeyCode.RightShift)
                        end
                        Lib.IsCtrlDown = function()
                            return service.UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) or service.UserInputService:IsKeyDown(Enum.KeyCode.RightControl)
                        end
                        Lib.CreateArrow = function(size, num, dir)
                            local max = num
                            local arrowFrame = createSimple('Frame', {
                                BackgroundTransparency = 1,
                                Name = 'Arrow',
                                Size = UDim2.new(0, size, 0, size),
                            })

                            if dir == 'up' then
                                for i = 1, num do
                                    local newLine = createSimple('Frame', {
                                        BackgroundColor3 = Color3.new(0.8627450980392157, 0.8627450980392157, 0.8627450980392157),
                                        BorderSizePixel = 0,
                                        Position = UDim2.new(0, math.floor(size / 2) - (i - 1), 0, math.floor(size / 2) + i - math.floor(max / 2) - 1),
                                        Size = UDim2.new(0, i + (i - 1), 0, 1),
                                        Parent = arrowFrame,
                                    })
                                end

                                return arrowFrame
                            elseif dir == 'down' then
                                for i = 1, num do
                                    local newLine = createSimple('Frame', {
                                        BackgroundColor3 = Color3.new(0.8627450980392157, 0.8627450980392157, 0.8627450980392157),
                                        BorderSizePixel = 0,
                                        Position = UDim2.new(0, math.floor(size / 2) - (i - 1), 0, math.floor(size / 2) - i + math.floor(max / 2) + 1),
                                        Size = UDim2.new(0, i + (i - 1), 0, 1),
                                        Parent = arrowFrame,
                                    })
                                end

                                return arrowFrame
                            elseif dir == 'left' then
                                for i = 1, num do
                                    local newLine = createSimple('Frame', {
                                        BackgroundColor3 = Color3.new(0.8627450980392157, 0.8627450980392157, 0.8627450980392157),
                                        BorderSizePixel = 0,
                                        Position = UDim2.new(0, math.floor(size / 2) + i - math.floor(max / 2) - 1, 0, math.floor(size / 2) - (i - 1)),
                                        Size = UDim2.new(0, 1, 0, i + (i - 1)),
                                        Parent = arrowFrame,
                                    })
                                end

                                return arrowFrame
                            elseif dir == 'right' then
                                for i = 1, num do
                                    local newLine = createSimple('Frame', {
                                        BackgroundColor3 = Color3.new(0.8627450980392157, 0.8627450980392157, 0.8627450980392157),
                                        BorderSizePixel = 0,
                                        Position = UDim2.new(0, math.floor(size / 2) - i + math.floor(max / 2) + 1, 0, math.floor(size / 2) - (i - 1)),
                                        Size = UDim2.new(0, 1, 0, i + (i - 1)),
                                        Parent = arrowFrame,
                                    })
                                end

                                return arrowFrame
                            end

                            error('r u ok')
                        end
                        Lib.ParseXML = (function()
                            local func = function()
                                local string, print, pairs = string, print, pairs
                                local trim = function(s)
                                    local from = s.match(s, '^%s*()')

                                    return from > #s and '' or s.match(s, '.*%S', from)
                                end
                                local gtchar = string.byte('>', 1)
                                local slashchar = string.byte('/', 1)
                                local D = string.byte('D', 1)
                                local E = string.byte('E', 1)

                                parse = function(s, evalEntities)
                                    s = s.gsub(s, '<!%-%-(.-)%-%->', '')

                                    local entities, tentities = {}

                                    if evalEntities then
                                        local pos = s.find(s, '<[_%w]')

                                        if pos then
                                            s.sub(s, 1, pos):gsub('<!ENTITY%s+([_%w]+)%s+(.)(.-)%2', function(
                                                name,
                                                q,
                                                entity
                                            )
                                                entities[#entities + 1] = {
                                                    name = name,
                                                    value = entity,
                                                }
                                            end)

                                            tentities = createEntityTable(entities)
                                            s = replaceEntities(s.sub(s, pos), tentities)
                                        end
                                    end

                                    local t, l = {}, {}
                                    local addtext = function(txt)
                                        txt = txt.match(txt, '^%s*(.*%S)') or ''

                                        if #txt ~= 0 then
                                            t[#t + 1] = {text = txt}
                                        end
                                    end

                                    s.gsub(s, '<([?!/]?)([-:_%w]+)%s*(/?>?)([^<]*)', function(
                                        type,
                                        name,
                                        closed,
                                        txt
                                    )
                                        if #type == 0 then
                                            local a = {}

                                            if #closed == 0 then
                                                local len = 0

                                                for all, aname, _, value, starttxt in string.gmatch(txt, '(.-([-_%w]+)%s*=%s*(.)(.-)%3%s*(/?>?))')do
                                                    len = len + #all
                                                    a[aname] = value

                                                    if #starttxt ~= 0 then
                                                        txt = txt.sub(txt, len + 1)
                                                        closed = starttxt

                                                        break
                                                    end
                                                end
                                            end

                                            t[#t + 1] = {
                                                tag = name,
                                                attrs = a,
                                                children = {},
                                            }

                                            if closed.byte(closed, 1) ~= slashchar then
                                                l[#l + 1] = t
                                                t = t[#t].children
                                            end

                                            addtext(txt)
                                        elseif '/' == type then
                                            t = l[#l]
                                            l[#l] = nil

                                            addtext(txt)
                                        elseif '!' == type then
                                            if E == name.byte(name, 1) then
                                                txt.gsub(txt, '([_%w]+)%s+(.)(.-)%2', function(
                                                    name,
                                                    q,
                                                    entity
                                                )
                                                    entities[#entities + 1] = {
                                                        name = name,
                                                        value = entity,
                                                    }
                                                end, 1)
                                            end
                                        end
                                    end)

                                    return {
                                        children = t,
                                        entities = entities,
                                        tentities = tentities,
                                    }
                                end
                                parseText = function(txt)
                                    return parse(txt)
                                end
                                defaultEntityTable = function()
                                    return {
                                        quot = '"',
                                        apos = "'",
                                        lt = '<',
                                        gt = '>',
                                        amp = '&',
                                        tab = '\t',
                                        nbsp = ' ',
                                    }
                                end
                                replaceEntities = function(s, entities)
                                    return s.gsub(s, '&([^;]+);', entities)
                                end
                                createEntityTable = function(
                                    docEntities,
                                    resultEntities
                                )
                                    entities = resultEntities or defaultEntityTable()

                                    for _, e in pairs(docEntities)do
                                        e.value = replaceEntities(e.value, entities)
                                        entities[e.name] = e.value
                                    end

                                    return entities
                                end

                                return parseText
                            end
                            local newEnv = setmetatable({}, {
                                __index = getfenv(),
                            })

                            setfenv(func, newEnv)

                            return func()
                        end)()
                        Lib.FastWait = function(s)
                            if not s then
                                return signalWait(renderStepped)
                            end

                            local start = tick()

                            while tick() - start < s do
                                signalWait(renderStepped)
                            end
                        end
                        Lib.ButtonAnim = function(button, data)
                            local holding = false
                            local disabled = false
                            local mode = data and data.Mode or 1
                            local control = {}

                            if mode == 2 then
                                local lerpTo = data.LerpTo or Color3.new(0, 0, 0)
                                local delta = data.LerpDelta or 0.2

                                control.StartColor = data.StartColor or button.BackgroundColor3
                                control.PressColor = data.PressColor or control.StartColor:lerp(lerpTo, delta)
                                control.HoverColor = data.HoverColor or control.StartColor:lerp(control.PressColor, 0.6)
                                control.OutlineColor = data.OutlineColor
                            end

                            button.InputBegan:Connect(function(input)
                                if disabled then
                                    return
                                end
                                if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                    if not holding then
                                        if mode == 1 then
                                            button.BackgroundTransparency = 0.4
                                        elseif mode == 2 then
                                            button.BackgroundColor3 = control.HoverColor
                                        end
                                    end
                                elseif input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                    holding = true

                                    if mode == 1 then
                                        button.BackgroundTransparency = 0
                                    elseif mode == 2 then
                                        button.BackgroundColor3 = control.PressColor

                                        if control.OutlineColor then
                                            button.BorderColor3 = control.PressColor
                                        end
                                    end
                                end
                            end)
                            button.InputEnded:Connect(function(input)
                                if disabled then
                                    return
                                end
                                if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                    if not holding then
                                        if mode == 1 then
                                            button.BackgroundTransparency = 1
                                        elseif mode == 2 then
                                            button.BackgroundColor3 = control.StartColor
                                        end
                                    end
                                elseif input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                    holding = false

                                    if mode == 1 then
                                        button.BackgroundTransparency = Lib.CheckMouseInGui(button) and 0.4 or 1
                                    elseif mode == 2 then
                                        button.BackgroundColor3 = Lib.CheckMouseInGui(button) and control.HoverColor or control.StartColor

                                        if control.OutlineColor then
                                            button.BorderColor3 = control.OutlineColor
                                        end
                                    end
                                end
                            end)

                            control.Disable = function()
                                disabled = true
                                holding = false

                                if mode == 1 then
                                    button.BackgroundTransparency = 1
                                elseif mode == 2 then
                                    button.BackgroundColor3 = control.StartColor
                                end
                            end
                            control.Enable = function()
                                disabled = false
                            end

                            return control
                        end
                        Lib.FindAndRemove = function(t, item)
                            local pos = table.find(t, item)

                            if pos then
                                table.remove(t, pos)
                            end
                        end
                        Lib.AttachTo = function(obj, data)
                            local target, posOffX, posOffY, sizeOffX, sizeOffY, resize, con
                            local disabled = false

                            local function update()
                                if not obj or not target then
                                    return
                                end

                                local targetPos = target.AbsolutePosition
                                local targetSize = target.AbsoluteSize

                                obj.Position = UDim2.new(0, targetPos.X + posOffX, 0, targetPos.Y + posOffY)

                                if resize then
                                    obj.Size = UDim2.new(0, targetSize.X + sizeOffX, 0, targetSize.Y + sizeOffY)
                                end
                            end
                            local function setup(o, data)
                                obj = o
                                data = data or {}
                                target = data.Target
                                posOffX = data.PosOffX or 0
                                posOffY = data.PosOffY or 0
                                sizeOffX = data.SizeOffX or 0
                                sizeOffY = data.SizeOffY or 0
                                resize = data.Resize or false

                                if con then
                                    con.Disconnect(con)

                                    con = nil
                                end
                                if target then
                                    con = target.Changed:Connect(function(prop)
                                        if not disabled and prop == 'AbsolutePosition' or prop == 'AbsoluteSize' then
                                            update()
                                        end
                                    end)
                                end

                                update()
                            end

                            setup(obj, data)

                            return {
                                SetData = function(obj, data)
                                    setup(obj, data)
                                end,
                                Enable = function()
                                    disabled = false

                                    update()
                                end,
                                Disable = function()
                                    disabled = true
                                end,
                                Destroy = function()
                                    con.Disconnect(con)

                                    con = nil
                                end,
                            }
                        end
                        Lib.ProtectedGuis = {}
                        Lib.ShowGui = function(gui)
                            if env.gethui then
                                gui.Parent = env.gethui()
                            elseif env.protectgui then
                                env.protectgui(gui)

                                gui.Parent = Main.GuiHolder
                            else
                                gui.Parent = Main.GuiHolder
                            end
                        end
                        Lib.ColorToBytes = function(col)
                            local round = math.round

                            return string.format('%d, %d, %d', round(col.r * 255), round(col.g * 255), round(col.b * 255))
                        end
                        Lib.ReadFile = function(filename)
                            if not env.readfile then
                                return
                            end

                            local s, contents = pcall(env.readfile, filename)

                            if s and contents then
                                return contents
                            end
                        end
                        Lib.DeferFunc = function(f, ...)
                            signalWait(renderStepped)

                            return f(...)
                        end
                        Lib.LoadCustomAsset = function(filepath)
                            if not env.getcustomasset or not env.isfile or not env.isfile(filepath) then
                                return
                            end

                            return env.getcustomasset(filepath)
                        end
                        Lib.FetchCustomAsset = function(url, filepath)
                            if not env.writefile then
                                return
                            end

                            local s, data = pcall(oldgame.HttpGet, game, url)

                            if not s then
                                return
                            end

                            env.writefile(filepath, data)

                            return Lib.LoadCustomAsset(filepath)
                        end
                        Lib.Signal = (function()
                            local funcs = {}
                            local disconnect = function(con)
                                local pos = table.find(con.Signal.Connections, con)

                                if pos then
                                    table.remove(con.Signal.Connections, pos)
                                end
                            end

                            funcs.Connect = function(self, func)
                                if type(func) ~= 'function' then
                                    error('Attempt to connect a non-function')
                                end

                                local con = {
                                    Signal = self,
                                    Func = func,
                                    Disconnect = disconnect,
                                }

                                self.Connections[#self.Connections + 1] = con

                                return con
                            end
                            funcs.Fire = function(self, ...)
                                for i, v in next, self.Connections do
                                    xpcall(coroutine.wrap(v.Func), function(e)
                                        warn(e .. '\n' .. debug.traceback())
                                    end, ...)
                                end
                            end

                            local mt = {
                                __index = funcs,
                                __tostring = function(self)
                                    return 'Signal: ' .. tostring(#self.Connections) .. ' Connections'
                                end,
                            }

                            local function new()
                                local obj = {}

                                obj.Connections = {}

                                return setmetatable(obj, mt)
                            end

                            return {new = new}
                        end)()
                        Lib.Set = (function()
                            local funcs = {}

                            funcs.Add = function(self, obj)
                                if self.Map[obj] then
                                    return
                                end

                                local list = self.List

                                list[#list + 1] = obj
                                self.Map[obj] = true

                                self.Changed:Fire()
                            end
                            funcs.AddTable = function(self, t)
                                local changed
                                local list, map = self.List, self.Map

                                for i = 1, #t do
                                    local elem = t[i]

                                    if not map[elem] then
                                        list[#list + 1] = elem
                                        map[elem] = true
                                        changed = true
                                    end
                                end

                                if changed then
                                    self.Changed:Fire()
                                end
                            end
                            funcs.Remove = function(self, obj)
                                if not self.Map[obj] then
                                    return
                                end

                                local list = self.List
                                local pos = table.find(list, obj)

                                if pos then
                                    table.remove(list, pos)
                                end

                                self.Map[obj] = nil

                                self.Changed:Fire()
                            end
                            funcs.RemoveTable = function(self, t)
                                local changed
                                local list, map = self.List, self.Map
                                local removeSet = {}

                                for i = 1, #t do
                                    local elem = t[i]

                                    map[elem] = nil
                                    removeSet[elem] = true
                                end
                                for i = #list, 1, -1 do
                                    local elem = list[i]

                                    if removeSet[elem] then
                                        table.remove(list, i)

                                        changed = true
                                    end
                                end

                                if changed then
                                    self.Changed:Fire()
                                end
                            end
                            funcs.Set = function(self, obj)
                                if #self.List == 1 and self.List[1] == obj then
                                    return
                                end

                                self.List = {obj}
                                self.Map = {[obj] = true}

                                self.Changed:Fire()
                            end
                            funcs.SetTable = function(self, t)
                                local newList, newMap = {}, {}

                                self.List, self.Map = newList, newMap

                                table.move(t, 1, #t, 1, newList)

                                for i = 1, #t do
                                    newMap[t[i] ] = true
                                end

                                self.Changed:Fire()
                            end
                            funcs.Clear = function(self)
                                if #self.List == 0 then
                                    return
                                end

                                self.List = {}
                                self.Map = {}

                                self.Changed:Fire()
                            end

                            local mt = {__index = funcs}

                            local function new()
                                local obj = setmetatable({
                                    List = {},
                                    Map = {},
                                    Changed = Lib.Signal.new(),
                                }, mt)

                                return obj
                            end

                            return {new = new}
                        end)()
                        Lib.IconMap = (function()
                            local funcs = {}
                            local _MapId, _Icons = (483448923), {
                                Accessory = 32,
                                Accoutrement = 32,
                                AdService = 73,
                                Animation = 60,
                                AnimationController = 60,
                                AnimationTrack = 60,
                                Animator = 60,
                                ArcHandles = 56,
                                AssetService = 72,
                                Attachment = 34,
                                Backpack = 20,
                                BadgeService = 75,
                                BallSocketConstraint = 89,
                                BillboardGui = 64,
                                BinaryStringValue = 4,
                                BindableEvent = 67,
                                BindableFunction = 66,
                                BlockMesh = 8,
                                BloomEffect = 90,
                                BlurEffect = 90,
                                BodyAngularVelocity = 14,
                                BodyForce = 14,
                                BodyGyro = 14,
                                BodyPosition = 14,
                                BodyThrust = 14,
                                BodyVelocity = 14,
                                BoolValue = 4,
                                BoxHandleAdornment = 54,
                                BrickColorValue = 4,
                                Camera = 5,
                                CFrameValue = 4,
                                CharacterMesh = 60,
                                Chat = 33,
                                ClickDetector = 41,
                                CollectionService = 30,
                                Color3Value = 4,
                                ColorCorrectionEffect = 90,
                                ConeHandleAdornment = 54,
                                Configuration = 58,
                                ContentProvider = 72,
                                ContextActionService = 41,
                                CoreGui = 46,
                                CoreScript = 18,
                                CornerWedgePart = 1,
                                CustomEvent = 4,
                                CustomEventReceiver = 4,
                                CylinderHandleAdornment = 54,
                                CylinderMesh = 8,
                                CylindricalConstraint = 89,
                                Debris = 30,
                                Decal = 7,
                                Dialog = 62,
                                DialogChoice = 63,
                                DoubleConstrainedValue = 4,
                                Explosion = 36,
                                FileMesh = 8,
                                Fire = 61,
                                Flag = 38,
                                FlagStand = 39,
                                FloorWire = 4,
                                Folder = 70,
                                ForceField = 37,
                                Frame = 48,
                                GamePassService = 19,
                                Glue = 34,
                                GuiButton = 52,
                                GuiMain = 47,
                                GuiService = 47,
                                Handles = 53,
                                HapticService = 84,
                                Hat = 45,
                                HingeConstraint = 89,
                                Hint = 33,
                                HopperBin = 22,
                                HttpService = 76,
                                Humanoid = 9,
                                ImageButton = 52,
                                ImageLabel = 49,
                                InsertService = 72,
                                IntConstrainedValue = 4,
                                IntValue = 4,
                                JointInstance = 34,
                                JointsService = 34,
                                Keyframe = 60,
                                KeyframeSequence = 60,
                                KeyframeSequenceProvider = 60,
                                Lighting = 13,
                                LineHandleAdornment = 54,
                                LocalScript = 18,
                                LogService = 87,
                                MarketplaceService = 46,
                                Message = 33,
                                Model = 2,
                                ModuleScript = 71,
                                Motor = 34,
                                Motor6D = 34,
                                MoveToConstraint = 89,
                                NegateOperation = 78,
                                NetworkClient = 16,
                                NetworkReplicator = 29,
                                NetworkServer = 15,
                                NumberValue = 4,
                                ObjectValue = 4,
                                Pants = 44,
                                ParallelRampPart = 1,
                                Part = 1,
                                ParticleEmitter = 69,
                                PartPairLasso = 57,
                                PathfindingService = 37,
                                Platform = 35,
                                Player = 12,
                                PlayerGui = 46,
                                Players = 21,
                                PlayerScripts = 82,
                                PointLight = 13,
                                PointsService = 83,
                                Pose = 60,
                                PrismaticConstraint = 89,
                                PrismPart = 1,
                                PyramidPart = 1,
                                RayValue = 4,
                                ReflectionMetadata = 86,
                                ReflectionMetadataCallbacks = 86,
                                ReflectionMetadataClass = 86,
                                ReflectionMetadataClasses = 86,
                                ReflectionMetadataEnum = 86,
                                ReflectionMetadataEnumItem = 86,
                                ReflectionMetadataEnums = 86,
                                ReflectionMetadataEvents = 86,
                                ReflectionMetadataFunctions = 86,
                                ReflectionMetadataMember = 86,
                                ReflectionMetadataProperties = 86,
                                ReflectionMetadataYieldFunctions = 86,
                                RemoteEvent = 80,
                                RemoteFunction = 79,
                                ReplicatedFirst = 72,
                                ReplicatedStorage = 72,
                                RightAngleRampPart = 1,
                                RocketPropulsion = 14,
                                RodConstraint = 89,
                                RopeConstraint = 89,
                                Rotate = 34,
                                RotateP = 34,
                                RotateV = 34,
                                RunService = 66,
                                ScreenGui = 47,
                                Script = 6,
                                ScrollingFrame = 48,
                                Seat = 35,
                                Selection = 55,
                                SelectionBox = 54,
                                SelectionPartLasso = 57,
                                SelectionPointLasso = 57,
                                SelectionSphere = 54,
                                ServerScriptService = 0,
                                ServerStorage = 74,
                                Shirt = 43,
                                ShirtGraphic = 40,
                                SkateboardPlatform = 35,
                                Sky = 28,
                                SlidingBallConstraint = 89,
                                Smoke = 59,
                                Snap = 34,
                                Sound = 11,
                                SoundService = 31,
                                Sparkles = 42,
                                SpawnLocation = 25,
                                SpecialMesh = 8,
                                SphereHandleAdornment = 54,
                                SpotLight = 13,
                                SpringConstraint = 89,
                                StarterCharacterScripts = 82,
                                StarterGear = 20,
                                StarterGui = 46,
                                StarterPack = 20,
                                StarterPlayer = 88,
                                StarterPlayerScripts = 82,
                                Status = 2,
                                StringValue = 4,
                                SunRaysEffect = 90,
                                SurfaceGui = 64,
                                SurfaceLight = 13,
                                SurfaceSelection = 55,
                                Team = 24,
                                Teams = 23,
                                TeleportService = 81,
                                Terrain = 65,
                                TerrainRegion = 65,
                                TestService = 68,
                                TextBox = 51,
                                TextButton = 51,
                                TextLabel = 50,
                                Texture = 10,
                                TextureTrail = 4,
                                Tool = 17,
                                TouchTransmitter = 37,
                                TrussPart = 1,
                                UnionOperation = 77,
                                UserInputService = 84,
                                Vector3Value = 4,
                                VehicleSeat = 35,
                                VelocityMotor = 34,
                                WedgePart = 1,
                                Weld = 34,
                                Workspace = 19,
                            }

                            funcs.ExplorerIcons = {
                                MapId = _MapId,
                                Icons = _Icons,
                            }
                            funcs.GetLabel = function(self)
                                local label = Instance.new('ImageLabel')

                                self.SetupLabel(self, label)

                                return label
                            end
                            funcs.SetupLabel = function(self, obj)
                                obj.BackgroundTransparency = 1
                                obj.ImageRectOffset = Vector2.new(0, 0)
                                obj.ImageRectSize = Vector2.new(self.IconSizeX, self.IconSizeY)
                                obj.ScaleType = Enum.ScaleType.Crop
                                obj.Size = UDim2.new(0, self.IconSizeX, 0, self.IconSizeY)
                            end
                            funcs.Display = function(self, obj, index)
                                obj.Image = self.MapId

                                if not self.NumX then
                                    obj.ImageRectOffset = Vector2.new(self.IconSizeX * index, 0)
                                else
                                    obj.ImageRectOffset = Vector2.new(self.IconSizeX * (index % self.NumX), self.IconSizeY * math.floor(index / self.NumX))
                                end
                            end
                            funcs.DisplayByKey = function(self, obj, key)
                                if self.IndexDict[key] then
                                    self.Display(self, obj, self.IndexDict[key])
                                else
                                    local rmdEntry = RMD.Classes[obj.ClassName]

                                    Explorer.ClassIcons:Display(obj, rmdEntry and rmdEntry.ExplorerImageIndex or 0)
                                end
                            end
                            funcs.IconDehash = function(self, _id)
                                return math.floor(_id / 14 % 14), math.floor(_id % 14)
                            end
                            funcs.GetExplorerIcon = function(self, obj, index)
                                index = (self.ExplorerIcons.Icons[index] or 0)

                                local row, col = self.IconDehash(self, index)
                                local MapSize = Vector2.new(256, 256)
                                local pad, border = 2, 1
                                local IconSize = 16

                                obj.Position = UDim2.new(-col - (pad * (col + 1) + border) / IconSize, 0, 
-row - (pad * (row + 1) + border) / IconSize, 0)
                                obj.Size = UDim2.new(MapSize.X / IconSize, 0, MapSize.Y / IconSize, 0)
                            end
                            funcs.DisplayExplorerIcons = function(
                                self,
                                Frame,
                                index
                            )
                                if Frame.FindFirstChild(Frame, 'IconMap') then
                                    self.GetExplorerIcon(self, Frame.IconMap, index)
                                else
                                    Frame.ClipsDescendants = true

                                    local obj = Instance.new('ImageLabel', Frame)

                                    obj.BackgroundTransparency = 1
                                    obj.Image = ('http://www.roblox.com/asset/?id=' .. (self.ExplorerIcons.MapId))
                                    obj.Name = 'IconMap'

                                    self.GetExplorerIcon(self, obj, index)
                                end
                            end
                            funcs.SetDict = function(self, dict)
                                self.IndexDict = dict
                            end

                            local mt = {}

                            mt.__index = funcs

                            local function new(
                                mapId,
                                mapSizeX,
                                mapSizeY,
                                iconSizeX,
                                iconSizeY
                            )
                                local obj = setmetatable({
                                    MapId = mapId,
                                    MapSizeX = mapSizeX,
                                    MapSizeY = mapSizeY,
                                    IconSizeX = iconSizeX,
                                    IconSizeY = iconSizeY,
                                    NumX = mapSizeX / iconSizeX,
                                    IndexDict = {},
                                }, mt)

                                return obj
                            end
                            local function newLinear(
                                mapId,
                                iconSizeX,
                                iconSizeY
                            )
                                local obj = setmetatable({
                                    MapId = mapId,
                                    IconSizeX = iconSizeX,
                                    IconSizeY = iconSizeY,
                                    IndexDict = {},
                                }, mt)

                                return obj
                            end

                            return {
                                new = new,
                                newLinear = newLinear,
                            }
                        end)()
                        Lib.ScrollBar = (function()
                            local funcs = {}
                            local user = service.UserInputService
                            local mouse = plr.GetMouse(plr)
                            local checkMouseInGui = Lib.CheckMouseInGui
                            local createArrow = Lib.CreateArrow

                            local function drawThumb(self)
                                local total = self.TotalSpace
                                local visible = self.VisibleSpace
                                local index = self.Index
                                local scrollThumb = self.GuiElems.ScrollThumb
                                local scrollThumbFrame = self.GuiElems.ScrollThumbFrame

                                if not (self.CanScrollUp(self) or self.CanScrollDown(self)) then
                                    scrollThumb.Visible = false
                                else
                                    scrollThumb.Visible = true
                                end
                                if self.Horizontal then
                                    scrollThumb.Size = UDim2.new(visible / total, 0, 1, 0)

                                    if scrollThumb.AbsoluteSize.X < 16 then
                                        scrollThumb.Size = UDim2.new(0, 16, 1, 0)
                                    end

                                    local fs = scrollThumbFrame.AbsoluteSize.X
                                    local bs = scrollThumb.AbsoluteSize.X

                                    scrollThumb.Position = UDim2.new(self.GetScrollPercent(self) * (fs - bs) / fs, 0, 0, 0)
                                else
                                    scrollThumb.Size = UDim2.new(1, 0, visible / total, 0)

                                    if scrollThumb.AbsoluteSize.Y < 16 then
                                        scrollThumb.Size = UDim2.new(1, 0, 0, 16)
                                    end

                                    local fs = scrollThumbFrame.AbsoluteSize.Y
                                    local bs = scrollThumb.AbsoluteSize.Y

                                    scrollThumb.Position = UDim2.new(0, 0, self.GetScrollPercent(self) * (fs - bs) / fs, 0)
                                end
                            end
                            local function createFrame(self)
                                local newFrame = createSimple('Frame', {
                                    Style = 0,
                                    Active = true,
                                    AnchorPoint = Vector2.new(0, 0),
                                    BackgroundColor3 = Color3.new(0.35294118523598, 0.35294118523598, 0.35294118523598),
                                    BackgroundTransparency = 0,
                                    BorderColor3 = Color3.new(0.10588236153126, 0.16470588743687, 0.20784315466881),
                                    BorderSizePixel = 0,
                                    ClipsDescendants = false,
                                    Draggable = false,
                                    Position = UDim2.new(1, -16, 0, 0),
                                    Rotation = 0,
                                    Selectable = false,
                                    Size = UDim2.new(0, 16, 1, 0),
                                    SizeConstraint = 0,
                                    Visible = true,
                                    ZIndex = 1,
                                    Name = 'ScrollBar',
                                })
                                local button1, button2

                                if self.Horizontal then
                                    newFrame.Size = UDim2.new(1, 0, 0, 16)
                                    button1 = createSimple('ImageButton', {
                                        Parent = newFrame,
                                        Name = 'Left',
                                        Size = UDim2.new(0, 16, 0, 16),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        AutoButtonColor = false,
                                    })
                                    createArrow(16, 4, 'left').Parent = button1
                                    button2 = createSimple('ImageButton', {
                                        Parent = newFrame,
                                        Name = 'Right',
                                        Position = UDim2.new(1, -16, 0, 0),
                                        Size = UDim2.new(0, 16, 0, 16),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        AutoButtonColor = false,
                                    })
                                    createArrow(16, 4, 'right').Parent = button2
                                else
                                    newFrame.Size = UDim2.new(0, 16, 1, 0)
                                    button1 = createSimple('ImageButton', {
                                        Parent = newFrame,
                                        Name = 'Up',
                                        Size = UDim2.new(0, 16, 0, 16),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        AutoButtonColor = false,
                                    })
                                    createArrow(16, 4, 'up').Parent = button1
                                    button2 = createSimple('ImageButton', {
                                        Parent = newFrame,
                                        Name = 'Down',
                                        Position = UDim2.new(0, 0, 1, -16),
                                        Size = UDim2.new(0, 16, 0, 16),
                                        BackgroundTransparency = 1,
                                        BorderSizePixel = 0,
                                        AutoButtonColor = false,
                                    })
                                    createArrow(16, 4, 'down').Parent = button2
                                end

                                local scrollThumbFrame = createSimple('ImageButton', {
                                    BackgroundTransparency = 1,
                                    Parent = newFrame,
                                })

                                if self.Horizontal then
                                    scrollThumbFrame.Position = UDim2.new(0, 16, 0, 0)
                                    scrollThumbFrame.Size = UDim2.new(1, -32, 1, 0)
                                else
                                    scrollThumbFrame.Position = UDim2.new(0, 0, 0, 16)
                                    scrollThumbFrame.Size = UDim2.new(1, 0, 1, -32)
                                end

                                local scrollThumb = createSimple('Frame', {
                                    BackgroundColor3 = Color3.new(0.47058823529411764, 0.47058823529411764, 0.47058823529411764),
                                    BorderSizePixel = 0,
                                    Parent = scrollThumbFrame,
                                })
                                local markerFrame = createSimple('Frame', {
                                    BackgroundTransparency = 1,
                                    Name = 'Markers',
                                    Size = UDim2.new(1, 0, 1, 0),
                                    Parent = scrollThumbFrame,
                                })
                                local buttonPress = false
                                local thumbPress = false
                                local thumbFramePress = false

                                local function handleButtonPress(
                                    button,
                                    scrollDirection
                                )
                                    if self.CanScroll(self, scrollDirection) then
                                        button.BackgroundTransparency = 0.5

                                        self.ScrollToDirection(self, scrollDirection)
                                        self.Scrolled:Fire()

                                        local buttonTick = tick()
                                        local releaseEvent

                                        releaseEvent = user.InputEnded:Connect(function(
                                            input
                                        )
                                            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                                releaseEvent.Disconnect(releaseEvent)

                                                button.BackgroundTransparency = checkMouseInGui(button) and 0.8 or 1
                                                buttonPress = false
                                            end
                                        end)

                                        while buttonPress do
                                            if tick() - buttonTick >= 0.25 and self.CanScroll(self, scrollDirection) then
                                                self.ScrollToDirection(self, scrollDirection)
                                                self.Scrolled:Fire()
                                            end

                                            task.wait()
                                        end
                                    end
                                end

                                button1.MouseButton1Down:Connect(function(
                                    input
                                )
                                    buttonPress = true

                                    handleButtonPress(button1, 'Up')
                                end)
                                button1.InputEnded:Connect(function(input)
                                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                        button1.BackgroundTransparency = 1
                                    end
                                end)
                                button2.MouseButton1Down:Connect(function(
                                    input
                                )
                                    buttonPress = true

                                    handleButtonPress(button2, 'Down')
                                end)
                                button2.InputEnded:Connect(function(input)
                                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                        button2.BackgroundTransparency = 1
                                    end
                                end)
                                scrollThumb.InputBegan:Connect(function(input)
                                    if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
                                        local dir = self.Horizontal and 'X' or 'Y'
                                        local lastThumbPos

                                        thumbPress = true
                                        scrollThumb.BackgroundTransparency = 0

                                        local mouseOffset = mouse[dir] - scrollThumb.AbsolutePosition[dir]
                                        local releaseEvent
                                        local mouseEvent

                                        releaseEvent = user.InputEnded:Connect(function(
                                            input
                                        )
                                            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                                releaseEvent.Disconnect(releaseEvent)

                                                if mouseEvent then
                                                    mouseEvent.Disconnect(mouseEvent)
                                                end

                                                scrollThumb.BackgroundTransparency = 0.2
                                                thumbPress = false
                                            end
                                        end)
                                        mouseEvent = user.InputChanged:Connect(function(
                                            input
                                        )
                                            if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and thumbPress then
                                                local thumbFrameSize = scrollThumbFrame.AbsoluteSize[dir] - scrollThumb.AbsoluteSize[dir]
                                                local pos = mouse[dir] - scrollThumbFrame.AbsolutePosition[dir] - mouseOffset

                                                if pos > thumbFrameSize then
                                                    pos = thumbFrameSize
                                                elseif pos < 0 then
                                                    pos = 0
                                                end
                                                if lastThumbPos ~= pos then
                                                    lastThumbPos = pos

                                                    self.ScrollTo(self, math.floor(0.5 + pos / thumbFrameSize * (self.TotalSpace - self.VisibleSpace)))
                                                end
                                            end
                                        end)
                                    end
                                end)
                                scrollThumb.InputEnded:Connect(function(input)
                                    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                        scrollThumb.BackgroundTransparency = 0
                                    end
                                end)
                                scrollThumbFrame.InputBegan:Connect(function(
                                    input
                                )
                                    if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and not checkMouseInGui(scrollThumb) then
                                        local dir = self.Horizontal and 'X' or 'Y'
                                        local scrollDir = (mouse[dir] >= scrollThumb.AbsolutePosition[dir] + scrollThumb.AbsoluteSize[dir]) and 1 or 0

                                        local function doTick()
                                            local scrollSize = self.VisibleSpace - 1

                                            if scrollDir == 0 and mouse[dir] < scrollThumb.AbsolutePosition[dir] then
                                                self.ScrollTo(self, self.Index - scrollSize)
                                            elseif scrollDir == 1 and mouse[dir] >= scrollThumb.AbsolutePosition[dir] + scrollThumb.AbsoluteSize[dir] then
                                                self.ScrollTo(self, self.Index + scrollSize)
                                            end
                                        end

                                        thumbPress = false
                                        thumbFramePress = true

                                        doTick()

                                        local thumbFrameTick = tick()
                                        local releaseEvent

                                        releaseEvent = user.InputEnded:Connect(function(
                                            input
                                        )
                                            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                                releaseEvent.Disconnect(releaseEvent)

                                                thumbFramePress = false
                                            end
                                        end)

                                        while thumbFramePress do
                                            if tick() - thumbFrameTick >= 0.3 and checkMouseInGui(scrollThumbFrame) then
                                                doTick()
                                            end

                                            task.wait()
                                        end
                                    end
                                end)
                                newFrame.MouseWheelForward:Connect(function()
                                    self.ScrollTo(self, self.Index - self.WheelIncrement)
                                end)
                                newFrame.MouseWheelBackward:Connect(function()
                                    self.ScrollTo(self, self.Index + self.WheelIncrement)
                                end)

                                self.GuiElems.ScrollThumb = scrollThumb
                                self.GuiElems.ScrollThumbFrame = scrollThumbFrame
                                self.GuiElems.Button1 = button1
                                self.GuiElems.Button2 = button2
                                self.GuiElems.MarkerFrame = markerFrame

                                return newFrame
                            end

                            funcs.Update = function(self, nocallback)
                                local total = self.TotalSpace
                                local visible = self.VisibleSpace
                                local index = self.Index
                                local button1 = self.GuiElems.Button1
                                local button2 = self.GuiElems.Button2

                                self.Index = math.clamp(self.Index, 0, math.max(0, total - visible))

                                if self.LastTotalSpace ~= self.TotalSpace then
                                    self.LastTotalSpace = self.TotalSpace

                                    self.UpdateMarkers(self)
                                end
                                if self.CanScrollUp(self) then
                                    for i, v in pairs(button1.Arrow:GetChildren())do
                                        v.BackgroundTransparency = 0
                                    end
                                else
                                    button1.BackgroundTransparency = 1

                                    for i, v in pairs(button1.Arrow:GetChildren())do
                                        v.BackgroundTransparency = 0.5
                                    end
                                end
                                if self.CanScrollDown(self) then
                                    for i, v in pairs(button2.Arrow:GetChildren())do
                                        v.BackgroundTransparency = 0
                                    end
                                else
                                    button2.BackgroundTransparency = 1

                                    for i, v in pairs(button2.Arrow:GetChildren())do
                                        v.BackgroundTransparency = 0.5
                                    end
                                end

                                drawThumb(self)
                            end
                            funcs.UpdateMarkers = function(self)
                                local markerFrame = self.GuiElems.MarkerFrame

                                markerFrame.ClearAllChildren(markerFrame)

                                for i, v in pairs(self.Markers)do
                                    if i < self.TotalSpace then
                                        createSimple('Frame', {
                                            BackgroundTransparency = 0,
                                            BackgroundColor3 = v,
                                            BorderSizePixel = 0,
                                            Position = self.Horizontal and UDim2.new(i / self.TotalSpace, 0, 1, 
-6) or UDim2.new(1, -6, i / self.TotalSpace, 0),
                                            Size = self.Horizontal and UDim2.new(0, 1, 0, 6) or UDim2.new(0, 6, 0, 1),
                                            Name = 'Marker' .. tostring(i),
                                            Parent = markerFrame,
                                        })
                                    end
                                end
                            end
                            funcs.AddMarker = function(self, ind, color)
                                self.Markers[ind] = color or Color3.new(0, 0, 0)
                            end
                            funcs.ScrollTo = function(self, ind, nocallback)
                                self.Index = ind

                                self.Update(self)

                                if not nocallback then
                                    self.Scrolled:Fire()
                                end
                            end
                            funcs.ScrollUp = function(self)
                                self.Index = self.Index - self.Increment

                                self.Update(self)
                            end
                            funcs.CanScroll = function(self, direction)
                                if direction == 'Up' then
                                    return self.CanScrollUp(self)
                                elseif direction == 'Down' then
                                    return self.CanScrollDown(self)
                                end

                                return false
                            end
                            funcs.ScrollDown = function(self)
                                self.Index = self.Index + self.Increment

                                self.Update(self)
                            end
                            funcs.CanScrollUp = function(self)
                                return self.Index > 0
                            end
                            funcs.CanScrollDown = function(self)
                                return self.Index + self.VisibleSpace < self.TotalSpace
                            end
                            funcs.GetScrollPercent = function(self)
                                return self.Index / (self.TotalSpace - self.VisibleSpace)
                            end
                            funcs.SetScrollPercent = function(self, perc)
                                self.Index = math.floor(perc * (self.TotalSpace - self.VisibleSpace))

                                self.Update(self)
                            end
                            funcs.ScrollToDirection = function(
                                self,
                                Direaction
                            )
                                if Direaction == 'Up' then
                                    self.ScrollUp(self)
                                elseif Direaction == 'Down' then
                                    self.ScrollDown(self)
                                end
                            end
                            funcs.Texture = function(self, data)
                                self.ThumbColor = data.ThumbColor or Color3.new(0, 0, 0)
                                self.ThumbSelectColor = data.ThumbSelectColor or Color3.new(0, 0, 0)
                                self.GuiElems.ScrollThumb.BackgroundColor3 = data.ThumbColor or Color3.new(0, 0, 0)
                                self.Gui.BackgroundColor3 = data.FrameColor or Color3.new(0, 0, 0)
                                self.GuiElems.Button1.BackgroundColor3 = data.ButtonColor or Color3.new(0, 0, 0)
                                self.GuiElems.Button2.BackgroundColor3 = data.ButtonColor or Color3.new(0, 0, 0)

                                for i, v in pairs(self.GuiElems.Button1.Arrow:GetChildren())do
                                    v.BackgroundColor3 = data.ArrowColor or Color3.new(0, 0, 0)
                                end
                                for i, v in pairs(self.GuiElems.Button2.Arrow:GetChildren())do
                                    v.BackgroundColor3 = data.ArrowColor or Color3.new(0, 0, 0)
                                end
                            end
                            funcs.SetScrollFrame = function(self, frame)
                                if self.ScrollUpEvent then
                                    self.ScrollUpEvent:Disconnect()

                                    self.ScrollUpEvent = nil
                                end
                                if self.ScrollDownEvent then
                                    self.ScrollDownEvent:Disconnect()

                                    self.ScrollDownEvent = nil
                                end

                                self.ScrollUpEvent = frame.MouseWheelForward:Connect(function(
                                )
                                    self.ScrollTo(self, self.Index - self.WheelIncrement)
                                end)
                                self.ScrollDownEvent = frame.MouseWheelBackward:Connect(function(
                                )
                                    self.ScrollTo(self, self.Index + self.WheelIncrement)
                                end)
                            end

                            local mt = {}

                            mt.__index = funcs

                            local function new(hor)
                                local obj = setmetatable({
                                    Index = 0,
                                    VisibleSpace = 0,
                                    TotalSpace = 0,
                                    Increment = 1,
                                    WheelIncrement = 1,
                                    Markers = {},
                                    GuiElems = {},
                                    Horizontal = hor,
                                    LastTotalSpace = 0,
                                    Scrolled = Lib.Signal.new(),
                                }, mt)

                                obj.Gui = createFrame(obj)

                                obj.Texture(obj, {
                                    ThumbColor = Color3.fromRGB(60, 60, 60),
                                    ThumbSelectColor = Color3.fromRGB(75, 75, 75),
                                    ArrowColor = Color3.new(1, 1, 1),
                                    FrameColor = Color3.fromRGB(40, 40, 40),
                                    ButtonColor = Color3.fromRGB(75, 75, 75),
                                })

                                return obj
                            end

                            return {new = new}
                        end)()
                        Lib.Window = (function()
                            local funcs = {}
                            local static = {
                                MinWidth = 200,
                                FreeWidth = 200,
                            }
                            local mouse = plr.GetMouse(plr)
                            local sidesGui, alignIndicator
                            local visibleWindows = {}
                            local leftSide = {
                                Width = 300,
                                Windows = {},
                                ResizeCons = {},
                                Hidden = true,
                            }
                            local rightSide = {
                                Width = 300,
                                Windows = {},
                                ResizeCons = {},
                                Hidden = true,
                            }
                            local displayOrderStart
                            local sideDisplayOrder
                            local sideTweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                            local tweens = {}
                            local isA = game.IsA
                            local theme = {
                                MainColor1 = Color3.fromRGB(52, 52, 52),
                                MainColor2 = Color3.fromRGB(45, 45, 45),
                                Button = Color3.fromRGB(60, 60, 60),
                            }

                            local function stopTweens()
                                for i = 1, #tweens do
                                    tweens[i]:Cancel()
                                end

                                tweens = {}
                            end
                            local function resizeHook(self, resizer, dir)
                                local guiMain = self.GuiElems.Main

                                resizer.InputBegan:Connect(function(input)
                                    if not self.Dragging and not self.Resizing and self.Resizable and self.ResizableInternal then
                                        local isH = dir.find(dir, '[WE]') and true
                                        local isV = dir.find(dir, '[NS]') and true
                                        local signX = dir.find(dir, 'W', 1, true) and 
-1 or 1
                                        local signY = dir.find(dir, 'N', 1, true) and 
-1 or 1

                                        if self.Minimized and isV then
                                            return
                                        end
                                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                            resizer.BackgroundTransparency = 0.5
                                        elseif input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                            local releaseEvent, mouseEvent
                                            local offX = input.Position.X - resizer.AbsolutePosition.X
                                            local offY = input.Position.Y - resizer.AbsolutePosition.Y

                                            self.Resizing = resizer
                                            resizer.BackgroundTransparency = 1
                                            releaseEvent = service.UserInputService.InputEnded:Connect(function(
                                                input
                                            )
                                                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                                    releaseEvent.Disconnect(releaseEvent)

                                                    if mouseEvent then
                                                        mouseEvent.Disconnect(mouseEvent)
                                                    end

                                                    self.Resizing = false
                                                    resizer.BackgroundTransparency = 1
                                                end
                                            end)
                                            mouseEvent = service.UserInputService.InputChanged:Connect(function(
                                                input
                                            )
                                                if self.Resizable and self.ResizableInternal and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                                                    self.StopTweens(self)

                                                    local deltaX = input.Position.X - resizer.AbsolutePosition.X - offX
                                                    local deltaY = input.Position.Y - resizer.AbsolutePosition.Y - offY

                                                    if guiMain.AbsoluteSize.X + deltaX * signX < self.MinX then
                                                        deltaX = signX * (self.MinX - guiMain.AbsoluteSize.X)
                                                    end
                                                    if guiMain.AbsoluteSize.Y + deltaY * signY < self.MinY then
                                                        deltaY = signY * (self.MinY - guiMain.AbsoluteSize.Y)
                                                    end
                                                    if signY < 0 and guiMain.AbsolutePosition.Y + deltaY < 0 then
                                                        deltaY = -guiMain.AbsolutePosition.Y
                                                    end

                                                    guiMain.Position = guiMain.Position + UDim2.new(0, (signX < 0 and deltaX or 0), 0, (signY < 0 and deltaY or 0))
                                                    self.SizeX = self.SizeX + (isH and deltaX * signX or 0)
                                                    self.SizeY = self.SizeY + (isV and deltaY * signY or 0)
                                                    guiMain.Size = UDim2.new(0, self.SizeX, 0, self.Minimized and 20 or self.SizeY)
                                                end
                                            end)
                                        end
                                    end
                                end)
                                resizer.InputEnded:Connect(function(input)
                                    if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and self.Resizing ~= resizer then
                                        resizer.BackgroundTransparency = 1
                                    end
                                end)
                            end

                            local updateWindows

                            local function moveToTop(window)
                                local found = table.find(visibleWindows, window)

                                if found then
                                    table.remove(visibleWindows, found)
                                    table.insert(visibleWindows, 1, window)
                                    updateWindows()
                                end
                            end
                            local function sideHasRoom(side, neededSize)
                                local maxY = sidesGui.AbsoluteSize.Y - (math.max(0, #side.Windows - 1) * 4)
                                local inc = 0

                                for i, v in pairs(side.Windows)do
                                    inc = inc + (v.MinY or 100)

                                    if inc > maxY - neededSize then
                                        return false
                                    end
                                end

                                return true
                            end
                            local function getSideInsertPos(side, curY)
                                local pos = #side.Windows + 1
                                local range = {
                                    0,
                                    sidesGui.AbsoluteSize.Y,
                                }

                                for i, v in pairs(side.Windows)do
                                    local midPos = v.PosY + v.SizeY / 2

                                    if curY <= midPos then
                                        pos = i
                                        range[2] = midPos

                                        break
                                    else
                                        range[1] = midPos
                                    end
                                end

                                return pos, range
                            end
                            local function focusInput(self, obj)
                                if isA(obj, 'GuiButton') then
                                    obj.MouseButton1Down:Connect(function()
                                        moveToTop(self)
                                    end)
                                elseif isA(obj, 'TextBox') then
                                    obj.Focused:Connect(function()
                                        moveToTop(self)
                                    end)
                                end
                            end

                            local createGui = function(self)
                                local gui = create({
                                    {
                                        1,
                                        'ScreenGui',
                                        {
                                            Name = 'Window',
                                        },
                                    },
                                    {
                                        2,
                                        'Frame',
                                        {
                                            Active = true,
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Name = 'Main',
                                            Parent = {1},
                                            Position = UDim2.new(0.40000000596046, 0, 0.40000000596046, 0),
                                            Size = UDim2.new(0, 300, 0, 300),
                                        },
                                    },
                                    {
                                        3,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                            BorderSizePixel = 0,
                                            Name = 'Content',
                                            Parent = {2},
                                            Position = UDim2.new(0, 0, 0, 20),
                                            Size = UDim2.new(1, 0, 1, -20),
                                            ClipsDescendants = true,
                                        },
                                    },
                                    {
                                        4,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.fromRGB(33, 33, 33),
                                            BorderSizePixel = 0,
                                            Name = 'Line',
                                            Parent = {3},
                                            Size = UDim2.new(1, 0, 0, 1),
                                        },
                                    },
                                    {
                                        5,
                                        'TextButton',
                                        {
                                            Text = '',
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.20392157137394, 0.20392157137394, 0.20392157137394),
                                            BorderSizePixel = 0,
                                            Name = 'TopBar',
                                            Parent = {2},
                                            Size = UDim2.new(1, 0, 0, 20),
                                        },
                                    },
                                    {
                                        6,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'Title',
                                            Parent = {5},
                                            Position = UDim2.new(0, 5, 0, 0),
                                            Size = UDim2.new(1, -10, 0, 20),
                                            Text = 'Window',
                                            TextColor3 = Color3.new(1, 1, 1),
                                            TextSize = 14,
                                            TextXAlignment = 0,
                                        },
                                    },
                                    {
                                        7,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Close',
                                            Parent = {5},
                                            Position = UDim2.new(1, -18, 0, 2),
                                            Size = UDim2.new(0, 16, 0, 16),
                                            Text = '',
                                            TextColor3 = Color3.new(1, 1, 1),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        8,
                                        'ImageLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Image = 'rbxassetid://5054663650',
                                            Parent = {7},
                                            Position = UDim2.new(0, 3, 0, 3),
                                            Size = UDim2.new(0, 10, 0, 10),
                                        },
                                    },
                                    {
                                        9,
                                        'UICorner',
                                        {
                                            CornerRadius = UDim.new(0, 4),
                                            Parent = {7},
                                        },
                                    },
                                    {
                                        10,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Minimize',
                                            Parent = {5},
                                            Position = UDim2.new(1, -36, 0, 2),
                                            Size = UDim2.new(0, 16, 0, 16),
                                            Text = '',
                                            TextColor3 = Color3.new(1, 1, 1),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        11,
                                        'ImageLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Image = 'rbxassetid://5034768003',
                                            Parent = {10},
                                            Position = UDim2.new(0, 3, 0, 3),
                                            Size = UDim2.new(0, 10, 0, 10),
                                        },
                                    },
                                    {
                                        12,
                                        'UICorner',
                                        {
                                            CornerRadius = UDim.new(0, 4),
                                            Parent = {10},
                                        },
                                    },
                                    {
                                        13,
                                        'ImageLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Image = 'rbxassetid://1427967925',
                                            Name = 'Outlines',
                                            Parent = {2},
                                            Position = UDim2.new(0, -5, 0, -5),
                                            ScaleType = 1,
                                            Size = UDim2.new(1, 10, 1, 10),
                                            SliceCenter = Rect.new(6, 6, 25, 25),
                                            TileSize = UDim2.new(0, 20, 0, 20),
                                        },
                                    },
                                    {
                                        14,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Name = 'ResizeControls',
                                            Parent = {2},
                                            Position = UDim2.new(0, -5, 0, -5),
                                            Size = UDim2.new(1, 10, 1, 10),
                                        },
                                    },
                                    {
                                        15,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.27450981736183, 0.27450981736183, 0.27450981736183),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'North',
                                            Parent = {14},
                                            Position = UDim2.new(0, 5, 0, 0),
                                            Size = UDim2.new(1, -10, 0, 5),
                                            Text = '',
                                            TextColor3 = Color3.new(0, 0, 0),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        16,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.27450981736183, 0.27450981736183, 0.27450981736183),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'South',
                                            Parent = {14},
                                            Position = UDim2.new(0, 5, 1, -5),
                                            Size = UDim2.new(1, -10, 0, 5),
                                            Text = '',
                                            TextColor3 = Color3.new(0, 0, 0),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        17,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.27450981736183, 0.27450981736183, 0.27450981736183),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'NorthEast',
                                            Parent = {14},
                                            Position = UDim2.new(1, -5, 0, 0),
                                            Size = UDim2.new(0, 5, 0, 5),
                                            Text = '',
                                            TextColor3 = Color3.new(0, 0, 0),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        18,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.27450981736183, 0.27450981736183, 0.27450981736183),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'East',
                                            Parent = {14},
                                            Position = UDim2.new(1, -5, 0, 5),
                                            Size = UDim2.new(0, 5, 1, -10),
                                            Text = '',
                                            TextColor3 = Color3.new(0, 0, 0),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        19,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.27450981736183, 0.27450981736183, 0.27450981736183),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'West',
                                            Parent = {14},
                                            Position = UDim2.new(0, 0, 0, 5),
                                            Size = UDim2.new(0, 5, 1, -10),
                                            Text = '',
                                            TextColor3 = Color3.new(0, 0, 0),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        20,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.27450981736183, 0.27450981736183, 0.27450981736183),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'SouthEast',
                                            Parent = {14},
                                            Position = UDim2.new(1, -5, 1, -5),
                                            Size = UDim2.new(0, 5, 0, 5),
                                            Text = '',
                                            TextColor3 = Color3.new(0, 0, 0),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        21,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.27450981736183, 0.27450981736183, 0.27450981736183),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'NorthWest',
                                            Parent = {14},
                                            Size = UDim2.new(0, 5, 0, 5),
                                            Text = '',
                                            TextColor3 = Color3.new(0, 0, 0),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        22,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.27450981736183, 0.27450981736183, 0.27450981736183),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'SouthWest',
                                            Parent = {14},
                                            Position = UDim2.new(0, 0, 1, -5),
                                            Size = UDim2.new(0, 5, 0, 5),
                                            Text = '',
                                            TextColor3 = Color3.new(0, 0, 0),
                                            TextSize = 14,
                                        },
                                    },
                                })
                                local guiMain = gui.Main
                                local guiTopBar = guiMain.TopBar
                                local guiResizeControls = guiMain.ResizeControls

                                self.GuiElems.Main = guiMain
                                self.GuiElems.TopBar = guiMain.TopBar
                                self.GuiElems.Content = guiMain.Content
                                self.GuiElems.Line = guiMain.Content.Line
                                self.GuiElems.Outlines = guiMain.Outlines
                                self.GuiElems.Title = guiTopBar.Title
                                self.GuiElems.Close = guiTopBar.Close
                                self.GuiElems.Minimize = guiTopBar.Minimize
                                self.GuiElems.ResizeControls = guiResizeControls
                                self.ContentPane = guiMain.Content

                                local ButtonDown = false

                                guiTopBar.MouseButton1Down:Connect(function()
                                    ButtonDown = true
                                end)
                                guiTopBar.MouseButton1Up:Connect(function()
                                    ButtonDown = false
                                end)
                                guiTopBar.InputBegan:Connect(function(input)
                                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                        if self.Draggable then
                                            local releaseEvent, mouseEvent
                                            local maxX = sidesGui.AbsoluteSize.X
                                            local initX = guiMain.AbsolutePosition.X
                                            local initY = guiMain.AbsolutePosition.Y
                                            local offX = input.Position.X - initX
                                            local offY = input.Position.Y - initY
                                            local alignInsertPos, alignInsertSide

                                            guiDragging = true
                                            releaseEvent = service.UserInputService.InputEnded:Connect(function(
                                                input
                                            )
                                                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                                    releaseEvent.Disconnect(releaseEvent)

                                                    if mouseEvent then
                                                        mouseEvent.Disconnect(mouseEvent)
                                                    end

                                                    guiDragging = false
                                                    alignIndicator.Parent = nil

                                                    if alignInsertSide then
                                                        local targetSide = (alignInsertSide == 'left' and leftSide) or (alignInsertSide == 'right' and rightSide)

                                                        self.AlignTo(self, targetSide, alignInsertPos)
                                                    end
                                                end
                                            end)
                                            mouseEvent = service.UserInputService.InputChanged:Connect(function(
                                                input
                                            )
                                                if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and self.Draggable and not self.Closed and ButtonDown then
                                                    if self.Aligned then
                                                        if leftSide.Resizing or rightSide.Resizing then
                                                            return
                                                        end

                                                        local posX, posY = input.Position.X - offX, input.Position.Y - offY
                                                        local delta = math.sqrt((posX - initX) ^ 2 + (posY - initY) ^ 2)

                                                        if delta >= 5 then
                                                            self.SetAligned(self, false)
                                                        end
                                                    else
                                                        local inputX, inputY = input.Position.X, input.Position.Y
                                                        local posX, posY = inputX - offX, inputY - offY

                                                        if posY < 0 then
                                                            posY = 0
                                                        end

                                                        guiMain.Position = UDim2.new(0, posX, 0, posY)

                                                        if self.Resizable and self.Alignable then
                                                            if inputX < 25 then
                                                                if sideHasRoom(leftSide, self.MinY or 100) then
                                                                    local insertPos, range = getSideInsertPos(leftSide, inputY)

                                                                    alignIndicator.Indicator.Position = UDim2.new(0, 
-15, 0, range[1])
                                                                    alignIndicator.Indicator.Size = UDim2.new(0, 40, 0, range[2] - range[1])

                                                                    Lib.ShowGui(alignIndicator)

                                                                    alignInsertPos = insertPos
                                                                    alignInsertSide = 'left'

                                                                    return
                                                                end
                                                            elseif inputX >= maxX - 25 then
                                                                if sideHasRoom(rightSide, self.MinY or 100) then
                                                                    local insertPos, range = getSideInsertPos(rightSide, inputY)

                                                                    alignIndicator.Indicator.Position = UDim2.new(0, maxX - 25, 0, range[1])
                                                                    alignIndicator.Indicator.Size = UDim2.new(0, 40, 0, range[2] - range[1])

                                                                    Lib.ShowGui(alignIndicator)

                                                                    alignInsertPos = insertPos
                                                                    alignInsertSide = 'right'

                                                                    return
                                                                end
                                                            end
                                                        end

                                                        alignIndicator.Parent = nil
                                                        alignInsertPos = nil
                                                        alignInsertSide = nil
                                                    end
                                                end
                                            end)
                                        end
                                    end
                                end)
                                guiTopBar.Close.MouseButton1Click:Connect(function(
                                )
                                    if self.Closed then
                                        return
                                    end

                                    self.Close(self)
                                end)
                                guiTopBar.Minimize.MouseButton1Click:Connect(function(
                                )
                                    if self.Closed then
                                        return
                                    end
                                    if self.Aligned then
                                        self.SetAligned(self, false)
                                    else
                                        self.SetMinimized(self)
                                    end
                                end)
                                guiTopBar.Minimize.MouseButton2Click:Connect(function(
                                )
                                    if self.Closed then
                                        return
                                    end
                                    if not self.Aligned then
                                        self.SetMinimized(self, nil, 2)

                                        guiTopBar.Minimize.BackgroundTransparency = 1
                                    end
                                end)
                                guiMain.InputBegan:Connect(function(input)
                                    if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and not self.Aligned and not self.Closed then
                                        moveToTop(self)
                                    end
                                end)
                                guiMain.GetPropertyChangedSignal(guiMain, 'AbsolutePosition'):Connect(function(
                                )
                                    local absPos = guiMain.AbsolutePosition

                                    self.PosX = absPos.X
                                    self.PosY = absPos.Y
                                end)
                                resizeHook(self, guiResizeControls.North, 'N')
                                resizeHook(self, guiResizeControls.NorthEast, 'NE')
                                resizeHook(self, guiResizeControls.East, 'E')
                                resizeHook(self, guiResizeControls.SouthEast, 'SE')
                                resizeHook(self, guiResizeControls.South, 'S')
                                resizeHook(self, guiResizeControls.SouthWest, 'SW')
                                resizeHook(self, guiResizeControls.West, 'W')
                                resizeHook(self, guiResizeControls.NorthWest, 'NW')

                                guiMain.Size = UDim2.new(0, self.SizeX, 0, self.SizeY)

                                gui.DescendantAdded:Connect(function(obj)
                                    focusInput(self, obj)
                                end)

                                local descs = gui.GetDescendants(gui)

                                for i = 1, #descs do
                                    focusInput(self, descs[i])
                                end

                                self.MinimizeAnim = Lib.ButtonAnim(guiTopBar.Minimize)
                                self.CloseAnim = Lib.ButtonAnim(guiTopBar.Close)

                                return gui
                            end

                            local function updateSideFrames(noTween)
                                stopTweens()

                                leftSide.Frame.Size = UDim2.new(0, leftSide.Width, 1, 0)
                                rightSide.Frame.Size = UDim2.new(0, rightSide.Width, 1, 0)
                                leftSide.Frame.Resizer.Position = UDim2.new(0, leftSide.Width, 0, 0)
                                rightSide.Frame.Resizer.Position = UDim2.new(0, 
-5, 0, 0)

                                local leftHidden = #leftSide.Windows == 0 or leftSide.Hidden
                                local rightHidden = #rightSide.Windows == 0 or rightSide.Hidden
                                local leftPos = (leftHidden and UDim2.new(0, -leftSide.Width - 10, 0, 0) or UDim2.new(0, 0, 0, 0))
                                local rightPos = (rightHidden and UDim2.new(1, 10, 0, 0) or UDim2.new(1, 
-rightSide.Width, 0, 0))

                                sidesGui.LeftToggle.Text = leftHidden and '>' or '<'
                                sidesGui.RightToggle.Text = rightHidden and '<' or '>'

                                if not noTween then
                                    local function insertTween(...)
                                        local tween = service.TweenService:Create(
...)

                                        tweens[#tweens + 1] = tween

                                        tween.Play(tween)
                                    end

                                    insertTween(leftSide.Frame, sideTweenInfo, {Position = leftPos})
                                    insertTween(rightSide.Frame, sideTweenInfo, {Position = rightPos})
                                    insertTween(sidesGui.LeftToggle, sideTweenInfo, {
                                        Position = UDim2.new(0, #leftSide.Windows == 0 and 
-16 or 0, 0, -36),
                                    })
                                    insertTween(sidesGui.RightToggle, sideTweenInfo, {
                                        Position = UDim2.new(1, #rightSide.Windows == 0 and 0 or 
-16, 0, -36),
                                    })
                                else
                                    leftSide.Frame.Position = leftPos
                                    rightSide.Frame.Position = rightPos
                                    sidesGui.LeftToggle.Position = UDim2.new(0, #leftSide.Windows == 0 and 
-16 or 0, 0, -36)
                                    sidesGui.RightToggle.Position = UDim2.new(1, #rightSide.Windows == 0 and 0 or 
-16, 0, -36)
                                end
                            end
                            local function getSideFramePos(side)
                                local leftHidden = #leftSide.Windows == 0 or leftSide.Hidden
                                local rightHidden = #rightSide.Windows == 0 or rightSide.Hidden

                                if side == leftSide then
                                    return (leftHidden and UDim2.new(0, -leftSide.Width - 10, 0, 0) or UDim2.new(0, 0, 0, 0))
                                else
                                    return (rightHidden and UDim2.new(1, 10, 0, 0) or UDim2.new(1, 
-rightSide.Width, 0, 0))
                                end
                            end
                            local function sideResized(side)
                                local currentPos = 0
                                local sideFramePos = getSideFramePos(side)

                                for i, v in pairs(side.Windows)do
                                    v.SizeX = side.Width
                                    v.GuiElems.Main.Size = UDim2.new(0, side.Width, 0, v.SizeY)
                                    v.GuiElems.Main.Position = UDim2.new(sideFramePos.X.Scale, sideFramePos.X.Offset, 0, currentPos)
                                    currentPos = currentPos + v.SizeY + 4
                                end
                            end
                            local function sideResizerHook(
                                resizer,
                                dir,
                                side,
                                pos
                            )
                                local mouse = Main.Mouse
                                local windows = side.Windows

                                resizer.InputBegan:Connect(function(input)
                                    if not side.Resizing then
                                        if input.UserInputType == Enum.UserInputType.MouseMovement then
                                            resizer.BackgroundColor3 = theme.MainColor2
                                        elseif input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                            local releaseEvent, inputEvent
                                            local offX = input.Position.X - resizer.AbsolutePosition.X
                                            local offY = input.Position.Y - resizer.AbsolutePosition.Y

                                            side.Resizing = resizer
                                            resizer.BackgroundColor3 = theme.MainColor2
                                            releaseEvent = service.UserInputService.InputEnded:Connect(function(
                                                input
                                            )
                                                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                                    releaseEvent.Disconnect(releaseEvent)

                                                    if inputEvent then
                                                        inputEvent.Disconnect(inputEvent)
                                                    end

                                                    side.Resizing = false
                                                    resizer.BackgroundColor3 = theme.Button
                                                end
                                            end)
                                            inputEvent = service.UserInputService.InputChanged:Connect(function(
                                                input
                                            )
                                                if not resizer.Parent then
                                                    releaseEvent.Disconnect(releaseEvent)

                                                    if inputEvent then
                                                        inputEvent.Disconnect(inputEvent)
                                                    end

                                                    side.Resizing = false

                                                    return
                                                end
                                                if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                                    if dir == 'V' then
                                                        local delta = input.Position.Y - resizer.AbsolutePosition.Y - offY

                                                        if delta > 0 then
                                                            local neededSize = delta

                                                            for i = pos + 1, #windows do
                                                                local window = windows[i]
                                                                local newSize = math.max(window.SizeY - neededSize, (window.MinY or 100))

                                                                neededSize = neededSize - (window.SizeY - newSize)
                                                                window.SizeY = newSize
                                                            end

                                                            windows[pos].SizeY = windows[pos].SizeY + math.max(0, delta - neededSize)
                                                        else
                                                            local neededSize = -delta

                                                            for i = pos, 1, -1 do
                                                                local window = windows[i]
                                                                local newSize = math.max(window.SizeY - neededSize, (window.MinY or 100))

                                                                neededSize = neededSize - (window.SizeY - newSize)
                                                                window.SizeY = newSize
                                                            end

                                                            windows[pos + 1].SizeY = windows[pos + 1].SizeY + math.max(0, 
-delta - neededSize)
                                                        end

                                                        updateSideFrames()
                                                        sideResized(side)
                                                    elseif dir == 'H' then
                                                        local maxWidth = math.max(300, sidesGui.AbsoluteSize.X - static.FreeWidth)
                                                        local otherSide = (side == leftSide and rightSide or leftSide)
                                                        local delta = input.Position.X - resizer.AbsolutePosition.X - offX

                                                        delta = (side == leftSide and delta or 
-delta)

                                                        local proposedSize = math.max(static.MinWidth, side.Width + delta)

                                                        if proposedSize + otherSide.Width <= maxWidth then
                                                            side.Width = proposedSize
                                                        else
                                                            local newOtherSize = maxWidth - proposedSize

                                                            if newOtherSize >= static.MinWidth then
                                                                side.Width = proposedSize
                                                                otherSide.Width = newOtherSize
                                                            else
                                                                side.Width = maxWidth - static.MinWidth
                                                                otherSide.Width = static.MinWidth
                                                            end
                                                        end

                                                        updateSideFrames(true)
                                                        sideResized(side)
                                                        sideResized(otherSide)
                                                    end
                                                end
                                            end)
                                        end
                                    end
                                end)
                                resizer.InputEnded:Connect(function(input)
                                    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                        if side.Resizing ~= resizer then
                                            resizer.BackgroundColor3 = theme.Button
                                        end
                                    end
                                end)
                            end
                            local function renderSide(side, noTween)
                                local currentPos = 0
                                local sideFramePos = getSideFramePos(side)
                                local template = side.WindowResizer:Clone()

                                for i, v in pairs(side.ResizeCons)do
                                    v.Disconnect(v)
                                end
                                for i, v in pairs(side.Frame:GetChildren())do
                                    if v.Name == 'WindowResizer' then
                                        v.Destroy(v)
                                    end
                                end

                                side.ResizeCons = {}
                                side.Resizing = nil

                                for i, v in pairs(side.Windows)do
                                    v.SidePos = i

                                    local isEnd = i == #side.Windows
                                    local size = UDim2.new(0, side.Width, 0, v.SizeY)
                                    local pos = UDim2.new(sideFramePos.X.Scale, sideFramePos.X.Offset, 0, currentPos)

                                    Lib.ShowGui(v.Gui)

                                    if noTween then
                                        v.GuiElems.Main.Size = size
                                        v.GuiElems.Main.Position = pos
                                    else
                                        local tween = service.TweenService:Create(v.GuiElems.Main, sideTweenInfo, {
                                            Size = size,
                                            Position = pos,
                                        })

                                        tweens[#tweens + 1] = tween

                                        tween.Play(tween)
                                    end

                                    currentPos = currentPos + v.SizeY + 4

                                    if not isEnd then
                                        local newTemplate = template.Clone(template)

                                        newTemplate.Position = UDim2.new(1, -side.Width, 0, currentPos - 4)
                                        side.ResizeCons[#side.ResizeCons + 1] = v.Gui.Main:GetPropertyChangedSignal('Size'):Connect(function(
                                        )
                                            newTemplate.Position = UDim2.new(1, 
-side.Width, 0, v.GuiElems.Main.Position.Y.Offset + v.GuiElems.Main.Size.Y.Offset)
                                        end)
                                        side.ResizeCons[#side.ResizeCons + 1] = v.Gui.Main:GetPropertyChangedSignal('Position'):Connect(function(
                                        )
                                            newTemplate.Position = UDim2.new(1, 
-side.Width, 0, v.GuiElems.Main.Position.Y.Offset + v.GuiElems.Main.Size.Y.Offset)
                                        end)

                                        sideResizerHook(newTemplate, 'V', side, i)

                                        newTemplate.Parent = side.Frame
                                    end
                                end
                            end
                            local function updateSide(side, noTween)
                                local oldHeight = 0
                                local currentPos = 0
                                local neededSize = 0
                                local windows = side.Windows
                                local height = sidesGui.AbsoluteSize.Y - (math.max(0, #windows - 1) * 4)

                                for i, v in pairs(windows)do
                                    oldHeight = oldHeight + v.SizeY
                                end
                                for i, v in pairs(windows)do
                                    if i == #windows then
                                        v.SizeY = height - currentPos
                                        neededSize = math.max(0, (v.MinY or 100) - v.SizeY)
                                    else
                                        v.SizeY = math.max(math.floor(v.SizeY / oldHeight * height), v.MinY or 100)
                                    end

                                    currentPos = currentPos + v.SizeY
                                end

                                if neededSize > 0 then
                                    for i = #windows - 1, 1, -1 do
                                        local window = windows[i]
                                        local newSize = math.max(window.SizeY - neededSize, (window.MinY or 100))

                                        neededSize = neededSize - (window.SizeY - newSize)
                                        window.SizeY = newSize
                                    end

                                    local lastWindow = windows[#windows]

                                    lastWindow.SizeY = (lastWindow.MinY or 100) - neededSize
                                end

                                renderSide(side, noTween)
                            end

                            updateWindows = function(noTween)
                                updateSideFrames(noTween)
                                updateSide(leftSide, noTween)
                                updateSide(rightSide, noTween)

                                local count = 0

                                for i = #visibleWindows, 1, -1 do
                                    visibleWindows[i].Gui.DisplayOrder = displayOrderStart + count

                                    Lib.ShowGui(visibleWindows[i].Gui)

                                    count = count + 1
                                end
                            end
                            funcs.SetMinimized = function(self, set, mode)
                                local oldVal = self.Minimized
                                local newVal

                                if set == nil then
                                    newVal = not self.Minimized
                                else
                                    newVal = set
                                end

                                self.Minimized = newVal

                                if not mode then
                                    mode = 1
                                end

                                local resizeControls = self.GuiElems.ResizeControls
                                local minimizeControls = {
                                    'North',
                                    'NorthEast',
                                    'NorthWest',
                                    'South',
                                    'SouthEast',
                                    'SouthWest',
                                }

                                for i = 1, #minimizeControls do
                                    local control = resizeControls.FindFirstChild(resizeControls, minimizeControls[i])

                                    if control then
                                        control.Visible = not newVal
                                    end
                                end

                                if mode == 1 or mode == 2 then
                                    self.StopTweens(self)

                                    if mode == 1 then
                                        self.GuiElems.Main:TweenSize(UDim2.new(0, self.SizeX, 0, newVal and 20 or self.SizeY), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.25, true)
                                    else
                                        local maxY = sidesGui.AbsoluteSize.Y
                                        local newPos = UDim2.new(0, self.PosX, 0, newVal and math.min(maxY - 20, self.PosY + self.SizeY - 20) or math.max(0, self.PosY - self.SizeY + 20))

                                        self.GuiElems.Main:TweenPosition(newPos, Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.25, true)
                                        self.GuiElems.Main:TweenSize(UDim2.new(0, self.SizeX, 0, newVal and 20 or self.SizeY), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.25, true)
                                    end

                                    self.GuiElems.Minimize.ImageLabel.Image = newVal and 'rbxassetid://5060023708' or 'rbxassetid://5034768003'
                                end
                                if oldVal ~= newVal then
                                    if newVal then
                                        self.OnMinimize:Fire()
                                    else
                                        self.OnRestore:Fire()
                                    end
                                end
                            end
                            funcs.Resize = function(self, sizeX, sizeY)
                                self.SizeX = sizeX or self.SizeX
                                self.SizeY = sizeY or self.SizeY
                                self.GuiElems.Main.Size = UDim2.new(0, self.SizeX, 0, self.SizeY)
                            end
                            funcs.SetSize = funcs.Resize
                            funcs.SetTitle = function(self, title)
                                self.GuiElems.Title.Text = title
                            end
                            funcs.SetResizable = function(self, val)
                                self.Resizable = val
                                self.GuiElems.ResizeControls.Visible = self.Resizable and self.ResizableInternal
                            end
                            funcs.SetResizableInternal = function(self, val)
                                self.ResizableInternal = val
                                self.GuiElems.ResizeControls.Visible = self.Resizable and self.ResizableInternal
                            end
                            funcs.SetAligned = function(self, val)
                                self.Aligned = val

                                self.SetResizableInternal(self, not val)

                                self.GuiElems.Main.Active = not val
                                self.GuiElems.Main.Outlines.Visible = not val

                                if not val then
                                    for i, v in pairs(leftSide.Windows)do
                                        if v == self then
                                            table.remove(leftSide.Windows, i)

                                            break
                                        end
                                    end
                                    for i, v in pairs(rightSide.Windows)do
                                        if v == self then
                                            table.remove(rightSide.Windows, i)

                                            break
                                        end
                                    end

                                    if not table.find(visibleWindows, self) then
                                        table.insert(visibleWindows, 1, self)
                                    end

                                    self.GuiElems.Minimize.ImageLabel.Image = 'rbxassetid://5034768003'
                                    self.Side = nil

                                    updateWindows()
                                else
                                    self.SetMinimized(self, false, 3)

                                    for i, v in pairs(visibleWindows)do
                                        if v == self then
                                            table.remove(visibleWindows, i)

                                            break
                                        end
                                    end

                                    self.GuiElems.Minimize.ImageLabel.Image = 'rbxassetid://5448127505'
                                end
                            end
                            funcs.Add = function(self, obj, name)
                                if type(obj) == 'table' and obj.Gui and obj.Gui:IsA('GuiObject') then
                                    obj.Gui.Parent = self.ContentPane
                                else
                                    obj.Parent = self.ContentPane
                                end
                                if name then
                                    self.Elements[name] = obj
                                end
                            end
                            funcs.GetElement = function(self, obj, name)
                                return self.Elements[name]
                            end
                            funcs.AlignTo = function(
                                self,
                                side,
                                pos,
                                size,
                                silent
                            )
                                if table.find(side.Windows, self) or self.Closed then
                                    return
                                end

                                size = size or self.SizeY

                                if size > 0 and size <= 1 then
                                    local totalSideHeight = 0

                                    for i, v in pairs(side.Windows)do
                                        totalSideHeight = totalSideHeight + v.SizeY
                                    end

                                    self.SizeY = (totalSideHeight > 0 and totalSideHeight * size * 2) or size
                                else
                                    self.SizeY = (size > 0 and size or 100)
                                end

                                self.SetAligned(self, true)

                                self.Side = side
                                self.SizeX = side.Width
                                self.Gui.DisplayOrder = sideDisplayOrder + 1

                                for i, v in pairs(side.Windows)do
                                    v.Gui.DisplayOrder = sideDisplayOrder
                                end

                                pos = math.min(#side.Windows + 1, pos or 1)
                                self.SidePos = pos

                                table.insert(side.Windows, pos, self)

                                if not silent then
                                    side.Hidden = false
                                end
                            end
                            funcs.Close = function(self)
                                self.Closed = true

                                self.SetResizableInternal(self, false)
                                Lib.FindAndRemove(leftSide.Windows, self)
                                Lib.FindAndRemove(rightSide.Windows, self)
                                Lib.FindAndRemove(visibleWindows, self)
                                self.MinimizeAnim.Disable()
                                self.CloseAnim.Disable()

                                self.ClosedSide = self.Side
                                self.Side = nil

                                self.OnDeactivate:Fire()

                                if not self.Aligned then
                                    self.StopTweens(self)

                                    local ti = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                                    local closeTime = tick()

                                    self.LastClose = closeTime

                                    self.DoTween(self, self.GuiElems.Main, ti, {
                                        Size = UDim2.new(0, self.SizeX, 0, 20),
                                    })
                                    self.DoTween(self, self.GuiElems.Title, ti, {TextTransparency = 1})
                                    self.DoTween(self, self.GuiElems.Minimize.ImageLabel, ti, {ImageTransparency = 1})
                                    self.DoTween(self, self.GuiElems.Close.ImageLabel, ti, {ImageTransparency = 1})
                                    Lib.FastWait(0.2)

                                    if closeTime ~= self.LastClose then
                                        return
                                    end

                                    self.DoTween(self, self.GuiElems.TopBar, ti, {BackgroundTransparency = 1})
                                    self.DoTween(self, self.GuiElems.Outlines, ti, {ImageTransparency = 1})
                                    Lib.FastWait(0.2)

                                    if closeTime ~= self.LastClose then
                                        return
                                    end
                                end

                                self.Aligned = false
                                self.Gui.Parent = nil

                                updateWindows(true)
                            end
                            funcs.Hide = funcs.Close
                            funcs.IsVisible = function(self)
                                return not self.Closed and ((self.Side and not self.Side.Hidden) or not self.Side)
                            end
                            funcs.IsContentVisible = function(self)
                                return self.IsVisible(self) and not self.Minimized
                            end
                            funcs.Focus = function(self)
                                moveToTop(self)
                            end
                            funcs.MoveInBoundary = function(self)
                                local posX, posY = self.PosX, self.PosY
                                local maxX, maxY = sidesGui.AbsoluteSize.X, sidesGui.AbsoluteSize.Y

                                posX = math.min(posX, maxX - self.SizeX)
                                posY = math.min(posY, maxY - 20)
                                self.GuiElems.Main.Position = UDim2.new(0, posX, 0, posY)
                            end
                            funcs.DoTween = function(self, ...)
                                local tween = service.TweenService:Create(...)

                                self.Tweens[#self.Tweens + 1] = tween

                                tween.Play(tween)
                            end
                            funcs.StopTweens = function(self)
                                for i, v in pairs(self.Tweens)do
                                    v.Cancel(v)
                                end

                                self.Tweens = {}
                            end
                            funcs.Show = function(self, data)
                                return static.ShowWindow(self, data)
                            end
                            funcs.ShowAndFocus = function(self, data)
                                static.ShowWindow(self, data)
                                service.RunService.RenderStepped:wait()
                                self.Focus(self)
                            end
                            static.ShowWindow = function(window, data)
                                data = data or {}

                                local align = data.Align
                                local pos = data.Pos
                                local size = data.Size
                                local targetSide = (align == 'left' and leftSide) or (align == 'right' and rightSide)

                                if not window.Closed then
                                    if not window.Aligned then
                                        window.SetMinimized(window, false)
                                    elseif window.Side and not data.Silent then
                                        static.SetSideVisible(window.Side, true)
                                    end

                                    return
                                end

                                window.Closed = false
                                window.LastClose = tick()
                                window.GuiElems.Title.TextTransparency = 0
                                window.GuiElems.Minimize.ImageLabel.ImageTransparency = 0
                                window.GuiElems.Close.ImageLabel.ImageTransparency = 0
                                window.GuiElems.TopBar.BackgroundTransparency = 0
                                window.GuiElems.Outlines.ImageTransparency = 0
                                window.GuiElems.Minimize.ImageLabel.Image = 'rbxassetid://5034768003'
                                window.GuiElems.Main.Active = true
                                window.GuiElems.Main.Outlines.Visible = true

                                window.SetMinimized(window, false, 3)
                                window.SetResizableInternal(window, true)
                                window.MinimizeAnim.Enable()
                                window.CloseAnim.Enable()

                                if align then
                                    window.AlignTo(window, targetSide, pos, size, data.Silent)
                                else
                                    if align == nil and window.ClosedSide then
                                        window.AlignTo(window, window.ClosedSide, window.SidePos, size, true)
                                        static.SetSideVisible(window.ClosedSide, true)
                                    else
                                        if table.find(visibleWindows, window) then
                                            return
                                        end

                                        window.GuiElems.Main.Size = UDim2.new(0, window.SizeX, 0, 20)

                                        local ti = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

                                        window.StopTweens(window)
                                        window.DoTween(window, window.GuiElems.Main, ti, {
                                            Size = UDim2.new(0, window.SizeX, 0, window.SizeY),
                                        })

                                        window.SizeY = size or window.SizeY

                                        table.insert(visibleWindows, 1, window)
                                        updateWindows()
                                    end
                                end

                                window.ClosedSide = nil

                                window.OnActivate:Fire()
                            end
                            static.ToggleSide = function(name)
                                local side = (name == 'left' and leftSide or rightSide)

                                side.Hidden = not side.Hidden

                                for i, v in pairs(side.Windows)do
                                    if side.Hidden then
                                        v.OnDeactivate:Fire()
                                    else
                                        v.OnActivate:Fire()
                                    end
                                end

                                updateWindows()
                            end
                            static.SetSideVisible = function(s, vis)
                                local side = (type(s) == 'table' and s) or (s == 'left' and leftSide or rightSide)

                                side.Hidden = not vis

                                for i, v in pairs(side.Windows)do
                                    if side.Hidden then
                                        v.OnDeactivate:Fire()
                                    else
                                        v.OnActivate:Fire()
                                    end
                                end

                                updateWindows()
                            end
                            static.Init = function()
                                displayOrderStart = Main.DisplayOrders.Window
                                sideDisplayOrder = Main.DisplayOrders.SideWindow
                                sidesGui = Instance.new('ScreenGui')

                                local leftFrame = create({
                                    {
                                        1,
                                        'Frame',
                                        {
                                            Active = true,
                                            Name = 'LeftSide',
                                            BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                            BorderSizePixel = 0,
                                        },
                                    },
                                    {
                                        2,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.2549019753933, 0.2549019753933, 0.2549019753933),
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Resizer',
                                            Parent = {1},
                                            Size = UDim2.new(0, 5, 1, 0),
                                            Text = '',
                                            TextColor3 = Color3.new(0, 0, 0),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        3,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14117647707462),
                                            BorderSizePixel = 0,
                                            Name = 'Line',
                                            Parent = {2},
                                            Position = UDim2.new(0, 0, 0, 0),
                                            Size = UDim2.new(0, 1, 1, 0),
                                        },
                                    },
                                    {
                                        4,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.2549019753933, 0.2549019753933, 0.2549019753933),
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'WindowResizer',
                                            Parent = {1},
                                            Position = UDim2.new(1, -300, 0, 0),
                                            Size = UDim2.new(1, 0, 0, 4),
                                            Text = '',
                                            TextColor3 = Color3.new(0, 0, 0),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        5,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14117647707462),
                                            BorderSizePixel = 0,
                                            Name = 'Line',
                                            Parent = {4},
                                            Size = UDim2.new(1, 0, 0, 1),
                                        },
                                    },
                                })

                                leftSide.Frame = leftFrame
                                leftFrame.Position = UDim2.new(0, -leftSide.Width - 10, 0, 0)
                                leftSide.WindowResizer = leftFrame.WindowResizer
                                leftFrame.WindowResizer.Parent = nil
                                leftFrame.Parent = sidesGui

                                local rightFrame = create({
                                    {
                                        1,
                                        'Frame',
                                        {
                                            Active = true,
                                            Name = 'RightSide',
                                            BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                            BorderSizePixel = 0,
                                        },
                                    },
                                    {
                                        2,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.2549019753933, 0.2549019753933, 0.2549019753933),
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Resizer',
                                            Parent = {1},
                                            Size = UDim2.new(0, 5, 1, 0),
                                            Text = '',
                                            TextColor3 = Color3.new(0, 0, 0),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        3,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14117647707462),
                                            BorderSizePixel = 0,
                                            Name = 'Line',
                                            Parent = {2},
                                            Position = UDim2.new(0, 4, 0, 0),
                                            Size = UDim2.new(0, 1, 1, 0),
                                        },
                                    },
                                    {
                                        4,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.2549019753933, 0.2549019753933, 0.2549019753933),
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'WindowResizer',
                                            Parent = {1},
                                            Position = UDim2.new(1, -300, 0, 0),
                                            Size = UDim2.new(1, 0, 0, 4),
                                            Text = '',
                                            TextColor3 = Color3.new(0, 0, 0),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        5,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14117647707462),
                                            BorderSizePixel = 0,
                                            Name = 'Line',
                                            Parent = {4},
                                            Size = UDim2.new(1, 0, 0, 1),
                                        },
                                    },
                                })

                                rightSide.Frame = rightFrame
                                rightFrame.Position = UDim2.new(1, 10, 0, 0)
                                rightSide.WindowResizer = rightFrame.WindowResizer
                                rightFrame.WindowResizer.Parent = nil
                                rightFrame.Parent = sidesGui

                                sideResizerHook(leftFrame.Resizer, 'H', leftSide)
                                sideResizerHook(rightFrame.Resizer, 'H', rightSide)

                                alignIndicator = Instance.new('ScreenGui')
                                alignIndicator.DisplayOrder = Main.DisplayOrders.Core

                                local indicator = Instance.new('Frame', alignIndicator)

                                indicator.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
                                indicator.BorderSizePixel = 0
                                indicator.BackgroundTransparency = 0.8
                                indicator.Name = 'Indicator'

                                local corner = Instance.new('UICorner', indicator)

                                corner.CornerRadius = UDim.new(0, 10)

                                local leftToggle = create({
                                    {
                                        1,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.20392157137394, 0.20392157137394, 0.20392157137394),
                                            BorderColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14117647707462),
                                            BorderMode = 2,
                                            Font = 10,
                                            Name = 'LeftToggle',
                                            Position = UDim2.new(0, 0, 0, -36),
                                            Size = UDim2.new(0, 16, 0, 36),
                                            Text = '<',
                                            TextColor3 = Color3.new(1, 1, 1),
                                            TextSize = 14,
                                        },
                                    },
                                })
                                local rightToggle = leftToggle.Clone(leftToggle)

                                rightToggle.Name = 'RightToggle'
                                rightToggle.Position = UDim2.new(1, -16, 0, -36)

                                Lib.ButtonAnim(leftToggle, {
                                    Mode = 2,
                                    PressColor = Color3.fromRGB(32, 32, 32),
                                })
                                Lib.ButtonAnim(rightToggle, {
                                    Mode = 2,
                                    PressColor = Color3.fromRGB(32, 32, 32),
                                })
                                leftToggle.MouseButton1Click:Connect(function()
                                    static.ToggleSide('left')
                                end)
                                rightToggle.MouseButton1Click:Connect(function()
                                    static.ToggleSide('right')
                                end)

                                leftToggle.Parent = sidesGui
                                rightToggle.Parent = sidesGui

                                sidesGui.GetPropertyChangedSignal(sidesGui, 'AbsoluteSize'):Connect(function(
                                )
                                    local maxWidth = math.max(300, sidesGui.AbsoluteSize.X - static.FreeWidth)

                                    leftSide.Width = math.max(static.MinWidth, math.min(leftSide.Width, maxWidth - rightSide.Width))
                                    rightSide.Width = math.max(static.MinWidth, math.min(rightSide.Width, maxWidth - leftSide.Width))

                                    for i = 1, #visibleWindows do
                                        visibleWindows[i]:MoveInBoundary()
                                    end

                                    updateWindows(true)
                                end)

                                sidesGui.DisplayOrder = sideDisplayOrder - 1

                                Lib.ShowGui(sidesGui)
                                updateSideFrames()
                            end

                            local mt = {__index = funcs}

                            static.new = function()
                                local obj = setmetatable({
                                    Minimized = false,
                                    Dragging = false,
                                    Resizing = false,
                                    Aligned = false,
                                    Draggable = true,
                                    Resizable = true,
                                    ResizableInternal = true,
                                    Alignable = true,
                                    Closed = true,
                                    SizeX = 300,
                                    SizeY = 300,
                                    MinX = 200,
                                    MinY = 200,
                                    PosX = 0,
                                    PosY = 0,
                                    GuiElems = {},
                                    Tweens = {},
                                    Elements = {},
                                    OnActivate = Lib.Signal.new(),
                                    OnDeactivate = Lib.Signal.new(),
                                    OnMinimize = Lib.Signal.new(),
                                    OnRestore = Lib.Signal.new(),
                                }, mt)

                                obj.Gui = createGui(obj)

                                return obj
                            end

                            return static
                        end)()
                        Lib.ContextMenu = (function()
                            local funcs = {}
                            local mouse

                            local function createGui(self)
                                local contextGui = create({
                                    {
                                        1,
                                        'ScreenGui',
                                        {
                                            DisplayOrder = 1000000,
                                            Name = 'Context',
                                            ZIndexBehavior = 1,
                                        },
                                    },
                                    {
                                        2,
                                        'Frame',
                                        {
                                            Active = true,
                                            BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14117647707462),
                                            BorderColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14117647707462),
                                            Name = 'Main',
                                            Parent = {1},
                                            Position = UDim2.new(0.5, -100, 0.5, 
-150),
                                            Size = UDim2.new(0, 200, 0, 100),
                                        },
                                    },
                                    {
                                        3,
                                        'UICorner',
                                        {
                                            CornerRadius = UDim.new(0, 4),
                                            Parent = {2},
                                        },
                                    },
                                    {
                                        4,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                            Name = 'Container',
                                            Parent = {2},
                                            Position = UDim2.new(0, 1, 0, 1),
                                            Size = UDim2.new(1, -2, 1, -2),
                                        },
                                    },
                                    {
                                        5,
                                        'UICorner',
                                        {
                                            CornerRadius = UDim.new(0, 4),
                                            Parent = {4},
                                        },
                                    },
                                    {
                                        6,
                                        'ScrollingFrame',
                                        {
                                            Active = true,
                                            BackgroundColor3 = Color3.new(0.20392157137394, 0.20392157137394, 0.20392157137394),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            CanvasSize = UDim2.new(0, 0, 0, 0),
                                            Name = 'List',
                                            Parent = {4},
                                            Position = UDim2.new(0, 2, 0, 2),
                                            ScrollBarImageColor3 = Color3.new(0, 0, 0),
                                            ScrollBarThickness = 4,
                                            Size = UDim2.new(1, -4, 1, -4),
                                            VerticalScrollBarInset = 1,
                                        },
                                    },
                                    {
                                        7,
                                        'UIListLayout',
                                        {
                                            Parent = {6},
                                            SortOrder = 2,
                                        },
                                    },
                                    {
                                        8,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.20392157137394, 0.20392157137394, 0.20392157137394),
                                            BorderSizePixel = 0,
                                            Name = 'SearchFrame',
                                            Parent = {4},
                                            Size = UDim2.new(1, 0, 0, 24),
                                            Visible = false,
                                        },
                                    },
                                    {
                                        9,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14901961386204, 0.14901961386204, 0.14901961386204),
                                            BorderColor3 = Color3.new(0.1176470592618, 0.1176470592618, 0.1176470592618),
                                            BorderSizePixel = 0,
                                            Name = 'SearchContainer',
                                            Parent = {8},
                                            Position = UDim2.new(0, 3, 0, 3),
                                            Size = UDim2.new(1, -6, 0, 18),
                                        },
                                    },
                                    {
                                        10,
                                        'TextBox',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'SearchBox',
                                            Parent = {9},
                                            PlaceholderColor3 = Color3.new(0.39215689897537, 0.39215689897537, 0.39215689897537),
                                            PlaceholderText = 'Search',
                                            Position = UDim2.new(0, 4, 0, 0),
                                            Size = UDim2.new(1, -8, 0, 18),
                                            Text = '',
                                            TextColor3 = Color3.new(1, 1, 1),
                                            TextSize = 14,
                                            TextXAlignment = 0,
                                        },
                                    },
                                    {
                                        11,
                                        'UICorner',
                                        {
                                            CornerRadius = UDim.new(0, 2),
                                            Parent = {9},
                                        },
                                    },
                                    {
                                        12,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14117647707462),
                                            BorderSizePixel = 0,
                                            Name = 'Line',
                                            Parent = {8},
                                            Position = UDim2.new(0, 0, 1, 0),
                                            Size = UDim2.new(1, 0, 0, 1),
                                        },
                                    },
                                    {
                                        13,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.20392157137394, 0.20392157137394, 0.20392157137394),
                                            BackgroundTransparency = 1,
                                            BorderColor3 = Color3.new(0.33725491166115, 0.49019610881805, 0.73725491762161),
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Entry',
                                            Parent = {1},
                                            Size = UDim2.new(1, 0, 0, 22),
                                            Text = '',
                                            TextSize = 14,
                                            Visible = false,
                                        },
                                    },
                                    {
                                        14,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'EntryName',
                                            Parent = {13},
                                            Position = UDim2.new(0, 24, 0, 0),
                                            Size = UDim2.new(1, -24, 1, 0),
                                            Text = 'Duplicate',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 0,
                                        },
                                    },
                                    {
                                        15,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'Shortcut',
                                            Parent = {13},
                                            Position = UDim2.new(0, 24, 0, 0),
                                            Size = UDim2.new(1, -30, 1, 0),
                                            Text = 'Ctrl+D',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 1,
                                        },
                                    },
                                    {
                                        16,
                                        'ImageLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            ImageRectOffset = Vector2.new(304, 0),
                                            ImageRectSize = Vector2.new(16, 16),
                                            Name = 'Icon',
                                            Parent = {13},
                                            Position = UDim2.new(0, 2, 0, 3),
                                            ScaleType = 4,
                                            Size = UDim2.new(0, 16, 0, 16),
                                        },
                                    },
                                    {
                                        17,
                                        'UICorner',
                                        {
                                            CornerRadius = UDim.new(0, 4),
                                            Parent = {13},
                                        },
                                    },
                                    {
                                        18,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.21568629145622, 0.21568629145622, 0.21568629145622),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Name = 'Divider',
                                            Parent = {1},
                                            Position = UDim2.new(0, 0, 0, 20),
                                            Size = UDim2.new(1, 0, 0, 7),
                                            Visible = false,
                                        },
                                    },
                                    {
                                        19,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.20392157137394, 0.20392157137394, 0.20392157137394),
                                            BorderSizePixel = 0,
                                            Name = 'Line',
                                            Parent = {18},
                                            Position = UDim2.new(0, 0, 0.5, 0),
                                            Size = UDim2.new(1, 0, 0, 1),
                                        },
                                    },
                                    {
                                        20,
                                        'TextLabel',
                                        {
                                            AnchorPoint = Vector2.new(0, 0.5),
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'DividerName',
                                            Parent = {18},
                                            Position = UDim2.new(0, 2, 0.5, 0),
                                            Size = UDim2.new(1, -4, 1, 0),
                                            Text = 'Objects',
                                            TextColor3 = Color3.new(1, 1, 1),
                                            TextSize = 14,
                                            TextTransparency = 0.60000002384186,
                                            TextXAlignment = 0,
                                            Visible = false,
                                        },
                                    },
                                })

                                self.GuiElems.Main = contextGui.Main
                                self.GuiElems.List = contextGui.Main.Container.List
                                self.GuiElems.Entry = contextGui.Entry
                                self.GuiElems.Divider = contextGui.Divider
                                self.GuiElems.SearchFrame = contextGui.Main.Container.SearchFrame
                                self.GuiElems.SearchBar = self.GuiElems.SearchFrame.SearchContainer.SearchBox

                                Lib.ViewportTextBox.convert(self.GuiElems.SearchBar)
                                self.GuiElems.SearchBar:GetPropertyChangedSignal('Text'):Connect(function(
                                )
                                    local lower, find = string.lower, string.find
                                    local searchText = lower(self.GuiElems.SearchBar.Text)
                                    local items = self.Items
                                    local map = self.ItemToEntryMap

                                    if searchText ~= '' then
                                        local results = {}
                                        local count = 1

                                        for i = 1, #items do
                                            local item = items[i]
                                            local entry = map[item]

                                            if entry then
                                                if not item.Divider and find(lower(item.Name), searchText, 1, true) then
                                                    results[count] = item
                                                    count = count + 1
                                                else
                                                    entry.Visible = false
                                                end
                                            end
                                        end

                                        table.sort(results, function(a, b)
                                            return a.Name < b.Name
                                        end)

                                        for i = 1, #results do
                                            local entry = map[results[i] ]

                                            entry.LayoutOrder = i
                                            entry.Visible = true
                                        end
                                    else
                                        for i = 1, #items do
                                            local entry = map[items[i] ]

                                            if entry then
                                                entry.LayoutOrder = i
                                                entry.Visible = true
                                            end
                                        end
                                    end

                                    local toSize = self.GuiElems.List.UIListLayout.AbsoluteContentSize.Y + 6

                                    self.GuiElems.List.CanvasSize = UDim2.new(0, 0, 0, toSize - 6)
                                end)

                                return contextGui
                            end

                            funcs.Add = function(self, item)
                                local newItem = {
                                    Name = item.Name or 'Item',
                                    Icon = item.Icon or '',
                                    Shortcut = item.Shortcut or '',
                                    OnClick = item.OnClick,
                                    OnHover = item.OnHover,
                                    Disabled = item.Disabled or false,
                                    DisabledIcon = item.DisabledIcon or '',
                                    IconMap = item.IconMap,
                                    OnRightClick = item.OnRightClick,
                                }

                                if self.QueuedDivider then
                                    local text = self.QueuedDividerText and #self.QueuedDividerText > 0 and self.QueuedDividerText

                                    self.AddDivider(self, text)
                                end

                                self.Items[#self.Items + 1] = newItem
                                self.Updated = nil
                            end
                            funcs.AddRegistered = function(
                                self,
                                name,
                                disabled
                            )
                                if not self.Registered[name] then
                                    error(name .. ' is not registered')
                                end
                                if self.QueuedDivider then
                                    local text = self.QueuedDividerText and #self.QueuedDividerText > 0 and self.QueuedDividerText

                                    self.AddDivider(self, text)
                                end

                                self.Registered[name].Disabled = disabled
                                self.Items[#self.Items + 1] = self.Registered[name]
                                self.Updated = nil
                            end
                            funcs.Register = function(self, name, item)
                                self.Registered[name] = {
                                    Name = item.Name or 'Item',
                                    Icon = item.Icon or '',
                                    Shortcut = item.Shortcut or '',
                                    OnClick = item.OnClick,
                                    OnHover = item.OnHover,
                                    DisabledIcon = item.DisabledIcon or '',
                                    IconMap = item.IconMap,
                                    OnRightClick = item.OnRightClick,
                                }
                            end
                            funcs.UnRegister = function(self, name)
                                self.Registered[name] = nil
                            end
                            funcs.AddDivider = function(self, text)
                                self.QueuedDivider = false

                                local textWidth = text and service.TextService:GetTextSize(text, 14, Enum.Font.SourceSans, Vector2.new(999999999, 20)).X or nil

                                table.insert(self.Items, {
                                    Divider = true,
                                    Text = text,
                                    TextSize = textWidth and textWidth + 4,
                                })

                                self.Updated = nil
                            end
                            funcs.QueueDivider = function(self, text)
                                self.QueuedDivider = true
                                self.QueuedDividerText = text or ''
                            end
                            funcs.Clear = function(self)
                                self.Items = {}
                                self.Updated = nil
                            end
                            funcs.Refresh = function(self)
                                for i, v in pairs(self.GuiElems.List:GetChildren())do
                                    if not v.IsA(v, 'UIListLayout') then
                                        v.Destroy(v)
                                    end
                                end

                                local map = {}

                                self.ItemToEntryMap = map

                                local dividerFrame = self.GuiElems.Divider
                                local contextList = self.GuiElems.List
                                local entryFrame = self.GuiElems.Entry
                                local items = self.Items

                                for i = 1, #items do
                                    local item = items[i]

                                    if item.Divider then
                                        local newDivider = dividerFrame.Clone(dividerFrame)

                                        newDivider.Line.BackgroundColor3 = self.Theme.DividerColor

                                        if item.Text then
                                            newDivider.Size = UDim2.new(1, 0, 0, 20)
                                            newDivider.Line.Position = UDim2.new(0, item.TextSize, 0.5, 0)
                                            newDivider.Line.Size = UDim2.new(1, 
-item.TextSize, 0, 1)
                                            newDivider.DividerName.TextColor3 = self.Theme.TextColor
                                            newDivider.DividerName.Text = item.Text
                                            newDivider.DividerName.Visible = true
                                        end

                                        newDivider.Visible = true
                                        map[item] = newDivider
                                        newDivider.Parent = contextList
                                    else
                                        local newEntry = entryFrame.Clone(entryFrame)

                                        newEntry.BackgroundColor3 = self.Theme.HighlightColor
                                        newEntry.EntryName.TextColor3 = self.Theme.TextColor
                                        newEntry.EntryName.Text = item.Name
                                        newEntry.Shortcut.Text = item.Shortcut

                                        if item.Disabled then
                                            newEntry.EntryName.TextColor3 = Color3.new(0.5882352941176471, 0.5882352941176471, 0.5882352941176471)
                                            newEntry.Shortcut.TextColor3 = Color3.new(0.5882352941176471, 0.5882352941176471, 0.5882352941176471)
                                        end
                                        if self.Iconless then
                                            newEntry.EntryName.Position = UDim2.new(0, 2, 0, 0)
                                            newEntry.EntryName.Size = UDim2.new(1, 
-4, 0, 20)
                                            newEntry.Icon.Visible = false
                                        else
                                            local iconIndex = item.Disabled and item.DisabledIcon or item.Icon

                                            if item.IconMap then
                                                if type(iconIndex) == 'number' then
                                                    item.IconMap:Display(newEntry.Icon, iconIndex)
                                                elseif type(iconIndex) == 'string' then
                                                    item.IconMap:DisplayByKey(newEntry.Icon, iconIndex)
                                                end
                                            elseif type(iconIndex) == 'string' then
                                                newEntry.Icon.Image = iconIndex
                                            end
                                        end
                                        if not item.Disabled then
                                            if item.OnClick then
                                                newEntry.MouseButton1Click:Connect(function(
                                                )
                                                    item.OnClick(item.Name)

                                                    if not item.NoHide then
                                                        self.Hide(self)
                                                    end
                                                end)
                                            end
                                            if item.OnRightClick then
                                                newEntry.MouseButton2Click:Connect(function(
                                                )
                                                    item.OnRightClick(item.Name)

                                                    if not item.NoHide then
                                                        self.Hide(self)
                                                    end
                                                end)
                                            end
                                        end

                                        newEntry.InputBegan:Connect(function(
                                            input
                                        )
                                            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                                newEntry.BackgroundTransparency = 0
                                            end
                                        end)
                                        newEntry.InputEnded:Connect(function(
                                            input
                                        )
                                            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                                newEntry.BackgroundTransparency = 1
                                            end
                                        end)

                                        newEntry.Visible = true
                                        map[item] = newEntry
                                        newEntry.Parent = contextList
                                    end
                                end

                                self.Updated = true
                            end
                            funcs.Show = function(self, x, y)
                                local elems = self.GuiElems

                                elems.SearchFrame.Visible = self.SearchEnabled
                                elems.List.Position = UDim2.new(0, 2, 0, 2 + (self.SearchEnabled and 24 or 0))
                                elems.List.Size = UDim2.new(1, -4, 1, -4 - (self.SearchEnabled and 24 or 0))

                                if self.SearchEnabled and self.ClearSearchOnShow then
                                    elems.SearchBar.Text = ''
                                end

                                self.GuiElems.List.CanvasPosition = Vector2.new(0, 0)

                                if not self.Updated then
                                    self.Refresh(self)
                                end

                                local reverseY = false
                                local x, y = x or mouse.X, y or mouse.Y
                                local maxX, maxY = mouse.ViewSizeX, mouse.ViewSizeY

                                if x + self.Width > maxX then
                                    x = self.ReverseX and x - self.Width or maxX - self.Width
                                end

                                elems.Main.Position = UDim2.new(0, x, 0, y)
                                elems.Main.Size = UDim2.new(0, self.Width, 0, 0)
                                self.Gui.DisplayOrder = Main.DisplayOrders.Menu

                                Lib.ShowGui(self.Gui)

                                local toSize = elems.List.UIListLayout.AbsoluteContentSize.Y + 6

                                if self.MaxHeight and toSize > self.MaxHeight then
                                    elems.List.CanvasSize = UDim2.new(0, 0, 0, toSize - 6)
                                    toSize = self.MaxHeight
                                else
                                    elems.List.CanvasSize = UDim2.new(0, 0, 0, 0)
                                end
                                if y + toSize > maxY then
                                    reverseY = true
                                end

                                local closable

                                if self.CloseEvent then
                                    self.CloseEvent:Disconnect()
                                end

                                self.CloseEvent = service.UserInputService.InputBegan:Connect(function(
                                    input
                                )
                                    if not closable then
                                        return
                                    end
                                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                        if not Lib.CheckMouseInGui(elems.Main) then
                                            self.CloseEvent:Disconnect()
                                            self.Hide(self)
                                        end
                                    end
                                end)

                                if reverseY then
                                    elems.Main.Position = UDim2.new(0, x, 0, y - (self.ReverseYOffset or 0))

                                    local newY = y - toSize - (self.ReverseYOffset or 0)

                                    y = newY >= 0 and newY or 0

                                    elems.Main:TweenSizeAndPosition(UDim2.new(0, self.Width, 0, toSize), UDim2.new(0, x, 0, y), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.2, true)
                                else
                                    elems.Main:TweenSize(UDim2.new(0, self.Width, 0, toSize), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.2, true)
                                end

                                Lib.FastWait()

                                if self.SearchEnabled and self.FocusSearchOnShow then
                                    elems.SearchBar:CaptureFocus()
                                end

                                closable = true
                            end
                            funcs.Hide = function(self)
                                self.Gui.Parent = nil
                            end
                            funcs.ApplyTheme = function(self, data)
                                local theme = self.Theme

                                theme.ContentColor = data.ContentColor or Settings.Theme.Menu
                                theme.OutlineColor = data.OutlineColor or Settings.Theme.Menu
                                theme.DividerColor = data.DividerColor or Settings.Theme.Outline2
                                theme.TextColor = data.TextColor or Settings.Theme.Text
                                theme.HighlightColor = data.HighlightColor or Settings.Theme.Main1
                                self.GuiElems.Main.BackgroundColor3 = theme.OutlineColor
                                self.GuiElems.Main.Container.BackgroundColor3 = theme.ContentColor
                            end

                            local mt = {__index = funcs}

                            local function new()
                                if not mouse then
                                    mouse = Main.Mouse or service.Players.LocalPlayer:GetMouse()
                                end

                                local obj = setmetatable({
                                    Width = 200,
                                    MaxHeight = nil,
                                    Iconless = false,
                                    SearchEnabled = false,
                                    ClearSearchOnShow = true,
                                    FocusSearchOnShow = true,
                                    Updated = false,
                                    QueuedDivider = false,
                                    QueuedDividerText = '',
                                    Items = {},
                                    Registered = {},
                                    GuiElems = {},
                                    Theme = {},
                                }, mt)

                                obj.Gui = createGui(obj)

                                obj.ApplyTheme(obj, {})

                                return obj
                            end

                            return {new = new}
                        end)()
                        Lib.CodeFrame = (function()
                            local funcs = {}
                            local typeMap = {
                                [1] = 'String',
                                [2] = 'String',
                                [3] = 'String',
                                [4] = 'Comment',
                                [5] = 'Operator',
                                [6] = 'Number',
                                [7] = 'Keyword',
                                [8] = 'BuiltIn',
                                [9] = 'LocalMethod',
                                [10] = 'LocalProperty',
                                [11] = 'Nil',
                                [12] = 'Bool',
                                [13] = 'Function',
                                [14] = 'Local',
                                [15] = 'Self',
                                [16] = 'FunctionName',
                                [17] = 'Bracket',
                            }
                            local specialKeywordsTypes = {
                                ['nil'] = 11,
                                ['true'] = 12,
                                ['false'] = 12,
                                ['function'] = 13,
                                ['local'] = 14,
                                self = 15,
                            }
                            local keywords = {
                                ['and'] = true,
                                ['break'] = true,
                                ['do'] = true,
                                ['else'] = true,
                                ['elseif'] = true,
                                ['end'] = true,
                                ['false'] = true,
                                ['for'] = true,
                                ['function'] = true,
                                ['if'] = true,
                                ['in'] = true,
                                ['local'] = true,
                                ['nil'] = true,
                                ['not'] = true,
                                ['or'] = true,
                                ['repeat'] = true,
                                ['return'] = true,
                                ['then'] = true,
                                ['true'] = true,
                                ['until'] = true,
                                ['while'] = true,
                                plugin = true,
                            }
                            local builtIns = {
                                delay = true,
                                elapsedTime = true,
                                require = true,
                                spawn = true,
                                tick = true,
                                time = true,
                                typeof = true,
                                UserSettings = true,
                                wait = true,
                                warn = true,
                                game = true,
                                shared = true,
                                script = true,
                                workspace = true,
                                assert = true,
                                collectgarbage = true,
                                error = true,
                                getfenv = true,
                                getmetatable = true,
                                ipairs = true,
                                loadstring = true,
                                newproxy = true,
                                next = true,
                                pairs = true,
                                pcall = true,
                                print = true,
                                rawequal = true,
                                rawget = true,
                                rawset = true,
                                select = true,
                                setfenv = true,
                                setmetatable = true,
                                tonumber = true,
                                tostring = true,
                                type = true,
                                unpack = true,
                                xpcall = true,
                                _G = true,
                                _VERSION = true,
                                coroutine = true,
                                debug = true,
                                math = true,
                                os = true,
                                string = true,
                                table = true,
                                bit32 = true,
                                utf8 = true,
                                Axes = true,
                                BrickColor = true,
                                CFrame = true,
                                Color3 = true,
                                ColorSequence = true,
                                ColorSequenceKeypoint = true,
                                DockWidgetPluginGuiInfo = true,
                                Enum = true,
                                Faces = true,
                                Instance = true,
                                NumberRange = true,
                                NumberSequence = true,
                                NumberSequenceKeypoint = true,
                                PathWaypoint = true,
                                PhysicalProperties = true,
                                Random = true,
                                Ray = true,
                                Rect = true,
                                Region3 = true,
                                Region3int16 = true,
                                TweenInfo = true,
                                UDim = true,
                                UDim2 = true,
                                Vector2 = true,
                                Vector2int16 = true,
                                Vector3 = true,
                                Vector3int16 = true,
                            }
                            local builtInInited = false
                            local richReplace = {
                                ["'"] = '&apos;',
                                ['"'] = '&quot;',
                                ['<'] = '&lt;',
                                ['>'] = '&gt;',
                                ['&'] = '&amp;',
                            }
                            local tabSub = '\t'
                            local tabReplacement = (' %s ').format((' %s '), tabSub)
                            local tabJumps = {
                                [('[^%s] ').format(('[^%s] '), tabSub)] = 0,
                                [(' %s').format((' %s'), tabSub)] = -1,
                                [('%s ').format(('%s '), tabSub)] = 2,
                                [(' [^%s]').format((' [^%s]'), tabSub)] = 1,
                            }
                            local tweenService = service.TweenService
                            local lineTweens = {}

                            local function initBuiltIn()
                                local env = getfenv()
                                local type = type
                                local tostring = tostring

                                for name, _ in next, builtIns do
                                    local envVal = env[name]

                                    if type(envVal) == 'table' then
                                        local items = {}

                                        for i, v in next, envVal do
                                            items[i] = true
                                        end

                                        builtIns[name] = items
                                    end
                                end

                                local enumEntries = {}
                                local enums = Enum.GetEnums(Enum)

                                for i = 1, #enums do
                                    enumEntries[tostring(enums[i])] = true
                                end

                                builtIns.Enum = enumEntries
                                builtInInited = true
                            end
                            local function setupEditBox(obj)
                                local editBox = obj.GuiElems.EditBox

                                editBox.Focused:Connect(function()
                                    obj.ConnectEditBoxEvent(obj)

                                    obj.Editing = true
                                end)
                                editBox.FocusLost:Connect(function()
                                    obj.DisconnectEditBoxEvent(obj)

                                    obj.Editing = false
                                end)
                                editBox.GetPropertyChangedSignal(editBox, 'Text'):Connect(function(
                                )
                                    local text = editBox.Text

                                    if #text == 0 or obj.EditBoxCopying then
                                        return
                                    end

                                    editBox.Text = ''

                                    obj.AppendText(obj, text)
                                end)
                            end
                            local function setupMouseSelection(obj)
                                local mouse = plr.GetMouse(plr)
                                local codeFrame = obj.GuiElems.LinesFrame
                                local lines = obj.Lines

                                codeFrame.InputBegan:Connect(function(input)
                                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                        local fontSizeX, fontSizeY = math.ceil(obj.FontSize / 2), obj.FontSize
                                        local relX = input.Position.X - codeFrame.AbsolutePosition.X
                                        local relY = input.Position.Y - codeFrame.AbsolutePosition.Y
                                        local selX = math.round(relX / fontSizeX) + obj.ViewX
                                        local selY = math.floor(relY / fontSizeY) + obj.ViewY
                                        local releaseEvent, inputEvent, scrollEvent
                                        local scrollPowerV, scrollPowerH = 0, 0

                                        selY = math.min(#lines - 1, selY)

                                        local relativeLine = lines[selY + 1] or ''

                                        selX = math.min(#relativeLine, selX + obj.TabAdjust(obj, selX, selY))
                                        obj.SelectionRange = {
                                            {
                                                -1,
                                                -1,
                                            },
                                            {
                                                -1,
                                                -1,
                                            },
                                        }

                                        obj.MoveCursor(obj, selX, selY)

                                        obj.FloatCursorX = selX

                                        local function updateSelection()
                                            local relX = input.Position.X - codeFrame.AbsolutePosition.X
                                            local relY = input.Position.Y - codeFrame.AbsolutePosition.Y
                                            local sel2X = math.max(0, math.round(relX / fontSizeX) + obj.ViewX)
                                            local sel2Y = math.max(0, math.floor(relY / fontSizeY) + obj.ViewY)

                                            sel2Y = math.min(#lines - 1, sel2Y)

                                            local relativeLine = lines[sel2Y + 1] or ''

                                            sel2X = math.min(#relativeLine, sel2X + obj.TabAdjust(obj, sel2X, sel2Y))

                                            if sel2Y < selY or (sel2Y == selY and sel2X < selX) then
                                                obj.SelectionRange = {
                                                    {sel2X, sel2Y},
                                                    {selX, selY},
                                                }
                                            else
                                                obj.SelectionRange = {
                                                    {selX, selY},
                                                    {sel2X, sel2Y},
                                                }
                                            end

                                            obj.MoveCursor(obj, sel2X, sel2Y)

                                            obj.FloatCursorX = sel2X

                                            obj.Refresh(obj)
                                        end

                                        releaseEvent = service.UserInputService.InputEnded:Connect(function(
                                            input
                                        )
                                            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                                releaseEvent.Disconnect(releaseEvent)
                                                inputEvent.Disconnect(inputEvent)
                                                scrollEvent.Disconnect(scrollEvent)
                                                obj.SetCopyableSelection(obj)
                                            end
                                        end)
                                        inputEvent = service.UserInputService.InputChanged:Connect(function(
                                            input
                                        )
                                            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                                local upDelta = input.Position.Y - codeFrame.AbsolutePosition.Y
                                                local downDelta = input.Position.Y - codeFrame.AbsolutePosition.Y - codeFrame.AbsoluteSize.Y
                                                local leftDelta = input.Position.X - codeFrame.AbsolutePosition.X
                                                local rightDelta = input.Position.X - codeFrame.AbsolutePosition.X - codeFrame.AbsoluteSize.X

                                                scrollPowerV = 0
                                                scrollPowerH = 0

                                                if downDelta > 0 then
                                                    scrollPowerV = math.floor(downDelta * 0.05) + 1
                                                elseif upDelta < 0 then
                                                    scrollPowerV = math.ceil(upDelta * 0.05) - 1
                                                end
                                                if rightDelta > 0 then
                                                    scrollPowerH = math.floor(rightDelta * 0.05) + 1
                                                elseif leftDelta < 0 then
                                                    scrollPowerH = math.ceil(leftDelta * 0.05) - 1
                                                end

                                                updateSelection()
                                            end
                                        end)
                                        scrollEvent = service.RunService.RenderStepped:Connect(function(
                                        )
                                            if scrollPowerV ~= 0 or scrollPowerH ~= 0 then
                                                obj.ScrollDelta(obj, scrollPowerH, scrollPowerV)
                                                updateSelection()
                                            end
                                        end)

                                        obj.Refresh(obj)
                                    end
                                end)
                            end
                            local function makeFrame(obj)
                                local frame = create({
                                    {
                                        1,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                                            BorderSizePixel = 0,
                                            Position = UDim2.new(0.5, -300, 0.5, 
-200),
                                            Size = UDim2.new(0, 600, 0, 400),
                                        },
                                    },
                                })
                                local elems = {}
                                local linesFrame = Instance.new('Frame')

                                linesFrame.Name = 'Lines'
                                linesFrame.BackgroundTransparency = 1
                                linesFrame.Size = UDim2.new(1, 0, 1, 0)
                                linesFrame.ClipsDescendants = true
                                linesFrame.Parent = frame

                                local lineNumbersLabel = Instance.new('TextLabel')

                                lineNumbersLabel.Name = 'LineNumbers'
                                lineNumbersLabel.BackgroundTransparency = 1
                                lineNumbersLabel.Font = Enum.Font.Code
                                lineNumbersLabel.TextXAlignment = Enum.TextXAlignment.Right
                                lineNumbersLabel.TextYAlignment = Enum.TextYAlignment.Top
                                lineNumbersLabel.ClipsDescendants = true
                                lineNumbersLabel.RichText = true
                                lineNumbersLabel.Parent = frame

                                local cursor = Instance.new('Frame')

                                cursor.Name = 'Cursor'
                                cursor.BackgroundColor3 = Color3.fromRGB(220, 220, 220)
                                cursor.BorderSizePixel = 0
                                cursor.Parent = frame

                                local editBox = Instance.new('TextBox')

                                editBox.Name = 'EditBox'
                                editBox.MultiLine = true
                                editBox.Visible = false
                                editBox.Parent = frame
                                lineTweens.Invis = tweenService.Create(tweenService, cursor, TweenInfo.new(0.4, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {BackgroundTransparency = 1})
                                lineTweens.Vis = tweenService.Create(tweenService, cursor, TweenInfo.new(0.2, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {BackgroundTransparency = 0})
                                elems.LinesFrame = linesFrame
                                elems.LineNumbersLabel = lineNumbersLabel
                                elems.Cursor = cursor
                                elems.EditBox = editBox
                                elems.ScrollCorner = create({
                                    {
                                        1,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                                            BorderSizePixel = 0,
                                            Name = 'ScrollCorner',
                                            Position = UDim2.new(1, -16, 1, -16),
                                            Size = UDim2.new(0, 16, 0, 16),
                                            Visible = false,
                                        },
                                    },
                                })
                                elems.ScrollCorner.Parent = frame

                                linesFrame.InputBegan:Connect(function(input)
                                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                        obj.SetEditing(obj, true, input)
                                    end
                                end)

                                obj.Frame = frame
                                obj.Gui = frame
                                obj.GuiElems = elems

                                setupEditBox(obj)
                                setupMouseSelection(obj)

                                return frame
                            end

                            funcs.GetSelectionText = function(self)
                                if not self.IsValidRange(self) then
                                    return ''
                                end

                                local selectionRange = self.SelectionRange
                                local selX, selY = selectionRange[1][1], selectionRange[1][2]
                                local sel2X, sel2Y = selectionRange[2][1], selectionRange[2][2]
                                local deltaLines = sel2Y - selY
                                local lines = self.Lines

                                if not lines[selY + 1] or not lines[sel2Y + 1] then
                                    return ''
                                end
                                if deltaLines == 0 then
                                    return self.ConvertText(self, lines[selY + 1]:sub(selX + 1, sel2X), false)
                                end

                                local leftSub = lines[selY + 1]:sub(selX + 1)
                                local rightSub = lines[sel2Y + 1]:sub(1, sel2X)
                                local result = leftSub .. '\n'

                                for i = selY + 1, sel2Y - 1 do
                                    result = result .. lines[i + 1] .. '\n'
                                end

                                result = result .. rightSub

                                return self.ConvertText(self, result, false)
                            end
                            funcs.SetCopyableSelection = function(self)
                                local text = self.GetSelectionText(self)
                                local editBox = self.GuiElems.EditBox

                                self.EditBoxCopying = true
                                editBox.Text = text
                                editBox.SelectionStart = 1
                                editBox.CursorPosition = #editBox.Text + 1
                                self.EditBoxCopying = false
                            end
                            funcs.ConnectEditBoxEvent = function(self)
                                if self.EditBoxEvent then
                                    self.EditBoxEvent:Disconnect()
                                end

                                self.EditBoxEvent = service.UserInputService.InputBegan:Connect(function(
                                    input
                                )
                                    if input.UserInputType ~= Enum.UserInputType.Keyboard then
                                        return
                                    end

                                    local keycodes = Enum.KeyCode
                                    local keycode = input.KeyCode

                                    local function setupMove(key, func)
                                        local endCon, finished

                                        endCon = service.UserInputService.InputEnded:Connect(function(
                                            input
                                        )
                                            if input.KeyCode ~= key then
                                                return
                                            end

                                            endCon.Disconnect(endCon)

                                            finished = true
                                        end)

                                        func()
                                        Lib.FastWait(0.5)

                                        while not finished do
                                            func()
                                            Lib.FastWait(0.03)
                                        end
                                    end

                                    if keycode == keycodes.Down then
                                        setupMove(keycodes.Down, function()
                                            self.CursorX = self.FloatCursorX
                                            self.CursorY = self.CursorY + 1

                                            self.UpdateCursor(self)
                                            self.JumpToCursor(self)
                                        end)
                                    elseif keycode == keycodes.Up then
                                        setupMove(keycodes.Up, function()
                                            self.CursorX = self.FloatCursorX
                                            self.CursorY = self.CursorY - 1

                                            self.UpdateCursor(self)
                                            self.JumpToCursor(self)
                                        end)
                                    elseif keycode == keycodes.Left then
                                        setupMove(keycodes.Left, function()
                                            local line = self.Lines[self.CursorY + 1] or ''

                                            self.CursorX = self.CursorX - 1 - (line.sub(line, self.CursorX - 3, self.CursorX) == tabReplacement and 3 or 0)

                                            if self.CursorX < 0 then
                                                self.CursorY = self.CursorY - 1

                                                local line2 = self.Lines[self.CursorY + 1] or ''

                                                self.CursorX = #line2
                                            end

                                            self.FloatCursorX = self.CursorX

                                            self.UpdateCursor(self)
                                            self.JumpToCursor(self)
                                        end)
                                    elseif keycode == keycodes.Right then
                                        setupMove(keycodes.Right, function()
                                            local line = self.Lines[self.CursorY + 1] or ''

                                            self.CursorX = self.CursorX + 1 + (line.sub(line, self.CursorX + 1, self.CursorX + 4) == tabReplacement and 3 or 0)

                                            if self.CursorX > #line then
                                                self.CursorY = self.CursorY + 1
                                                self.CursorX = 0
                                            end

                                            self.FloatCursorX = self.CursorX

                                            self.UpdateCursor(self)
                                            self.JumpToCursor(self)
                                        end)
                                    elseif keycode == keycodes.Backspace then
                                        setupMove(keycodes.Backspace, function()
                                            local startRange, endRange

                                            if self.IsValidRange(self) then
                                                startRange = self.SelectionRange[1]
                                                endRange = self.SelectionRange[2]
                                            else
                                                endRange = {
                                                    self.CursorX,
                                                    self.CursorY,
                                                }
                                            end
                                            if not startRange then
                                                local line = self.Lines[self.CursorY + 1] or ''

                                                self.CursorX = self.CursorX - 1 - (line.sub(line, self.CursorX - 3, self.CursorX) == tabReplacement and 3 or 0)

                                                if self.CursorX < 0 then
                                                    self.CursorY = self.CursorY - 1

                                                    local line2 = self.Lines[self.CursorY + 1] or ''

                                                    self.CursorX = #line2
                                                end

                                                self.FloatCursorX = self.CursorX

                                                self.UpdateCursor(self)

                                                startRange = startRange or {
                                                    self.CursorX,
                                                    self.CursorY,
                                                }
                                            end

                                            self.DeleteRange(self, {startRange, endRange}, false, true)
                                            self.ResetSelection(self, true)
                                            self.JumpToCursor(self)
                                        end)
                                    elseif keycode == keycodes.Delete then
                                        setupMove(keycodes.Delete, function()
                                            local startRange, endRange

                                            if self.IsValidRange(self) then
                                                startRange = self.SelectionRange[1]
                                                endRange = self.SelectionRange[2]
                                            else
                                                startRange = {
                                                    self.CursorX,
                                                    self.CursorY,
                                                }
                                            end
                                            if not endRange then
                                                local line = self.Lines[self.CursorY + 1] or ''
                                                local endCursorX = self.CursorX + 1 + (line.sub(line, self.CursorX + 1, self.CursorX + 4) == tabReplacement and 3 or 0)
                                                local endCursorY = self.CursorY

                                                if endCursorX > #line then
                                                    endCursorY = endCursorY + 1
                                                    endCursorX = 0
                                                end

                                                self.UpdateCursor(self)

                                                endRange = endRange or {endCursorX, endCursorY}
                                            end

                                            self.DeleteRange(self, {startRange, endRange}, false, true)
                                            self.ResetSelection(self, true)
                                            self.JumpToCursor(self)
                                        end)
                                    elseif service.UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                                        if keycode == keycodes.A then
                                            self.SelectionRange = {
                                                {0, 0},
                                                {
                                                    #self.Lines[#self.Lines],
                                                    #self.Lines - 1,
                                                },
                                            }

                                            self.SetCopyableSelection(self)
                                            self.Refresh(self)
                                        end
                                    end
                                end)
                            end
                            funcs.DisconnectEditBoxEvent = function(self)
                                if self.EditBoxEvent then
                                    self.EditBoxEvent:Disconnect()
                                end
                            end
                            funcs.ResetSelection = function(self, norefresh)
                                self.SelectionRange = {
                                    {
                                        -1,
                                        -1,
                                    },
                                    {
                                        -1,
                                        -1,
                                    },
                                }

                                if not norefresh then
                                    self.Refresh(self)
                                end
                            end
                            funcs.IsValidRange = function(self, range)
                                local selectionRange = range or self.SelectionRange
                                local selX, selY = selectionRange[1][1], selectionRange[1][2]
                                local sel2X, sel2Y = selectionRange[2][1], selectionRange[2][2]

                                if selX == -1 or (selX == sel2X and selY == sel2Y) then
                                    return false
                                end

                                return true
                            end
                            funcs.DeleteRange = function(
                                self,
                                range,
                                noprocess,
                                updatemouse
                            )
                                range = range or self.SelectionRange

                                if not self.IsValidRange(self, range) then
                                    return
                                end

                                local lines = self.Lines
                                local selX, selY = range[1][1], range[1][2]
                                local sel2X, sel2Y = range[2][1], range[2][2]
                                local deltaLines = sel2Y - selY

                                if not lines[selY + 1] or not lines[sel2Y + 1] then
                                    return
                                end

                                local leftSub = lines[selY + 1]:sub(1, selX)
                                local rightSub = lines[sel2Y + 1]:sub(sel2X + 1)

                                lines[selY + 1] = leftSub .. rightSub

                                local remove = table.remove

                                for i = 1, deltaLines do
                                    remove(lines, selY + 2)
                                end

                                if range == self.SelectionRange then
                                    self.SelectionRange = {
                                        {
                                            -1,
                                            -1,
                                        },
                                        {
                                            -1,
                                            -1,
                                        },
                                    }
                                end
                                if updatemouse then
                                    self.CursorX = selX
                                    self.CursorY = selY

                                    self.UpdateCursor(self)
                                end
                                if not noprocess then
                                    self.ProcessTextChange(self)
                                end
                            end
                            funcs.AppendText = function(self, text)
                                self.DeleteRange(self, nil, true, true)

                                local lines, cursorX, cursorY = self.Lines, self.CursorX, self.CursorY
                                local line = lines[cursorY + 1]
                                local before = line.sub(line, 1, cursorX)
                                local after = line.sub(line, cursorX + 1)

                                text = text.gsub(text, '\r\n', '\n')
                                text = self.ConvertText(self, text, true)

                                local textLines = text.split(text, '\n')
                                local insert = table.insert

                                for i = 1, #textLines do
                                    local linePos = cursorY + i

                                    if i > 1 then
                                        insert(lines, linePos, '')
                                    end

                                    local textLine = textLines[i]
                                    local newBefore = (i == 1 and before or '')
                                    local newAfter = (i == #textLines and after or '')

                                    lines[linePos] = newBefore .. textLine .. newAfter
                                end

                                if #textLines > 1 then
                                    cursorX = 0
                                end

                                self.ProcessTextChange(self)

                                self.CursorX = cursorX + #textLines[#textLines]
                                self.CursorY = cursorY + #textLines - 1

                                self.UpdateCursor(self)
                            end
                            funcs.ScrollDelta = function(self, x, y)
                                self.ScrollV:ScrollTo(self.ScrollV.Index + y)
                                self.ScrollH:ScrollTo(self.ScrollH.Index + x)
                            end
                            funcs.TabAdjust = function(self, x, y)
                                local lines = self.Lines
                                local line = lines[y + 1]

                                x = x + 1

                                if line then
                                    local left = line.sub(line, x - 1, x - 1)
                                    local middle = line.sub(line, x, x)
                                    local right = line.sub(line, x + 1, x + 1)
                                    local selRange = (#left > 0 and left or ' ') .. (#middle > 0 and middle or ' ') .. (#right > 0 and right or ' ')

                                    for i, v in pairs(tabJumps)do
                                        if selRange.find(selRange, i) then
                                            return v
                                        end
                                    end
                                end

                                return 0
                            end
                            funcs.SetEditing = function(self, on, input)
                                self.UpdateCursor(self, input)

                                if on then
                                    if self.Editable then
                                        self.GuiElems.EditBox.Text = ''

                                        self.GuiElems.EditBox:CaptureFocus()
                                    end
                                else
                                    self.GuiElems.EditBox:ReleaseFocus()
                                end
                            end
                            funcs.CursorAnim = function(self, on)
                                local cursor = self.GuiElems.Cursor
                                local animTime = tick()

                                self.LastAnimTime = animTime

                                if not on then
                                    return
                                end

                                lineTweens.Invis:Cancel()
                                lineTweens.Vis:Cancel()

                                cursor.BackgroundTransparency = 0

                                coroutine.wrap(function()
                                    while self.Editable do
                                        Lib.FastWait(0.5)

                                        if self.LastAnimTime ~= animTime then
                                            return
                                        end

                                        lineTweens.Invis:Play()
                                        Lib.FastWait(0.4)

                                        if self.LastAnimTime ~= animTime then
                                            return
                                        end

                                        lineTweens.Vis:Play()
                                        Lib.FastWait(0.2)
                                    end
                                end)()
                            end
                            funcs.MoveCursor = function(self, x, y)
                                self.CursorX = x
                                self.CursorY = y

                                self.UpdateCursor(self)
                                self.JumpToCursor(self)
                            end
                            funcs.JumpToCursor = function(self)
                                self.Refresh(self)
                            end
                            funcs.UpdateCursor = function(self, input)
                                local linesFrame = self.GuiElems.LinesFrame
                                local cursor = self.GuiElems.Cursor
                                local hSize = math.max(0, linesFrame.AbsoluteSize.X)
                                local vSize = math.max(0, linesFrame.AbsoluteSize.Y)
                                local maxLines = math.ceil(vSize / self.FontSize)
                                local maxCols = math.ceil(hSize / math.ceil(self.FontSize / 2))
                                local viewX, viewY = self.ViewX, self.ViewY
                                local totalLinesStr = tostring(#self.Lines)
                                local fontWidth = math.ceil(self.FontSize / 2)
                                local linesOffset = #totalLinesStr * fontWidth + 4 * fontWidth

                                if input then
                                    local linesFrame = self.GuiElems.LinesFrame
                                    local frameX, frameY = linesFrame.AbsolutePosition.X, linesFrame.AbsolutePosition.Y
                                    local mouseX, mouseY = input.Position.X, input.Position.Y
                                    local fontSizeX, fontSizeY = math.ceil(self.FontSize / 2), self.FontSize

                                    self.CursorX = self.ViewX + math.round((mouseX - frameX) / fontSizeX)
                                    self.CursorY = self.ViewY + math.floor((mouseY - frameY) / fontSizeY)
                                end

                                local cursorX, cursorY = self.CursorX, self.CursorY
                                local line = self.Lines[cursorY + 1] or ''

                                if cursorX > #line then
                                    cursorX = #line
                                elseif cursorX < 0 then
                                    cursorX = 0
                                end
                                if cursorY >= #self.Lines then
                                    cursorY = math.max(0, #self.Lines - 1)
                                elseif cursorY < 0 then
                                    cursorY = 0
                                end

                                cursorX = cursorX + self.TabAdjust(self, cursorX, cursorY)
                                self.CursorX = cursorX
                                self.CursorY = cursorY

                                local cursorVisible = (cursorX >= viewX) and (cursorY >= viewY) and (cursorX <= viewX + maxCols) and (cursorY <= viewY + maxLines)

                                if cursorVisible then
                                    local offX = (cursorX - viewX)
                                    local offY = (cursorY - viewY)

                                    cursor.Position = UDim2.new(0, linesOffset + offX * math.ceil(self.FontSize / 2) - 1, 0, offY * self.FontSize)
                                    cursor.Size = UDim2.new(0, 1, 0, self.FontSize + 2)
                                    cursor.Visible = true

                                    self.CursorAnim(self, true)
                                else
                                    cursor.Visible = false
                                end
                            end
                            funcs.MapNewLines = function(self)
                                local newLines = {}
                                local count = 1
                                local text = self.Text
                                local find = string.find
                                local init = 1
                                local pos = find(text, '\n', init, true)

                                while pos do
                                    newLines[count] = pos
                                    count = count + 1
                                    init = pos + 1
                                    pos = find(text, '\n', init, true)
                                end

                                self.NewLines = newLines
                            end
                            funcs.PreHighlight = function(self)
                                local start = tick()
                                local text = self.Text:gsub('\\\\', '\t')
                                local textLen = #text
                                local found = {}
                                local foundMap = {}
                                local extras = {}
                                local find = string.find
                                local sub = string.sub

                                self.ColoredLines = {}

                                local function findAll(str, pattern, typ, raw)
                                    local count = #found + 1
                                    local init = 1
                                    local x, y, extra = find(str, pattern, init, raw)

                                    while x do
                                        found[count] = x
                                        foundMap[x] = typ

                                        if extra then
                                            extras[x] = extra
                                        end

                                        count = count + 1
                                        init = y + 1
                                        x, y, extra = find(str, pattern, init, raw)
                                    end
                                end

                                local start = tick()

                                findAll(text, '"', 1, true)
                                findAll(text, "'", 2, true)
                                findAll(text, '%[(=*)%[', 3)
                                findAll(text, '--', 4, true)
                                table.sort(found)

                                local newLines = self.NewLines
                                local curLine = 0
                                local lineTableCount = 1
                                local lineStart = 0
                                local lineEnd = 0
                                local lastEnding = 0
                                local foundHighlights = {}

                                for i = 1, #found do
                                    local __DARKLUA_CONTINUE_747 = false

                                    repeat
                                        local pos = found[i]

                                        if pos <= lastEnding then
                                            __DARKLUA_CONTINUE_747 = true

                                            break
                                        end

                                        local ending = pos
                                        local typ = foundMap[pos]

                                        if typ == 1 then
                                            ending = find(text, '"', pos + 1, true)

                                            while ending and sub(text, ending - 1, ending - 1) == '\\' do
                                                ending = find(text, '"', ending + 1, true)
                                            end

                                            if not ending then
                                                ending = textLen
                                            end
                                        elseif typ == 2 then
                                            ending = find(text, "'", pos + 1, true)

                                            while ending and sub(text, ending - 1, ending - 1) == '\\' do
                                                ending = find(text, "'", ending + 1, true)
                                            end

                                            if not ending then
                                                ending = textLen
                                            end
                                        elseif typ == 3 then
                                            _, ending = find(text, ']' .. extras[pos] .. ']', pos + 1, true)

                                            if not ending then
                                                ending = textLen
                                            end
                                        elseif typ == 4 then
                                            local ahead = foundMap[pos + 2]

                                            if ahead == 3 then
                                                _, ending = find(text, ']' .. extras[pos + 2] .. ']', pos + 1, true)

                                                if not ending then
                                                    ending = textLen
                                                end
                                            else
                                                ending = find(text, '\n', pos + 1, true) or textLen
                                            end
                                        end

                                        while pos > lineEnd do
                                            curLine = curLine + 1
                                            lineEnd = newLines[curLine] or textLen + 1
                                        end
                                        while true do
                                            local lineTable = foundHighlights[curLine]

                                            if not lineTable then
                                                lineTable = {}
                                                foundHighlights[curLine] = lineTable
                                            end

                                            lineTable[pos] = {typ, ending}

                                            if ending > lineEnd then
                                                curLine = curLine + 1
                                                lineEnd = newLines[curLine] or textLen + 1
                                            else
                                                break
                                            end
                                        end

                                        lastEnding = ending
                                        __DARKLUA_CONTINUE_747 = true
                                    until true

                                    if not __DARKLUA_CONTINUE_747 then
                                        break
                                    end
                                end

                                self.PreHighlights = foundHighlights
                            end
                            funcs.HighlightLine = function(self, line)
                                local cached = self.ColoredLines[line]

                                if cached then
                                    return cached
                                end

                                local sub = string.sub
                                local find = string.find
                                local match = string.match
                                local highlights = {}
                                local preHighlights = self.PreHighlights[line] or {}
                                local lineText = self.Lines[line] or ''
                                local lineLen = #lineText
                                local lastEnding = 0
                                local currentType = 0
                                local lastWord
                                local wordBeginsDotted = false
                                local funcStatus = 0
                                local lineStart = self.NewLines[line - 1] or 0
                                local preHighlightMap = {}

                                for pos, data in next, preHighlights do
                                    local relativePos = pos - lineStart

                                    if relativePos < 1 then
                                        currentType = data[1]
                                        lastEnding = data[2] - lineStart
                                    else
                                        preHighlightMap[relativePos] = {
                                            data[1],
                                            data[2] - lineStart,
                                        }
                                    end
                                end

                                for col = 1, #lineText do
                                    local __DARKLUA_CONTINUE_753 = false

                                    repeat
                                        if col <= lastEnding then
                                            highlights[col] = currentType
                                            __DARKLUA_CONTINUE_753 = true

                                            break
                                        end

                                        local pre = preHighlightMap[col]

                                        if pre then
                                            currentType = pre[1]
                                            lastEnding = pre[2]
                                            highlights[col] = currentType
                                            wordBeginsDotted = false
                                            lastWord = nil
                                            funcStatus = 0
                                        else
                                            local char = sub(lineText, col, col)

                                            if find(char, '[%a_]') then
                                                local word = match(lineText, '[%a%d_]+', col)
                                                local wordType = (keywords[word] and 7) or (builtIns[word] and 8)

                                                lastEnding = col + #word - 1

                                                if wordType ~= 7 then
                                                    if wordBeginsDotted then
                                                        local prevBuiltIn = lastWord and builtIns[lastWord]

                                                        wordType = (prevBuiltIn and type(prevBuiltIn) == 'table' and prevBuiltIn[word] and 8) or 10
                                                    end
                                                    if wordType ~= 8 then
                                                        local x, y, br = find(lineText, '^%s*([%({"\'])', lastEnding + 1)

                                                        if x then
                                                            wordType = (funcStatus > 0 and br == '(' and 16) or 9
                                                            funcStatus = 0
                                                        end
                                                    end
                                                else
                                                    wordType = specialKeywordsTypes[word] or wordType
                                                    funcStatus = (word == 'function' and 1 or 0)
                                                end

                                                lastWord = word
                                                wordBeginsDotted = false

                                                if funcStatus > 0 then
                                                    funcStatus = 1
                                                end
                                                if wordType then
                                                    currentType = wordType
                                                    highlights[col] = currentType
                                                else
                                                    currentType = nil
                                                end
                                            elseif find(char, '%p') then
                                                local isDot = (char == '.')
                                                local isNum = isDot and find(sub(lineText, col + 1, col + 1), '%d')

                                                highlights[col] = (isNum and 6 or 5)

                                                if not isNum then
                                                    local dotStr = isDot and match(lineText, '%.%.?%.?', col)

                                                    if dotStr and #dotStr > 1 then
                                                        currentType = 5
                                                        lastEnding = col + #dotStr - 1
                                                        wordBeginsDotted = false
                                                        lastWord = nil
                                                        funcStatus = 0
                                                    else
                                                        if isDot then
                                                            if wordBeginsDotted then
                                                                lastWord = nil
                                                            else
                                                                wordBeginsDotted = true
                                                            end
                                                        else
                                                            wordBeginsDotted = false
                                                            lastWord = nil
                                                        end

                                                        funcStatus = ((isDot or char == ':') and funcStatus == 1 and 2) or 0
                                                    end
                                                end
                                            elseif find(char, '%d') then
                                                local _, endPos = find(lineText, '%x+', col)
                                                local endPart = sub(lineText, endPos, endPos + 1)

                                                if (endPart == 'e+' or endPart == 'e-') and find(sub(lineText, endPos + 2, endPos + 2), '%d') then
                                                    endPos = endPos + 1
                                                end

                                                currentType = 6
                                                lastEnding = endPos
                                                highlights[col] = 6
                                                wordBeginsDotted = false
                                                lastWord = nil
                                                funcStatus = 0
                                            else
                                                highlights[col] = currentType

                                                local _, endPos = find(lineText, '%s+', col)

                                                if endPos then
                                                    lastEnding = endPos
                                                end
                                            end
                                        end

                                        __DARKLUA_CONTINUE_753 = true
                                    until true

                                    if not __DARKLUA_CONTINUE_753 then
                                        break
                                    end
                                end

                                self.ColoredLines[line] = highlights

                                return highlights
                            end
                            funcs.Refresh = function(self)
                                local start = tick()
                                local linesFrame = self.Frame.Lines
                                local hSize = math.max(0, linesFrame.AbsoluteSize.X)
                                local vSize = math.max(0, linesFrame.AbsoluteSize.Y)
                                local maxLines = math.ceil(vSize / self.FontSize)
                                local maxCols = math.ceil(hSize / math.ceil(self.FontSize / 2))
                                local gsub = string.gsub
                                local sub = string.sub
                                local viewX, viewY = self.ViewX, self.ViewY
                                local lineNumberStr = ''

                                for row = 1, maxLines do
                                    local lineFrame = self.LineFrames[row]

                                    if not lineFrame then
                                        lineFrame = Instance.new('Frame')
                                        lineFrame.Name = 'Line'
                                        lineFrame.Position = UDim2.new(0, 0, 0, (row - 1) * self.FontSize)
                                        lineFrame.Size = UDim2.new(1, 0, 0, self.FontSize)
                                        lineFrame.BorderSizePixel = 0
                                        lineFrame.BackgroundTransparency = 1

                                        local selectionHighlight = Instance.new('Frame')

                                        selectionHighlight.Name = 'SelectionHighlight'
                                        selectionHighlight.BorderSizePixel = 0
                                        selectionHighlight.BackgroundColor3 = Settings.Theme.Syntax.SelectionBack
                                        selectionHighlight.Parent = lineFrame

                                        local label = Instance.new('TextLabel')

                                        label.Name = 'Label'
                                        label.BackgroundTransparency = 1
                                        label.Font = Enum.Font.Code
                                        label.TextSize = self.FontSize
                                        label.Size = UDim2.new(1, 0, 0, self.FontSize)
                                        label.RichText = true
                                        label.TextXAlignment = Enum.TextXAlignment.Left
                                        label.TextColor3 = self.Colors.Text
                                        label.ZIndex = 2
                                        label.Parent = lineFrame
                                        lineFrame.Parent = linesFrame
                                        self.LineFrames[row] = lineFrame
                                    end

                                    local relaY = viewY + row
                                    local lineText = self.Lines[relaY] or ''
                                    local resText = ''
                                    local highlights = self.HighlightLine(self, relaY)
                                    local colStart = viewX + 1
                                    local richTemplates = self.RichTemplates
                                    local textTemplate = richTemplates.Text
                                    local selectionTemplate = richTemplates.Selection
                                    local curType = highlights[colStart]
                                    local curTemplate = richTemplates[typeMap[curType] ] or textTemplate
                                    local selectionRange = self.SelectionRange
                                    local selPos1 = selectionRange[1]
                                    local selPos2 = selectionRange[2]
                                    local selRow, selColumn = selPos1[2], selPos1[1]
                                    local sel2Row, sel2Column = selPos2[2], selPos2[1]
                                    local selRelaX, selRelaY = viewX, relaY - 1

                                    if selRelaY >= selPos1[2] and selRelaY <= selPos2[2] then
                                        local fontSizeX = math.ceil(self.FontSize / 2)
                                        local posX = (selRelaY == selPos1[2] and selPos1[1] or 0) - viewX
                                        local sizeX = (selRelaY == selPos2[2] and selPos2[1] - posX - viewX or maxCols + viewX)

                                        lineFrame.SelectionHighlight.Position = UDim2.new(0, posX * fontSizeX, 0, 0)
                                        lineFrame.SelectionHighlight.Size = UDim2.new(0, sizeX * fontSizeX, 1, 0)
                                        lineFrame.SelectionHighlight.Visible = true
                                    else
                                        lineFrame.SelectionHighlight.Visible = false
                                    end

                                    local inSelection = selRelaY >= selRow and selRelaY <= sel2Row and (selRelaY == selRow and viewX >= selColumn or selRelaY ~= selRow) and (selRelaY == sel2Row and viewX < sel2Column or selRelaY ~= sel2Row)

                                    if inSelection then
                                        curType = -999
                                        curTemplate = selectionTemplate
                                    end

                                    for col = 2, maxCols do
                                        local relaX = viewX + col
                                        local selRelaX = relaX - 1
                                        local posType = highlights[relaX]
                                        local inSelection = selRelaY >= selRow and selRelaY <= sel2Row and (selRelaY == selRow and selRelaX >= selColumn or selRelaY ~= selRow) and (selRelaY == sel2Row and selRelaX < sel2Column or selRelaY ~= sel2Row)

                                        if inSelection then
                                            posType = -999
                                        end
                                        if posType ~= curType then
                                            local template = (inSelection and selectionTemplate) or richTemplates[typeMap[posType] ] or textTemplate

                                            if template ~= curTemplate then
                                                local nextText = gsub(sub(lineText, colStart, relaX - 1), '[\'"<>&]', richReplace)

                                                resText = resText .. (curTemplate ~= textTemplate and (curTemplate .. nextText .. '</font>') or nextText)
                                                colStart = relaX
                                                curTemplate = template
                                            end

                                            curType = posType
                                        end
                                    end

                                    local lastText = gsub(sub(lineText, colStart, viewX + maxCols), '[\'"<>&]', richReplace)

                                    if #lastText > 0 then
                                        resText = resText .. (curTemplate ~= textTemplate and (curTemplate .. lastText .. '</font>') or lastText)
                                    end
                                    if self.Lines[relaY] then
                                        lineNumberStr = lineNumberStr .. (relaY == self.CursorY and ('<b>' .. relaY .. '</b>\n') or relaY .. '\n')
                                    end

                                    lineFrame.Label.Text = resText
                                end
                                for i = maxLines + 1, #self.LineFrames do
                                    self.LineFrames[i]:Destroy()

                                    self.LineFrames[i] = nil
                                end

                                self.Frame.LineNumbers.Text = lineNumberStr

                                self.UpdateCursor(self)
                            end
                            funcs.UpdateView = function(self)
                                local totalLinesStr = tostring(#self.Lines)
                                local fontWidth = math.ceil(self.FontSize / 2)
                                local linesOffset = #totalLinesStr * fontWidth + 4 * fontWidth
                                local linesFrame = self.Frame.Lines
                                local hSize = linesFrame.AbsoluteSize.X
                                local vSize = linesFrame.AbsoluteSize.Y
                                local maxLines = math.ceil(vSize / self.FontSize)
                                local totalWidth = self.MaxTextCols * fontWidth
                                local scrollV = self.ScrollV
                                local scrollH = self.ScrollH

                                scrollV.VisibleSpace = maxLines
                                scrollV.TotalSpace = #self.Lines + 1
                                scrollH.VisibleSpace = math.ceil(hSize / fontWidth)
                                scrollH.TotalSpace = self.MaxTextCols + 1
                                scrollV.Gui.Visible = #self.Lines + 1 > maxLines
                                scrollH.Gui.Visible = totalWidth > hSize

                                local oldOffsets = self.FrameOffsets

                                self.FrameOffsets = Vector2.new(scrollV.Gui.Visible and 
-16 or 0, scrollH.Gui.Visible and -16 or 0)

                                if oldOffsets ~= self.FrameOffsets then
                                    self.UpdateView(self)
                                else
                                    scrollV.ScrollTo(scrollV, self.ViewY, true)
                                    scrollH.ScrollTo(scrollH, self.ViewX, true)

                                    if scrollV.Gui.Visible and scrollH.Gui.Visible then
                                        scrollV.Gui.Size = UDim2.new(0, 16, 1, -16)
                                        scrollH.Gui.Size = UDim2.new(1, -16, 0, 16)
                                        self.GuiElems.ScrollCorner.Visible = true
                                    else
                                        scrollV.Gui.Size = UDim2.new(0, 16, 1, 0)
                                        scrollH.Gui.Size = UDim2.new(1, 0, 0, 16)
                                        self.GuiElems.ScrollCorner.Visible = false
                                    end

                                    self.ViewY = scrollV.Index
                                    self.ViewX = scrollH.Index
                                    self.Frame.Lines.Position = UDim2.new(0, linesOffset, 0, 0)
                                    self.Frame.Lines.Size = UDim2.new(1, -linesOffset + oldOffsets.X, 1, oldOffsets.Y)
                                    self.Frame.LineNumbers.Position = UDim2.new(0, fontWidth, 0, 0)
                                    self.Frame.LineNumbers.Size = UDim2.new(0, #totalLinesStr * fontWidth, 1, oldOffsets.Y)
                                    self.Frame.LineNumbers.TextSize = self.FontSize
                                end
                            end
                            funcs.ProcessTextChange = function(self)
                                local maxCols = 0
                                local lines = self.Lines

                                for i = 1, #lines do
                                    local lineLen = #lines[i]

                                    if lineLen > maxCols then
                                        maxCols = lineLen
                                    end
                                end

                                self.MaxTextCols = maxCols

                                self.UpdateView(self)

                                self.Text = table.concat(self.Lines, '\n')

                                self.MapNewLines(self)
                                self.PreHighlight(self)
                                self.Refresh(self)
                            end
                            funcs.ConvertText = function(self, text, toEditor)
                                if toEditor then
                                    return text.gsub(text, '\t', (' %s ').format((' %s '), tabSub))
                                else
                                    return text.gsub(text, (' %s ').format((' %s '), tabSub), '\t')
                                end
                            end
                            funcs.GetText = function(self)
                                local source = table.concat(self.Lines, '\n')

                                return self.ConvertText(self, source, false)
                            end
                            funcs.SetText = function(self, txt)
                                txt = self.ConvertText(self, txt, true)

                                local lines = self.Lines

                                table.clear(lines)

                                local count = 1

                                for line in txt.gmatch(txt, '([^\n\r]*)[\n\r]?')do
                                    local len = #line

                                    lines[count] = line
                                    count = count + 1
                                end

                                self.ProcessTextChange(self)
                            end
                            funcs.MakeRichTemplates = function(self)
                                local floor = math.floor
                                local templates = {}

                                for name, color in pairs(self.Colors)do
                                    templates[name] = ('<font color="rgb(%s,%s,%s)">').format(('<font color="rgb(%s,%s,%s)">'), floor(color.r * 255), floor(color.g * 255), floor(color.b * 255))
                                end

                                self.RichTemplates = templates
                            end
                            funcs.ApplyTheme = function(self)
                                local colors = Settings.Theme.Syntax

                                self.Colors = colors
                                self.Frame.LineNumbers.TextColor3 = colors.Text
                                self.Frame.BackgroundColor3 = colors.Background
                            end

                            local mt = {__index = funcs}

                            local function new()
                                if not builtInInited then
                                    initBuiltIn()
                                end

                                local scrollV = Lib.ScrollBar.new()
                                local scrollH = Lib.ScrollBar.new(true)

                                scrollH.Gui.Position = UDim2.new(0, 0, 1, -16)

                                local obj = setmetatable({
                                    FontSize = 15,
                                    ViewX = 0,
                                    ViewY = 0,
                                    Colors = Settings.Theme.Syntax,
                                    ColoredLines = {},
                                    Lines = {
                                        '',
                                    },
                                    LineFrames = {},
                                    Editable = true,
                                    Editing = false,
                                    CursorX = 0,
                                    CursorY = 0,
                                    FloatCursorX = 0,
                                    Text = '',
                                    PreHighlights = {},
                                    SelectionRange = {
                                        {
                                            -1,
                                            -1,
                                        },
                                        {
                                            -1,
                                            -1,
                                        },
                                    },
                                    NewLines = {},
                                    FrameOffsets = Vector2.new(0, 0),
                                    MaxTextCols = 0,
                                    ScrollV = scrollV,
                                    ScrollH = scrollH,
                                }, mt)

                                scrollV.WheelIncrement = 3
                                scrollH.Increment = 2
                                scrollH.WheelIncrement = 7

                                scrollV.Scrolled:Connect(function()
                                    obj.ViewY = scrollV.Index

                                    obj.Refresh(obj)
                                end)
                                scrollH.Scrolled:Connect(function()
                                    obj.ViewX = scrollH.Index

                                    obj.Refresh(obj)
                                end)
                                makeFrame(obj)
                                obj.MakeRichTemplates(obj)
                                obj.ApplyTheme(obj)
                                scrollV.SetScrollFrame(scrollV, obj.Frame.Lines)

                                scrollV.Gui.Parent = obj.Frame
                                scrollH.Gui.Parent = obj.Frame

                                obj.UpdateView(obj)
                                obj.Frame:GetPropertyChangedSignal('AbsoluteSize'):Connect(function(
                                )
                                    obj.UpdateView(obj)
                                    obj.Refresh(obj)
                                end)

                                return obj
                            end

                            return {new = new}
                        end)()
                        Lib.Checkbox = (function()
                            local funcs = {}
                            local c3 = Color3.fromRGB
                            local v2 = Vector2.new
                            local ud2s = UDim2.fromScale
                            local ud2o = UDim2.fromOffset
                            local ud = UDim.new
                            local max = math.max
                            local new = Instance.new
                            local TweenSize = new('Frame').TweenSize
                            local ti = TweenInfo.new
                            local delay = delay

                            local function ripple(object, color)
                                local circle = new('Frame')

                                circle.BackgroundColor3 = color
                                circle.BackgroundTransparency = 0.75
                                circle.BorderSizePixel = 0
                                circle.AnchorPoint = v2(0.5, 0.5)
                                circle.Size = ud2o()
                                circle.Position = ud2s(0.5, 0.5)
                                circle.Parent = object

                                local rounding = new('UICorner')

                                rounding.CornerRadius = ud(1)
                                rounding.Parent = circle

                                local abssz = object.AbsoluteSize
                                local size = max(abssz.X, abssz.Y) * 5 / 3

                                TweenSize(circle, ud2o(size, size), 'Out', 'Quart', 0.4)
                                service.TweenService:Create(circle, ti(0.4, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {BackgroundTransparency = 1}):Play()
                                service.Debris:AddItem(circle, 0.4)
                            end
                            local function initGui(self, frame)
                                local checkbox = frame or create({
                                    {
                                        1,
                                        'ImageButton',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Name = 'Checkbox',
                                            Position = UDim2.new(0, 3, 0, 3),
                                            Size = UDim2.new(0, 16, 0, 16),
                                        },
                                    },
                                    {
                                        2,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Name = 'ripples',
                                            Parent = {1},
                                            Size = UDim2.new(1, 0, 1, 0),
                                        },
                                    },
                                    {
                                        3,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.10196078568697, 0.10196078568697, 0.10196078568697),
                                            BorderSizePixel = 0,
                                            Name = 'outline',
                                            Parent = {1},
                                            Size = UDim2.new(0, 16, 0, 16),
                                        },
                                    },
                                    {
                                        4,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14117647707462),
                                            BorderSizePixel = 0,
                                            Name = 'filler',
                                            Parent = {3},
                                            Position = UDim2.new(0, 1, 0, 1),
                                            Size = UDim2.new(0, 14, 0, 14),
                                        },
                                    },
                                    {
                                        5,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.90196084976196, 0.90196084976196, 0.90196084976196),
                                            BorderSizePixel = 0,
                                            Name = 'top',
                                            Parent = {4},
                                            Size = UDim2.new(0, 16, 0, 0),
                                        },
                                    },
                                    {
                                        6,
                                        'Frame',
                                        {
                                            AnchorPoint = Vector2.new(0, 1),
                                            BackgroundColor3 = Color3.new(0.90196084976196, 0.90196084976196, 0.90196084976196),
                                            BorderSizePixel = 0,
                                            Name = 'bottom',
                                            Parent = {4},
                                            Position = UDim2.new(0, 0, 0, 14),
                                            Size = UDim2.new(0, 16, 0, 0),
                                        },
                                    },
                                    {
                                        7,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.90196084976196, 0.90196084976196, 0.90196084976196),
                                            BorderSizePixel = 0,
                                            Name = 'left',
                                            Parent = {4},
                                            Size = UDim2.new(0, 0, 0, 16),
                                        },
                                    },
                                    {
                                        8,
                                        'Frame',
                                        {
                                            AnchorPoint = Vector2.new(1, 0),
                                            BackgroundColor3 = Color3.new(0.90196084976196, 0.90196084976196, 0.90196084976196),
                                            BorderSizePixel = 0,
                                            Name = 'right',
                                            Parent = {4},
                                            Position = UDim2.new(0, 14, 0, 0),
                                            Size = UDim2.new(0, 0, 0, 16),
                                        },
                                    },
                                    {
                                        9,
                                        'Frame',
                                        {
                                            AnchorPoint = Vector2.new(0.5, 0.5),
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            ClipsDescendants = true,
                                            Name = 'checkmark',
                                            Parent = {4},
                                            Position = UDim2.new(0.5, 0, 0.5, 0),
                                            Size = UDim2.new(0, 0, 0, 20),
                                        },
                                    },
                                    {
                                        10,
                                        'ImageLabel',
                                        {
                                            AnchorPoint = Vector2.new(0.5, 0.5),
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Image = 'rbxassetid://6234266378',
                                            Parent = {9},
                                            Position = UDim2.new(0.5, 0, 0.5, 0),
                                            ScaleType = 3,
                                            Size = UDim2.new(0, 15, 0, 11),
                                        },
                                    },
                                    {
                                        11,
                                        'ImageLabel',
                                        {
                                            AnchorPoint = Vector2.new(0.5, 0.5),
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Image = 'rbxassetid://6401617475',
                                            ImageColor3 = Color3.new(0.20784313976765, 0.69803923368454, 0.98431372642517),
                                            Name = 'checkmark2',
                                            Parent = {4},
                                            Position = UDim2.new(0.5, 0, 0.5, 0),
                                            Size = UDim2.new(0, 12, 0, 12),
                                            Visible = false,
                                        },
                                    },
                                    {
                                        12,
                                        'ImageLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Image = 'rbxassetid://6425281788',
                                            ImageTransparency = 0.20000000298023,
                                            Name = 'middle',
                                            Parent = {4},
                                            ScaleType = 2,
                                            Size = UDim2.new(1, 0, 1, 0),
                                            TileSize = UDim2.new(0, 2, 0, 2),
                                            Visible = false,
                                        },
                                    },
                                    {
                                        13,
                                        'UICorner',
                                        {
                                            CornerRadius = UDim.new(0, 2),
                                            Parent = {3},
                                        },
                                    },
                                })
                                local outline = checkbox.outline
                                local filler = outline.filler
                                local checkmark = filler.checkmark
                                local ripples_container = checkbox.ripples
                                local top, bottom, left, right = filler.top, filler.bottom, filler.left, filler.right

                                self.Gui = checkbox
                                self.GuiElems = {
                                    Top = top,
                                    Bottom = bottom,
                                    Left = left,
                                    Right = right,
                                    Outline = outline,
                                    Filler = filler,
                                    Checkmark = checkmark,
                                    Checkmark2 = filler.checkmark2,
                                    Middle = filler.middle,
                                }

                                checkbox.Activated:Connect(function()
                                    if Lib.CheckMouseInGui(checkbox) then
                                        if self.Style == 0 then
                                            ripple(ripples_container, self.Disabled and self.Colors.Disabled or self.Colors.Primary)
                                        end
                                        if not self.Disabled then
                                            self.SetState(self, not self.Toggled, true)
                                        else
                                            self.Paint(self)
                                        end

                                        self.OnInput:Fire()
                                    end
                                end)
                                self.Paint(self)
                            end

                            funcs.Collapse = function(self, anim)
                                local guiElems = self.GuiElems

                                if anim then
                                    TweenSize(guiElems.Top, ud2o(14, 14), 'In', 'Quart', 0.26666666666666666, true)
                                    TweenSize(guiElems.Bottom, ud2o(14, 14), 'In', 'Quart', 0.26666666666666666, true)
                                    TweenSize(guiElems.Left, ud2o(14, 14), 'In', 'Quart', 0.26666666666666666, true)
                                    TweenSize(guiElems.Right, ud2o(14, 14), 'In', 'Quart', 0.26666666666666666, true)
                                else
                                    guiElems.Top.Size = ud2o(14, 14)
                                    guiElems.Bottom.Size = ud2o(14, 14)
                                    guiElems.Left.Size = ud2o(14, 14)
                                    guiElems.Right.Size = ud2o(14, 14)
                                end
                            end
                            funcs.Expand = function(self, anim)
                                local guiElems = self.GuiElems

                                if anim then
                                    TweenSize(guiElems.Top, ud2o(14, 0), 'InOut', 'Quart', 0.26666666666666666, true)
                                    TweenSize(guiElems.Bottom, ud2o(14, 0), 'InOut', 'Quart', 0.26666666666666666, true)
                                    TweenSize(guiElems.Left, ud2o(0, 14), 'InOut', 'Quart', 0.26666666666666666, true)
                                    TweenSize(guiElems.Right, ud2o(0, 14), 'InOut', 'Quart', 0.26666666666666666, true)
                                else
                                    guiElems.Top.Size = ud2o(14, 0)
                                    guiElems.Bottom.Size = ud2o(14, 0)
                                    guiElems.Left.Size = ud2o(0, 14)
                                    guiElems.Right.Size = ud2o(0, 14)
                                end
                            end
                            funcs.Paint = function(self)
                                local guiElems = self.GuiElems

                                if self.Style == 0 then
                                    local color_base = self.Disabled and self.Colors.Disabled

                                    guiElems.Outline.BackgroundColor3 = color_base or (self.Toggled and self.Colors.Primary) or self.Colors.Secondary

                                    local walls_color = color_base or self.Colors.Primary

                                    guiElems.Top.BackgroundColor3 = walls_color
                                    guiElems.Bottom.BackgroundColor3 = walls_color
                                    guiElems.Left.BackgroundColor3 = walls_color
                                    guiElems.Right.BackgroundColor3 = walls_color
                                else
                                    guiElems.Outline.BackgroundColor3 = self.Disabled and self.Colors.Disabled or self.Colors.Secondary
                                    guiElems.Filler.BackgroundColor3 = self.Disabled and self.Colors.DisabledBackground or self.Colors.Background
                                    guiElems.Checkmark2.ImageColor3 = self.Disabled and self.Colors.DisabledCheck or self.Colors.Primary
                                end
                            end
                            funcs.SetState = function(self, val, anim)
                                self.Toggled = val

                                if self.OutlineColorTween then
                                    self.OutlineColorTween:Cancel()
                                end

                                local setStateTime = tick()

                                self.LastSetStateTime = setStateTime

                                if self.Toggled then
                                    if self.Style == 0 then
                                        if anim then
                                            self.OutlineColorTween = service.TweenService:Create(self.GuiElems.Outline, ti(0.26666666666666666, Enum.EasingStyle.Circular, Enum.EasingDirection.Out), {
                                                BackgroundColor3 = self.Colors.Primary,
                                            })

                                            self.OutlineColorTween:Play()
                                            delay(0.15, function()
                                                if setStateTime ~= self.LastSetStateTime then
                                                    return
                                                end

                                                self.Paint(self)
                                                TweenSize(self.GuiElems.Checkmark, ud2o(14, 20), 'Out', 'Bounce', 0.13333333333333333, true)
                                            end)
                                        else
                                            self.GuiElems.Outline.BackgroundColor3 = self.Colors.Primary

                                            self.Paint(self)

                                            self.GuiElems.Checkmark.Size = ud2o(14, 20)
                                        end

                                        self.Collapse(self, anim)
                                    else
                                        self.Paint(self)

                                        self.GuiElems.Checkmark2.Visible = true
                                        self.GuiElems.Middle.Visible = false
                                    end
                                else
                                    if self.Style == 0 then
                                        if anim then
                                            self.OutlineColorTween = service.TweenService:Create(self.GuiElems.Outline, ti(0.26666666666666666, Enum.EasingStyle.Circular, Enum.EasingDirection.In), {
                                                BackgroundColor3 = self.Colors.Secondary,
                                            })

                                            self.OutlineColorTween:Play()
                                            delay(0.15, function()
                                                if setStateTime ~= self.LastSetStateTime then
                                                    return
                                                end

                                                self.Paint(self)
                                                TweenSize(self.GuiElems.Checkmark, ud2o(0, 20), 'Out', 'Quad', 6.666666666666666E-2, true)
                                            end)
                                        else
                                            self.GuiElems.Outline.BackgroundColor3 = self.Colors.Secondary

                                            self.Paint(self)

                                            self.GuiElems.Checkmark.Size = ud2o(0, 20)
                                        end

                                        self.Expand(self, anim)
                                    else
                                        self.Paint(self)

                                        self.GuiElems.Checkmark2.Visible = false
                                        self.GuiElems.Middle.Visible = self.Toggled == nil
                                    end
                                end
                            end

                            local mt = {__index = funcs}

                            local function new(style)
                                local obj = setmetatable({
                                    Toggled = false,
                                    Disabled = false,
                                    OnInput = Lib.Signal.new(),
                                    Style = style or 0,
                                    Colors = {
                                        Background = c3(36, 36, 36),
                                        Primary = c3(49, 176, 230),
                                        Secondary = c3(25, 25, 25),
                                        Disabled = c3(64, 64, 64),
                                        DisabledBackground = c3(52, 52, 52),
                                        DisabledCheck = c3(80, 80, 80),
                                    },
                                }, mt)

                                initGui(obj)

                                return obj
                            end
                            local function fromFrame(frame)
                                local obj = setmetatable({
                                    Toggled = false,
                                    Disabled = false,
                                    Colors = {
                                        Background = c3(36, 36, 36),
                                        Primary = c3(49, 176, 230),
                                        Secondary = c3(25, 25, 25),
                                        Disabled = c3(64, 64, 64),
                                        DisabledBackground = c3(52, 52, 52),
                                    },
                                }, mt)

                                initGui(obj, frame)

                                return obj
                            end

                            return {
                                new = new,
                                fromFrame,
                            }
                        end)()
                        Lib.BrickColorPicker = (function()
                            local funcs = {}
                            local paletteCount = 0
                            local mouse = service.Players.LocalPlayer:GetMouse()
                            local hexStartX = 4
                            local hexSizeX = 27
                            local hexTriangleStart = 1
                            local hexTriangleSize = 8
                            local bottomColors = {
                                Color3.fromRGB(17, 17, 17),
                                Color3.fromRGB(99, 95, 98),
                                Color3.fromRGB(163, 162, 165),
                                Color3.fromRGB(205, 205, 205),
                                Color3.fromRGB(223, 223, 222),
                                Color3.fromRGB(237, 234, 234),
                                Color3.fromRGB(27, 42, 53),
                                Color3.fromRGB(91, 93, 105),
                                Color3.fromRGB(159, 161, 172),
                                Color3.fromRGB(202, 203, 209),
                                Color3.fromRGB(231, 231, 236),
                                Color3.fromRGB(248, 248, 248),
                            }

                            local function isMouseInHexagon(hex, touchPos)
                                local relativeX = touchPos.X - hex.AbsolutePosition.X
                                local relativeY = touchPos.Y - hex.AbsolutePosition.Y

                                if relativeX >= hexStartX and relativeX < hexStartX + hexSizeX then
                                    relativeX = relativeX - 4

                                    local relativeWidth = (13 - math.min(relativeX, 26 - relativeX)) / 13

                                    if relativeY >= hexTriangleStart + hexTriangleSize * relativeWidth and relativeY < hex.AbsoluteSize.Y - hexTriangleStart - hexTriangleSize * relativeWidth then
                                        return true
                                    end
                                end

                                return false
                            end
                            local function hexInput(self, hex, color)
                                hex.InputBegan:Connect(function(input)
                                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                        if isMouseInHexagon(hex, input.Position) then
                                            self.OnSelect:Fire(color)
                                            self.Close(self)
                                        end
                                    end
                                end)
                                hex.InputChanged:Connect(function(input)
                                    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                        if isMouseInHexagon(hex, input.Position) then
                                            self.OnPreview:Fire(color)
                                        end
                                    end
                                end)
                            end
                            local function createGui(self)
                                local gui = create({
                                    {
                                        1,
                                        'ScreenGui',
                                        {
                                            Name = 'BrickColor',
                                        },
                                    },
                                    {
                                        2,
                                        'Frame',
                                        {
                                            Active = true,
                                            BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                            BorderColor3 = Color3.new(0.1294117718935, 0.1294117718935, 0.1294117718935),
                                            Parent = {1},
                                            Position = UDim2.new(0.40000000596046, 0, 0.40000000596046, 0),
                                            Size = UDim2.new(0, 337, 0, 380),
                                        },
                                    },
                                    {
                                        3,
                                        'TextButton',
                                        {
                                            BackgroundColor3 = Color3.new(0.2352941185236, 0.2352941185236, 0.2352941185236),
                                            BorderColor3 = Color3.new(0.21568627655506, 0.21568627655506, 0.21568627655506),
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'MoreColors',
                                            Parent = {2},
                                            Position = UDim2.new(0, 5, 1, -30),
                                            Size = UDim2.new(1, -10, 0, 25),
                                            Text = 'More Colors',
                                            TextColor3 = Color3.new(1, 1, 1),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        4,
                                        'ImageLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Image = 'rbxassetid://1281023007',
                                            ImageColor3 = Color3.new(0.33333334326744, 0.33333334326744, 0.49803924560547),
                                            Name = 'Hex',
                                            Parent = {2},
                                            Size = UDim2.new(0, 35, 0, 35),
                                            Visible = false,
                                        },
                                    },
                                })
                                local colorFrame = gui.Frame
                                local hex = colorFrame.Hex

                                for row = 1, 13 do
                                    local columns = math.min(row, 14 - row) + 6

                                    for column = 1, columns do
                                        local nextColor = BrickColor.palette(paletteCount).Color
                                        local newHex = hex.Clone(hex)

                                        newHex.Position = UDim2.new(0, (column - 1) * 25 - (columns - 7) * 13 + 78 + 1, 0, (row - 1) * 23 + 4)
                                        newHex.ImageColor3 = nextColor
                                        newHex.Visible = true

                                        hexInput(self, newHex, nextColor)

                                        newHex.Parent = colorFrame
                                        paletteCount = paletteCount + 1
                                    end
                                end
                                for column = 1, 12 do
                                    local nextColor = bottomColors[column]
                                    local newHex = hex.Clone(hex)

                                    newHex.Position = UDim2.new(0, (column - 1) * 25 - 65 + 78 + 3, 0, 308)
                                    newHex.ImageColor3 = nextColor
                                    newHex.Visible = true

                                    hexInput(self, newHex, nextColor)

                                    newHex.Parent = colorFrame
                                    paletteCount = paletteCount + 1
                                end

                                colorFrame.MoreColors.MouseButton1Click:Connect(function(
                                )
                                    self.OnMoreColors:Fire()
                                    self.Close(self)
                                end)

                                self.Gui = gui
                            end

                            funcs.SetMoreColorsVisible = function(self, vis)
                                local colorFrame = self.Gui.Frame

                                colorFrame.Size = UDim2.new(0, 337, 0, 380 - (not vis and 33 or 0))
                                colorFrame.MoreColors.Visible = vis
                            end
                            funcs.Show = function(self, x, y, prevColor)
                                self.PrevColor = prevColor or self.PrevColor

                                local reverseY = false
                                local x, y = x or mouse.X, y or mouse.Y
                                local maxX, maxY = mouse.ViewSizeX, mouse.ViewSizeY

                                Lib.ShowGui(self.Gui)

                                local sizeX, sizeY = self.Gui.Frame.AbsoluteSize.X, self.Gui.Frame.AbsoluteSize.Y

                                if x + sizeX > maxX then
                                    x = self.ReverseX and x - sizeX or maxX - sizeX
                                end
                                if y + sizeY > maxY then
                                    reverseY = true
                                end

                                local closable = false

                                if self.CloseEvent then
                                    self.CloseEvent:Disconnect()
                                end

                                self.CloseEvent = service.UserInputService.InputBegan:Connect(function(
                                    input
                                )
                                    if not closable or (input.UserInputType ~= Enum.UserInputType.MouseButton1 and input.UserInputType ~= Enum.UserInputType.Touch) then
                                        return
                                    end
                                    if not Lib.CheckMouseInGui(self.Gui.Frame) then
                                        self.CloseEvent:Disconnect()
                                        self.Close(self)
                                    end
                                end)

                                if reverseY then
                                    local newY = y - sizeY - (self.ReverseYOffset or 0)

                                    y = newY >= 0 and newY or 0
                                end

                                self.Gui.Frame.Position = UDim2.new(0, x, 0, y)

                                Lib.FastWait()

                                closable = true
                            end
                            funcs.Close = function(self)
                                self.Gui.Parent = nil

                                self.OnCancel:Fire()
                            end

                            local mt = {__index = funcs}

                            local function new()
                                local obj = setmetatable({
                                    OnPreview = Lib.Signal.new(),
                                    OnSelect = Lib.Signal.new(),
                                    OnCancel = Lib.Signal.new(),
                                    OnMoreColors = Lib.Signal.new(),
                                    PrevColor = Color3.new(0, 0, 0),
                                }, mt)

                                createGui(obj)

                                return obj
                            end

                            return {new = new}
                        end)()
                        Lib.ColorPicker = (function()
                            local funcs = {}

                            local function new()
                                local newMt = setmetatable({}, {})

                                newMt.OnSelect = Lib.Signal.new()
                                newMt.OnCancel = Lib.Signal.new()
                                newMt.OnPreview = Lib.Signal.new()

                                local guiContents = create({
                                    {
                                        1,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                            BorderSizePixel = 0,
                                            ClipsDescendants = true,
                                            Name = 'Content',
                                            Position = UDim2.new(0, 0, 0, 20),
                                            Size = UDim2.new(1, 0, 1, -20),
                                        },
                                    },
                                    {
                                        2,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Name = 'BasicColors',
                                            Parent = {1},
                                            Position = UDim2.new(0, 5, 0, 5),
                                            Size = UDim2.new(0, 180, 0, 200),
                                        },
                                    },
                                    {
                                        3,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'Title',
                                            Parent = {2},
                                            Position = UDim2.new(0, 0, 0, -5),
                                            Size = UDim2.new(1, 0, 0, 26),
                                            Text = 'Basic Colors',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 0,
                                        },
                                    },
                                    {
                                        4,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14901961386204, 0.14901961386204, 0.14901961386204),
                                            BorderColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                            Name = 'Blue',
                                            Parent = {1},
                                            Position = UDim2.new(1, -63, 0, 255),
                                            Size = UDim2.new(0, 52, 0, 16),
                                        },
                                    },
                                    {
                                        5,
                                        'TextBox',
                                        {
                                            BackgroundColor3 = Color3.new(0.25098040699959, 0.25098040699959, 0.25098040699959),
                                            BackgroundTransparency = 1,
                                            BorderColor3 = Color3.new(0.37647062540054, 0.37647062540054, 0.37647062540054),
                                            Font = 3,
                                            Name = 'Input',
                                            Parent = {4},
                                            Position = UDim2.new(0, 2, 0, 0),
                                            Size = UDim2.new(0, 50, 0, 16),
                                            Text = '0',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 0,
                                        },
                                    },
                                    {
                                        6,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Name = 'ArrowFrame',
                                            Parent = {5},
                                            Position = UDim2.new(1, -16, 0, 0),
                                            Size = UDim2.new(0, 16, 1, 0),
                                        },
                                    },
                                    {
                                        7,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Up',
                                            Parent = {6},
                                            Size = UDim2.new(1, 0, 0, 8),
                                            Text = '',
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        8,
                                        'Frame',
                                        {
                                            BackgroundTransparency = 1,
                                            Name = 'Arrow',
                                            Parent = {7},
                                            Size = UDim2.new(0, 16, 0, 8),
                                        },
                                    },
                                    {
                                        9,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {8},
                                            Position = UDim2.new(0, 8, 0, 3),
                                            Size = UDim2.new(0, 1, 0, 1),
                                        },
                                    },
                                    {
                                        10,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {8},
                                            Position = UDim2.new(0, 7, 0, 4),
                                            Size = UDim2.new(0, 3, 0, 1),
                                        },
                                    },
                                    {
                                        11,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {8},
                                            Position = UDim2.new(0, 6, 0, 5),
                                            Size = UDim2.new(0, 5, 0, 1),
                                        },
                                    },
                                    {
                                        12,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Down',
                                            Parent = {6},
                                            Position = UDim2.new(0, 0, 0, 8),
                                            Size = UDim2.new(1, 0, 0, 8),
                                            Text = '',
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        13,
                                        'Frame',
                                        {
                                            BackgroundTransparency = 1,
                                            Name = 'Arrow',
                                            Parent = {12},
                                            Size = UDim2.new(0, 16, 0, 8),
                                        },
                                    },
                                    {
                                        14,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {13},
                                            Position = UDim2.new(0, 8, 0, 5),
                                            Size = UDim2.new(0, 1, 0, 1),
                                        },
                                    },
                                    {
                                        15,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {13},
                                            Position = UDim2.new(0, 7, 0, 4),
                                            Size = UDim2.new(0, 3, 0, 1),
                                        },
                                    },
                                    {
                                        16,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {13},
                                            Position = UDim2.new(0, 6, 0, 3),
                                            Size = UDim2.new(0, 5, 0, 1),
                                        },
                                    },
                                    {
                                        17,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'Title',
                                            Parent = {4},
                                            Position = UDim2.new(0, -40, 0, 0),
                                            Size = UDim2.new(0, 34, 1, 0),
                                            Text = 'Blue:',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 1,
                                        },
                                    },
                                    {
                                        18,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.21568627655506, 0.21568627655506, 0.21568627655506),
                                            BorderSizePixel = 0,
                                            ClipsDescendants = true,
                                            Name = 'ColorSpaceFrame',
                                            Parent = {1},
                                            Position = UDim2.new(1, -261, 0, 4),
                                            Size = UDim2.new(0, 222, 0, 202),
                                        },
                                    },
                                    {
                                        19,
                                        'ImageLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BorderColor3 = Color3.new(0.37647062540054, 0.37647062540054, 0.37647062540054),
                                            BorderSizePixel = 0,
                                            Image = 'rbxassetid://1072518406',
                                            Name = 'ColorSpace',
                                            Parent = {18},
                                            Position = UDim2.new(0, 1, 0, 1),
                                            Size = UDim2.new(0, 220, 0, 200),
                                        },
                                    },
                                    {
                                        20,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Name = 'Scope',
                                            Parent = {19},
                                            Position = UDim2.new(0, 210, 0, 190),
                                            Size = UDim2.new(0, 20, 0, 20),
                                        },
                                    },
                                    {
                                        21,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0, 0, 0),
                                            BorderSizePixel = 0,
                                            Name = 'Line',
                                            Parent = {20},
                                            Position = UDim2.new(0, 9, 0, 0),
                                            Size = UDim2.new(0, 2, 0, 20),
                                        },
                                    },
                                    {
                                        22,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0, 0, 0),
                                            BorderSizePixel = 0,
                                            Name = 'Line',
                                            Parent = {20},
                                            Position = UDim2.new(0, 0, 0, 9),
                                            Size = UDim2.new(0, 20, 0, 2),
                                        },
                                    },
                                    {
                                        23,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Name = 'CustomColors',
                                            Parent = {1},
                                            Position = UDim2.new(0, 5, 0, 210),
                                            Size = UDim2.new(0, 180, 0, 90),
                                        },
                                    },
                                    {
                                        24,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'Title',
                                            Parent = {23},
                                            Size = UDim2.new(1, 0, 0, 20),
                                            Text = 'Custom Colors (RC = Set)',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 0,
                                        },
                                    },
                                    {
                                        25,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14901961386204, 0.14901961386204, 0.14901961386204),
                                            BorderColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                            Name = 'Green',
                                            Parent = {1},
                                            Position = UDim2.new(1, -63, 0, 233),
                                            Size = UDim2.new(0, 52, 0, 16),
                                        },
                                    },
                                    {
                                        26,
                                        'TextBox',
                                        {
                                            BackgroundColor3 = Color3.new(0.25098040699959, 0.25098040699959, 0.25098040699959),
                                            BackgroundTransparency = 1,
                                            BorderColor3 = Color3.new(0.37647062540054, 0.37647062540054, 0.37647062540054),
                                            Font = 3,
                                            Name = 'Input',
                                            Parent = {25},
                                            Position = UDim2.new(0, 2, 0, 0),
                                            Size = UDim2.new(0, 50, 0, 16),
                                            Text = '0',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 0,
                                        },
                                    },
                                    {
                                        27,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Name = 'ArrowFrame',
                                            Parent = {26},
                                            Position = UDim2.new(1, -16, 0, 0),
                                            Size = UDim2.new(0, 16, 1, 0),
                                        },
                                    },
                                    {
                                        28,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Up',
                                            Parent = {27},
                                            Size = UDim2.new(1, 0, 0, 8),
                                            Text = '',
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        29,
                                        'Frame',
                                        {
                                            BackgroundTransparency = 1,
                                            Name = 'Arrow',
                                            Parent = {28},
                                            Size = UDim2.new(0, 16, 0, 8),
                                        },
                                    },
                                    {
                                        30,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {29},
                                            Position = UDim2.new(0, 8, 0, 3),
                                            Size = UDim2.new(0, 1, 0, 1),
                                        },
                                    },
                                    {
                                        31,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {29},
                                            Position = UDim2.new(0, 7, 0, 4),
                                            Size = UDim2.new(0, 3, 0, 1),
                                        },
                                    },
                                    {
                                        32,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {29},
                                            Position = UDim2.new(0, 6, 0, 5),
                                            Size = UDim2.new(0, 5, 0, 1),
                                        },
                                    },
                                    {
                                        33,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Down',
                                            Parent = {27},
                                            Position = UDim2.new(0, 0, 0, 8),
                                            Size = UDim2.new(1, 0, 0, 8),
                                            Text = '',
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        34,
                                        'Frame',
                                        {
                                            BackgroundTransparency = 1,
                                            Name = 'Arrow',
                                            Parent = {33},
                                            Size = UDim2.new(0, 16, 0, 8),
                                        },
                                    },
                                    {
                                        35,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {34},
                                            Position = UDim2.new(0, 8, 0, 5),
                                            Size = UDim2.new(0, 1, 0, 1),
                                        },
                                    },
                                    {
                                        36,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {34},
                                            Position = UDim2.new(0, 7, 0, 4),
                                            Size = UDim2.new(0, 3, 0, 1),
                                        },
                                    },
                                    {
                                        37,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {34},
                                            Position = UDim2.new(0, 6, 0, 3),
                                            Size = UDim2.new(0, 5, 0, 1),
                                        },
                                    },
                                    {
                                        38,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'Title',
                                            Parent = {25},
                                            Position = UDim2.new(0, -40, 0, 0),
                                            Size = UDim2.new(0, 34, 1, 0),
                                            Text = 'Green:',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 1,
                                        },
                                    },
                                    {
                                        39,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14901961386204, 0.14901961386204, 0.14901961386204),
                                            BorderColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                            Name = 'Hue',
                                            Parent = {1},
                                            Position = UDim2.new(1, -180, 0, 211),
                                            Size = UDim2.new(0, 52, 0, 16),
                                        },
                                    },
                                    {
                                        40,
                                        'TextBox',
                                        {
                                            BackgroundColor3 = Color3.new(0.25098040699959, 0.25098040699959, 0.25098040699959),
                                            BackgroundTransparency = 1,
                                            BorderColor3 = Color3.new(0.37647062540054, 0.37647062540054, 0.37647062540054),
                                            Font = 3,
                                            Name = 'Input',
                                            Parent = {39},
                                            Position = UDim2.new(0, 2, 0, 0),
                                            Size = UDim2.new(0, 50, 0, 16),
                                            Text = '0',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 0,
                                        },
                                    },
                                    {
                                        41,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Name = 'ArrowFrame',
                                            Parent = {40},
                                            Position = UDim2.new(1, -16, 0, 0),
                                            Size = UDim2.new(0, 16, 1, 0),
                                        },
                                    },
                                    {
                                        42,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Up',
                                            Parent = {41},
                                            Size = UDim2.new(1, 0, 0, 8),
                                            Text = '',
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        43,
                                        'Frame',
                                        {
                                            BackgroundTransparency = 1,
                                            Name = 'Arrow',
                                            Parent = {42},
                                            Size = UDim2.new(0, 16, 0, 8),
                                        },
                                    },
                                    {
                                        44,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {43},
                                            Position = UDim2.new(0, 8, 0, 3),
                                            Size = UDim2.new(0, 1, 0, 1),
                                        },
                                    },
                                    {
                                        45,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {43},
                                            Position = UDim2.new(0, 7, 0, 4),
                                            Size = UDim2.new(0, 3, 0, 1),
                                        },
                                    },
                                    {
                                        46,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {43},
                                            Position = UDim2.new(0, 6, 0, 5),
                                            Size = UDim2.new(0, 5, 0, 1),
                                        },
                                    },
                                    {
                                        47,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Down',
                                            Parent = {41},
                                            Position = UDim2.new(0, 0, 0, 8),
                                            Size = UDim2.new(1, 0, 0, 8),
                                            Text = '',
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        48,
                                        'Frame',
                                        {
                                            BackgroundTransparency = 1,
                                            Name = 'Arrow',
                                            Parent = {47},
                                            Size = UDim2.new(0, 16, 0, 8),
                                        },
                                    },
                                    {
                                        49,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {48},
                                            Position = UDim2.new(0, 8, 0, 5),
                                            Size = UDim2.new(0, 1, 0, 1),
                                        },
                                    },
                                    {
                                        50,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {48},
                                            Position = UDim2.new(0, 7, 0, 4),
                                            Size = UDim2.new(0, 3, 0, 1),
                                        },
                                    },
                                    {
                                        51,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {48},
                                            Position = UDim2.new(0, 6, 0, 3),
                                            Size = UDim2.new(0, 5, 0, 1),
                                        },
                                    },
                                    {
                                        52,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'Title',
                                            Parent = {39},
                                            Position = UDim2.new(0, -40, 0, 0),
                                            Size = UDim2.new(0, 34, 1, 0),
                                            Text = 'Hue:',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 1,
                                        },
                                    },
                                    {
                                        53,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BorderColor3 = Color3.new(0.21568627655506, 0.21568627655506, 0.21568627655506),
                                            Name = 'Preview',
                                            Parent = {1},
                                            Position = UDim2.new(1, -260, 0, 211),
                                            Size = UDim2.new(0, 35, 1, -245),
                                        },
                                    },
                                    {
                                        54,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14901961386204, 0.14901961386204, 0.14901961386204),
                                            BorderColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                            Name = 'Red',
                                            Parent = {1},
                                            Position = UDim2.new(1, -63, 0, 211),
                                            Size = UDim2.new(0, 52, 0, 16),
                                        },
                                    },
                                    {
                                        55,
                                        'TextBox',
                                        {
                                            BackgroundColor3 = Color3.new(0.25098040699959, 0.25098040699959, 0.25098040699959),
                                            BackgroundTransparency = 1,
                                            BorderColor3 = Color3.new(0.37647062540054, 0.37647062540054, 0.37647062540054),
                                            Font = 3,
                                            Name = 'Input',
                                            Parent = {54},
                                            Position = UDim2.new(0, 2, 0, 0),
                                            Size = UDim2.new(0, 50, 0, 16),
                                            Text = '0',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 0,
                                        },
                                    },
                                    {
                                        56,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Name = 'ArrowFrame',
                                            Parent = {55},
                                            Position = UDim2.new(1, -16, 0, 0),
                                            Size = UDim2.new(0, 16, 1, 0),
                                        },
                                    },
                                    {
                                        57,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Up',
                                            Parent = {56},
                                            Size = UDim2.new(1, 0, 0, 8),
                                            Text = '',
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        58,
                                        'Frame',
                                        {
                                            BackgroundTransparency = 1,
                                            Name = 'Arrow',
                                            Parent = {57},
                                            Size = UDim2.new(0, 16, 0, 8),
                                        },
                                    },
                                    {
                                        59,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {58},
                                            Position = UDim2.new(0, 8, 0, 3),
                                            Size = UDim2.new(0, 1, 0, 1),
                                        },
                                    },
                                    {
                                        60,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {58},
                                            Position = UDim2.new(0, 7, 0, 4),
                                            Size = UDim2.new(0, 3, 0, 1),
                                        },
                                    },
                                    {
                                        61,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {58},
                                            Position = UDim2.new(0, 6, 0, 5),
                                            Size = UDim2.new(0, 5, 0, 1),
                                        },
                                    },
                                    {
                                        62,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Down',
                                            Parent = {56},
                                            Position = UDim2.new(0, 0, 0, 8),
                                            Size = UDim2.new(1, 0, 0, 8),
                                            Text = '',
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        63,
                                        'Frame',
                                        {
                                            BackgroundTransparency = 1,
                                            Name = 'Arrow',
                                            Parent = {62},
                                            Size = UDim2.new(0, 16, 0, 8),
                                        },
                                    },
                                    {
                                        64,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {63},
                                            Position = UDim2.new(0, 8, 0, 5),
                                            Size = UDim2.new(0, 1, 0, 1),
                                        },
                                    },
                                    {
                                        65,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {63},
                                            Position = UDim2.new(0, 7, 0, 4),
                                            Size = UDim2.new(0, 3, 0, 1),
                                        },
                                    },
                                    {
                                        66,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {63},
                                            Position = UDim2.new(0, 6, 0, 3),
                                            Size = UDim2.new(0, 5, 0, 1),
                                        },
                                    },
                                    {
                                        67,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'Title',
                                            Parent = {54},
                                            Position = UDim2.new(0, -40, 0, 0),
                                            Size = UDim2.new(0, 34, 1, 0),
                                            Text = 'Red:',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 1,
                                        },
                                    },
                                    {
                                        68,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14901961386204, 0.14901961386204, 0.14901961386204),
                                            BorderColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                            Name = 'Sat',
                                            Parent = {1},
                                            Position = UDim2.new(1, -180, 0, 233),
                                            Size = UDim2.new(0, 52, 0, 16),
                                        },
                                    },
                                    {
                                        69,
                                        'TextBox',
                                        {
                                            BackgroundColor3 = Color3.new(0.25098040699959, 0.25098040699959, 0.25098040699959),
                                            BackgroundTransparency = 1,
                                            BorderColor3 = Color3.new(0.37647062540054, 0.37647062540054, 0.37647062540054),
                                            Font = 3,
                                            Name = 'Input',
                                            Parent = {68},
                                            Position = UDim2.new(0, 2, 0, 0),
                                            Size = UDim2.new(0, 50, 0, 16),
                                            Text = '0',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 0,
                                        },
                                    },
                                    {
                                        70,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Name = 'ArrowFrame',
                                            Parent = {69},
                                            Position = UDim2.new(1, -16, 0, 0),
                                            Size = UDim2.new(0, 16, 1, 0),
                                        },
                                    },
                                    {
                                        71,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Up',
                                            Parent = {70},
                                            Size = UDim2.new(1, 0, 0, 8),
                                            Text = '',
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        72,
                                        'Frame',
                                        {
                                            BackgroundTransparency = 1,
                                            Name = 'Arrow',
                                            Parent = {71},
                                            Size = UDim2.new(0, 16, 0, 8),
                                        },
                                    },
                                    {
                                        73,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {72},
                                            Position = UDim2.new(0, 8, 0, 3),
                                            Size = UDim2.new(0, 1, 0, 1),
                                        },
                                    },
                                    {
                                        74,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {72},
                                            Position = UDim2.new(0, 7, 0, 4),
                                            Size = UDim2.new(0, 3, 0, 1),
                                        },
                                    },
                                    {
                                        75,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {72},
                                            Position = UDim2.new(0, 6, 0, 5),
                                            Size = UDim2.new(0, 5, 0, 1),
                                        },
                                    },
                                    {
                                        76,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Down',
                                            Parent = {70},
                                            Position = UDim2.new(0, 0, 0, 8),
                                            Size = UDim2.new(1, 0, 0, 8),
                                            Text = '',
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        77,
                                        'Frame',
                                        {
                                            BackgroundTransparency = 1,
                                            Name = 'Arrow',
                                            Parent = {76},
                                            Size = UDim2.new(0, 16, 0, 8),
                                        },
                                    },
                                    {
                                        78,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {77},
                                            Position = UDim2.new(0, 8, 0, 5),
                                            Size = UDim2.new(0, 1, 0, 1),
                                        },
                                    },
                                    {
                                        79,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {77},
                                            Position = UDim2.new(0, 7, 0, 4),
                                            Size = UDim2.new(0, 3, 0, 1),
                                        },
                                    },
                                    {
                                        80,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {77},
                                            Position = UDim2.new(0, 6, 0, 3),
                                            Size = UDim2.new(0, 5, 0, 1),
                                        },
                                    },
                                    {
                                        81,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'Title',
                                            Parent = {68},
                                            Position = UDim2.new(0, -40, 0, 0),
                                            Size = UDim2.new(0, 34, 1, 0),
                                            Text = 'Sat:',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 1,
                                        },
                                    },
                                    {
                                        82,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14901961386204, 0.14901961386204, 0.14901961386204),
                                            BorderColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                            Name = 'Val',
                                            Parent = {1},
                                            Position = UDim2.new(1, -180, 0, 255),
                                            Size = UDim2.new(0, 52, 0, 16),
                                        },
                                    },
                                    {
                                        83,
                                        'TextBox',
                                        {
                                            BackgroundColor3 = Color3.new(0.25098040699959, 0.25098040699959, 0.25098040699959),
                                            BackgroundTransparency = 1,
                                            BorderColor3 = Color3.new(0.37647062540054, 0.37647062540054, 0.37647062540054),
                                            Font = 3,
                                            Name = 'Input',
                                            Parent = {82},
                                            Position = UDim2.new(0, 2, 0, 0),
                                            Size = UDim2.new(0, 50, 0, 16),
                                            Text = '255',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 0,
                                        },
                                    },
                                    {
                                        84,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Name = 'ArrowFrame',
                                            Parent = {83},
                                            Position = UDim2.new(1, -16, 0, 0),
                                            Size = UDim2.new(0, 16, 1, 0),
                                        },
                                    },
                                    {
                                        85,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Up',
                                            Parent = {84},
                                            Size = UDim2.new(1, 0, 0, 8),
                                            Text = '',
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        86,
                                        'Frame',
                                        {
                                            BackgroundTransparency = 1,
                                            Name = 'Arrow',
                                            Parent = {85},
                                            Size = UDim2.new(0, 16, 0, 8),
                                        },
                                    },
                                    {
                                        87,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {86},
                                            Position = UDim2.new(0, 8, 0, 3),
                                            Size = UDim2.new(0, 1, 0, 1),
                                        },
                                    },
                                    {
                                        88,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {86},
                                            Position = UDim2.new(0, 7, 0, 4),
                                            Size = UDim2.new(0, 3, 0, 1),
                                        },
                                    },
                                    {
                                        89,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {86},
                                            Position = UDim2.new(0, 6, 0, 5),
                                            Size = UDim2.new(0, 5, 0, 1),
                                        },
                                    },
                                    {
                                        90,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Down',
                                            Parent = {84},
                                            Position = UDim2.new(0, 0, 0, 8),
                                            Size = UDim2.new(1, 0, 0, 8),
                                            Text = '',
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        91,
                                        'Frame',
                                        {
                                            BackgroundTransparency = 1,
                                            Name = 'Arrow',
                                            Parent = {90},
                                            Size = UDim2.new(0, 16, 0, 8),
                                        },
                                    },
                                    {
                                        92,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {91},
                                            Position = UDim2.new(0, 8, 0, 5),
                                            Size = UDim2.new(0, 1, 0, 1),
                                        },
                                    },
                                    {
                                        93,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {91},
                                            Position = UDim2.new(0, 7, 0, 4),
                                            Size = UDim2.new(0, 3, 0, 1),
                                        },
                                    },
                                    {
                                        94,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {91},
                                            Position = UDim2.new(0, 6, 0, 3),
                                            Size = UDim2.new(0, 5, 0, 1),
                                        },
                                    },
                                    {
                                        95,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'Title',
                                            Parent = {82},
                                            Position = UDim2.new(0, -40, 0, 0),
                                            Size = UDim2.new(0, 34, 1, 0),
                                            Text = 'Val:',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 1,
                                        },
                                    },
                                    {
                                        96,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.2352941185236, 0.2352941185236, 0.2352941185236),
                                            BorderColor3 = Color3.new(0.21568627655506, 0.21568627655506, 0.21568627655506),
                                            Font = 3,
                                            Name = 'Cancel',
                                            Parent = {1},
                                            Position = UDim2.new(1, -105, 1, -28),
                                            Size = UDim2.new(0, 100, 0, 25),
                                            Text = 'Cancel',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        97,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.2352941185236, 0.2352941185236, 0.2352941185236),
                                            BorderColor3 = Color3.new(0.21568627655506, 0.21568627655506, 0.21568627655506),
                                            Font = 3,
                                            Name = 'Ok',
                                            Parent = {1},
                                            Position = UDim2.new(1, -210, 1, -28),
                                            Size = UDim2.new(0, 100, 0, 25),
                                            Text = 'OK',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        98,
                                        'ImageLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BorderColor3 = Color3.new(0.21568627655506, 0.21568627655506, 0.21568627655506),
                                            Image = 'rbxassetid://1072518502',
                                            Name = 'ColorStrip',
                                            Parent = {1},
                                            Position = UDim2.new(1, -30, 0, 5),
                                            Size = UDim2.new(0, 13, 0, 200),
                                        },
                                    },
                                    {
                                        99,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.3137255012989, 0.3137255012989, 0.3137255012989),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Name = 'ArrowFrame',
                                            Parent = {1},
                                            Position = UDim2.new(1, -16, 0, 1),
                                            Size = UDim2.new(0, 5, 0, 208),
                                        },
                                    },
                                    {
                                        100,
                                        'Frame',
                                        {
                                            BackgroundTransparency = 1,
                                            Name = 'Arrow',
                                            Parent = {99},
                                            Position = UDim2.new(0, -2, 0, -4),
                                            Size = UDim2.new(0, 8, 0, 16),
                                        },
                                    },
                                    {
                                        101,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0, 0, 0),
                                            BorderSizePixel = 0,
                                            Parent = {100},
                                            Position = UDim2.new(0, 2, 0, 8),
                                            Size = UDim2.new(0, 1, 0, 1),
                                        },
                                    },
                                    {
                                        102,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0, 0, 0),
                                            BorderSizePixel = 0,
                                            Parent = {100},
                                            Position = UDim2.new(0, 3, 0, 7),
                                            Size = UDim2.new(0, 1, 0, 3),
                                        },
                                    },
                                    {
                                        103,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0, 0, 0),
                                            BorderSizePixel = 0,
                                            Parent = {100},
                                            Position = UDim2.new(0, 4, 0, 6),
                                            Size = UDim2.new(0, 1, 0, 5),
                                        },
                                    },
                                    {
                                        104,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0, 0, 0),
                                            BorderSizePixel = 0,
                                            Parent = {100},
                                            Position = UDim2.new(0, 5, 0, 5),
                                            Size = UDim2.new(0, 1, 0, 7),
                                        },
                                    },
                                    {
                                        105,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0, 0, 0),
                                            BorderSizePixel = 0,
                                            Parent = {100},
                                            Position = UDim2.new(0, 6, 0, 4),
                                            Size = UDim2.new(0, 1, 0, 9),
                                        },
                                    },
                                })
                                local window = Lib.Window.new()

                                window.Resizable = false
                                window.Alignable = false

                                window.SetTitle(window, 'Color Picker')
                                window.Resize(window, 450, 330)

                                for i, v in pairs(guiContents.GetChildren(guiContents))do
                                    v.Parent = window.GuiElems.Content
                                end

                                newMt.Window = window
                                newMt.Gui = window.Gui

                                local pickerGui = window.Gui.Main
                                local pickerTopBar = pickerGui.TopBar
                                local pickerFrame = pickerGui.Content
                                local colorSpace = pickerFrame.ColorSpaceFrame.ColorSpace
                                local colorStrip = pickerFrame.ColorStrip
                                local previewFrame = pickerFrame.Preview
                                local basicColorsFrame = pickerFrame.BasicColors
                                local customColorsFrame = pickerFrame.CustomColors
                                local okButton = pickerFrame.Ok
                                local cancelButton = pickerFrame.Cancel
                                local closeButton = pickerTopBar.Close
                                local colorScope = colorSpace.Scope
                                local colorArrow = pickerFrame.ArrowFrame.Arrow
                                local hueInput = pickerFrame.Hue.Input
                                local satInput = pickerFrame.Sat.Input
                                local valInput = pickerFrame.Val.Input
                                local redInput = pickerFrame.Red.Input
                                local greenInput = pickerFrame.Green.Input
                                local blueInput = pickerFrame.Blue.Input
                                local user = service.UserInputService
                                local mouse = service.Players.LocalPlayer:GetMouse()
                                local hue, sat, val = 0, 0, 1
                                local red, green, blue = 1, 1, 1
                                local chosenColor = Color3.new(0, 0, 0)
                                local basicColors = {
                                    Color3.new(0, 0, 0),
                                    Color3.new(0.66666668653488, 0, 0),
                                    Color3.new(0, 0.33333334326744, 0),
                                    Color3.new(0.66666668653488, 0.33333334326744, 0),
                                    Color3.new(0, 0.66666668653488, 0),
                                    Color3.new(0.66666668653488, 0.66666668653488, 0),
                                    Color3.new(0, 1, 0),
                                    Color3.new(0.66666668653488, 1, 0),
                                    Color3.new(0, 0, 0.49803924560547),
                                    Color3.new(0.66666668653488, 0, 0.49803924560547),
                                    Color3.new(0, 0.33333334326744, 0.49803924560547),
                                    Color3.new(0.66666668653488, 0.33333334326744, 0.49803924560547),
                                    Color3.new(0, 0.66666668653488, 0.49803924560547),
                                    Color3.new(0.66666668653488, 0.66666668653488, 0.49803924560547),
                                    Color3.new(0, 1, 0.49803924560547),
                                    Color3.new(0.66666668653488, 1, 0.49803924560547),
                                    Color3.new(0, 0, 1),
                                    Color3.new(0.66666668653488, 0, 1),
                                    Color3.new(0, 0.33333334326744, 1),
                                    Color3.new(0.66666668653488, 0.33333334326744, 1),
                                    Color3.new(0, 0.66666668653488, 1),
                                    Color3.new(0.66666668653488, 0.66666668653488, 1),
                                    Color3.new(0, 1, 1),
                                    Color3.new(0.66666668653488, 1, 1),
                                    Color3.new(0.33333334326744, 0, 0),
                                    Color3.new(1, 0, 0),
                                    Color3.new(0.33333334326744, 0.33333334326744, 0),
                                    Color3.new(1, 0.33333334326744, 0),
                                    Color3.new(0.33333334326744, 0.66666668653488, 0),
                                    Color3.new(1, 0.66666668653488, 0),
                                    Color3.new(0.33333334326744, 1, 0),
                                    Color3.new(1, 1, 0),
                                    Color3.new(0.33333334326744, 0, 0.49803924560547),
                                    Color3.new(1, 0, 0.49803924560547),
                                    Color3.new(0.33333334326744, 0.33333334326744, 0.49803924560547),
                                    Color3.new(1, 0.33333334326744, 0.49803924560547),
                                    Color3.new(0.33333334326744, 0.66666668653488, 0.49803924560547),
                                    Color3.new(1, 0.66666668653488, 0.49803924560547),
                                    Color3.new(0.33333334326744, 1, 0.49803924560547),
                                    Color3.new(1, 1, 0.49803924560547),
                                    Color3.new(0.33333334326744, 0, 1),
                                    Color3.new(1, 0, 1),
                                    Color3.new(0.33333334326744, 0.33333334326744, 1),
                                    Color3.new(1, 0.33333334326744, 1),
                                    Color3.new(0.33333334326744, 0.66666668653488, 1),
                                    Color3.new(1, 0.66666668653488, 1),
                                    Color3.new(0.33333334326744, 1, 1),
                                    Color3.new(1, 1, 1),
                                }
                                local customColors = {}

                                local function updateColor(noupdate)
                                    local relativeX, relativeY, relativeStripY = 219 - hue * 219, 199 - sat * 199, 199 - val * 199
                                    local hsvColor = Color3.fromHSV(hue, sat, val)

                                    if noupdate == 2 or not noupdate then
                                        hueInput.Text = tostring(math.ceil(359 * hue))
                                        satInput.Text = tostring(math.ceil(255 * sat))
                                        valInput.Text = tostring(math.floor(255 * val))
                                    end
                                    if noupdate == 1 or not noupdate then
                                        redInput.Text = tostring(math.floor(255 * red))
                                        greenInput.Text = tostring(math.floor(255 * green))
                                        blueInput.Text = tostring(math.floor(255 * blue))
                                    end

                                    chosenColor = Color3.new(red, green, blue)
                                    colorScope.Position = UDim2.new(0, (relativeX - 9), 0, (relativeY - 9))
                                    colorStrip.ImageColor3 = Color3.fromHSV(hue, sat, 1)
                                    colorArrow.Position = UDim2.new(0, -2, 0, (relativeStripY - 4))
                                    previewFrame.BackgroundColor3 = chosenColor
                                    newMt.Color = chosenColor

                                    newMt.OnPreview:Fire(chosenColor)
                                end
                                local function handleInputBegan(
                                    input,
                                    updateFunc
                                )
                                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                        while user.IsMouseButtonPressed(user, Enum.UserInputType.MouseButton1) do
                                            updateFunc()
                                            task.wait()
                                        end
                                    end
                                end
                                local function colorSpaceInput()
                                    local relativeX = mouse.X - colorSpace.AbsolutePosition.X
                                    local relativeY = mouse.Y - colorSpace.AbsolutePosition.Y

                                    if relativeX < 0 then
                                        relativeX = 0
                                    elseif relativeX > 219 then
                                        relativeX = 219
                                    end
                                    if relativeY < 0 then
                                        relativeY = 0
                                    elseif relativeY > 199 then
                                        relativeY = 199
                                    end

                                    hue = (219 - relativeX) / 219
                                    sat = (199 - relativeY) / 199

                                    local hsvColor = Color3.fromHSV(hue, sat, val)

                                    red, green, blue = hsvColor.R, hsvColor.G, hsvColor.B

                                    updateColor()
                                end
                                local function colorStripInput()
                                    local relativeY = mouse.Y - colorStrip.AbsolutePosition.Y

                                    if relativeY < 0 then
                                        relativeY = 0
                                    elseif relativeY > 199 then
                                        relativeY = 199
                                    end

                                    val = (199 - relativeY) / 199

                                    local hsvColor = Color3.fromHSV(hue, sat, val)

                                    red, green, blue = hsvColor.R, hsvColor.G, hsvColor.B

                                    updateColor()
                                end

                                colorSpace.InputBegan:Connect(function(input)
                                    handleInputBegan(input, colorSpaceInput)
                                end)
                                colorStrip.InputBegan:Connect(function(input)
                                    handleInputBegan(input, colorStripInput)
                                end)

                                local function hookButtons(frame, func)
                                    frame.ArrowFrame.Up.InputBegan:Connect(function(
                                        input
                                    )
                                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                            local releaseEvent, runEvent
                                            local startTime = tick()
                                            local pressing = true
                                            local startNum = tonumber(frame.Text)

                                            if not startNum then
                                                return
                                            end

                                            releaseEvent = user.InputEnded:Connect(function(
                                                endInput
                                            )
                                                if endInput.UserInputType == Enum.UserInputType.MouseButton1 or endInput.UserInputType == Enum.UserInputType.Touch then
                                                    releaseEvent.Disconnect(releaseEvent)

                                                    pressing = false
                                                end
                                            end)
                                            startNum = startNum + 1

                                            func(startNum)

                                            while pressing do
                                                if tick() - startTime > 0.3 then
                                                    startNum = startNum + 1

                                                    func(startNum)

                                                    startTime = tick()
                                                end

                                                task.wait(0.1)
                                            end
                                        end
                                    end)
                                    frame.ArrowFrame.Down.InputBegan:Connect(function(
                                        input
                                    )
                                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                            local releaseEvent, runEvent
                                            local startTime = tick()
                                            local pressing = true
                                            local startNum = tonumber(frame.Text)

                                            if not startNum then
                                                return
                                            end

                                            releaseEvent = user.InputEnded:Connect(function(
                                                endInput
                                            )
                                                if endInput.UserInputType == Enum.UserInputType.MouseButton1 or endInput.UserInputType == Enum.UserInputType.Touch then
                                                    releaseEvent.Disconnect(releaseEvent)

                                                    pressing = false
                                                end
                                            end)
                                            startNum = startNum - 1

                                            func(startNum)

                                            while pressing do
                                                if tick() - startTime > 0.3 then
                                                    startNum = startNum - 1

                                                    func(startNum)

                                                    startTime = tick()
                                                end

                                                task.wait(0.1)
                                            end
                                        end
                                    end)
                                end
                                local function updateHue(str)
                                    local num = tonumber(str)

                                    if num then
                                        hue = math.clamp(math.floor(num), 0, 359) / 359

                                        local hsvColor = Color3.fromHSV(hue, sat, val)

                                        red, green, blue = hsvColor.r, hsvColor.g, hsvColor.b
                                        hueInput.Text = tostring(hue * 359)

                                        updateColor(1)
                                    end
                                end

                                hueInput.FocusLost:Connect(function()
                                    updateHue(hueInput.Text)
                                end)
                                hookButtons(hueInput, hueInput)

                                local function updateSat(str)
                                    local num = tonumber(str)

                                    if num then
                                        sat = math.clamp(math.floor(num), 0, 255) / 255

                                        local hsvColor = Color3.fromHSV(hue, sat, val)

                                        red, green, blue = hsvColor.r, hsvColor.g, hsvColor.b
                                        satInput.Text = tostring(sat * 255)

                                        updateColor(1)
                                    end
                                end

                                satInput.FocusLost:Connect(function()
                                    updateSat(satInput.Text)
                                end)
                                hookButtons(satInput, updateSat)

                                local function updateVal(str)
                                    local num = tonumber(str)

                                    if num then
                                        val = math.clamp(math.floor(num), 0, 255) / 255

                                        local hsvColor = Color3.fromHSV(hue, sat, val)

                                        red, green, blue = hsvColor.r, hsvColor.g, hsvColor.b
                                        valInput.Text = tostring(val * 255)

                                        updateColor(1)
                                    end
                                end

                                valInput.FocusLost:Connect(function()
                                    updateVal(valInput.Text)
                                end)
                                hookButtons(valInput, updateVal)

                                local function updateRed(str)
                                    local num = tonumber(str)

                                    if num then
                                        red = math.clamp(math.floor(num), 0, 255) / 255

                                        local newColor = Color3.new(red, green, blue)

                                        hue, sat, val = Color3.toHSV(newColor)
                                        redInput.Text = tostring(red * 255)

                                        updateColor(2)
                                    end
                                end

                                redInput.FocusLost:Connect(function()
                                    updateRed(redInput.Text)
                                end)
                                hookButtons(redInput, updateRed)

                                local function updateGreen(str)
                                    local num = tonumber(str)

                                    if num then
                                        green = math.clamp(math.floor(num), 0, 255) / 255

                                        local newColor = Color3.new(red, green, blue)

                                        hue, sat, val = Color3.toHSV(newColor)
                                        greenInput.Text = tostring(green * 255)

                                        updateColor(2)
                                    end
                                end

                                greenInput.FocusLost:Connect(function()
                                    updateGreen(greenInput.Text)
                                end)
                                hookButtons(greenInput, updateGreen)

                                local function updateBlue(str)
                                    local num = tonumber(str)

                                    if num then
                                        blue = math.clamp(math.floor(num), 0, 255) / 255

                                        local newColor = Color3.new(red, green, blue)

                                        hue, sat, val = Color3.toHSV(newColor)
                                        blueInput.Text = tostring(blue * 255)

                                        updateColor(2)
                                    end
                                end

                                blueInput.FocusLost:Connect(function()
                                    updateBlue(blueInput.Text)
                                end)
                                hookButtons(blueInput, updateBlue)

                                local colorChoice = Instance.new('TextButton')

                                colorChoice.Name = 'Choice'
                                colorChoice.Size = UDim2.new(0, 25, 0, 18)
                                colorChoice.BorderColor3 = Color3.fromRGB(55, 55, 55)
                                colorChoice.Text = ''
                                colorChoice.AutoButtonColor = false

                                local row = 0
                                local column = 0

                                for i, v in pairs(basicColors)do
                                    local newColor = colorChoice.Clone(colorChoice)

                                    newColor.BackgroundColor3 = v
                                    newColor.Position = UDim2.new(0, 1 + 30 * column, 0, 21 + 23 * row)

                                    newColor.MouseButton1Click:Connect(function()
                                        red, green, blue = v.r, v.g, v.b

                                        local newColor = Color3.new(red, green, blue)

                                        hue, sat, val = Color3.toHSV(newColor)

                                        updateColor()
                                    end)

                                    newColor.Parent = basicColorsFrame
                                    column = column + 1

                                    if column == 6 then
                                        row = row + 1
                                        column = 0
                                    end
                                end

                                row = 0
                                column = 0

                                for i = 1, 12 do
                                    local color = customColors[i] or Color3.new(0, 0, 0)
                                    local newColor = colorChoice.Clone(colorChoice)

                                    newColor.BackgroundColor3 = color
                                    newColor.Position = UDim2.new(0, 1 + 30 * column, 0, 20 + 23 * row)

                                    newColor.MouseButton1Click:Connect(function()
                                        local curColor = customColors[i] or Color3.new(0, 0, 0)

                                        red, green, blue = curColor.r, curColor.g, curColor.b
                                        hue, sat, val = Color3.toHSV(curColor)

                                        updateColor()
                                    end)
                                    newColor.MouseButton2Click:Connect(function()
                                        customColors[i] = chosenColor
                                        newColor.BackgroundColor3 = chosenColor
                                    end)

                                    newColor.Parent = customColorsFrame
                                    column = column + 1

                                    if column == 6 then
                                        row = row + 1
                                        column = 0
                                    end
                                end

                                okButton.MouseButton1Click:Connect(function()
                                    newMt.OnSelect:Fire(chosenColor)
                                    window.Close(window)
                                end)
                                okButton.InputBegan:Connect(function(input)
                                    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                        okButton.BackgroundTransparency = 0.4
                                    end
                                end)
                                okButton.InputEnded:Connect(function(input)
                                    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                        okButton.BackgroundTransparency = 0
                                    end
                                end)
                                cancelButton.MouseButton1Click:Connect(function()
                                    newMt.OnCancel:Fire()
                                    window.Close(window)
                                end)
                                cancelButton.InputBegan:Connect(function(input)
                                    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                        cancelButton.BackgroundTransparency = 0.4
                                    end
                                end)
                                cancelButton.InputEnded:Connect(function(input)
                                    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                        cancelButton.BackgroundTransparency = 0
                                    end
                                end)
                                updateColor()

                                newMt.SetColor = function(self, color)
                                    red, green, blue = color.r, color.g, color.b
                                    hue, sat, val = Color3.toHSV(color)

                                    updateColor()
                                end
                                newMt.Show = function(self)
                                    self.Window:Show()
                                end

                                return newMt
                            end

                            return {new = new}
                        end)()
                        Lib.NumberSequenceEditor = (function()
                            local function new()
                                local newMt = setmetatable({}, {})

                                newMt.OnSelect = Lib.Signal.new()
                                newMt.OnCancel = Lib.Signal.new()
                                newMt.OnPreview = Lib.Signal.new()

                                local guiContents = create({
                                    {
                                        1,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                            BorderSizePixel = 0,
                                            ClipsDescendants = true,
                                            Name = 'Content',
                                            Position = UDim2.new(0, 0, 0, 20),
                                            Size = UDim2.new(1, 0, 1, -20),
                                        },
                                    },
                                    {
                                        2,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14901961386204, 0.14901961386204, 0.14901961386204),
                                            BorderColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                            Name = 'Time',
                                            Parent = {1},
                                            Position = UDim2.new(0, 40, 0, 210),
                                            Size = UDim2.new(0, 60, 0, 20),
                                        },
                                    },
                                    {
                                        3,
                                        'TextBox',
                                        {
                                            BackgroundColor3 = Color3.new(0.25098040699959, 0.25098040699959, 0.25098040699959),
                                            BackgroundTransparency = 1,
                                            BorderColor3 = Color3.new(0.37647062540054, 0.37647062540054, 0.37647062540054),
                                            ClipsDescendants = true,
                                            Font = 3,
                                            Name = 'Input',
                                            Parent = {2},
                                            Position = UDim2.new(0, 2, 0, 0),
                                            Size = UDim2.new(0, 58, 0, 20),
                                            Text = '0',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 0,
                                        },
                                    },
                                    {
                                        4,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'Title',
                                            Parent = {2},
                                            Position = UDim2.new(0, -40, 0, 0),
                                            Size = UDim2.new(0, 34, 1, 0),
                                            Text = 'Time',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 1,
                                        },
                                    },
                                    {
                                        5,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.2352941185236, 0.2352941185236, 0.2352941185236),
                                            BorderColor3 = Color3.new(0.21568627655506, 0.21568627655506, 0.21568627655506),
                                            Font = 3,
                                            Name = 'Close',
                                            Parent = {1},
                                            Position = UDim2.new(1, -90, 0, 210),
                                            Size = UDim2.new(0, 80, 0, 20),
                                            Text = 'Close',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        6,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.2352941185236, 0.2352941185236, 0.2352941185236),
                                            BorderColor3 = Color3.new(0.21568627655506, 0.21568627655506, 0.21568627655506),
                                            Font = 3,
                                            Name = 'Reset',
                                            Parent = {1},
                                            Position = UDim2.new(1, -180, 0, 210),
                                            Size = UDim2.new(0, 80, 0, 20),
                                            Text = 'Reset',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        7,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.2352941185236, 0.2352941185236, 0.2352941185236),
                                            BorderColor3 = Color3.new(0.21568627655506, 0.21568627655506, 0.21568627655506),
                                            Font = 3,
                                            Name = 'Delete',
                                            Parent = {1},
                                            Position = UDim2.new(0, 380, 0, 210),
                                            Size = UDim2.new(0, 80, 0, 20),
                                            Text = 'Delete',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        8,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                            BorderColor3 = Color3.new(0.21568627655506, 0.21568627655506, 0.21568627655506),
                                            Name = 'NumberLineOutlines',
                                            Parent = {1},
                                            Position = UDim2.new(0, 10, 0, 20),
                                            Size = UDim2.new(1, -20, 0, 170),
                                        },
                                    },
                                    {
                                        9,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.25098040699959, 0.25098040699959, 0.25098040699959),
                                            BackgroundTransparency = 1,
                                            BorderColor3 = Color3.new(0.37647062540054, 0.37647062540054, 0.37647062540054),
                                            Name = 'NumberLine',
                                            Parent = {1},
                                            Position = UDim2.new(0, 10, 0, 20),
                                            Size = UDim2.new(1, -20, 0, 170),
                                        },
                                    },
                                    {
                                        10,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14901961386204, 0.14901961386204, 0.14901961386204),
                                            BorderColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                            Name = 'Value',
                                            Parent = {1},
                                            Position = UDim2.new(0, 170, 0, 210),
                                            Size = UDim2.new(0, 60, 0, 20),
                                        },
                                    },
                                    {
                                        11,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'Title',
                                            Parent = {10},
                                            Position = UDim2.new(0, -40, 0, 0),
                                            Size = UDim2.new(0, 34, 1, 0),
                                            Text = 'Value',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 1,
                                        },
                                    },
                                    {
                                        12,
                                        'TextBox',
                                        {
                                            BackgroundColor3 = Color3.new(0.25098040699959, 0.25098040699959, 0.25098040699959),
                                            BackgroundTransparency = 1,
                                            BorderColor3 = Color3.new(0.37647062540054, 0.37647062540054, 0.37647062540054),
                                            ClipsDescendants = true,
                                            Font = 3,
                                            Name = 'Input',
                                            Parent = {10},
                                            Position = UDim2.new(0, 2, 0, 0),
                                            Size = UDim2.new(0, 58, 0, 20),
                                            Text = '0',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 0,
                                        },
                                    },
                                    {
                                        13,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14901961386204, 0.14901961386204, 0.14901961386204),
                                            BorderColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                            Name = 'Envelope',
                                            Parent = {1},
                                            Position = UDim2.new(0, 300, 0, 210),
                                            Size = UDim2.new(0, 60, 0, 20),
                                        },
                                    },
                                    {
                                        14,
                                        'TextBox',
                                        {
                                            BackgroundColor3 = Color3.new(0.25098040699959, 0.25098040699959, 0.25098040699959),
                                            BackgroundTransparency = 1,
                                            BorderColor3 = Color3.new(0.37647062540054, 0.37647062540054, 0.37647062540054),
                                            ClipsDescendants = true,
                                            Font = 3,
                                            Name = 'Input',
                                            Parent = {13},
                                            Position = UDim2.new(0, 2, 0, 0),
                                            Size = UDim2.new(0, 58, 0, 20),
                                            Text = '0',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 0,
                                        },
                                    },
                                    {
                                        15,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'Title',
                                            Parent = {13},
                                            Position = UDim2.new(0, -40, 0, 0),
                                            Size = UDim2.new(0, 34, 1, 0),
                                            Text = 'Envelope',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 1,
                                        },
                                    },
                                })
                                local window = Lib.Window.new()

                                window.Resizable = false

                                window.Resize(window, 680, 265)
                                window.SetTitle(window, 'NumberSequence Editor')

                                newMt.Window = window
                                newMt.Gui = window.Gui

                                for i, v in pairs(guiContents.GetChildren(guiContents))do
                                    v.Parent = window.GuiElems.Content
                                end

                                local gui = window.Gui
                                local pickerGui = gui.Main
                                local pickerTopBar = pickerGui.TopBar
                                local pickerFrame = pickerGui.Content
                                local numberLine = pickerFrame.NumberLine
                                local numberLineOutlines = pickerFrame.NumberLineOutlines
                                local timeBox = pickerFrame.Time.Input
                                local valueBox = pickerFrame.Value.Input
                                local envelopeBox = pickerFrame.Envelope.Input
                                local deleteButton = pickerFrame.Delete
                                local resetButton = pickerFrame.Reset
                                local closeButton = pickerFrame.Close
                                local topClose = pickerTopBar.Close
                                local points = {
                                    {1, 0, 3},
                                    {8, 0.05, 1},
                                    {5, 0.6, 2},
                                    {4, 0.7, 4},
                                    {6, 1, 4},
                                }
                                local lines = {}
                                local eLines = {}
                                local beginPoint = points[1]
                                local endPoint = points[#points]
                                local currentlySelected
                                local currentPoint
                                local resetSequence
                                local user = service.UserInputService
                                local mouse = service.Players.LocalPlayer:GetMouse()

                                for i = 2, 10 do
                                    local newLine = Instance.new('Frame')

                                    newLine.BackgroundTransparency = 0.5
                                    newLine.BackgroundColor3 = Color3.new(0.3764705882352941, 0.3764705882352941, 0.3764705882352941)
                                    newLine.BorderSizePixel = 0
                                    newLine.Size = UDim2.new(0, 1, 1, 0)
                                    newLine.Position = UDim2.new((i - 1) / (10), 0, 0, 0)
                                    newLine.Parent = numberLineOutlines
                                end
                                for i = 2, 4 do
                                    local newLine = Instance.new('Frame')

                                    newLine.BackgroundTransparency = 0.5
                                    newLine.BackgroundColor3 = Color3.new(0.3764705882352941, 0.3764705882352941, 0.3764705882352941)
                                    newLine.BorderSizePixel = 0
                                    newLine.Size = UDim2.new(1, 0, 0, 1)
                                    newLine.Position = UDim2.new(0, 0, (i - 1) / (4), 0)
                                    newLine.Parent = numberLineOutlines
                                end

                                local lineTemp = Instance.new('Frame')

                                lineTemp.BackgroundColor3 = Color3.new(0, 0, 0)
                                lineTemp.BorderSizePixel = 0
                                lineTemp.Size = UDim2.new(0, 1, 0, 1)

                                local sequenceLine = Instance.new('Frame')

                                sequenceLine.BackgroundColor3 = Color3.new(0, 0, 0)
                                sequenceLine.BorderSizePixel = 0
                                sequenceLine.Size = UDim2.new(0, 1, 0, 0)

                                for i = 1, numberLine.AbsoluteSize.X do
                                    local line = sequenceLine.Clone(sequenceLine)

                                    eLines[i] = line
                                    line.Name = 'E' .. tostring(i)
                                    line.BackgroundTransparency = 0.5
                                    line.BackgroundColor3 = Color3.new(0.7803921568627451, 0.17254901960784313, 0.10980392156862745)
                                    line.Position = UDim2.new(0, i - 1, 0, 0)
                                    line.Parent = numberLine
                                end
                                for i = 1, numberLine.AbsoluteSize.X do
                                    local line = sequenceLine.Clone(sequenceLine)

                                    lines[i] = line
                                    line.Name = tostring(i)
                                    line.Position = UDim2.new(0, i - 1, 0, 0)
                                    line.Parent = numberLine
                                end

                                local envelopeDrag = Instance.new('Frame')

                                envelopeDrag.BackgroundTransparency = 1
                                envelopeDrag.BackgroundColor3 = Color3.new(0, 0, 0)
                                envelopeDrag.BorderSizePixel = 0
                                envelopeDrag.Size = UDim2.new(0, 7, 0, 20)
                                envelopeDrag.Visible = false
                                envelopeDrag.ZIndex = 2

                                local envelopeDragLine = Instance.new('Frame', envelopeDrag)

                                envelopeDragLine.Name = 'Line'
                                envelopeDragLine.BackgroundColor3 = Color3.new(0, 0, 0)
                                envelopeDragLine.BorderSizePixel = 0
                                envelopeDragLine.Position = UDim2.new(0, 3, 0, 0)
                                envelopeDragLine.Size = UDim2.new(0, 1, 0, 20)
                                envelopeDragLine.ZIndex = 2

                                local envelopeDragTop, envelopeDragBottom = envelopeDrag.Clone(envelopeDrag), envelopeDrag.Clone(envelopeDrag)

                                envelopeDragTop.Parent = numberLine
                                envelopeDragBottom.Parent = numberLine

                                local function buildSequence()
                                    local newPoints = {}

                                    for i, v in pairs(points)do
                                        table.insert(newPoints, NumberSequenceKeypoint.new(v[2], v[1], v[3]))
                                    end

                                    newMt.Sequence = NumberSequence.new(newPoints)

                                    newMt.OnSelect:Fire(newMt.Sequence)
                                end
                                local function round(num, places)
                                    local multi = 10 ^ places

                                    return math.floor(num * multi + 0.5) / multi
                                end
                                local function updateInputs(point)
                                    if point then
                                        currentPoint = point

                                        local rawT, rawV, rawE = point[2], point[1], point[3]

                                        timeBox.Text = round(rawT, (rawT < 0.01 and 5) or (rawT < 0.1 and 4) or 3)
                                        valueBox.Text = round(rawV, (rawV < 0.01 and 5) or (rawV < 0.1 and 4) or (rawV < 1 and 3) or 2)
                                        envelopeBox.Text = round(rawE, (rawE < 0.01 and 5) or (rawE < 0.1 and 4) or (rawV < 1 and 3) or 2)

                                        local envelopeDistance = numberLine.AbsoluteSize.Y * (point[3] / 10)

                                        envelopeDragTop.Position = UDim2.new(0, point[4].Position.X.Offset - 1, 0, point[4].Position.Y.Offset - envelopeDistance - 17)
                                        envelopeDragTop.Visible = true
                                        envelopeDragBottom.Position = UDim2.new(0, point[4].Position.X.Offset - 1, 0, point[4].Position.Y.Offset + envelopeDistance + 2)
                                        envelopeDragBottom.Visible = true
                                    end
                                end

                                envelopeDragTop.InputBegan:Connect(function(
                                    input
                                )
                                    if (input.UserInputType ~= Enum.UserInputType.MouseButton1 and input.UserInputType ~= Enum.UserInputType.Touch) or not currentPoint or Lib.CheckMouseInGui(currentPoint[4].Select) then
                                        return
                                    end

                                    local mouseEvent, releaseEvent
                                    local maxSize = numberLine.AbsoluteSize.Y
                                    local mouseDelta = math.abs(envelopeDragTop.AbsolutePosition.Y - mouse.Y)

                                    envelopeDragTop.Line.Position = UDim2.new(0, 2, 0, 0)
                                    envelopeDragTop.Line.Size = UDim2.new(0, 3, 0, 20)
                                    releaseEvent = user.InputEnded:Connect(function(
                                        input
                                    )
                                        if input.UserInputType ~= Enum.UserInputType.MouseButton1 and input.UserInputType ~= Enum.UserInputType.Touch then
                                            return
                                        end

                                        mouseEvent.Disconnect(mouseEvent)
                                        releaseEvent.Disconnect(releaseEvent)

                                        envelopeDragTop.Line.Position = UDim2.new(0, 3, 0, 0)
                                        envelopeDragTop.Line.Size = UDim2.new(0, 1, 0, 20)
                                    end)
                                    mouseEvent = user.InputChanged:Connect(function(
                                        input
                                    )
                                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                            local topDiff = (currentPoint[4].AbsolutePosition.Y + 2) - (mouse.Y - mouseDelta) - 19
                                            local newEnvelope = 10 * (math.max(topDiff, 0) / maxSize)
                                            local maxEnvelope = math.min(currentPoint[1], 10 - currentPoint[1])

                                            currentPoint[3] = math.min(newEnvelope, maxEnvelope)

                                            newMt.Redraw(newMt)
                                            buildSequence()
                                            updateInputs(currentPoint)
                                        end
                                    end)
                                end)
                                envelopeDragBottom.InputBegan:Connect(function(
                                    input
                                )
                                    if (input.UserInputType ~= Enum.UserInputType.MouseButton1 and input.UserInputType ~= Enum.UserInputType.Touch) or not currentPoint or Lib.CheckMouseInGui(currentPoint[4].Select) then
                                        return
                                    end

                                    local mouseEvent, releaseEvent
                                    local maxSize = numberLine.AbsoluteSize.Y
                                    local mouseDelta = math.abs(envelopeDragBottom.AbsolutePosition.Y - mouse.Y)

                                    envelopeDragBottom.Line.Position = UDim2.new(0, 2, 0, 0)
                                    envelopeDragBottom.Line.Size = UDim2.new(0, 3, 0, 20)
                                    releaseEvent = user.InputEnded:Connect(function(
                                        input
                                    )
                                        if input.UserInputType ~= Enum.UserInputType.MouseButton1 and input.UserInputType ~= Enum.UserInputType.Touch then
                                            return
                                        end

                                        mouseEvent.Disconnect(mouseEvent)
                                        releaseEvent.Disconnect(releaseEvent)

                                        envelopeDragBottom.Line.Position = UDim2.new(0, 3, 0, 0)
                                        envelopeDragBottom.Line.Size = UDim2.new(0, 1, 0, 20)
                                    end)
                                    mouseEvent = user.InputChanged:Connect(function(
                                        input
                                    )
                                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                            local bottomDiff = (mouse.Y + (20 - mouseDelta)) - (currentPoint[4].AbsolutePosition.Y + 2) - 19
                                            local newEnvelope = 10 * (math.max(bottomDiff, 0) / maxSize)
                                            local maxEnvelope = math.min(currentPoint[1], 10 - currentPoint[1])

                                            currentPoint[3] = math.min(newEnvelope, maxEnvelope)

                                            newMt.Redraw(newMt)
                                            buildSequence()
                                            updateInputs(currentPoint)
                                        end
                                    end)
                                end)

                                local function placePoint(point)
                                    local newPoint = Instance.new('Frame')

                                    newPoint.Name = 'Point'
                                    newPoint.BorderSizePixel = 0
                                    newPoint.Size = UDim2.new(0, 5, 0, 5)
                                    newPoint.Position = UDim2.new(0, math.floor((numberLine.AbsoluteSize.X - 1) * point[2]) - 2, 0, numberLine.AbsoluteSize.Y * (10 - point[1]) / 10 - 2)
                                    newPoint.BackgroundColor3 = Color3.new(0, 0, 0)

                                    local newSelect = Instance.new('Frame')

                                    newSelect.Name = 'Select'
                                    newSelect.BackgroundTransparency = 1
                                    newSelect.BackgroundColor3 = Color3.new(0.7803921568627451, 0.17254901960784313, 0.10980392156862745)
                                    newSelect.Position = UDim2.new(0, -2, 0, -2)
                                    newSelect.Size = UDim2.new(0, 9, 0, 9)
                                    newSelect.Parent = newPoint
                                    newPoint.Parent = numberLine

                                    newSelect.InputBegan:Connect(function(
                                        input
                                    )
                                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                            for i, v in pairs(points)do
                                                v[4].Select.BackgroundTransparency = 1
                                            end

                                            newSelect.BackgroundTransparency = 0

                                            updateInputs(point)
                                        end
                                        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and not currentlySelected then
                                            currentPoint = point

                                            local mouseEvent, releaseEvent

                                            currentlySelected = true
                                            newSelect.BackgroundColor3 = Color3.new(0.9764705882352941, 0.7490196078431373, 0.23137254901960785)

                                            local oldEnvelope = point[3]

                                            releaseEvent = user.InputEnded:Connect(function(
                                                input
                                            )
                                                if input.UserInputType ~= Enum.UserInputType.MouseButton1 and input.UserInputType ~= Enum.UserInputType.Touch then
                                                    return
                                                end

                                                mouseEvent.Disconnect(mouseEvent)
                                                releaseEvent.Disconnect(releaseEvent)

                                                currentlySelected = nil
                                                newSelect.BackgroundColor3 = Color3.new(0.7803921568627451, 0.17254901960784313, 0.10980392156862745)
                                            end)
                                            mouseEvent = user.InputChanged:Connect(function(
                                                input
                                            )
                                                if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                                    local maxX = numberLine.AbsoluteSize.X - 1
                                                    local relativeX = (input.Position.X - numberLine.AbsolutePosition.X)

                                                    if relativeX < 0 then
                                                        relativeX = 0
                                                    end
                                                    if relativeX > maxX then
                                                        relativeX = maxX
                                                    end

                                                    local maxY = numberLine.AbsoluteSize.Y - 1
                                                    local relativeY = (input.Position.Y - numberLine.AbsolutePosition.Y)

                                                    if relativeY < 0 then
                                                        relativeY = 0
                                                    end
                                                    if relativeY > maxY then
                                                        relativeY = maxY
                                                    end
                                                    if point ~= beginPoint and point ~= endPoint then
                                                        point[2] = relativeX / maxX
                                                    end

                                                    point[1] = 10 - (relativeY / maxY) * 10

                                                    local maxEnvelope = math.min(point[1], 10 - point[1])

                                                    point[3] = math.min(oldEnvelope, maxEnvelope)

                                                    newMt.Redraw(newMt)
                                                    updateInputs(point)

                                                    for i, v in pairs(points)do
                                                        v[4].Select.BackgroundTransparency = 1
                                                    end

                                                    newSelect.BackgroundTransparency = 0

                                                    buildSequence()
                                                end
                                            end)
                                        end
                                    end)

                                    return newPoint
                                end
                                local function placePoints()
                                    for i, v in pairs(points)do
                                        v[4] = placePoint(v)
                                    end
                                end
                                local function redraw(self)
                                    local numberLineSize = numberLine.AbsoluteSize

                                    table.sort(points, function(a, b)
                                        return a[2] < b[2]
                                    end)

                                    for i, v in pairs(points)do
                                        v[4].Position = UDim2.new(0, math.floor((numberLineSize.X - 1) * v[2]) - 2, 0, (numberLineSize.Y - 1) * (10 - v[1]) / 10 - 2)
                                    end

                                    lines[1].Size = UDim2.new(0, 1, 0, 0)

                                    for i = 1, #points - 1 do
                                        local fromPoint = points[i]
                                        local toPoint = points[i + 1]
                                        local deltaY = toPoint[4].Position.Y.Offset - fromPoint[4].Position.Y.Offset
                                        local deltaX = toPoint[4].Position.X.Offset - fromPoint[4].Position.X.Offset
                                        local slope = deltaY / deltaX
                                        local fromEnvelope = fromPoint[3]
                                        local nextEnvelope = toPoint[3]
                                        local currentRise = math.abs(slope)
                                        local totalRise = 0
                                        local maxRise = math.abs(toPoint[4].Position.Y.Offset - fromPoint[4].Position.Y.Offset)

                                        for lineCount = math.min(fromPoint[4].Position.X.Offset + 1, toPoint[4].Position.X.Offset), toPoint[4].Position.X.Offset do
                                            if deltaX == 0 and deltaY == 0 then
                                                return
                                            end

                                            local riseNow = math.floor(currentRise)
                                            local line = lines[lineCount + 3]

                                            if line then
                                                if totalRise + riseNow > maxRise then
                                                    riseNow = maxRise - totalRise
                                                end
                                                if math.sign(slope) == -1 then
                                                    line.Position = UDim2.new(0, lineCount + 2, 0, fromPoint[4].Position.Y.Offset + 
-(totalRise + riseNow) + 2)
                                                else
                                                    line.Position = UDim2.new(0, lineCount + 2, 0, fromPoint[4].Position.Y.Offset + totalRise + 2)
                                                end

                                                line.Size = UDim2.new(0, 1, 0, math.max(riseNow, 1))
                                            end

                                            totalRise = totalRise + riseNow
                                            currentRise = currentRise - riseNow + math.abs(slope)

                                            local envPercent = (lineCount - fromPoint[4].Position.X.Offset) / (toPoint[4].Position.X.Offset - fromPoint[4].Position.X.Offset)
                                            local envLerp = fromEnvelope + (nextEnvelope - fromEnvelope) * envPercent
                                            local relativeSize = (envLerp / 10) * numberLineSize.Y
                                            local line = eLines[lineCount + 3]

                                            if line then
                                                line.Position = UDim2.new(0, lineCount + 2, 0, lines[lineCount + 3].Position.Y.Offset - math.floor(relativeSize))
                                                line.Size = UDim2.new(0, 1, 0, math.floor(relativeSize * 2))
                                            end
                                        end
                                    end
                                end

                                newMt.Redraw = redraw

                                local function loadSequence(self, seq)
                                    resetSequence = seq

                                    for i, v in pairs(points)do
                                        if v[4] then
                                            v[4]:Destroy()
                                        end
                                    end

                                    points = {}

                                    for i, v in pairs(seq.Keypoints)do
                                        local maxEnvelope = math.min(v.Value, 10 - v.Value)
                                        local newPoint = {
                                            v.Value,
                                            v.Time,
                                            math.min(v.Envelope, maxEnvelope),
                                        }

                                        newPoint[4] = placePoint(newPoint)

                                        table.insert(points, newPoint)
                                    end

                                    beginPoint = points[1]
                                    endPoint = points[#points]
                                    currentlySelected = nil

                                    redraw()

                                    envelopeDragTop.Visible = false
                                    envelopeDragBottom.Visible = false
                                end

                                newMt.SetSequence = loadSequence

                                timeBox.FocusLost:Connect(function()
                                    local point = currentPoint
                                    local num = tonumber(timeBox.Text)

                                    if point and num and point ~= beginPoint and point ~= endPoint then
                                        num = math.clamp(num, 0, 1)
                                        point[2] = num

                                        redraw()
                                        buildSequence()
                                        updateInputs(point)
                                    end
                                end)
                                valueBox.FocusLost:Connect(function()
                                    local point = currentPoint
                                    local num = tonumber(valueBox.Text)

                                    if point and num then
                                        local oldEnvelope = point[3]

                                        num = math.clamp(num, 0, 10)
                                        point[1] = num

                                        local maxEnvelope = math.min(point[1], 10 - point[1])

                                        point[3] = math.min(oldEnvelope, maxEnvelope)

                                        redraw()
                                        buildSequence()
                                        updateInputs(point)
                                    end
                                end)
                                envelopeBox.FocusLost:Connect(function()
                                    local point = currentPoint
                                    local num = tonumber(envelopeBox.Text)

                                    if point and num then
                                        num = math.clamp(num, 0, 5)

                                        local maxEnvelope = math.min(point[1], 10 - point[1])

                                        point[3] = math.min(num, maxEnvelope)

                                        redraw()
                                        buildSequence()
                                        updateInputs(point)
                                    end
                                end)

                                local function buttonAnimations(
                                    button,
                                    inverse
                                )
                                    button.InputBegan:Connect(function(input)
                                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                            button.BackgroundTransparency = (inverse and 0.5 or 0.4)
                                        end
                                    end)
                                    button.InputEnded:Connect(function(input)
                                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                            button.BackgroundTransparency = (inverse and 1 or 0)
                                        end
                                    end)
                                end

                                numberLine.InputBegan:Connect(function(input)
                                    if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and #points < 20 then
                                        if Lib.CheckMouseInGui(envelopeDragTop) or Lib.CheckMouseInGui(envelopeDragBottom) then
                                            return
                                        end

                                        for i, v in pairs(points)do
                                            if Lib.CheckMouseInGui(v[4].Select) then
                                                return
                                            end
                                        end

                                        local maxX = numberLine.AbsoluteSize.X - 1
                                        local relativeX = (input.Position.X - numberLine.AbsolutePosition.X)

                                        if relativeX < 0 then
                                            relativeX = 0
                                        end
                                        if relativeX > maxX then
                                            relativeX = maxX
                                        end

                                        local maxY = numberLine.AbsoluteSize.Y - 1
                                        local relativeY = (input.Position.Y - numberLine.AbsolutePosition.Y)

                                        if relativeY < 0 then
                                            relativeY = 0
                                        end
                                        if relativeY > maxY then
                                            relativeY = maxY
                                        end

                                        local raw = relativeX / maxX
                                        local newPoint = {
                                            10 - (relativeY / maxY) * 10,
                                            raw,
                                            0,
                                        }

                                        newPoint[4] = placePoint(newPoint)

                                        table.insert(points, newPoint)
                                        redraw()
                                        buildSequence()
                                    end
                                end)
                                deleteButton.MouseButton1Click:Connect(function()
                                    if currentPoint and currentPoint ~= beginPoint and currentPoint ~= endPoint then
                                        for i, v in pairs(points)do
                                            if v == currentPoint then
                                                v[4]:Destroy()
                                                table.remove(points, i)

                                                break
                                            end
                                        end

                                        currentlySelected = nil

                                        redraw()
                                        buildSequence()
                                        updateInputs(points[1])
                                    end
                                end)
                                resetButton.MouseButton1Click:Connect(function()
                                    if resetSequence then
                                        newMt.SetSequence(newMt, resetSequence)
                                        buildSequence()
                                    end
                                end)
                                closeButton.MouseButton1Click:Connect(function()
                                    window.Close(window)
                                end)
                                buttonAnimations(deleteButton)
                                buttonAnimations(resetButton)
                                buttonAnimations(closeButton)
                                placePoints()
                                redraw()

                                newMt.Show = function(self)
                                    window.Show(window)
                                end

                                return newMt
                            end

                            return {new = new}
                        end)()
                        Lib.ColorSequenceEditor = (function()
                            local function new()
                                local newMt = setmetatable({}, {})

                                newMt.OnSelect = Lib.Signal.new()
                                newMt.OnCancel = Lib.Signal.new()
                                newMt.OnPreview = Lib.Signal.new()
                                newMt.OnPickColor = Lib.Signal.new()

                                local guiContents = create({
                                    {
                                        1,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                            BorderSizePixel = 0,
                                            ClipsDescendants = true,
                                            Name = 'Content',
                                            Position = UDim2.new(0, 0, 0, 20),
                                            Size = UDim2.new(1, 0, 1, -20),
                                        },
                                    },
                                    {
                                        2,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                            BorderColor3 = Color3.new(0.21568627655506, 0.21568627655506, 0.21568627655506),
                                            Name = 'ColorLine',
                                            Parent = {1},
                                            Position = UDim2.new(0, 10, 0, 5),
                                            Size = UDim2.new(1, -20, 0, 70),
                                        },
                                    },
                                    {
                                        3,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BorderSizePixel = 0,
                                            Name = 'Gradient',
                                            Parent = {2},
                                            Size = UDim2.new(1, 0, 1, 0),
                                        },
                                    },
                                    {
                                        4,
                                        'UIGradient',
                                        {
                                            Parent = {3},
                                        },
                                    },
                                    {
                                        5,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            BorderSizePixel = 0,
                                            Name = 'Arrows',
                                            Parent = {1},
                                            Position = UDim2.new(0, 1, 0, 73),
                                            Size = UDim2.new(1, -2, 0, 16),
                                        },
                                    },
                                    {
                                        6,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0, 0, 0),
                                            BackgroundTransparency = 0.5,
                                            BorderSizePixel = 0,
                                            Name = 'Cursor',
                                            Parent = {1},
                                            Position = UDim2.new(0, 10, 0, 0),
                                            Size = UDim2.new(0, 1, 0, 80),
                                        },
                                    },
                                    {
                                        7,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.14901961386204, 0.14901961386204, 0.14901961386204),
                                            BorderColor3 = Color3.new(0.12549020349979, 0.12549020349979, 0.12549020349979),
                                            Name = 'Time',
                                            Parent = {1},
                                            Position = UDim2.new(0, 40, 0, 95),
                                            Size = UDim2.new(0, 100, 0, 20),
                                        },
                                    },
                                    {
                                        8,
                                        'TextBox',
                                        {
                                            BackgroundColor3 = Color3.new(0.25098040699959, 0.25098040699959, 0.25098040699959),
                                            BackgroundTransparency = 1,
                                            BorderColor3 = Color3.new(0.37647062540054, 0.37647062540054, 0.37647062540054),
                                            ClipsDescendants = true,
                                            Font = 3,
                                            Name = 'Input',
                                            Parent = {7},
                                            Position = UDim2.new(0, 2, 0, 0),
                                            Size = UDim2.new(0, 98, 0, 20),
                                            Text = '0',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 0,
                                        },
                                    },
                                    {
                                        9,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'Title',
                                            Parent = {7},
                                            Position = UDim2.new(0, -40, 0, 0),
                                            Size = UDim2.new(0, 34, 1, 0),
                                            Text = 'Time',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 1,
                                        },
                                    },
                                    {
                                        10,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BorderColor3 = Color3.new(0.21568627655506, 0.21568627655506, 0.21568627655506),
                                            Name = 'ColorBox',
                                            Parent = {1},
                                            Position = UDim2.new(0, 220, 0, 95),
                                            Size = UDim2.new(0, 20, 0, 20),
                                        },
                                    },
                                    {
                                        11,
                                        'TextLabel',
                                        {
                                            BackgroundColor3 = Color3.new(1, 1, 1),
                                            BackgroundTransparency = 1,
                                            Font = 3,
                                            Name = 'Title',
                                            Parent = {10},
                                            Position = UDim2.new(0, -40, 0, 0),
                                            Size = UDim2.new(0, 34, 1, 0),
                                            Text = 'Color',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                            TextXAlignment = 1,
                                        },
                                    },
                                    {
                                        12,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.2352941185236, 0.2352941185236, 0.2352941185236),
                                            BorderColor3 = Color3.new(0.21568627655506, 0.21568627655506, 0.21568627655506),
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Close',
                                            Parent = {1},
                                            Position = UDim2.new(1, -90, 0, 95),
                                            Size = UDim2.new(0, 80, 0, 20),
                                            Text = 'Close',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        13,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.2352941185236, 0.2352941185236, 0.2352941185236),
                                            BorderColor3 = Color3.new(0.21568627655506, 0.21568627655506, 0.21568627655506),
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Reset',
                                            Parent = {1},
                                            Position = UDim2.new(1, -180, 0, 95),
                                            Size = UDim2.new(0, 80, 0, 20),
                                            Text = 'Reset',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        14,
                                        'TextButton',
                                        {
                                            AutoButtonColor = false,
                                            BackgroundColor3 = Color3.new(0.2352941185236, 0.2352941185236, 0.2352941185236),
                                            BorderColor3 = Color3.new(0.21568627655506, 0.21568627655506, 0.21568627655506),
                                            BorderSizePixel = 0,
                                            Font = 3,
                                            Name = 'Delete',
                                            Parent = {1},
                                            Position = UDim2.new(0, 280, 0, 95),
                                            Size = UDim2.new(0, 80, 0, 20),
                                            Text = 'Delete',
                                            TextColor3 = Color3.new(0.86274516582489, 0.86274516582489, 0.86274516582489),
                                            TextSize = 14,
                                        },
                                    },
                                    {
                                        15,
                                        'Frame',
                                        {
                                            BackgroundTransparency = 1,
                                            Name = 'Arrow',
                                            Parent = {1},
                                            Size = UDim2.new(0, 16, 0, 16),
                                            Visible = false,
                                        },
                                    },
                                    {
                                        16,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {15},
                                            Position = UDim2.new(0, 8, 0, 3),
                                            Size = UDim2.new(0, 1, 0, 2),
                                        },
                                    },
                                    {
                                        17,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {15},
                                            Position = UDim2.new(0, 7, 0, 5),
                                            Size = UDim2.new(0, 3, 0, 2),
                                        },
                                    },
                                    {
                                        18,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {15},
                                            Position = UDim2.new(0, 6, 0, 7),
                                            Size = UDim2.new(0, 5, 0, 2),
                                        },
                                    },
                                    {
                                        19,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {15},
                                            Position = UDim2.new(0, 5, 0, 9),
                                            Size = UDim2.new(0, 7, 0, 2),
                                        },
                                    },
                                    {
                                        20,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {15},
                                            Position = UDim2.new(0, 4, 0, 11),
                                            Size = UDim2.new(0, 9, 0, 2),
                                        },
                                    },
                                })
                                local window = Lib.Window.new()

                                window.Resizable = false

                                window.Resize(window, 650, 150)
                                window.SetTitle(window, 'ColorSequence Editor')

                                newMt.Window = window
                                newMt.Gui = window.Gui

                                for i, v in pairs(guiContents.GetChildren(guiContents))do
                                    v.Parent = window.GuiElems.Content
                                end

                                local gui = window.Gui
                                local pickerGui = gui.Main
                                local pickerTopBar = pickerGui.TopBar
                                local pickerFrame = pickerGui.Content
                                local colorLine = pickerFrame.ColorLine
                                local gradient = colorLine.Gradient.UIGradient
                                local arrowFrame = pickerFrame.Arrows
                                local arrow = pickerFrame.Arrow
                                local cursor = pickerFrame.Cursor
                                local timeBox = pickerFrame.Time.Input
                                local colorBox = pickerFrame.ColorBox
                                local deleteButton = pickerFrame.Delete
                                local resetButton = pickerFrame.Reset
                                local closeButton = pickerFrame.Close
                                local topClose = pickerTopBar.Close
                                local user = service.UserInputService
                                local mouse = service.Players.LocalPlayer:GetMouse()
                                local colors = {
                                    {
                                        Color3.new(1, 0, 1),
                                        0,
                                    },
                                    {
                                        Color3.new(0.2, 0.9, 0.2),
                                        0.2,
                                    },
                                    {
                                        Color3.new(0.4, 0.5, 0.9),
                                        0.7,
                                    },
                                    {
                                        Color3.new(0.6, 1, 1),
                                        1,
                                    },
                                }
                                local resetSequence
                                local beginPoint = colors[1]
                                local endPoint = colors[#colors]
                                local currentlySelected
                                local currentPoint
                                local sequenceLine = Instance.new('Frame')

                                sequenceLine.BorderSizePixel = 0
                                sequenceLine.Size = UDim2.new(0, 1, 1, 0)
                                newMt.Sequence = ColorSequence.new(Color3.new(1, 1, 1))

                                local function buildSequence(noupdate)
                                    local newPoints = {}

                                    table.sort(colors, function(a, b)
                                        return a[2] < b[2]
                                    end)

                                    for i, v in pairs(colors)do
                                        table.insert(newPoints, ColorSequenceKeypoint.new(v[2], v[1]))
                                    end

                                    newMt.Sequence = ColorSequence.new(newPoints)

                                    if not noupdate then
                                        newMt.OnSelect:Fire(newMt.Sequence)
                                    end
                                end
                                local function round(num, places)
                                    local multi = 10 ^ places

                                    return math.floor(num * multi + 0.5) / multi
                                end
                                local function updateInputs(point)
                                    if point then
                                        currentPoint = point

                                        local raw = point[2]

                                        timeBox.Text = round(raw, (raw < 0.01 and 5) or (raw < 0.1 and 4) or 3)
                                        colorBox.BackgroundColor3 = point[1]
                                    end
                                end
                                local function placeArrow(ind, point)
                                    local newArrow = arrow.Clone(arrow)

                                    newArrow.Position = UDim2.new(0, ind - 1, 0, 0)
                                    newArrow.Visible = true
                                    newArrow.Parent = arrowFrame

                                    newArrow.InputBegan:Connect(function(input)
                                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                            cursor.Visible = true
                                            cursor.Position = UDim2.new(0, 9 + newArrow.Position.X.Offset, 0, 0)
                                        end
                                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                            updateInputs(point)

                                            if point == beginPoint or point == endPoint or currentlySelected then
                                                return
                                            end

                                            local mouseEvent, releaseEvent

                                            currentlySelected = true
                                            releaseEvent = user.InputEnded:Connect(function(
                                                input
                                            )
                                                if input.UserInputType ~= Enum.UserInputType.MouseButton1 and input.UserInputType ~= Enum.UserInputType.Touch then
                                                    return
                                                end

                                                mouseEvent.Disconnect(mouseEvent)
                                                releaseEvent.Disconnect(releaseEvent)

                                                currentlySelected = nil
                                                cursor.Visible = false
                                            end)
                                            mouseEvent = user.InputChanged:Connect(function(
                                                input
                                            )
                                                if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                                    local maxSize = colorLine.AbsoluteSize.X - 1
                                                    local relativeX = (input.Position.X - colorLine.AbsolutePosition.X)

                                                    if relativeX < 0 then
                                                        relativeX = 0
                                                    end
                                                    if relativeX > maxSize then
                                                        relativeX = maxSize
                                                    end

                                                    local raw = relativeX / maxSize

                                                    point[2] = relativeX / maxSize

                                                    updateInputs(point)

                                                    cursor.Visible = true
                                                    cursor.Position = UDim2.new(0, 9 + newArrow.Position.X.Offset, 0, 0)

                                                    buildSequence()
                                                    newMt.Redraw(newMt)
                                                end
                                            end)
                                        end
                                    end)
                                    newArrow.InputEnded:Connect(function(input)
                                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                            cursor.Visible = false
                                        end
                                    end)

                                    return newArrow
                                end
                                local function placeArrows()
                                    for i, v in pairs(colors)do
                                        v[3] = placeArrow(math.floor((colorLine.AbsoluteSize.X - 1) * v[2]) + 1, v)
                                    end
                                end
                                local function redraw(self)
                                    gradient.Color = newMt.Sequence or ColorSequence.new(Color3.new(1, 1, 1))

                                    for i = 2, #colors do
                                        local nextColor = colors[i]
                                        local endPos = math.floor((colorLine.AbsoluteSize.X - 1) * nextColor[2]) + 1

                                        nextColor[3].Position = UDim2.new(0, endPos, 0, 0)
                                    end
                                end

                                newMt.Redraw = redraw

                                local function loadSequence(self, seq)
                                    resetSequence = seq

                                    for i, v in pairs(colors)do
                                        if v[3] then
                                            v[3]:Destroy()
                                        end
                                    end

                                    colors = {}
                                    currentlySelected = nil

                                    for i, v in pairs(seq.Keypoints)do
                                        local newPoint = {
                                            v.Value,
                                            v.Time,
                                        }

                                        newPoint[3] = placeArrow(v.Time, newPoint)

                                        table.insert(colors, newPoint)
                                    end

                                    beginPoint = colors[1]
                                    endPoint = colors[#colors]
                                    currentlySelected = nil

                                    updateInputs(colors[1])
                                    buildSequence(true)
                                    redraw()
                                end

                                newMt.SetSequence = loadSequence

                                local function buttonAnimations(
                                    button,
                                    inverse
                                )
                                    button.InputBegan:Connect(function(input)
                                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                            button.BackgroundTransparency = (inverse and 0.5 or 0.4)
                                        end
                                    end)
                                    button.InputEnded:Connect(function(input)
                                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                            button.BackgroundTransparency = (inverse and 1 or 0)
                                        end
                                    end)
                                end

                                colorLine.InputBegan:Connect(function(input)
                                    if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and #colors < 20 then
                                        local maxSize = colorLine.AbsoluteSize.X - 1
                                        local relativeX = (input.Position.X - colorLine.AbsolutePosition.X)

                                        if relativeX < 0 then
                                            relativeX = 0
                                        end
                                        if relativeX > maxSize then
                                            relativeX = maxSize
                                        end

                                        local raw = relativeX / maxSize
                                        local fromColor
                                        local toColor

                                        for i, col in pairs(colors)do
                                            if col[2] >= raw then
                                                fromColor = colors[math.max(i - 1, 1)]
                                                toColor = colors[i]

                                                break
                                            end
                                        end

                                        local lerpColor = fromColor[1]:lerp(toColor[1], (raw - fromColor[2]) / (toColor[2] - fromColor[2]))
                                        local newPoint = {lerpColor, raw}

                                        newPoint[3] = placeArrow(newPoint[2], newPoint)

                                        table.insert(colors, newPoint)
                                        updateInputs(newPoint)
                                        buildSequence()
                                        redraw()
                                    end
                                end)
                                colorLine.InputChanged:Connect(function(input)
                                    if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                                        local maxSize = colorLine.AbsoluteSize.X - 1
                                        local relativeX = (input.Position.X - colorLine.AbsolutePosition.X)

                                        if relativeX < 0 then
                                            relativeX = 0
                                        end
                                        if relativeX > maxSize then
                                            relativeX = maxSize
                                        end

                                        cursor.Visible = true
                                        cursor.Position = UDim2.new(0, 10 + relativeX, 0, 0)
                                    end
                                end)
                                colorLine.InputEnded:Connect(function(input)
                                    if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                                        local inArrow = false

                                        for i, v in pairs(colors)do
                                            if Lib.CheckMouseInGui(v[3]) then
                                                inArrow = v[3]
                                            end
                                        end

                                        cursor.Visible = inArrow and true or false

                                        if inArrow then
                                            cursor.Position = UDim2.new(0, 9 + inArrow.Position.X.Offset, 0, 0)
                                        end
                                    end
                                end)
                                timeBox.GetPropertyChangedSignal(timeBox, 'Text'):Connect(function(
                                )
                                    local point = currentPoint
                                    local num = tonumber(timeBox.Text)

                                    if point and num and point ~= beginPoint and point ~= endPoint then
                                        num = math.clamp(num, 0, 1)
                                        point[2] = num

                                        buildSequence()
                                        redraw()
                                    end
                                end)
                                colorBox.InputBegan:Connect(function(input)
                                    if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
                                        local editor = newMt.ColorPicker

                                        if not editor then
                                            editor = Lib.ColorPicker.new()

                                            editor.Window:SetTitle('ColorSequence Color Picker')
                                            editor.OnSelect:Connect(function(
                                                col
                                            )
                                                if currentPoint then
                                                    currentPoint[1] = col
                                                end

                                                buildSequence()
                                                redraw()
                                            end)

                                            newMt.ColorPicker = editor
                                        end

                                        editor.Window:ShowAndFocus()
                                    end
                                end)
                                deleteButton.MouseButton1Click:Connect(function()
                                    if currentPoint and currentPoint ~= beginPoint and currentPoint ~= endPoint then
                                        for i, v in pairs(colors)do
                                            if v == currentPoint then
                                                v[3]:Destroy()
                                                table.remove(colors, i)

                                                break
                                            end
                                        end

                                        currentlySelected = nil

                                        updateInputs(colors[1])
                                        buildSequence()
                                        redraw()
                                    end
                                end)
                                resetButton.MouseButton1Click:Connect(function()
                                    if resetSequence then
                                        newMt.SetSequence(newMt, resetSequence)
                                    end
                                end)
                                closeButton.MouseButton1Click:Connect(function()
                                    window.Close(window)
                                end)
                                topClose.MouseButton1Click:Connect(function()
                                    window.Close(window)
                                end)
                                buttonAnimations(deleteButton)
                                buttonAnimations(resetButton)
                                buttonAnimations(closeButton)
                                placeArrows()
                                redraw()

                                newMt.Show = function(self)
                                    window.Show(window)
                                end

                                return newMt
                            end

                            return {new = new}
                        end)()
                        Lib.ViewportTextBox = (function()
                            local textService = service.TextService
                            local props = {
                                OffsetX = 0,
                                TextBox = PH,
                                CursorPos = -1,
                                Gui = PH,
                                View = PH,
                            }
                            local funcs = {}

                            funcs.Update = function(self)
                                local cursorPos = self.CursorPos or -1
                                local text = self.TextBox.Text

                                if text == '' then
                                    self.TextBox.Position = UDim2.new(0, 0, 0, 0)

                                    return
                                end
                                if cursorPos == -1 then
                                    return
                                end

                                local cursorText = text.sub(text, 1, cursorPos - 1)
                                local pos
                                local leftEnd = -self.TextBox.Position.X.Offset
                                local rightEnd = leftEnd + self.View.AbsoluteSize.X
                                local totalTextSize = textService.GetTextSize(textService, text, self.TextBox.TextSize, self.TextBox.Font, Vector2.new(999999999, 100)).X
                                local cursorTextSize = textService.GetTextSize(textService, cursorText, self.TextBox.TextSize, self.TextBox.Font, Vector2.new(999999999, 100)).X

                                if cursorTextSize > rightEnd then
                                    pos = math.max(-1, cursorTextSize - self.View.AbsoluteSize.X + 2)
                                elseif cursorTextSize < leftEnd then
                                    pos = math.max(-1, cursorTextSize - 2)
                                elseif totalTextSize < rightEnd then
                                    pos = math.max(-1, totalTextSize - self.View.AbsoluteSize.X + 2)
                                end
                                if pos then
                                    self.TextBox.Position = UDim2.new(0, -pos, 0, 0)
                                    self.TextBox.Size = UDim2.new(1, pos, 1, 0)
                                end
                            end
                            funcs.GetText = function(self)
                                return self.TextBox.Text
                            end
                            funcs.SetText = function(self, text)
                                self.TextBox.Text = text
                            end

                            local mt = getGuiMT(props, funcs)

                            local function convert(textbox)
                                local obj = initObj(props, mt)
                                local view = Instance.new('Frame')

                                view.BackgroundTransparency = textbox.BackgroundTransparency
                                view.BackgroundColor3 = textbox.BackgroundColor3
                                view.BorderSizePixel = textbox.BorderSizePixel
                                view.BorderColor3 = textbox.BorderColor3
                                view.Position = textbox.Position
                                view.Size = textbox.Size
                                view.ClipsDescendants = true
                                view.Name = textbox.Name
                                textbox.BackgroundTransparency = 1
                                textbox.Position = UDim2.new(0, 0, 0, 0)
                                textbox.Size = UDim2.new(1, 0, 1, 0)
                                textbox.TextXAlignment = Enum.TextXAlignment.Left
                                textbox.Name = 'Input'
                                obj.TextBox = textbox
                                obj.View = view
                                obj.Gui = view

                                textbox.Changed:Connect(function(prop)
                                    if prop == 'Text' or prop == 'CursorPosition' or prop == 'AbsoluteSize' then
                                        local cursorPos = obj.TextBox.CursorPosition

                                        if cursorPos ~= -1 then
                                            obj.CursorPos = cursorPos
                                        end

                                        obj.Update(obj)
                                    end
                                end)
                                obj.Update(obj)

                                view.Parent = textbox.Parent
                                textbox.Parent = view

                                return obj
                            end
                            local function new()
                                local textBox = Instance.new('TextBox')

                                textBox.Size = UDim2.new(0, 100, 0, 20)
                                textBox.BackgroundColor3 = Settings.Theme.TextBox
                                textBox.BorderColor3 = Settings.Theme.Outline3
                                textBox.ClearTextOnFocus = false
                                textBox.TextColor3 = Settings.Theme.Text
                                textBox.Font = Enum.Font.SourceSans
                                textBox.TextSize = 14
                                textBox.Text = ''

                                return convert(textBox)
                            end

                            return {
                                new = new,
                                convert = convert,
                            }
                        end)()
                        Lib.Label = (function()
                            local props, funcs = {}, {}
                            local mt = getGuiMT(props, funcs)

                            local function new()
                                local label = Instance.new('TextLabel')

                                label.BackgroundTransparency = 1
                                label.TextXAlignment = Enum.TextXAlignment.Left
                                label.TextColor3 = Settings.Theme.Text
                                label.TextTransparency = 0.1
                                label.Size = UDim2.new(0, 100, 0, 20)
                                label.Font = Enum.Font.SourceSans
                                label.TextSize = 14

                                local obj = setmetatable({Gui = label}, mt)

                                return obj
                            end

                            return {new = new}
                        end)()
                        Lib.Frame = (function()
                            local props, funcs = {}, {}
                            local mt = getGuiMT(props, funcs)

                            local function new()
                                local fr = Instance.new('Frame')

                                fr.BackgroundColor3 = Settings.Theme.Main1
                                fr.BorderColor3 = Settings.Theme.Outline1
                                fr.Size = UDim2.new(0, 50, 0, 50)

                                local obj = setmetatable({Gui = fr}, mt)

                                return obj
                            end

                            return {new = new}
                        end)()
                        Lib.Button = (function()
                            local props = {
                                Gui = PH,
                                Anim = PH,
                                Disabled = false,
                                OnClick = SIGNAL,
                                OnDown = SIGNAL,
                                OnUp = SIGNAL,
                                AllowedButtons = {1},
                            }
                            local funcs = {}
                            local tableFind = table.find

                            funcs.Trigger = function(self, event, button)
                                if not self.Disabled and tableFind(self.AllowedButtons, button) then
                                    self['On' .. event]:Fire(button)
                                end
                            end
                            funcs.SetDisabled = function(self, dis)
                                self.Disabled = dis

                                if dis then
                                    self.Anim:Disable()

                                    self.Gui.TextTransparency = 0.5
                                else
                                    self.Anim.Enable()

                                    self.Gui.TextTransparency = 0
                                end
                            end

                            local mt = getGuiMT(props, funcs)

                            local function new()
                                local b = Instance.new('TextButton')

                                b.AutoButtonColor = false
                                b.TextColor3 = Settings.Theme.Text
                                b.TextTransparency = 0.1
                                b.Size = UDim2.new(0, 100, 0, 20)
                                b.Font = Enum.Font.SourceSans
                                b.TextSize = 14
                                b.BackgroundColor3 = Settings.Theme.Button
                                b.BorderColor3 = Settings.Theme.Outline2

                                local obj = initObj(props, mt)

                                obj.Gui = b
                                obj.Anim = Lib.ButtonAnim(b, {
                                    Mode = 2,
                                    StartColor = Settings.Theme.Button,
                                    HoverColor = Settings.Theme.ButtonHover,
                                    PressColor = Settings.Theme.ButtonPress,
                                    OutlineColor = Settings.Theme.Outline2,
                                })

                                b.MouseButton1Click:Connect(function()
                                    obj.Trigger(obj, 'Click', 1)
                                end)
                                b.MouseButton1Down:Connect(function()
                                    obj.Trigger(obj, 'Down', 1)
                                end)
                                b.MouseButton1Up:Connect(function()
                                    obj.Trigger(obj, 'Up', 1)
                                end)
                                b.MouseButton2Click:Connect(function()
                                    obj.Trigger(obj, 'Click', 2)
                                end)
                                b.MouseButton2Down:Connect(function()
                                    obj.Trigger(obj, 'Down', 2)
                                end)
                                b.MouseButton2Up:Connect(function()
                                    obj.Trigger(obj, 'Up', 2)
                                end)

                                return obj
                            end

                            return {new = new}
                        end)()
                        Lib.DropDown = (function()
                            local props = {
                                Gui = PH,
                                Anim = PH,
                                Context = PH,
                                Selected = PH,
                                Disabled = false,
                                CanBeEmpty = true,
                                Options = {},
                                GuiElems = {},
                                OnSelect = SIGNAL,
                            }
                            local funcs = {}

                            funcs.Update = function(self)
                                local options = self.Options

                                if #options > 0 then
                                    if not self.Selected then
                                        if not self.CanBeEmpty then
                                            self.Selected = options[1]
                                            self.GuiElems.Label.Text = options[1]
                                        else
                                            self.GuiElems.Label.Text = '- Select -'
                                        end
                                    else
                                        self.GuiElems.Label.Text = self.Selected
                                    end
                                else
                                    self.GuiElems.Label.Text = '- Select -'
                                end
                            end
                            funcs.ShowOptions = function(self)
                                local context = self.Context

                                context.Width = self.Gui.AbsoluteSize.X
                                context.ReverseYOffset = self.Gui.AbsoluteSize.Y

                                context.Show(context, self.Gui.AbsolutePosition.X, self.Gui.AbsolutePosition.Y + context.ReverseYOffset)
                            end
                            funcs.SetOptions = function(self, opts)
                                self.Options = opts

                                local context = self.Context
                                local options = self.Options

                                context.Clear(context)

                                local onClick = function(option)
                                    self.Selected = option

                                    self.OnSelect:Fire(option)
                                    self.Update(self)
                                end

                                if self.CanBeEmpty then
                                    context.Add(context, {
                                        Name = '- Select -',
                                        function()
                                            self.Selected = nil

                                            self.OnSelect:Fire(nil)
                                            self.Update(self)
                                        end,
                                    })
                                end

                                for i = 1, #options do
                                    context.Add(context, {
                                        Name = options[i],
                                        OnClick = onClick,
                                    })
                                end

                                self.Update(self)
                            end
                            funcs.SetSelected = function(self, opt)
                                self.Selected = type(opt) == 'number' and self.Options[opt] or opt

                                self.Update(self)
                            end

                            local mt = getGuiMT(props, funcs)

                            local function new()
                                local f = Instance.new('TextButton')

                                f.AutoButtonColor = false
                                f.Text = ''
                                f.Size = UDim2.new(0, 100, 0, 20)
                                f.BackgroundColor3 = Settings.Theme.TextBox
                                f.BorderColor3 = Settings.Theme.Outline3

                                local label = Lib.Label.new()

                                label.Position = UDim2.new(0, 2, 0, 0)
                                label.Size = UDim2.new(1, -22, 1, 0)
                                label.TextTruncate = Enum.TextTruncate.AtEnd
                                label.Parent = f

                                local arrow = create({
                                    {
                                        1,
                                        'Frame',
                                        {
                                            BackgroundTransparency = 1,
                                            Name = 'EnumArrow',
                                            Position = UDim2.new(1, -16, 0, 2),
                                            Size = UDim2.new(0, 16, 0, 16),
                                        },
                                    },
                                    {
                                        2,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {1},
                                            Position = UDim2.new(0, 8, 0, 9),
                                            Size = UDim2.new(0, 1, 0, 1),
                                        },
                                    },
                                    {
                                        3,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {1},
                                            Position = UDim2.new(0, 7, 0, 8),
                                            Size = UDim2.new(0, 3, 0, 1),
                                        },
                                    },
                                    {
                                        4,
                                        'Frame',
                                        {
                                            BackgroundColor3 = Color3.new(0.86274510622025, 0.86274510622025, 0.86274510622025),
                                            BorderSizePixel = 0,
                                            Parent = {1},
                                            Position = UDim2.new(0, 6, 0, 7),
                                            Size = UDim2.new(0, 5, 0, 1),
                                        },
                                    },
                                })

                                arrow.Parent = f

                                local obj = initObj(props, mt)

                                obj.Gui = f
                                obj.Anim = Lib.ButtonAnim(f, {
                                    Mode = 2,
                                    StartColor = Settings.Theme.TextBox,
                                    LerpTo = Settings.Theme.Button,
                                    LerpDelta = 0.15,
                                })
                                obj.Context = Lib.ContextMenu.new()
                                obj.Context.Iconless = true
                                obj.Context.MaxHeight = 200
                                obj.Selected = nil
                                obj.GuiElems = {Label = label}

                                f.MouseButton1Down:Connect(function()
                                    obj.ShowOptions(obj)
                                end)
                                obj.Update(obj)

                                return obj
                            end

                            return {new = new}
                        end)()
                        Lib.ClickSystem = (function()
                            local props = {
                                LastItem = PH,
                                OnDown = SIGNAL,
                                OnRelease = SIGNAL,
                                AllowedButtons = {1},
                                Combo = 0,
                                MaxCombo = 2,
                                ComboTime = 0.5,
                                Items = {},
                                ItemCons = {},
                                ClickId = -1,
                                LastButton = '',
                            }
                            local funcs = {}
                            local tostring = tostring
                            local disconnect = function(con)
                                local pos = table.find(con.Signal.Connections, con)

                                if pos then
                                    table.remove(con.Signal.Connections, pos)
                                end
                            end

                            funcs.Trigger = function(self, item, button, X, Y)
                                if table.find(self.AllowedButtons, button) then
                                    if self.LastButton ~= button or self.LastItem ~= item or self.Combo == self.MaxCombo or tick() - self.ClickId > self.ComboTime then
                                        self.Combo = 0
                                        self.LastButton = button
                                        self.LastItem = item
                                    end

                                    self.Combo = self.Combo + 1
                                    self.ClickId = tick()

                                    task.spawn(function()
                                        if self.InputDown then
                                            self.InputDown = false
                                        else
                                            self.InputDown = tick()

                                            local Connection = item.MouseButton1Up:Once(function(
                                            )
                                                self.InputDown = false
                                            end)

                                            while self.InputDown and not Explorer.Dragging do
                                                if (tick() - self.InputDown) >= 0.4 then
                                                    self.InputDown = false

                                                    self.OnRelease:Fire(item, self.Combo, 2, Vector2.new(X, Y))

                                                    break
                                                end

                                                task.wait()
                                            end
                                        end
                                    end)

                                    local release

                                    release = service.UserInputService.InputEnded:Connect(function(
                                        input
                                    )
                                        if input.UserInputType == Enum.UserInputType['MouseButton' .. button] then
                                            release.Disconnect(release)

                                            if Lib.CheckMouseInGui(item) and self.LastButton == button and self.LastItem == item then
                                                self.OnRelease:Fire(item, self.Combo, button)
                                            end
                                        end
                                    end)

                                    self.OnDown:Fire(item, self.Combo, button)
                                end
                            end
                            funcs.Add = function(self, item)
                                if table.find(self.Items, item) then
                                    return
                                end

                                local cons = {}

                                cons[1] = item.MouseButton1Down:Connect(function(
                                    X,
                                    Y
                                )
                                    self.Trigger(self, item, 1, X, Y)
                                end)
                                cons[2] = item.MouseButton2Down:Connect(function(
                                    X,
                                    Y
                                )
                                    self.Trigger(self, item, 2, X, Y)
                                end)
                                self.ItemCons[item] = cons
                                self.Items[#self.Items + 1] = item
                            end
                            funcs.Remove = function(self, item)
                                local ind = table.find(self.Items, item)

                                if not ind then
                                    return
                                end

                                for i, v in pairs(self.ItemCons[item])do
                                    v.Disconnect(v)
                                end

                                self.ItemCons[item] = nil

                                table.remove(self.Items, ind)
                            end

                            local mt = {__index = funcs}

                            local function new()
                                local obj = initObj(props, mt)

                                return obj
                            end

                            return {new = new}
                        end)()

                        return Lib
                    end

                    return {
                        InitDeps = initDeps,
                        InitAfterMain = initAfterMain,
                        Main = main,
                    }
                end,
                Console = function()
                    local Main, Lib, Apps, Settings
                    local Explorer, Properties, ScriptViewer, Notebook
                    local API, RMD, env, service, plr, create, createSimple

                    local function initDeps(data)
                        Main = data.Main
                        Lib = data.Lib
                        Apps = data.Apps
                        Settings = data.Settings
                        API = data.API
                        RMD = data.RMD
                        env = data.env
                        service = data.service
                        plr = data.plr
                        create = data.create
                        createSimple = data.createSimple
                    end
                    local function initAfterMain()
                        Explorer = Apps.Explorer
                        Properties = Apps.Properties
                        ScriptViewer = Apps.ScriptViewer
                        Notebook = Apps.Notebook
                    end
                    local function main()
                        local Console = {}
                        local window, ConsoleFrame
                        local OutputLimit = 500
                        local G2L = {}

                        window = Lib.Window.new()

                        window.SetTitle(window, 'Console')
                        window.Resize(window, 500, 400)

                        Console.Window = window
                        ConsoleFrame = Instance.new('ImageButton', window.GuiElems.Content)
                        ConsoleFrame.BorderSizePixel = 0
                        ConsoleFrame.AutoButtonColor = false
                        ConsoleFrame.BackgroundTransparency = 1
                        ConsoleFrame.BackgroundColor3 = Color3.fromRGB(47, 47, 47)
                        ConsoleFrame.Selectable = false
                        ConsoleFrame.Size = UDim2.new(1, 0, 1, 0)
                        ConsoleFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        ConsoleFrame.Name = 'Console'
                        ConsoleFrame.Position = UDim2.new(0, 0, 0, 0)
                        G2L['3'] = Lib.Frame.new().Gui
                        G2L['3'].Parent = ConsoleFrame
                        G2L['3'].BorderSizePixel = 0
                        G2L['3'].BackgroundColor3 = Color3.fromRGB(37, 37, 37)
                        G2L['3'].AnchorPoint = Vector2.new(0.5, 1)
                        G2L['3'].ClipsDescendants = true
                        G2L['3'].Size = UDim2.new(1, -8, 0, 22)
                        G2L['3'].Position = UDim2.new(0.5, 0, 1, -5)
                        G2L['3'].BorderColor3 = Color3.fromRGB(0, 0, 0)
                        G2L['3'].Name = 'CommandLine'
                        G2L['4'] = Instance.new('UIStroke', G2L['3'])
                        G2L['4'].Transparency = 0.65
                        G2L['4'].Thickness = 1.25
                        G2L['5'] = Instance.new('ScrollingFrame', G2L['3'])
                        G2L['5'].Active = true
                        G2L['5'].ScrollingDirection = Enum.ScrollingDirection.X
                        G2L['5'].BorderSizePixel = 0
                        G2L['5'].CanvasSize = UDim2.new(0, 0, 0, 0)
                        G2L['5'].ElasticBehavior = Enum.ElasticBehavior.Never
                        G2L['5'].TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
                        G2L['5'].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        G2L['5'].HorizontalScrollBarInset = Enum.ScrollBarInset.Always
                        G2L['5'].BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
                        G2L['5'].AutomaticCanvasSize = Enum.AutomaticSize.X
                        G2L['5'].Size = UDim2.new(1, 0, 1, 0)
                        G2L['5'].ScrollBarImageColor3 = Color3.fromRGB(57, 57, 57)
                        G2L['5'].BorderColor3 = Color3.fromRGB(0, 0, 0)
                        G2L['5'].ScrollBarThickness = 2
                        G2L['5'].BackgroundTransparency = 1
                        G2L['6'] = Instance.new('TextBox', G2L['5'])
                        G2L['6'].CursorPosition = -1
                        G2L['6'].TextXAlignment = Enum.TextXAlignment.Left
                        G2L['6'].PlaceholderColor3 = Color3.fromRGB(211, 211, 211)
                        G2L['6'].BorderSizePixel = 0
                        G2L['6'].TextSize = 13
                        G2L['6'].TextColor3 = Color3.fromRGB(211, 211, 211)
                        G2L['6'].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        G2L['6'].FontFace = Font.new('rbxasset://fonts/families/Inconsolata.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        G2L['6'].AutomaticSize = Enum.AutomaticSize.X
                        G2L['6'].ClearTextOnFocus = false
                        G2L['6'].PlaceholderText = 'Run a command'
                        G2L['6'].Size = UDim2.new(0, 246, 0, 22)
                        G2L['6'].BorderColor3 = Color3.fromRGB(0, 0, 0)
                        G2L['6'].Text = ''
                        G2L['6'].BackgroundTransparency = 1
                        G2L['7'] = Instance.new('UIPadding', G2L['6'])
                        G2L['7'].PaddingLeft = UDim.new(0, 7)
                        G2L['8'] = Instance.new('TextLabel', G2L['5'])
                        G2L['8'].Interactable = false
                        G2L['8'].ZIndex = 2
                        G2L['8'].BorderSizePixel = 0
                        G2L['8'].TextSize = 13
                        G2L['8'].TextXAlignment = Enum.TextXAlignment.Left
                        G2L['8'].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        G2L['8'].FontFace = Font.new('rbxasset://fonts/families/Inconsolata.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        G2L['8'].TextColor3 = Color3.fromRGB(255, 255, 255)
                        G2L['8'].BackgroundTransparency = 1
                        G2L['8'].RichText = true
                        G2L['8'].Size = UDim2.new(0, 246, 0, 22)
                        G2L['8'].BorderColor3 = Color3.fromRGB(0, 0, 0)
                        G2L['8'].Text = ''
                        G2L['8'].Selectable = true
                        G2L['8'].AutomaticSize = Enum.AutomaticSize.X
                        G2L['8'].Name = 'Highlight'
                        G2L['9'] = Instance.new('UIPadding', G2L['8'])
                        G2L['9'].PaddingLeft = UDim.new(0, 7)
                        G2L.backgroundOutput = Instance.new('Frame', ConsoleFrame)
                        G2L.backgroundOutput.BorderSizePixel = 0
                        G2L.backgroundOutput.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
                        G2L.backgroundOutput.Name = 'BackgroundOutput'
                        G2L.backgroundOutput.AnchorPoint = Vector2.new(0, 0)
                        G2L.backgroundOutput.Size = UDim2.new(1, -8, 1, -55)
                        G2L.backgroundOutput.Position = UDim2.new(0, 4, 0, 23)
                        G2L.backgroundOutput.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        G2L.backgroundOutput.ZIndex = 1

                        local scrollbar = Lib.ScrollBar.new()

                        scrollbar.Gui.Parent = ConsoleFrame
                        scrollbar.Gui.Size = UDim2.new(0, 16, 1, -55)
                        scrollbar.Gui.Position = UDim2.new(1, -20, 0, 23)
                        scrollbar.Gui.Up.ZIndex = 3
                        scrollbar.Gui.Down.ZIndex = 3
                        G2L.a = Instance.new('ScrollingFrame', ConsoleFrame)
                        G2L.a.Active = true
                        G2L.a.BorderSizePixel = 0
                        G2L.a.CanvasSize = UDim2.new(0, 0, 0, 0)
                        G2L.a.TopImage = ''
                        G2L.a.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
                        G2L.a.BackgroundTransparency = 1
                        G2L.a.Name = 'Output'
                        G2L.a.ScrollBarImageTransparency = 0
                        G2L.a.BottomImage = ''
                        G2L.a.AnchorPoint = Vector2.new(0, 0)
                        G2L.a.AutomaticCanvasSize = Enum.AutomaticSize.Y
                        G2L.a.Size = UDim2.new(1, -8, 1, -55)
                        G2L.a.Position = UDim2.new(0, 4, 0, 23)
                        G2L.a.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        G2L.a.ScrollBarImageColor3 = Color3.fromRGB(70, 70, 70)
                        G2L.a.ScrollBarThickness = 16
                        G2L.a.ZIndex = 1

                        G2L.a:GetPropertyChangedSignal('AbsoluteWindowSize'):Connect(function(
                        )
                            if G2L.a.AbsoluteCanvasSize ~= G2L.a.AbsoluteWindowSize then
                                scrollbar.Gui.Visible = true
                            else
                                scrollbar.Gui.Visible = false
                            end
                        end)

                        G2L.b = Instance.new('UIListLayout', G2L.a)
                        G2L.b.SortOrder = Enum.SortOrder.LayoutOrder
                        G2L.c = Instance.new('UIStroke', G2L.a)
                        G2L.c.Transparency = 0.7
                        G2L.c.Thickness = 1.25
                        G2L.c.Color = Color3.fromRGB(12, 12, 12)
                        G2L.d = Instance.new('NumberValue', G2L.a)
                        G2L.d.Name = 'OutputTextSize'
                        G2L.d.Value = 15
                        G2L.e = Instance.new('NumberValue', G2L.a)
                        G2L.e.Name = 'OutputLimit'
                        G2L.e.Value = OutputLimit
                        G2L.f = Instance.new('UIPadding', G2L.a)
                        G2L.f.PaddingTop = UDim.new(0, 2)
                        G2L['10'] = Instance.new('Frame', ConsoleFrame)
                        G2L['10'].BorderSizePixel = 0
                        G2L['10'].BackgroundColor3 = Color3.fromRGB(37, 37, 37)
                        G2L['10'].ClipsDescendants = true
                        G2L['10'].Size = UDim2.new(0, 37, 0, 15)
                        G2L['10'].Position = UDim2.new(0, 4, 0, 4)
                        G2L['10'].BorderColor3 = Color3.fromRGB(0, 0, 0)
                        G2L['10'].Name = 'TextSizeBox'
                        G2L['11'] = Instance.new('TextBox', G2L['10'])
                        G2L['11'].PlaceholderColor3 = Color3.fromRGB(108, 108, 108)
                        G2L['11'].BorderSizePixel = 0
                        G2L['11'].TextWrapped = true
                        G2L['11'].TextSize = 15
                        G2L['11'].TextColor3 = Color3.fromRGB(211, 211, 211)
                        G2L['11'].TextScaled = true
                        G2L['11'].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        G2L['11'].FontFace = Font.new('rbxasset://fonts/families/Inconsolata.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        G2L['11'].PlaceholderText = 'Size'
                        G2L['11'].Size = UDim2.new(1, 0, 1, 0)
                        G2L['11'].BorderColor3 = Color3.fromRGB(0, 0, 0)
                        G2L['11'].Text = ''
                        G2L['11'].BackgroundTransparency = 1
                        G2L['12'] = Instance.new('UIPadding', G2L['11'])
                        G2L['12'].PaddingTop = UDim.new(0, 2)
                        G2L['12'].PaddingRight = UDim.new(0, 5)
                        G2L['12'].PaddingLeft = UDim.new(0, 5)
                        G2L['12'].PaddingBottom = UDim.new(0, 2)
                        G2L['13'] = Instance.new('UIStroke', G2L['10'])
                        G2L['13'].Transparency = 0.65
                        G2L['13'].Thickness = 1.25
                        G2L['14'] = Instance.new('ImageButton', ConsoleFrame)
                        G2L['14'].BorderSizePixel = 0
                        G2L['14'].BackgroundColor3 = Color3.fromRGB(57, 57, 57)
                        G2L['14'].Size = UDim2.new(0, 37, 0, 15)
                        G2L['14'].BorderColor3 = Color3.fromRGB(0, 0, 0)
                        G2L['14'].Name = 'Clear'
                        G2L['14'].Position = UDim2.new(1, -42, 0, 4)
                        G2L['15'] = Instance.new('TextLabel', G2L['14'])
                        G2L['15'].TextWrapped = true
                        G2L['15'].Interactable = false
                        G2L['15'].BorderSizePixel = 0
                        G2L['15'].TextSize = 20
                        G2L['15'].TextScaled = true
                        G2L['15'].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        G2L['15'].FontFace = Font.new('rbxasset://fonts/families/SourceSansPro.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        G2L['15'].TextColor3 = Color3.fromRGB(255, 255, 255)
                        G2L['15'].BackgroundTransparency = 1
                        G2L['15'].Size = UDim2.new(1, 0, 1, 0)
                        G2L['15'].BorderColor3 = Color3.fromRGB(0, 0, 0)
                        G2L['15'].Text = 'Clear'
                        G2L['16'] = Instance.new('UIPadding', G2L['14'])
                        G2L['16'].PaddingTop = UDim.new(0, 1)
                        G2L['16'].PaddingBottom = UDim.new(0, 1)
                        G2L['17'] = Instance.new('TextBox', ConsoleFrame)
                        G2L['17'].Visible = false
                        G2L['17'].Active = false
                        G2L['17'].Name = 'OutputTemplate'
                        G2L['17'].TextXAlignment = Enum.TextXAlignment.Left
                        G2L['17'].BorderSizePixel = 0
                        G2L['17'].TextEditable = false
                        G2L['17'].TextWrapped = true
                        G2L['17'].TextSize = 15
                        G2L['17'].TextColor3 = Color3.fromRGB(171, 171, 171)
                        G2L['17'].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        G2L['17'].RichText = true
                        G2L['17'].FontFace = Font.new('rbxasset://fonts/families/SourceSansPro.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        G2L['17'].AutomaticSize = Enum.AutomaticSize.Y
                        G2L['17'].Selectable = false
                        G2L['17'].ClearTextOnFocus = false
                        G2L['17'].Size = UDim2.new(1, 0, 0, 1)
                        G2L['17'].Position = UDim2.new(0, 20, 0, 0)
                        G2L['17'].BorderColor3 = Color3.fromRGB(0, 0, 0)
                        G2L['17'].Text = '(timestamp) <font color="rgb(255, 255, 255)">Output</font>'
                        G2L['17'].BackgroundTransparency = 1
                        G2L['18'] = Instance.new('UIPadding', G2L['17'])
                        G2L['18'].PaddingRight = UDim.new(0, 6)
                        G2L['18'].PaddingLeft = UDim.new(0, 6)
                        G2L['19'] = Instance.new('ImageButton', ConsoleFrame)
                        G2L['19'].BorderSizePixel = 0
                        G2L['19'].BackgroundColor3 = Color3.fromRGB(57, 57, 57)
                        G2L['19'].Size = UDim2.new(0, 60, 0, 15)
                        G2L['19'].BorderColor3 = Color3.fromRGB(0, 0, 0)
                        G2L['19'].Name = 'CtrlScroll'
                        G2L['19'].Position = UDim2.new(0, 46, 0, 4)
                        G2L['1a'] = Instance.new('TextLabel', G2L['19'])
                        G2L['1a'].TextWrapped = true
                        G2L['1a'].Interactable = false
                        G2L['1a'].BorderSizePixel = 0
                        G2L['1a'].TextSize = 20
                        G2L['1a'].TextScaled = true
                        G2L['1a'].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        G2L['1a'].FontFace = Font.new('rbxasset://fonts/families/SourceSansPro.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        G2L['1a'].TextColor3 = Color3.fromRGB(255, 255, 255)
                        G2L['1a'].BackgroundTransparency = 1
                        G2L['1a'].Size = UDim2.new(1, 0, 1, 0)
                        G2L['1a'].BorderColor3 = Color3.fromRGB(0, 0, 0)
                        G2L['1a'].Text = 'Ctrl Scroll'
                        G2L['1b'] = Instance.new('UIPadding', G2L['19'])
                        G2L['1b'].PaddingTop = UDim.new(0, 1)
                        G2L['1b'].PaddingBottom = UDim.new(0, 1)
                        G2L['20'] = Instance.new('ImageButton', ConsoleFrame)
                        G2L['20'].BorderSizePixel = 0
                        G2L['20'].BackgroundColor3 = Color3.fromRGB(57, 57, 57)
                        G2L['20'].Size = UDim2.new(0, 60, 0, 15)
                        G2L['20'].BorderColor3 = Color3.fromRGB(0, 0, 0)
                        G2L['20'].Name = 'AutoScroll'
                        G2L['20'].Position = UDim2.new(0, 110, 0, 4)
                        G2L['1e'] = Instance.new('TextLabel', G2L['20'])
                        G2L['1e'].TextWrapped = true
                        G2L['1e'].Interactable = false
                        G2L['1e'].BorderSizePixel = 0
                        G2L['1e'].TextSize = 20
                        G2L['1e'].TextScaled = true
                        G2L['1e'].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        G2L['1e'].FontFace = Font.new('rbxasset://fonts/families/SourceSansPro.json', Enum.FontWeight.Regular, Enum.FontStyle.Normal)
                        G2L['1e'].TextColor3 = Color3.fromRGB(255, 255, 255)
                        G2L['1e'].BackgroundTransparency = 1
                        G2L['1e'].Size = UDim2.new(1, 0, 1, 0)
                        G2L['1e'].BorderColor3 = Color3.fromRGB(0, 0, 0)
                        G2L['1e'].Text = 'Auto Scroll'
                        G2L['1f'] = Instance.new('UIPadding', G2L['20'])
                        G2L['1f'].PaddingTop = UDim.new(0, 1)
                        G2L['1f'].PaddingBottom = UDim.new(0, 1)
                        G2L['1c'] = Instance.new('LocalScript', G2L['1'])
                        G2L['1c'].Name = 'ConsoleHandler'
                        G2L['1d'] = Instance.new('ModuleScript', G2L['1c'])
                        G2L['1d'].Name = 'SyntaxHighlighter'

                        local G2L_REQUIRE = require
                        local G2L_MODULES = {}

                        local function require(Module)
                            local ModuleState = G2L_MODULES[Module]

                            if ModuleState then
                                if not ModuleState.Required then
                                    ModuleState.Required = true
                                    ModuleState.Value = ModuleState.Closure()
                                end

                                return ModuleState.Value
                            end

                            return G2L_REQUIRE(Module)
                        end

                        G2L_MODULES[G2L['1d'] ] = {
                            Closure = function()
                                local script = G2L['1d']
                                local highlighter = {}
                                local keywords = {
                                    lua = {
                                        'and',
                                        'break',
                                        'or',
                                        'else',
                                        'elseif',
                                        'if',
                                        'then',
                                        'until',
                                        'repeat',
                                        'while',
                                        'do',
                                        'for',
                                        'in',
                                        'end',
                                        'local',
                                        'return',
                                        'function',
                                        'export',
                                    },
                                    rbx = {
                                        'game',
                                        'workspace',
                                        'script',
                                        'math',
                                        'string',
                                        'table',
                                        'task',
                                        'wait',
                                        'select',
                                        'next',
                                        'Enum',
                                        'error',
                                        'warn',
                                        'tick',
                                        'assert',
                                        'shared',
                                        'loadstring',
                                        'tonumber',
                                        'tostring',
                                        'type',
                                        'typeof',
                                        'unpack',
                                        'print',
                                        'Instance',
                                        'CFrame',
                                        'Vector3',
                                        'Vector2',
                                        'Color3',
                                        'UDim',
                                        'UDim2',
                                        'Ray',
                                        'BrickColor',
                                        'OverlapParams',
                                        'RaycastParams',
                                        'Axes',
                                        'Random',
                                        'Region3',
                                        'Rect',
                                        'TweenInfo',
                                        'collectgarbage',
                                        'not',
                                        'utf8',
                                        'pcall',
                                        'xpcall',
                                        '_G',
                                        'setmetatable',
                                        'getmetatable',
                                        'os',
                                        'pairs',
                                        'ipairs',
                                    },
                                    exploit = {
                                        'hookmetamethod',
                                        'hookfunction',
                                        'getgc',
                                        'filtergc',
                                        'Drawing',
                                        'getgenv',
                                        'getsenv',
                                        'getrenv',
                                        'getfenv',
                                        'setfenv',
                                        'decompile',
                                        'saveinstance',
                                        'getrawmetatable',
                                        'setrawmetatable',
                                        'checkcaller',
                                        'cloneref',
                                        'clonefunction',
                                        'iscclosure',
                                        'islclosure',
                                        'isexecutorclosure',
                                        'newcclosure',
                                        'getfunctionhash',
                                        'crypt',
                                        'writefile',
                                        'appendfile',
                                        'loadfile',
                                        'readfile',
                                        'listfiles',
                                        'makefolder',
                                        'isfolder',
                                        'isfile',
                                        'delfile',
                                        'delfolder',
                                        'getcustomasset',
                                        'fireclickdetector',
                                        'firetouchinterest',
                                        'fireproximityprompt',
                                    },
                                    operators = {
                                        '#',
                                        '+',
                                        '-',
                                        '*',
                                        '%',
                                        '/',
                                        '^',
                                        '=',
                                        '~',
                                        '=',
                                        '<',
                                        '>',
                                        ',',
                                        '.',
                                        '(',
                                        ')',
                                        '{',
                                        '}',
                                        '[',
                                        ']',
                                        ';',
                                        ':',
                                    },
                                }
                                local colors = {
                                    numbers = Color3.fromRGB(255, 198, 0),
                                    boolean = Color3.fromRGB(255, 198, 0),
                                    operator = Color3.fromRGB(204, 204, 204),
                                    lua = Color3.fromRGB(132, 214, 247),
                                    exploit = Color3.fromRGB(171, 84, 247),
                                    rbx = Color3.fromRGB(248, 109, 124),
                                    str = Color3.fromRGB(173, 241, 132),
                                    comment = Color3.fromRGB(102, 102, 102),
                                    null = Color3.fromRGB(255, 198, 0),
                                    call = Color3.fromRGB(253, 251, 172),
                                    self_call = Color3.fromRGB(253, 251, 172),
                                    local_color = Color3.fromRGB(248, 109, 115),
                                    function_color = Color3.fromRGB(248, 109, 115),
                                    self_color = Color3.fromRGB(248, 109, 115),
                                    local_property = Color3.fromRGB(97, 161, 241),
                                }

                                local function createKeywordSet(keywords)
                                    local keywordSet = {}

                                    for _, keyword in ipairs(keywords)do
                                        keywordSet[keyword] = true
                                    end

                                    return keywordSet
                                end

                                local luaSet = createKeywordSet(keywords.lua)
                                local exploitSet = createKeywordSet(keywords.exploit)
                                local rbxSet = createKeywordSet(keywords.rbx)
                                local operatorsSet = createKeywordSet(keywords.operators)

                                local function getHighlight(tokens, index)
                                    local token = tokens[index]

                                    if colors[token .. '_color'] then
                                        return colors[token .. '_color']
                                    end
                                    if tonumber(token) then
                                        return colors.numbers
                                    elseif token == 'nil' then
                                        return colors.null
                                    elseif token.sub(token, 1, 2) == '--' then
                                        return colors.comment
                                    elseif operatorsSet[token] then
                                        return colors.operator
                                    elseif luaSet[token] then
                                        return colors.rbx
                                    elseif rbxSet[token] then
                                        return colors.lua
                                    elseif exploitSet[token] then
                                        return colors.exploit
                                    elseif token.sub(token, 1, 1) == '"' or token.sub(token, 1, 1) == "'" then
                                        return colors.str
                                    elseif token == 'true' or token == 'false' then
                                        return colors.boolean
                                    end
                                    if tokens[index + 1] == '(' then
                                        if tokens[index - 1] == ':' then
                                            return colors.self_call
                                        end

                                        return colors.call
                                    end
                                    if tokens[index - 1] == '.' then
                                        if tokens[index - 2] == 'Enum' then
                                            return colors.rbx
                                        end

                                        return colors.local_property
                                    end
                                end

                                highlighter.run = function(source)
                                    local tokens = {}
                                    local currentToken = ''
                                    local inString = false
                                    local inComment = false
                                    local commentPersist = false

                                    for i = 1, #source do
                                        local character = source.sub(source, i, i)

                                        if inComment then
                                            if character == '\n' and not commentPersist then
                                                table.insert(tokens, currentToken)
                                                table.insert(tokens, character)

                                                currentToken = ''
                                                inComment = false
                                            elseif source.sub(source, i - 1, i) == ']]' and commentPersist then
                                                currentToken = currentToken .. ']'

                                                table.insert(tokens, currentToken)

                                                currentToken = ''
                                                inComment = false
                                                commentPersist = false
                                            else
                                                currentToken = currentToken .. character
                                            end
                                        elseif inString then
                                            if character == inString and source.sub(source, i - 1, i - 1) ~= '\\' or character == '\n' then
                                                currentToken = currentToken .. character
                                                inString = false
                                            else
                                                currentToken = currentToken .. character
                                            end
                                        else
                                            if source.sub(source, i, i + 1) == '--' then
                                                table.insert(tokens, currentToken)

                                                currentToken = '-'
                                                inComment = true
                                                commentPersist = source.sub(source, i + 2, i + 3) == '[['
                                            elseif character == '"' or character == "'" then
                                                table.insert(tokens, currentToken)

                                                currentToken = character
                                                inString = character
                                            elseif operatorsSet[character] then
                                                table.insert(tokens, currentToken)
                                                table.insert(tokens, character)

                                                currentToken = ''
                                            elseif character.match(character, '[%w_]') then
                                                currentToken = currentToken .. character
                                            else
                                                table.insert(tokens, currentToken)
                                                table.insert(tokens, character)

                                                currentToken = ''
                                            end
                                        end
                                    end

                                    table.insert(tokens, currentToken)

                                    local highlighted = {}

                                    for i, token in ipairs(tokens)do
                                        local highlight = getHighlight(tokens, i)

                                        if highlight then
                                            local syntax = string.format('<font color = "#%s">%s</font>', highlight.ToHex(highlight), token.gsub(token, '<', '&lt;'):gsub('>', '&gt;'))

                                            table.insert(highlighted, syntax)
                                        else
                                            table.insert(highlighted, token)
                                        end
                                    end

                                    return table.concat(highlighted)
                                end

                                return highlighter
                            end,
                        }
                        Console.Init = function()
                            local CtrlScroll = false
                            local AutoScroll = false
                            local LogService = game.GetService(game, 'LogService')
                            local Players = game.GetService(game, 'Players')
                            local LocalPlayer = Players.LocalPlayer
                            local Mouse = LocalPlayer.GetMouse(LocalPlayer)
                            local UserInputService = game.GetService(game, 'UserInputService')
                            local RunService = game.GetService(game, 'RunService')
                            local Console = ConsoleFrame
                            local SyntaxHighlightingModule = require(G2L['1c'].SyntaxHighlighter)
                            local OutputTextSize = Console.Output.OutputTextSize

                            local function Tween(obj, info, prop)
                                local tween = game.GetService(game, 'TweenService'):Create(obj, info, prop)

                                tween.Play(tween)

                                return tween
                            end

                            if CtrlScroll == true then
                                Console.CtrlScroll.BackgroundColor3 = Color3.fromRGB(11, 90, 175)
                            elseif CtrlScroll == false then
                                Console.CtrlScroll.BackgroundColor3 = Color3.fromRGB(56, 56, 56)
                            end

                            Console.CtrlScroll.MouseButton1Click:Connect(function(
                            )
                                CtrlScroll = not CtrlScroll

                                if CtrlScroll == true then
                                    Console.CtrlScroll.BackgroundColor3 = Color3.fromRGB(11, 90, 175)
                                elseif CtrlScroll == false then
                                    Console.CtrlScroll.BackgroundColor3 = Color3.fromRGB(56, 56, 56)
                                end
                            end)

                            local IsHoldingCTRL = false

                            UserInputService.InputBegan:Connect(function(
                                input,
                                gameproc
                            )
                                if not gameproc then
                                    if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl then
                                        IsHoldingCTRL = true
                                    end
                                end
                            end)
                            UserInputService.InputEnded:Connect(function(
                                input,
                                gameproc
                            )
                                if not gameproc then
                                    if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl then
                                        IsHoldingCTRL = false
                                    end
                                end
                            end)

                            if AutoScroll == true then
                                Console.AutoScroll.BackgroundColor3 = Color3.fromRGB(11, 90, 175)
                            elseif AutoScroll == false then
                                Console.AutoScroll.BackgroundColor3 = Color3.fromRGB(56, 56, 56)
                            end

                            Console.AutoScroll.MouseButton1Click:Connect(function(
                            )
                                AutoScroll = not AutoScroll

                                if AutoScroll == true then
                                    Console.AutoScroll.BackgroundColor3 = Color3.fromRGB(11, 90, 175)
                                    Console.Output.CanvasPosition = Vector2.new(0, 9e9)
                                elseif AutoScroll == false then
                                    Console.AutoScroll.BackgroundColor3 = Color3.fromRGB(56, 56, 56)
                                end
                            end)

                            local displayedOutput = {}
                            local OutputLimit = Console.Output.OutputLimit

                            Console.TextSizeBox.TextBox.Text = tostring(OutputTextSize.Value)

                            Console.TextSizeBox.TextBox:GetPropertyChangedSignal('Text'):Connect(function(
                            )
                                local tonum = tonumber(Console.TextSizeBox.TextBox.Text)

                                if tonum then
                                    OutputTextSize.Value = tonum
                                end
                            end)
                            OutputTextSize.GetPropertyChangedSignal(OutputTextSize, 'Value'):Connect(function(
                            )
                                Console.TextSizeBox.TextBox.Text = tostring(OutputTextSize.Value)
                            end)

                            local scrollConsoleInput

                            Console.Output.MouseEnter:Connect(function()
                                scrollConsoleInput = UserInputService.InputChanged:Connect(function(
                                    input
                                )
                                    if CtrlScroll and input.UserInputType == Enum.UserInputType.MouseWheel and IsHoldingCTRL == true then
                                        Console.Output.ScrollingEnabled = false

                                        local newTextSize = OutputTextSize.Value + input.Position.Z

                                        if newTextSize >= 1 then
                                            OutputTextSize.Value = newTextSize
                                        end
                                    else
                                        Console.Output.ScrollingEnabled = true
                                    end
                                end)
                            end)
                            Console.Output.MouseLeave:Connect(function()
                                if scrollConsoleInput then
                                    scrollConsoleInput.Disconnect(scrollConsoleInput)

                                    scrollConsoleInput = nil
                                end
                            end)
                            Console.Clear.MouseButton1Click:Connect(function()
                                for _, log in pairs(Console.Output:GetChildren())do
                                    if log.IsA(log, 'TextBox') then
                                        log.Destroy(log)
                                    end
                                end
                            end)

                            local focussedOutput

                            LogService.MessageOut:Connect(function(
                                msg,
                                msgtype
                            )
                                local formattedText = ''
                                local unformattedText = ''
                                local newOutputText = Console.OutputTemplate:Clone()

                                table.insert(displayedOutput, newOutputText)

                                if #displayedOutput > OutputLimit.Value then
                                    local oldest = table.remove(displayedOutput, 1)

                                    if oldest and typeof(oldest) == 'Instance' then
                                        oldest.Destroy(oldest)
                                    end
                                end

                                unformattedText = os.date('%H:%M:%S') .. '   ' .. msg

                                if msgtype == Enum.MessageType.MessageOutput then
                                    formattedText = os.date('%H:%M:%S') .. '   <font color="rgb(204, 204, 204)">' .. msg .. '</font>'
                                    newOutputText.Text = formattedText
                                elseif msgtype == Enum.MessageType.MessageWarning then
                                    formattedText = os.date('%H:%M:%S') .. '   <b><font color="rgb(255, 142, 60)">' .. msg .. '</font></b>'
                                    newOutputText.Text = formattedText
                                elseif msgtype == Enum.MessageType.MessageError then
                                    formattedText = os.date('%H:%M:%S') .. '   <b><font color="rgb(255, 68, 68)">' .. msg .. '</font></b>'
                                    newOutputText.Text = formattedText
                                elseif msgtype == Enum.MessageType.MessageInfo then
                                    formattedText = os.date('%H:%M:%S') .. '   <font color="rgb(128, 215, 255)">' .. msg .. '</font>'
                                    newOutputText.Text = formattedText
                                end

                                newOutputText.TextSize = OutputTextSize.Value

                                OutputTextSize.GetPropertyChangedSignal(OutputTextSize, 'Value'):Connect(function(
                                )
                                    newOutputText.TextSize = OutputTextSize.Value
                                end)
                                newOutputText.Focused:Connect(function()
                                    focussedOutput = newOutputText
                                    newOutputText.Text = unformattedText
                                end)
                                newOutputText.FocusLost:Connect(function()
                                    focussedOutput = nil
                                    newOutputText.Text = formattedText
                                end)

                                newOutputText.Parent = Console.Output
                                newOutputText.Visible = true

                                if AutoScroll then
                                    Console.Output.CanvasPosition = Vector2.new(0, 9e9)
                                end
                            end)
                            Console.Output.MouseLeave:Connect(function()
                                if focussedOutput then
                                    focussedOutput.ReleaseFocus(focussedOutput)
                                end
                            end)
                            Console.CommandLine.ScrollingFrame.TextBox:GetPropertyChangedSignal('Text'):Connect(function(
                            )
                                local oneliner = string.gsub(Console.CommandLine.ScrollingFrame.TextBox.Text, '\n', '    ')

                                Console.CommandLine.ScrollingFrame.TextBox.Text = oneliner
                                Console.CommandLine.ScrollingFrame.Highlight.Text = SyntaxHighlightingModule.run(Console.CommandLine.ScrollingFrame.TextBox.Text)
                            end)
                            Console.CommandLine.ScrollingFrame.TextBox.FocusLost:Connect(function(
                                enterPressed
                            )
                                if enterPressed and Console.CommandLine.ScrollingFrame.TextBox.Text ~= '' then
                                    print('> ' .. Console.CommandLine.ScrollingFrame.TextBox.Text)
                                    loadstring(Console.CommandLine.ScrollingFrame.TextBox.Text)()
                                end
                            end)
                        end

                        return Console
                    end

                    return {
                        InitDeps = initDeps,
                        InitAfterMain = initAfterMain,
                        Main = main,
                    }
                end,
                SaveInstance = function()
                    local Main, Lib, Apps, Settings
                    local Explorer, Properties, ScriptViewer, Notebook
                    local API, RMD, env, service, plr, create, createSimple

                    local function initDeps(data)
                        Main = data.Main
                        Lib = data.Lib
                        Apps = data.Apps
                        Settings = data.Settings
                        API = data.API
                        RMD = data.RMD
                        env = data.env
                        service = data.service
                        plr = data.plr
                        create = data.create
                        createSimple = data.createSimple
                    end
                    local function initAfterMain()
                        Explorer = Apps.Explorer
                        Properties = Apps.Properties
                        ScriptViewer = Apps.ScriptViewer
                        Notebook = Apps.Notebook
                    end
                    local function main()
                        local SaveInstance = {}
                        local window, ListFrame
                        local fileName = 'Place_' .. game.PlaceId .. '_' .. service.MarketplaceService:GetProductInfo(game.PlaceId).Name .. '_{TIMESTAMP}'
                        local Saving = false
                        local SaveInstanceArgs = {
                            Decompile = true,
                            DecompileTimeout = 10,
                            DecompileIgnore = {
                                'Chat',
                                'CoreGui',
                                'CorePackages',
                            },
                            NilInstances = false,
                            RemovePlayerCharacters = true,
                            SavePlayers = false,
                            MaxThreads = 3,
                            ShowStatus = true,
                            IgnoreDefaultProps = true,
                            IsolateStarterPlayer = true,
                        }

                        local function AddCheckbox(title, default)
                            local frame = Lib.Frame.new()

                            frame.Gui.Parent = ListFrame
                            frame.Gui.Transparency = 1
                            frame.Gui.Size = UDim2.new(1, 0, 0, 20)

                            local listlayout = Instance.new('UIListLayout')

                            listlayout.Parent = frame.Gui
                            listlayout.FillDirection = Enum.FillDirection.Horizontal
                            listlayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
                            listlayout.VerticalAlignment = Enum.VerticalAlignment.Center
                            listlayout.Padding = UDim.new(0, 10)

                            local checkbox = Lib.Checkbox.new()

                            checkbox.Gui.Parent = frame.Gui
                            checkbox.Gui.Size = UDim2.new(0, 15, 0, 15)

                            local label = Lib.Label.new()

                            label.Gui.Parent = frame.Gui
                            label.Gui.Size = UDim2.new(1, 0, 1, -15)
                            label.Gui.Text = title
                            label.TextTruncate = Enum.TextTruncate.AtEnd

                            checkbox.SetState(checkbox, default)

                            return checkbox
                        end
                        local function AddTextbox(title, default, sizeX)
                            default = tostring(default)

                            local frame = Lib.Frame.new()

                            frame.Gui.Parent = ListFrame
                            frame.Gui.Transparency = 1
                            frame.Gui.Size = UDim2.new(1, 0, 0, 20)

                            local listlayout = Instance.new('UIListLayout')

                            listlayout.Parent = frame.Gui
                            listlayout.FillDirection = Enum.FillDirection.Horizontal
                            listlayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
                            listlayout.VerticalAlignment = Enum.VerticalAlignment.Center
                            listlayout.Padding = UDim.new(0, 10)

                            local textbox = Lib.ViewportTextBox.new()

                            textbox.Gui.Parent = frame.Gui

                            if sizeX and type(sizeX) == 'number' then
                                textbox.Gui.Size = UDim2.new(0, sizeX, 0, 15)
                            else
                                textbox.Gui.Size = UDim2.new(0, 45, 0, 15)
                            end

                            textbox.Gui.AutomaticSize = Enum.AutomaticSize.X
                            textbox.TextBox.AutomaticSize = Enum.AutomaticSize.X

                            local label = Lib.Label.new()

                            label.Gui.Parent = frame.Gui
                            label.Gui.Size = UDim2.new(1, 0, 1, -15)
                            label.Gui.Text = title
                            label.TextTruncate = Enum.TextTruncate.AtEnd

                            textbox.SetText(textbox, default)

                            return textbox
                        end
                        local function AddDropdown(
                            title,
                            items,
                            default,
                            sizeX
                        )
                            local frame = Lib.Frame.new()

                            frame.Gui.Parent = ListFrame
                            frame.Gui.Transparency = 1
                            frame.Gui.Size = UDim2.new(1, 0, 0, 20)

                            local listlayout = Instance.new('UIListLayout')

                            listlayout.Parent = frame.Gui
                            listlayout.FillDirection = Enum.FillDirection.Horizontal
                            listlayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
                            listlayout.VerticalAlignment = Enum.VerticalAlignment.Center
                            listlayout.Padding = UDim.new(0, 10)

                            local dropdown = Lib.ViewportTextBox.new()

                            dropdown.Gui.Parent = frame.Gui

                            if sizeX and type(sizeX) == 'number' then
                                dropdown.Gui.Size = UDim2.new(0, sizeX, 0, 15)
                            else
                                dropdown.Gui.Size = UDim2.new(0, 65, 0, 15)
                            end

                            local label = Lib.Label.new()

                            label.Gui.Parent = frame.Gui
                            label.Gui.Size = UDim2.new(1, 0, 1, -15)
                            label.Gui.Text = title
                            label.TextTruncate = Enum.TextTruncate.AtEnd

                            dropdown.SetOptions(dropdown, items)
                            dropdown.SetSelected(dropdown, default)

                            return dropdown
                        end

                        SaveInstance.Init = function()
                            window = Lib.Window.new()

                            window.SetTitle(window, 'Save Instance')
                            window.Resize(window, 350, 350)

                            SaveInstance.Window = window
                            ListFrame = Instance.new('ScrollingFrame')
                            ListFrame.Parent = window.GuiElems.Content
                            ListFrame.Size = UDim2.new(1, 0, 1, -40)
                            ListFrame.Position = UDim2.new(0, 0, 0, 0)
                            ListFrame.Transparency = 1
                            ListFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
                            ListFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
                            ListFrame.ScrollBarThickness = 16
                            ListFrame.BottomImage = ''
                            ListFrame.TopImage = ''
                            ListFrame.ScrollBarImageColor3 = Color3.fromRGB(70, 70, 70)
                            ListFrame.ScrollBarImageTransparency = 0
                            ListFrame.ZIndex = 2
                            ListFrame.BorderSizePixel = 0

                            local scrollbar = Lib.ScrollBar.new()

                            scrollbar.Gui.Parent = window.GuiElems.Content
                            scrollbar.Gui.Size = UDim2.new(1, 0, 1, -40)
                            scrollbar.Gui.Up.ZIndex = 3
                            scrollbar.Gui.Down.ZIndex = 3

                            ListFrame.GetPropertyChangedSignal(ListFrame, 'AbsoluteWindowSize'):Connect(function(
                            )
                                if ListFrame.AbsoluteCanvasSize ~= ListFrame.AbsoluteWindowSize then
                                    scrollbar.Gui.Visible = true
                                else
                                    scrollbar.Gui.Visible = false
                                end
                            end)

                            local ListLayout = Instance.new('UIListLayout')

                            ListLayout.Parent = ListFrame
                            ListLayout.Padding = UDim.new(0, 5)

                            local Padding = Instance.new('UIPadding')

                            Padding.Parent = ListFrame
                            Padding.PaddingBottom = UDim.new(0, 5)
                            Padding.PaddingLeft = UDim.new(0, 10)
                            Padding.PaddingRight = UDim.new(0, 10)
                            Padding.PaddingTop = UDim.new(0, 5)

                            local Decompile = AddCheckbox('Decompile Scripts (LocalScript and ModuleScript)', SaveInstanceArgs.Decompile)

                            Decompile.OnInput:Connect(function()
                                SaveInstanceArgs.Decompile = Decompile.Toggled
                            end)

                            local decompileTimeout = AddTextbox('Decompile Timeout (s)', SaveInstanceArgs.DecompileTimeout, 15)

                            decompileTimeout.TextBox.FocusLost:Connect(function()
                                SaveInstanceArgs.DecompileTimeout = tonumber(decompileTimeout.TextBox.Text)
                            end)

                            local decompileThread = AddTextbox('Decompiler Max Threads', '3', 15)

                            decompileThread.TextBox.FocusLost:Connect(function()
                                SaveInstanceArgs.MaxThreads = tonumber(decompileThread.TextBox.Text)
                            end)

                            local decompileIgnore = AddTextbox('Decompile Ignore', table.concat(SaveInstanceArgs.DecompileIgnore, ','), 50)

                            decompileIgnore.TextBox.FocusLost:Connect(function()
                                local inputText = decompileIgnore.TextBox.Text
                                local rawList = string.split(inputText, ', ') or string.split(inputText, ',')
                                local finalList = {}

                                for _, text in ipairs(rawList)do
                                    local split = string.split(text, ',') or string.split(text, ', ')

                                    for _, textFound in ipairs(split)do
                                        table.insert(finalList, textFound)
                                    end
                                end

                                SaveInstanceArgs.DecompileIgnore = finalList
                            end)

                            local NilObj = AddCheckbox('Save Nil Instances', SaveInstanceArgs.NilInstances)

                            NilObj.OnInput:Connect(function()
                                SaveInstanceArgs.NilInstances = NilObj.Toggled
                            end)

                            local RemovePlayerChar = AddCheckbox('Remove Player Characters', SaveInstanceArgs.RemovePlayerCharacters)

                            RemovePlayerChar.OnInput:Connect(function()
                                SaveInstanceArgs.RemovePlayerCharacters = RemovePlayerChar.Toggled
                            end)

                            local SavePlayerObj = AddCheckbox('Save Player Instance', SaveInstanceArgs.SavePlayers)

                            SavePlayerObj.OnInput:Connect(function()
                                SaveInstanceArgs.SavePlayers = SavePlayerObj.Toggled
                            end)

                            local IsolateStarterPlr = AddCheckbox('Isolate StarterPlayer', SaveInstanceArgs.IsolateStarterPlayer)

                            IsolateStarterPlr.OnInput:Connect(function()
                                SaveInstanceArgs.IsolateStarterPlayer = IsolateStarterPlr.Toggled
                            end)

                            local IgnoreDefaultProps = AddCheckbox('Ignore Default Properties', SaveInstanceArgs.IgnoreDefaultProps)

                            IgnoreDefaultProps.OnInput:Connect(function()
                                SaveInstanceArgs.IgnoreDefaultProps = IgnoreDefaultProps.Toggled
                            end)

                            local ShowStat = AddCheckbox('Show Status', SaveInstanceArgs.ShowStatus)

                            ShowStat.OnInput:Connect(function()
                                SaveInstanceArgs.ShowStatus = ShowStat.Toggled
                            end)

                            local FilenameTextBox = Lib.ViewportTextBox.new()

                            FilenameTextBox.Gui.Parent = window.GuiElems.Content
                            FilenameTextBox.Size = UDim2.new(1, 0, 0, 20)
                            FilenameTextBox.Position = UDim2.new(0, 0, 1, -40)

                            local textpadding = Instance.new('UIPadding')

                            textpadding.Parent = FilenameTextBox.Gui
                            textpadding.PaddingLeft = UDim.new(0, 5)
                            textpadding.PaddingRight = UDim.new(0, 5)

                            local BackgroundButton = Lib.Frame.new()

                            BackgroundButton.Gui.Parent = window.GuiElems.Content
                            BackgroundButton.Size = UDim2.new(1, 0, 0, 20)
                            BackgroundButton.Position = UDim2.new(0, 0, 1, -20)

                            local LabelButton = Lib.Label.new()

                            LabelButton.Gui.Parent = window.GuiElems.Content
                            LabelButton.Size = UDim2.new(1, 0, 0, 20)
                            LabelButton.Position = UDim2.new(0, 0, 1, -20)
                            LabelButton.Gui.Text = 'Save'
                            LabelButton.Gui.TextXAlignment = Enum.TextXAlignment.Center

                            local Button = Instance.new('TextButton')

                            Button.Parent = BackgroundButton.Gui
                            Button.Size = UDim2.new(1, 0, 1, 0)
                            Button.Position = UDim2.new(0, 0, 0, 0)
                            Button.Transparency = 1
                            FilenameTextBox.TextBox.Text = fileName

                            Button.MouseButton1Click:Connect(function()
                                local fileName = FilenameTextBox.TextBox.Text:gsub('{TIMESTAMP}', os.date('%d-%m-%Y_%H-%M-%S'))

                                window.SetTitle(window, 'Save Instance - Saving')

                                local s, result = pcall(env.saveinstance, game, env.parsefile(fileName), SaveInstanceArgs)

                                if s then
                                    window.SetTitle(window, 'Save Instance - Saved')
                                else
                                    window.SetTitle(window, 'Save Instance - Error')
                                    task.spawn(error('Failed to save the game: ' .. result))
                                end

                                task.wait(5)
                                window.SetTitle(window, 'Save Instance')
                            end)
                        end

                        return SaveInstance
                    end

                    return {
                        InitDeps = initDeps,
                        InitAfterMain = initAfterMain,
                        Main = main,
                    }
                end,
            }
            local Main, Explorer, Properties, ScriptViewer, DefaultSettings, Notebook, Serializer, Lib, Console, SaveInstance
            local API, RM

            DefaultSettings = (function()
                local rgb = Color3.fromRGB

                return {
                    Explorer = {
                        _Recurse = true,
                        Sorting = true,
                        TeleportToOffset = Vector3.new(0, 0, 0),
                        ClickToRename = true,
                        AutoUpdateSearch = true,
                        AutoUpdateMode = 0,
                        PartSelectionBox = true,
                        GuiSelectionBox = true,
                        CopyPathUseGetChildren = true,
                    },
                    Properties = {
                        _Recurse = true,
                        MaxConflictCheck = 50,
                        ShowDeprecated = false,
                        ShowHidden = false,
                        ClearOnFocus = false,
                        LoadstringInput = true,
                        NumberRounding = 3,
                        ShowAttributes = false,
                        MaxAttributes = 50,
                        ScaleType = 1,
                    },
                    Theme = {
                        _Recurse = true,
                        Main1 = rgb(52, 52, 52),
                        Main2 = rgb(45, 45, 45),
                        Outline1 = rgb(33, 33, 33),
                        Outline2 = rgb(55, 55, 55),
                        Outline3 = rgb(30, 30, 30),
                        TextBox = rgb(38, 38, 38),
                        Menu = rgb(32, 32, 32),
                        ListSelection = rgb(11, 90, 175),
                        Button = rgb(60, 60, 60),
                        ButtonHover = rgb(68, 68, 68),
                        ButtonPress = rgb(40, 40, 40),
                        Highlight = rgb(75, 75, 75),
                        Text = rgb(255, 255, 255),
                        PlaceholderText = rgb(100, 100, 100),
                        Important = rgb(255, 0, 0),
                        ExplorerIconMap = '',
                        MiscIconMap = '',
                        Syntax = {
                            Text = rgb(204, 204, 204),
                            Background = rgb(36, 36, 36),
                            Selection = rgb(255, 255, 255),
                            SelectionBack = rgb(11, 90, 175),
                            Operator = rgb(204, 204, 204),
                            Number = rgb(255, 198, 0),
                            String = rgb(173, 241, 149),
                            Comment = rgb(102, 102, 102),
                            Keyword = rgb(248, 109, 124),
                            Error = rgb(255, 0, 0),
                            FindBackground = rgb(141, 118, 0),
                            MatchingWord = rgb(85, 85, 85),
                            BuiltIn = rgb(132, 214, 247),
                            CurrentLine = rgb(45, 50, 65),
                            LocalMethod = rgb(253, 251, 172),
                            LocalProperty = rgb(97, 161, 241),
                            Nil = rgb(255, 198, 0),
                            Bool = rgb(255, 198, 0),
                            Function = rgb(248, 109, 124),
                            Local = rgb(248, 109, 124),
                            Self = rgb(248, 109, 124),
                            FunctionName = rgb(253, 251, 172),
                            Bracket = rgb(204, 204, 204),
                        },
                    },
                }
            end)()

            local Settings = {}
            local Apps = {}
            local env = {}
            local plr = service.Players.LocalPlayer or service.Players.PlayerAdded:wait()
            local create = function(data)
                local insts = {}

                for i, v in pairs(data)do
                    insts[v[1] ] = Instance.new(v[2])
                end
                for _, v in pairs(data)do
                    for prop, val in pairs(v[3])do
                        if type(val) == 'table' then
                            insts[v[1] ][prop] = insts[val[1] ]
                        else
                            insts[v[1] ][prop] = val
                        end
                    end
                end

                return insts[1]
            end
            local createSimple = function(class, props)
                local inst = Instance.new(class)

                for i, v in next, props do
                    inst[i] = v
                end

                return inst
            end

            Main = (function()
                local Main = {}

                Main.ModuleList = {
                    'Explorer',
                    'Properties',
                    'ScriptViewer',
                    'Console',
                    'SaveInstance',
                }
                Main.Elevated = false
                Main.MissingEnv = {}
                Main.Version = ''
                Main.Mouse = plr.GetMouse(plr)
                Main.AppControls = {}
                Main.Apps = Apps
                Main.MenuApps = {}
                Main.DisplayOrders = {
                    SideWindow = 8,
                    Window = 10,
                    Menu = 100000,
                    Core = 101000,
                }
                Main.GetInitDeps = function()
                    return {
                        Main = Main,
                        Lib = Lib,
                        Apps = Apps,
                        Settings = Settings,
                        API = API,
                        RMD = RMD,
                        env = env,
                        service = service,
                        plr = plr,
                        create = create,
                        createSimple = createSimple,
                    }
                end
                Main.Error = function(str)
                    if rconsoleprint then
                        rconsoleprint('DEX ERROR: ' .. tostring(str) .. '\n')
                        wait(9e9)
                    else
                        error(str)
                    end
                end
                Main.LoadModule = function(name)
                    local control

                    if EmbeddedModules then
                        control = EmbeddedModules[name]()

                        if not control then
                            Main.Error('Missing Embedded Module: ' .. name)
                        end
                    end

                    Main.AppControls[name] = control

                    control.InitDeps(Main.GetInitDeps())

                    local moduleData = control.Main()

                    Apps[name] = moduleData

                    return moduleData
                end
                Main.LoadModules = function()
                    for i, v in pairs(Main.ModuleList)do
                        local s, e = pcall(Main.LoadModule, v)

                        if not s then
                            Main.Error(('FAILED LOADING %s CAUSE %s').format(('FAILED LOADING %s CAUSE %s'), v, e))
                        end
                    end

                    Explorer = Apps.Explorer
                    Properties = Apps.Properties
                    ScriptViewer = Apps.ScriptViewer
                    Console = Apps.Console
                    SaveInstance = Apps.SaveInstance
                    Notebook = Apps.Notebook

                    local appTable = {
                        Explorer = Explorer,
                        Properties = Properties,
                        ScriptViewer = ScriptViewer,
                        Console = Console,
                        SaveInstance = SaveInstance,
                        Notebook = Notebook,
                    }

                    Main.AppControls.Lib.InitAfterMain(appTable)

                    for i, v in pairs(Main.ModuleList)do
                        local control = Main.AppControls[v]

                        if control then
                            control.InitAfterMain(appTable)
                        end
                    end
                end
                Main.InitEnv = function()
                    setmetatable(env, {
                        __newindex = function(self, name, func)
                            if not func then
                                Main.MissingEnv[#Main.MissingEnv + 1] = name

                                return
                            end

                            rawset(self, name, func)
                        end,
                    })

                    env.readfile = missing('function', readfile)
                    env.writefile = missing('function', writefile)
                    env.appendfile = missing('function', appendfile)
                    env.makefolder = missing('function', makefolder)
                    env.listfiles = missing('function', listfiles)
                    env.loadfile = missing('function', loadfile)
                    env.movefileas = missing('function', movefileas)
                    env.saveinstance = missing('function', saveinstance) or (function(
                    )
                        local success, res = pcall(function()
                            return loadstring(oldgame.HttpGet(oldgame, 
[[https://raw.githubusercontent.com/luau/SynSaveInstance/main/saveinstance.luau]]))()
                        end)

                        return success and res or nil
                    end)()
                    env.parsefile = function(name)
                        return tostring(name):gsub('[*\\?:<>|]+', ''):sub(1, 175)
                    end
                    env.getupvalues = missing('function', (debug and debug.getupvalues) or getupvalues or getupvals)
                    env.getconstants = missing('function', (debug and debug.getconstants) or getconstants or getconsts)
                    env.getinfo = missing('function', (debug and (debug.getinfo or debug.info)) or getinfo)
                    env.islclosure = missing('function', islclosure or is_l_closure or is_lclosure)
                    env.checkcaller = missing('function', checkcaller)
                    env.getgc = missing('function', getgc or get_gc_objects)
                    env.getscriptbytecode = missing('function', getscriptbytecode)
                    env.request = missing('function', request or http_request or (syn and syn.request) or (http and http.request) or (fluxus and fluxus.request))
                    env.decompile = missing('function', decompile) or (env.getscriptbytecode and env.request and (function(
                    )
                        local success, err = pcall(function()
                            loadstring(oldgame.HttpGet(oldgame, 
[[https://raw.githubusercontent.com/infyiff/backup/refs/heads/main/konstant.lua]]))()
                        end)

                        return (success and decompile) or nil
                    end)())
                    env.isViableDecompileScript = function(obj)
                        if obj.IsA(obj, 'ModuleScript') then
                            return true
                        elseif obj.IsA(obj, 'LocalScript') and (obj.RunContext == Enum.RunContext.Client or obj.RunContext == Enum.RunContext.Legacy) then
                            return true
                        elseif obj.IsA(obj, 'Script') and obj.RunContext == Enum.RunContext.Client then
                            return true
                        end

                        return false
                    end
                    env.protectgui = missing('function', protect_gui or (syn and syn.protect_gui))
                    env.gethui = missing('function', gethui or get_hidden_gui)
                    env.setclipboard = missing('function', setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set))
                    env.getnilinstances = missing('function', getnilinstances or get_nil_instances)
                    env.getloadedmodules = missing('function', getloadedmodules)
                    env.executor = (function()
                        local identifyexec = identifyexecutor or getexecutorname or whatexecutor
                        local success, name = pcall(function()
                            return tostring(identifyexec())
                        end)

                        return success and name or 'Your executor'
                    end)()
                    Main.GuiHolder = Main.Elevated and service.CoreGui or plr.FindFirstChildWhichIsA(plr, 'PlayerGui')

                    setmetatable(env, nil)
                end
                Main.LoadSettings = function()
                    local s, data = pcall(env.readfile or error, 'DexSettings.json')

                    if s and data and data ~= '' then
                        local s, decoded = service.HttpService:JSONDecode(data)

                        if s and decoded then
                            for i, v in next, decoded do end
                        end
                    else
                        Main.ResetSettings()
                    end
                end
                Main.ResetSettings = function()
                    local function recur(t, res)
                        for set, val in pairs(t)do
                            if type(val) == 'table' and val._Recurse then
                                if type(res[set]) ~= 'table' then
                                    res[set] = {}
                                end

                                recur(val, res[set])
                            else
                                res[set] = val
                            end
                        end

                        return res
                    end

                    recur(DefaultSettings, Settings)
                end

                local function jsonDecode(str)
                    local suc, res = pcall(service.HttpService.JSONDecode, service.HttpService, str)

                    return suc and res or suc
                end

                Main.FetchAPI = function()
                    local api, rawAPI

                    if Main.Elevated then
                        if Main.LocalDepsUpToDate() then
                            local localAPI = Lib.ReadFile('dex/rbx_api.dat')

                            if localAPI then
                                rawAPI = localAPI
                            else
                                Main.DepsVersionData[1] = ''
                            end
                        end

                        rawAPI = rawAPI or oldgame.HttpGet(oldgame, 'http://setup.roblox.com/' .. Main.RobloxVersion .. '-API-Dump.json')
                    else
                        if script.FindFirstChild(script, 'API') then
                            rawAPI = require(script.API)
                        else
                            error('NO API EXISTS')
                        end
                    end

                    Main.RawAPI = rawAPI
                    api = jsonDecode(rawAPI)

                    if not api then
                        rawAPI = oldgame.HttpGet(oldgame, 
[[https://raw.githubusercontent.com/infyiff/backup/refs/heads/main/rbx_api.dat]])
                        Main.RawAPI = rawAPI
                        api = jsonDecode(rawAPI)
                    end

                    local classes, enums = {}, {}
                    local categoryOrder, seenCategories = {}, {}

                    local function insertAbove(t, item, aboveItem)
                        local findPos = table.find(t, item)

                        if not findPos then
                            return
                        end

                        table.remove(t, findPos)

                        local pos = table.find(t, aboveItem)

                        if not pos then
                            return
                        end

                        table.insert(t, pos, item)
                    end

                    for _, class in pairs(api.Classes)do
                        local newClass = {}

                        newClass.Name = class.Name
                        newClass.Superclass = class.Superclass
                        newClass.Properties = {}
                        newClass.Functions = {}
                        newClass.Events = {}
                        newClass.Callbacks = {}
                        newClass.Tags = {}

                        if class.Tags then
                            for c, tag in pairs(class.Tags)do
                                newClass.Tags[tag] = true
                            end
                        end

                        for __, member in pairs(class.Members)do
                            local newMember = {}

                            newMember.Name = member.Name
                            newMember.Class = class.Name
                            newMember.Security = member.Security
                            newMember.Tags = {}

                            if member.Tags then
                                for c, tag in pairs(member.Tags)do
                                    newMember.Tags[tag] = true
                                end
                            end

                            local mType = member.MemberType

                            if mType == 'Property' then
                                local propCategory = member.Category or 'Other'

                                propCategory = propCategory.match(propCategory, '^%s*(.-)%s*$')

                                if not seenCategories[propCategory] then
                                    categoryOrder[#categoryOrder + 1] = propCategory
                                    seenCategories[propCategory] = true
                                end

                                newMember.ValueType = member.ValueType
                                newMember.Category = propCategory
                                newMember.Serialization = member.Serialization

                                table.insert(newClass.Properties, newMember)
                            elseif mType == 'Function' then
                                newMember.Parameters = {}
                                newMember.ReturnType = member.ReturnType.Name

                                for c, param in pairs(member.Parameters)do
                                    table.insert(newMember.Parameters, {
                                        Name = param.Name,
                                        Type = param.Type.Name,
                                    })
                                end

                                table.insert(newClass.Functions, newMember)
                            elseif mType == 'Event' then
                                newMember.Parameters = {}

                                for c, param in pairs(member.Parameters)do
                                    table.insert(newMember.Parameters, {
                                        Name = param.Name,
                                        Type = param.Type.Name,
                                    })
                                end

                                table.insert(newClass.Events, newMember)
                            end
                        end

                        classes[class.Name] = newClass
                    end
                    for _, class in pairs(classes)do
                        class.Superclass = classes[class.Superclass]
                    end
                    for _, enum in pairs(api.Enums)do
                        local newEnum = {}

                        newEnum.Name = enum.Name
                        newEnum.Items = {}
                        newEnum.Tags = {}

                        if enum.Tags then
                            for c, tag in pairs(enum.Tags)do
                                newEnum.Tags[tag] = true
                            end
                        end

                        for __, item in pairs(enum.Items)do
                            local newItem = {}

                            newItem.Name = item.Name
                            newItem.Value = item.Value

                            table.insert(newEnum.Items, newItem)
                        end

                        enums[enum.Name] = newEnum
                    end

                    local function getMember(class, member)
                        if not classes[class] or not classes[class][member] then
                            return
                        end

                        local result = {}
                        local currentClass = classes[class]

                        while currentClass do
                            for _, entry in pairs(currentClass[member])do
                                result[#result + 1] = entry
                            end

                            currentClass = currentClass.Superclass
                        end

                        table.sort(result, function(a, b)
                            return a.Name < b.Name
                        end)

                        return result
                    end

                    insertAbove(categoryOrder, 'Behavior', 'Tuning')
                    insertAbove(categoryOrder, 'Appearance', 'Data')
                    insertAbove(categoryOrder, 'Attachments', 'Axes')
                    insertAbove(categoryOrder, 'Cylinder', 'Slider')
                    insertAbove(categoryOrder, 'Localization', 'Jump Settings')
                    insertAbove(categoryOrder, 'Surface', 'Motion')
                    insertAbove(categoryOrder, 'Surface Inputs', 'Surface')
                    insertAbove(categoryOrder, 'Part', 'Surface Inputs')
                    insertAbove(categoryOrder, 'Assembly', 'Surface Inputs')
                    insertAbove(categoryOrder, 'Character', 'Controls')

                    categoryOrder[#categoryOrder + 1] = 'Unscriptable'
                    categoryOrder[#categoryOrder + 1] = 'Attributes'

                    local categoryOrderMap = {}

                    for i = 1, #categoryOrder do
                        categoryOrderMap[categoryOrder[i] ] = i
                    end

                    return {
                        Classes = classes,
                        Enums = enums,
                        CategoryOrder = categoryOrderMap,
                        GetMember = getMember,
                    }
                end
                Main.FetchRMD = function()
                    local rawXML

                    if Main.Elevated then
                        if Main.LocalDepsUpToDate() then
                            local localRMD = Lib.ReadFile('dex/rbx_rmd.dat')

                            if localRMD then
                                rawXML = localRMD
                            else
                                Main.DepsVersionData[1] = ''
                            end
                        end

                        rawXML = rawXML or oldgame.HttpGet(oldgame, 
[[https://raw.githubusercontent.com/CloneTrooper1019/Roblox-Client-Tracker/roblox/ReflectionMetadata.xml]])
                    else
                        if script.FindFirstChild(script, 'RMD') then
                            rawXML = require(script.RMD)
                        else
                            error('NO RMD EXISTS')
                        end
                    end

                    Main.RawRMD = rawXML

                    local parsed = Lib.ParseXML(rawXML)
                    local classList = parsed.children[1].children[1].children
                    local enumList = parsed.children[1].children[2].children
                    local propertyOrders = {}
                    local classes, enums = {}, {}

                    for _, class in pairs(classList)do
                        local className = ''

                        for _, child in pairs(class.children)do
                            if child.tag == 'Properties' then
                                local data = {
                                    Properties = {},
                                    Functions = {},
                                }
                                local props = child.children

                                for _, prop in pairs(props)do
                                    local name = prop.attrs.name

                                    name = name.sub(name, 1, 1):upper() .. name.sub(name, 2)
                                    data[name] = prop.children[1].text
                                end

                                className = data.Name
                                classes[className] = data
                            elseif child.attrs.class == 'ReflectionMetadataProperties' then
                                local members = child.children

                                for _, member in pairs(members)do
                                    if member.attrs.class == 'ReflectionMetadataMember' then
                                        local data = {}

                                        if member.children[1].tag == 'Properties' then
                                            local props = member.children[1].children

                                            for _, prop in pairs(props)do
                                                if prop.attrs then
                                                    local name = prop.attrs.name

                                                    name = name.sub(name, 1, 1):upper() .. name.sub(name, 2)
                                                    data[name] = prop.children[1].text
                                                end
                                            end

                                            if data.PropertyOrder then
                                                local orders = propertyOrders[className]

                                                if not orders then
                                                    orders = {}
                                                    propertyOrders[className] = orders
                                                end

                                                orders[data.Name] = tonumber(data.PropertyOrder)
                                            end

                                            classes[className].Properties[data.Name] = data
                                        end
                                    end
                                end
                            elseif child.attrs.class == 'ReflectionMetadataFunctions' then
                                local members = child.children

                                for _, member in pairs(members)do
                                    if member.attrs.class == 'ReflectionMetadataMember' then
                                        local data = {}

                                        if member.children[1].tag == 'Properties' then
                                            local props = member.children[1].children

                                            for _, prop in pairs(props)do
                                                if prop.attrs then
                                                    local name = prop.attrs.name

                                                    name = name.sub(name, 1, 1):upper() .. name.sub(name, 2)
                                                    data[name] = prop.children[1].text
                                                end
                                            end

                                            classes[className].Functions[data.Name] = data
                                        end
                                    end
                                end
                            end
                        end
                    end
                    for _, enum in pairs(enumList)do
                        local enumName = ''

                        for _, child in pairs(enum.children)do
                            if child.tag == 'Properties' then
                                local data = {Items = {}}
                                local props = child.children

                                for _, prop in pairs(props)do
                                    local name = prop.attrs.name

                                    name = name.sub(name, 1, 1):upper() .. name.sub(name, 2)
                                    data[name] = prop.children[1].text
                                end

                                enumName = data.Name
                                enums[enumName] = data
                            elseif child.attrs.class == 'ReflectionMetadataEnumItem' then
                                local data = {}

                                if child.children[1].tag == 'Properties' then
                                    local props = child.children[1].children

                                    for _, prop in pairs(props)do
                                        local name = prop.attrs.name

                                        name = name.sub(name, 1, 1):upper() .. name.sub(name, 2)
                                        data[name] = prop.children[1].text
                                    end

                                    enums[enumName].Items[data.Name] = data
                                end
                            end
                        end
                    end

                    return {
                        Classes = classes,
                        Enums = enums,
                        PropertyOrders = propertyOrders,
                    }
                end
                Main.ShowGui = function(gui)
                    if env.gethui then
                        gui.Parent = env.gethui()
                    elseif env.protectgui then
                        env.protectgui(gui)

                        gui.Parent = Main.GuiHolder
                    else
                        gui.Parent = Main.GuiHolder
                    end
                end
                Main.CreateIntro = function(initStatus)
                    local gui = create({
                        {
                            1,
                            'ScreenGui',
                            {
                                Name = 'Intro',
                            },
                        },
                        {
                            2,
                            'Frame',
                            {
                                Active = true,
                                BackgroundColor3 = Color3.new(0.20392157137394, 0.20392157137394, 0.20392157137394),
                                BorderSizePixel = 0,
                                Name = 'Main',
                                Parent = {1},
                                Position = UDim2.new(0.5, -175, 0.5, -100),
                                Size = UDim2.new(0, 350, 0, 200),
                            },
                        },
                        {
                            3,
                            'Frame',
                            {
                                BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                BorderSizePixel = 0,
                                ClipsDescendants = true,
                                Name = 'Holder',
                                Parent = {2},
                                Size = UDim2.new(1, 0, 1, 0),
                            },
                        },
                        {
                            4,
                            'UIGradient',
                            {
                                Parent = {3},
                                Rotation = 30,
                                Transparency = NumberSequence.new({
                                    NumberSequenceKeypoint.new(0, 1, 0),
                                    NumberSequenceKeypoint.new(1, 1, 0),
                                }),
                            },
                        },
                        {
                            5,
                            'TextLabel',
                            {
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                Font = 4,
                                Name = 'Title',
                                Parent = {3},
                                Position = UDim2.new(0, -190, 0, 15),
                                Size = UDim2.new(0, 100, 0, 50),
                                Text = 'Dex',
                                TextColor3 = Color3.new(1, 1, 1),
                                TextSize = 50,
                                TextTransparency = 1,
                            },
                        },
                        {
                            6,
                            'TextLabel',
                            {
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                Font = 3,
                                Name = 'Desc',
                                Parent = {3},
                                Position = UDim2.new(0, -230, 0, 60),
                                Size = UDim2.new(0, 180, 0, 25),
                                Text = 'Ultimate Debugging Suite',
                                TextColor3 = Color3.new(1, 1, 1),
                                TextSize = 18,
                                TextTransparency = 1,
                            },
                        },
                        {
                            7,
                            'TextLabel',
                            {
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                Font = 3,
                                Name = 'StatusText',
                                Parent = {3},
                                Position = UDim2.new(0, 20, 0, 110),
                                Size = UDim2.new(0, 180, 0, 25),
                                Text = 'Fetching API',
                                TextColor3 = Color3.new(1, 1, 1),
                                TextSize = 14,
                                TextTransparency = 1,
                            },
                        },
                        {
                            8,
                            'Frame',
                            {
                                BackgroundColor3 = Color3.new(0.20392157137394, 0.20392157137394, 0.20392157137394),
                                BorderSizePixel = 0,
                                Name = 'ProgressBar',
                                Parent = {3},
                                Position = UDim2.new(0, 110, 0, 145),
                                Size = UDim2.new(0, 0, 0, 4),
                            },
                        },
                        {
                            9,
                            'Frame',
                            {
                                BackgroundColor3 = Color3.new(0.2392156869173, 0.56078433990479, 0.86274510622025),
                                BorderSizePixel = 0,
                                Name = 'Bar',
                                Parent = {8},
                                Size = UDim2.new(0, 0, 1, 0),
                            },
                        },
                        {
                            10,
                            'ImageLabel',
                            {
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                Image = 'rbxassetid://2764171053',
                                ImageColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                Parent = {8},
                                ScaleType = 1,
                                Size = UDim2.new(1, 0, 1, 0),
                                SliceCenter = Rect.new(2, 2, 254, 254),
                            },
                        },
                        {
                            11,
                            'TextLabel',
                            {
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                Font = 3,
                                Name = 'Creator',
                                Parent = {2},
                                Position = UDim2.new(1, -110, 1, -20),
                                Size = UDim2.new(0, 105, 0, 20),
                                Text = 'Developed by Moon',
                                TextColor3 = Color3.new(1, 1, 1),
                                TextSize = 14,
                                TextXAlignment = 1,
                            },
                        },
                        {
                            12,
                            'UIGradient',
                            {
                                Parent = {11},
                                Transparency = NumberSequence.new({
                                    NumberSequenceKeypoint.new(0, 1, 0),
                                    NumberSequenceKeypoint.new(1, 1, 0),
                                }),
                            },
                        },
                        {
                            13,
                            'TextLabel',
                            {
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                Font = 3,
                                Name = 'Version',
                                Parent = {2},
                                Position = UDim2.new(1, -110, 1, -35),
                                Size = UDim2.new(0, 105, 0, 20),
                                Text = Main.Version,
                                TextColor3 = Color3.new(1, 1, 1),
                                TextSize = 14,
                                TextXAlignment = 1,
                            },
                        },
                        {
                            14,
                            'UIGradient',
                            {
                                Parent = {13},
                                Transparency = NumberSequence.new({
                                    NumberSequenceKeypoint.new(0, 1, 0),
                                    NumberSequenceKeypoint.new(1, 1, 0),
                                }),
                            },
                        },
                        {
                            15,
                            'ImageLabel',
                            {
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                BorderSizePixel = 0,
                                Image = 'rbxassetid://1427967925',
                                Name = 'Outlines',
                                Parent = {2},
                                Position = UDim2.new(0, -5, 0, -5),
                                ScaleType = 1,
                                Size = UDim2.new(1, 10, 1, 10),
                                SliceCenter = Rect.new(6, 6, 25, 25),
                                TileSize = UDim2.new(0, 20, 0, 20),
                            },
                        },
                        {
                            16,
                            'UIGradient',
                            {
                                Parent = {15},
                                Rotation = -30,
                                Transparency = NumberSequence.new({
                                    NumberSequenceKeypoint.new(0, 1, 0),
                                    NumberSequenceKeypoint.new(1, 1, 0),
                                }),
                            },
                        },
                        {
                            17,
                            'UIGradient',
                            {
                                Parent = {2},
                                Rotation = -30,
                                Transparency = NumberSequence.new({
                                    NumberSequenceKeypoint.new(0, 1, 0),
                                    NumberSequenceKeypoint.new(1, 1, 0),
                                }),
                            },
                        },
                    })

                    Main.ShowGui(gui)

                    local backGradient = gui.Main.UIGradient
                    local outlinesGradient = gui.Main.Outlines.UIGradient
                    local holderGradient = gui.Main.Holder.UIGradient
                    local titleText = gui.Main.Holder.Title
                    local descText = gui.Main.Holder.Desc
                    local versionText = gui.Main.Version
                    local versionGradient = versionText.UIGradient
                    local creatorText = gui.Main.Creator
                    local creatorGradient = creatorText.UIGradient
                    local statusText = gui.Main.Holder.StatusText
                    local progressBar = gui.Main.Holder.ProgressBar
                    local tweenS = service.TweenService
                    local renderStepped = service.RunService.RenderStepped
                    local signalWait = renderStepped.wait
                    local fastwait = function(s)
                        if not s then
                            return signalWait(renderStepped)
                        end

                        local start = tick()

                        while tick() - start < s do
                            signalWait(renderStepped)
                        end
                    end

                    statusText.Text = initStatus

                    local function tweenNumber(n, ti, func)
                        local tweenVal = Instance.new('IntValue')

                        tweenVal.Value = 0

                        tweenVal.Changed:Connect(func)

                        local tween = tweenS.Create(tweenS, tweenVal, ti, {Value = n})

                        tween.Play(tween)
                        tween.Completed:Connect(function()
                            tweenVal.Destroy(tweenVal)
                        end)
                    end

                    local ti = TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

                    tweenNumber(100, ti, function(val)
                        val = val / 200

                        local start = NumberSequenceKeypoint.new(0, 0)
                        local a1 = NumberSequenceKeypoint.new(val, 0)
                        local a2 = NumberSequenceKeypoint.new(math.min(0.5, val + math.min(0.05, val)), 1)

                        if a1.Time == a2.Time then
                            a2 = a1
                        end

                        local b1 = NumberSequenceKeypoint.new(1 - val, 0)
                        local b2 = NumberSequenceKeypoint.new(math.max(0.5, 1 - val - math.min(0.05, val)), 1)

                        if b1.Time == b2.Time then
                            b2 = b1
                        end

                        local goal = NumberSequenceKeypoint.new(1, 0)

                        backGradient.Transparency = NumberSequence.new({
                            start,
                            a1,
                            a2,
                            b2,
                            b1,
                            goal,
                        })
                        outlinesGradient.Transparency = NumberSequence.new({
                            start,
                            a1,
                            a2,
                            b2,
                            b1,
                            goal,
                        })
                    end)
                    fastwait(0.4)
                    tweenNumber(100, ti, function(val)
                        val = val / 166.66

                        local start = NumberSequenceKeypoint.new(0, 0)
                        local a1 = NumberSequenceKeypoint.new(val, 0)
                        local a2 = NumberSequenceKeypoint.new(val + 0.01, 1)
                        local goal = NumberSequenceKeypoint.new(1, 1)

                        holderGradient.Transparency = NumberSequence.new({
                            start,
                            a1,
                            a2,
                            goal,
                        })
                    end)
                    tweenS.Create(tweenS, titleText, ti, {
                        Position = UDim2.new(0, 60, 0, 15),
                        TextTransparency = 0,
                    }):Play()
                    tweenS.Create(tweenS, descText, ti, {
                        Position = UDim2.new(0, 20, 0, 60),
                        TextTransparency = 0,
                    }):Play()

                    local function rightTextTransparency(obj)
                        tweenNumber(100, ti, function(val)
                            val = val / 100

                            local a1 = NumberSequenceKeypoint.new(1 - val, 0)
                            local a2 = NumberSequenceKeypoint.new(math.max(0, 1 - val - 0.01), 1)

                            if a1.Time == a2.Time then
                                a2 = a1
                            end

                            local start = NumberSequenceKeypoint.new(0, a1 == a2 and 0 or 1)
                            local goal = NumberSequenceKeypoint.new(1, 0)

                            obj.Transparency = NumberSequence.new({
                                start,
                                a2,
                                a1,
                                goal,
                            })
                        end)
                    end

                    rightTextTransparency(versionGradient)
                    rightTextTransparency(creatorGradient)
                    fastwait(0.9)

                    local progressTI = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

                    tweenS.Create(tweenS, statusText, progressTI, {
                        Position = UDim2.new(0, 20, 0, 120),
                        TextTransparency = 0,
                    }):Play()
                    tweenS.Create(tweenS, progressBar, progressTI, {
                        Position = UDim2.new(0, 60, 0, 145),
                        Size = UDim2.new(0, 100, 0, 4),
                    }):Play()
                    fastwait(0.25)

                    local function setProgress(text, n)
                        statusText.Text = text

                        tweenS.Create(tweenS, progressBar.Bar, progressTI, {
                            Size = UDim2.new(n, 0, 1, 0),
                        }):Play()
                    end
                    local function close()
                        tweenS.Create(tweenS, titleText, progressTI, {TextTransparency = 1}):Play()
                        tweenS.Create(tweenS, descText, progressTI, {TextTransparency = 1}):Play()
                        tweenS.Create(tweenS, versionText, progressTI, {TextTransparency = 1}):Play()
                        tweenS.Create(tweenS, creatorText, progressTI, {TextTransparency = 1}):Play()
                        tweenS.Create(tweenS, statusText, progressTI, {TextTransparency = 1}):Play()
                        tweenS.Create(tweenS, progressBar, progressTI, {BackgroundTransparency = 1}):Play()
                        tweenS.Create(tweenS, progressBar.Bar, progressTI, {BackgroundTransparency = 1}):Play()
                        tweenS.Create(tweenS, progressBar.ImageLabel, progressTI, {ImageTransparency = 1}):Play()
                        tweenNumber(100, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.In), function(
                            val
                        )
                            val = val / 250

                            local start = NumberSequenceKeypoint.new(0, 0)
                            local a1 = NumberSequenceKeypoint.new(0.6 + val, 0)
                            local a2 = NumberSequenceKeypoint.new(math.min(1, 0.601 + val), 1)

                            if a1.Time == a2.Time then
                                a2 = a1
                            end

                            local goal = NumberSequenceKeypoint.new(1, a1 == a2 and 0 or 1)

                            holderGradient.Transparency = NumberSequence.new({
                                start,
                                a1,
                                a2,
                                goal,
                            })
                        end)
                        fastwait(0.5)

                        gui.Main.BackgroundTransparency = 1
                        outlinesGradient.Rotation = 30

                        tweenNumber(100, ti, function(val)
                            val = val / 100

                            local start = NumberSequenceKeypoint.new(0, 1)
                            local a1 = NumberSequenceKeypoint.new(val, 1)
                            local a2 = NumberSequenceKeypoint.new(math.min(1, val + math.min(0.05, val)), 0)

                            if a1.Time == a2.Time then
                                a2 = a1
                            end

                            local goal = NumberSequenceKeypoint.new(1, a1 == a2 and 1 or 0)

                            outlinesGradient.Transparency = NumberSequence.new({
                                start,
                                a1,
                                a2,
                                goal,
                            })
                            holderGradient.Transparency = NumberSequence.new({
                                start,
                                a1,
                                a2,
                                goal,
                            })
                        end)
                        fastwait(0.45)
                        gui.Destroy(gui)
                    end

                    return {
                        SetProgress = setProgress,
                        Close = close,
                    }
                end
                Main.CreateApp = function(data)
                    if Main.MenuApps[data.Name] then
                        return
                    end

                    local control = {}
                    local app = Main.AppTemplate:Clone()
                    local iconIndex = data.Icon

                    if data.IconMap and iconIndex then
                        if type(iconIndex) == 'number' then
                            data.IconMap:Display(app.Main.Icon, iconIndex)
                        elseif type(iconIndex) == 'string' then
                            data.IconMap:DisplayByKey(app.Main.Icon, iconIndex)
                        end
                    elseif type(iconIndex) == 'string' then
                        app.Main.Icon.Image = iconIndex
                    else
                        app.Main.Icon.Image = ''
                    end

                    local function updateState()
                        app.Main.BackgroundTransparency = data.Open and 0 or (Lib.CheckMouseInGui(app.Main) and 0 or 1)
                        app.Main.Highlight.Visible = data.Open
                    end
                    local function enable(silent)
                        if data.Open then
                            return
                        end

                        data.Open = true

                        updateState()

                        if not silent then
                            if data.Window then
                                data.Window:Show()
                            end
                            if data.OnClick then
                                data.OnClick(data.Open)
                            end
                        end
                    end
                    local function disable(silent)
                        if not data.Open then
                            return
                        end

                        data.Open = false

                        updateState()

                        if not silent then
                            if data.Window then
                                data.Window:Hide()
                            end
                            if data.OnClick then
                                data.OnClick(data.Open)
                            end
                        end
                    end

                    updateState()

                    local ySize = service.TextService:GetTextSize(data.Name, 14, Enum.Font.SourceSans, Vector2.new(62, 999999)).Y

                    app.Main.Size = UDim2.new(1, 0, 0, math.clamp(46 + ySize, 60, 74))
                    app.Main.AppName.Text = data.Name

                    app.Main.InputBegan:Connect(function(input)
                        if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                            app.Main.BackgroundTransparency = 0
                            app.Main.BackgroundColor3 = Settings.Theme.ButtonHover
                        end
                    end)
                    app.Main.InputEnded:Connect(function(input)
                        if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                            app.Main.BackgroundTransparency = data.Open and 0 or 1
                            app.Main.BackgroundColor3 = Settings.Theme.Button
                        end
                    end)
                    app.Main.MouseButton1Click:Connect(function()
                        if data.Open then
                            disable()
                        else
                            enable()
                        end
                    end)

                    local window = data.Window

                    if window then
                        window.OnActivate:Connect(function()
                            enable(true)
                        end)
                        window.OnDeactivate:Connect(function()
                            disable(true)
                        end)
                    end

                    app.Visible = true
                    app.Parent = Main.AppsContainer
                    Main.AppsFrame.CanvasSize = UDim2.new(0, 0, 0, Main.AppsContainerGrid.AbsoluteCellCount.Y * 82 + 8)
                    control.Enable = enable
                    control.Disable = disable
                    Main.MenuApps[data.Name] = control

                    return control
                end
                Main.SetMainGuiOpen = function(val)
                    Main.MainGuiOpen = val
                    Main.MainGui.OpenButton.Text = val and 'X' or 'Dex'

                    if val then
                        Main.MainGui.OpenButton.MainFrame.Visible = true
                    end

                    Main.MainGui.OpenButton.MainFrame:TweenSize(val and UDim2.new(0, 224, 0, 200) or UDim2.new(0, 0, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
                    service.TweenService:Create(Main.MainGui.OpenButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                        BackgroundTransparency = val and 0 or (Lib.CheckMouseInGui(Main.MainGui.OpenButton) and 0 or 0.2),
                    }):Play()

                    if Main.MainGuiMouseEvent then
                        Main.MainGuiMouseEvent:Disconnect()
                    end
                    if not val then
                        local startTime = tick()

                        Main.MainGuiCloseTime = startTime

                        coroutine.wrap(function()
                            Lib.FastWait(0.2)

                            if not Main.MainGuiOpen and startTime == Main.MainGuiCloseTime then
                                Main.MainGui.OpenButton.MainFrame.Visible = false
                            end
                        end)()
                    else
                        Main.MainGuiMouseEvent = service.UserInputService.InputBegan:Connect(function(
                            input
                        )
                            if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and not Lib.CheckMouseInGui(Main.MainGui.OpenButton) and not Lib.CheckMouseInGui(Main.MainGui.OpenButton.MainFrame) then
                                Main.SetMainGuiOpen(false)
                            end
                        end)
                    end
                end
                Main.CreateMainGui = function()
                    local gui = create({
                        {
                            1,
                            'ScreenGui',
                            {
                                IgnoreGuiInset = true,
                                Name = 'MainMenu',
                            },
                        },
                        {
                            2,
                            'TextButton',
                            {
                                AnchorPoint = Vector2.new(0.5, 0),
                                AutoButtonColor = false,
                                BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                BorderSizePixel = 0,
                                Font = 4,
                                Name = 'OpenButton',
                                Parent = {1},
                                Position = UDim2.new(0.5, 0, 0, 2),
                                Size = UDim2.new(0, 32, 0, 32),
                                Text = 'Dex',
                                TextColor3 = Color3.new(1, 1, 1),
                                TextSize = 16,
                                TextTransparency = 0.20000000298023,
                            },
                        },
                        {
                            3,
                            'UICorner',
                            {
                                CornerRadius = UDim.new(0, 4),
                                Parent = {2},
                            },
                        },
                        {
                            4,
                            'Frame',
                            {
                                AnchorPoint = Vector2.new(0.5, 0),
                                BackgroundColor3 = Color3.new(0.17647059261799, 0.17647059261799, 0.17647059261799),
                                ClipsDescendants = true,
                                Name = 'MainFrame',
                                Parent = {2},
                                Position = UDim2.new(0.5, 0, 1, -4),
                                Size = UDim2.new(0, 224, 0, 200),
                            },
                        },
                        {
                            5,
                            'UICorner',
                            {
                                CornerRadius = UDim.new(0, 4),
                                Parent = {4},
                            },
                        },
                        {
                            6,
                            'Frame',
                            {
                                BackgroundColor3 = Color3.new(0.20392157137394, 0.20392157137394, 0.20392157137394),
                                Name = 'BottomFrame',
                                Parent = {4},
                                Position = UDim2.new(0, 0, 1, -24),
                                Size = UDim2.new(1, 0, 0, 24),
                            },
                        },
                        {
                            7,
                            'UICorner',
                            {
                                CornerRadius = UDim.new(0, 4),
                                Parent = {6},
                            },
                        },
                        {
                            8,
                            'Frame',
                            {
                                BackgroundColor3 = Color3.new(0.20392157137394, 0.20392157137394, 0.20392157137394),
                                BorderSizePixel = 0,
                                Name = 'CoverFrame',
                                Parent = {6},
                                Size = UDim2.new(1, 0, 0, 4),
                            },
                        },
                        {
                            9,
                            'Frame',
                            {
                                BackgroundColor3 = Color3.new(0.1294117718935, 0.1294117718935, 0.1294117718935),
                                BorderSizePixel = 0,
                                Name = 'Line',
                                Parent = {8},
                                Position = UDim2.new(0, 0, 0, -1),
                                Size = UDim2.new(1, 0, 0, 1),
                            },
                        },
                        {
                            10,
                            'TextButton',
                            {
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                Font = 3,
                                Name = 'Settings',
                                Parent = {6},
                                Position = UDim2.new(1, -48, 0, 0),
                                Size = UDim2.new(0, 24, 1, 0),
                                Text = '',
                                TextColor3 = Color3.new(1, 1, 1),
                                TextSize = 14,
                            },
                        },
                        {
                            11,
                            'ImageLabel',
                            {
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                Image = 'rbxassetid://6578871732',
                                ImageTransparency = 0.20000000298023,
                                Name = 'Icon',
                                Parent = {10},
                                Position = UDim2.new(0, 4, 0, 4),
                                Size = UDim2.new(0, 16, 0, 16),
                            },
                        },
                        {
                            12,
                            'TextButton',
                            {
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                Font = 3,
                                Name = 'Information',
                                Parent = {6},
                                Position = UDim2.new(1, -24, 0, 0),
                                Size = UDim2.new(0, 24, 1, 0),
                                Text = '',
                                TextColor3 = Color3.new(1, 1, 1),
                                TextSize = 14,
                            },
                        },
                        {
                            13,
                            'ImageLabel',
                            {
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                Image = 'rbxassetid://6578933307',
                                ImageTransparency = 0.20000000298023,
                                Name = 'Icon',
                                Parent = {12},
                                Position = UDim2.new(0, 4, 0, 4),
                                Size = UDim2.new(0, 16, 0, 16),
                            },
                        },
                        {
                            14,
                            'ScrollingFrame',
                            {
                                Active = true,
                                AnchorPoint = Vector2.new(0.5, 0),
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                BorderColor3 = Color3.new(0.1294117718935, 0.1294117718935, 0.1294117718935),
                                BorderSizePixel = 0,
                                Name = 'AppsFrame',
                                Parent = {4},
                                Position = UDim2.new(0.5, 0, 0, 0),
                                ScrollBarImageColor3 = Color3.new(0, 0, 0),
                                ScrollBarThickness = 4,
                                Size = UDim2.new(0, 222, 1, -25),
                            },
                        },
                        {
                            15,
                            'Frame',
                            {
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                Name = 'Container',
                                Parent = {14},
                                Position = UDim2.new(0, 7, 0, 8),
                                Size = UDim2.new(1, -14, 0, 2),
                            },
                        },
                        {
                            16,
                            'UIGridLayout',
                            {
                                CellSize = UDim2.new(0, 66, 0, 74),
                                Parent = {15},
                                SortOrder = 2,
                            },
                        },
                        {
                            17,
                            'Frame',
                            {
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                Name = 'App',
                                Parent = {1},
                                Size = UDim2.new(0, 100, 0, 100),
                                Visible = false,
                            },
                        },
                        {
                            18,
                            'TextButton',
                            {
                                AutoButtonColor = false,
                                BackgroundColor3 = Color3.new(0.2352941185236, 0.2352941185236, 0.2352941185236),
                                BorderSizePixel = 0,
                                Font = 3,
                                Name = 'Main',
                                Parent = {17},
                                Size = UDim2.new(1, 0, 0, 60),
                                Text = '',
                                TextColor3 = Color3.new(0, 0, 0),
                                TextSize = 14,
                            },
                        },
                        {
                            19,
                            'ImageLabel',
                            {
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                Image = 'rbxassetid://6579106223',
                                ImageRectSize = Vector2.new(32, 32),
                                Name = 'Icon',
                                Parent = {18},
                                Position = UDim2.new(0.5, -16, 0, 4),
                                ScaleType = 4,
                                Size = UDim2.new(0, 32, 0, 32),
                            },
                        },
                        {
                            20,
                            'TextLabel',
                            {
                                BackgroundColor3 = Color3.new(1, 1, 1),
                                BackgroundTransparency = 1,
                                BorderSizePixel = 0,
                                Font = 3,
                                Name = 'AppName',
                                Parent = {18},
                                Position = UDim2.new(0, 2, 0, 38),
                                Size = UDim2.new(1, -4, 1, -40),
                                Text = 'Explorer',
                                TextColor3 = Color3.new(1, 1, 1),
                                TextSize = 14,
                                TextTransparency = 0.10000000149012,
                                TextTruncate = 1,
                                TextWrapped = true,
                                TextYAlignment = 0,
                            },
                        },
                        {
                            21,
                            'Frame',
                            {
                                BackgroundColor3 = Color3.new(0, 0.66666668653488, 1),
                                BorderSizePixel = 0,
                                Name = 'Highlight',
                                Parent = {18},
                                Position = UDim2.new(0, 0, 1, -2),
                                Size = UDim2.new(1, 0, 0, 2),
                            },
                        },
                    })

                    Main.MainGui = gui
                    Main.AppsFrame = gui.OpenButton.MainFrame.AppsFrame
                    Main.AppsContainer = Main.AppsFrame.Container
                    Main.AppsContainerGrid = Main.AppsContainer.UIGridLayout
                    Main.AppTemplate = gui.App
                    Main.MainGuiOpen = false

                    local openButton = gui.OpenButton

                    openButton.BackgroundTransparency = 0.2
                    openButton.MainFrame.Size = UDim2.new(0, 0, 0, 0)
                    openButton.MainFrame.Visible = false

                    openButton.MouseButton1Click:Connect(function()
                        Main.SetMainGuiOpen(not Main.MainGuiOpen)
                    end)
                    openButton.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                            service.TweenService:Create(Main.MainGui.OpenButton, TweenInfo.new(0, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play()
                        end
                    end)
                    openButton.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                            service.TweenService:Create(Main.MainGui.OpenButton, TweenInfo.new(0, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                                BackgroundTransparency = Main.MainGuiOpen and 0 or 0.2,
                            }):Play()
                        end
                    end)
                    Main.CreateApp({
                        Name = 'Explorer',
                        IconMap = Main.LargeIcons,
                        Icon = 'Explorer',
                        Open = true,
                        Window = Explorer.Window,
                    })
                    Main.CreateApp({
                        Name = 'Properties',
                        IconMap = Main.LargeIcons,
                        Icon = 'Properties',
                        Open = true,
                        Window = Properties.Window,
                    })
                    Main.CreateApp({
                        Name = 'Script Viewer',
                        IconMap = Main.LargeIcons,
                        Icon = 'Script_Viewer',
                        Window = ScriptViewer.Window,
                    })

                    local cptsOnMouseClick

                    Main.CreateApp({
                        Name = 'Click part to select',
                        IconMap = Main.LargeIcons,
                        Icon = 6,
                        OnClick = function(callback)
                            if callback then
                                local mouse = Main.Mouse

                                cptsOnMouseClick = mouse.Button1Down:Connect(function(
                                )
                                    pcall(function()
                                        local object = mouse.Target

                                        if nodes[object] then
                                            selection.Set(selection, nodes[object])
                                            Explorer.ViewNode(nodes[object])
                                        end
                                    end)
                                end)
                            else
                                if cptsOnMouseClick ~= nil then
                                    cptsOnMouseClick.Disconnect(cptsOnMouseClick)

                                    cptsOnMouseClick = nil
                                end
                            end
                        end,
                    })
                    Main.CreateApp({
                        Name = 'Console',
                        IconMap = Main.LargeIcons,
                        Icon = 'Output',
                        Window = Console.Window,
                    })
                    Main.CreateApp({
                        Name = 'Save Instance',
                        IconMap = Main.LargeIcons,
                        Icon = 'Watcher',
                        Window = SaveInstance.Window,
                    })
                    Lib.ShowGui(gui)
                end
                Main.SetupFilesystem = function()
                    if not env.writefile or not env.makefolder then
                        return
                    end

                    local writefile, makefolder = env.writefile, env.makefolder

                    makefolder('dex')
                    makefolder('dex/assets')
                    makefolder('dex/saved')
                    makefolder('dex/plugins')
                    makefolder('dex/ModuleCache')
                end
                Main.LocalDepsUpToDate = function()
                    return Main.DepsVersionData and Main.ClientVersion == Main.DepsVersionData[1]
                end
                Main.Init = function()
                    Main.Elevated = pcall(function()
                        local a = service.CoreGui:GetFullName()
                    end)

                    Main.InitEnv()
                    Main.LoadSettings()
                    Main.SetupFilesystem()

                    local intro = Main.CreateIntro('Initializing Library')

                    Lib = Main.LoadModule('Lib')

                    Lib.FastWait()

                    Main.MiscIcons = Lib.IconMap.new('http://www.roblox.com/asset/?id=6511490623', 256, 256, 16, 16)

                    Main.MiscIcons:SetDict({
                        Reference = 0,
                        Cut = 1,
                        Cut_Disabled = 2,
                        Copy = 3,
                        Copy_Disabled = 4,
                        Paste = 5,
                        Paste_Disabled = 6,
                        Delete = 7,
                        Delete_Disabled = 8,
                        Group = 9,
                        Group_Disabled = 10,
                        Ungroup = 11,
                        Ungroup_Disabled = 12,
                        TeleportTo = 13,
                        Rename = 14,
                        JumpToParent = 15,
                        ExploreData = 16,
                        Save = 17,
                        CallFunction = 18,
                        CallRemote = 19,
                        Undo = 20,
                        Undo_Disabled = 21,
                        Redo = 22,
                        Redo_Disabled = 23,
                        Expand_Over = 24,
                        Expand = 25,
                        Collapse_Over = 26,
                        Collapse = 27,
                        SelectChildren = 28,
                        SelectChildren_Disabled = 29,
                        InsertObject = 30,
                        ViewScript = 31,
                        AddStar = 32,
                        RemoveStar = 33,
                        Script_Disabled = 34,
                        LocalScript_Disabled = 35,
                        Play = 36,
                        Pause = 37,
                        Rename_Disabled = 38,
                    })

                    Main.LargeIcons = Lib.IconMap.new('rbxassetid://6579106223', 256, 256, 32, 32)

                    Main.LargeIcons:SetDict({
                        Explorer = 0,
                        Properties = 1,
                        Script_Viewer = 2,
                        Watcher = 3,
                        Output = 4,
                    })
                    intro.SetProgress('Fetching Roblox Version', 0.2)

                    if Main.Elevated then
                        local fileVer = Lib.ReadFile('dex/deps_version.dat')

                        Main.ClientVersion = Version()

                        if fileVer then
                            Main.DepsVersionData = string.split(fileVer, '\n')

                            if Main.LocalDepsUpToDate() then
                                Main.RobloxVersion = Main.DepsVersionData[2]
                            end
                        end

                        Main.RobloxVersion = Main.RobloxVersion or oldgame.HttpGet(oldgame, 'http://setup.roblox.com/versionQTStudio')

                        if #Main.RobloxVersion < 1 then
                            Main.RobloxVersion = oldgame.HttpGet(oldgame, 
[[https://raw.githubusercontent.com/infyiff/backup/refs/heads/main/deps_version.dat]]):gsub('%s+', '')
                        end
                    end

                    intro.SetProgress('Fetching API', 0.35)

                    API = Main.FetchAPI()

                    Lib.FastWait()
                    intro.SetProgress('Fetching RMD', 0.5)

                    RMD = Main.FetchRMD()

                    Lib.FastWait()

                    if Main.Elevated and env.writefile and not Main.LocalDepsUpToDate() then
                        env.writefile('dex/deps_version.dat', Main.ClientVersion .. '\n' .. Main.RobloxVersion)
                        env.writefile('dex/rbx_api.dat', Main.RawAPI)
                        env.writefile('dex/rbx_rmd.dat', Main.RawRMD)
                    end

                    intro.SetProgress('Loading Modules', 0.75)
                    Main.AppControls.Lib.InitDeps(Main.GetInitDeps())
                    Main.LoadModules()
                    Lib.FastWait()
                    intro.SetProgress('Initializing Modules', 0.9)
                    Explorer.Init()
                    Properties.Init()
                    ScriptViewer.Init()
                    Console.Init()
                    SaveInstance.Init()
                    Lib.FastWait()
                    intro.SetProgress('Complete', 1)
                    coroutine.wrap(function()
                        Lib.FastWait(1.25)
                        intro.Close()
                    end)()
                    Lib.Window.Init()
                    Main.CreateMainGui()
                    Explorer.Window:Show({
                        Align = 'right',
                        Pos = 1,
                        Size = 0.5,
                        Silent = true,
                    })
                    Properties.Window:Show({
                        Align = 'right',
                        Pos = 2,
                        Size = 0.5,
                        Silent = true,
                    })
                    Lib.DeferFunc(function()
                        Lib.Window.ToggleSide('right')
                    end)
                end

                return Main
            end)()

            Main.Init()

            return true
        end

        __DARKLUA_BUNDLE_MODULES.c = function()
            local v = __DARKLUA_BUNDLE_MODULES.cache.c

            if not v then
                v = {
                    c = __modImpl(),
                }
                __DARKLUA_BUNDLE_MODULES.cache.c = v
            end

            return v.c
        end
    end
    do
        local function __modImpl()
            local __DARKLUA_TO_STR = tostring

            if getgenv().SimpleSpyExecuted and type(getgenv().SimpleSpyShutdown) == 'function' then
                getgenv().SimpleSpyShutdown()
            end

            local realconfigs = {
                logcheckcaller = true,
                autoblock = false,
                funcEnabled = true,
                advancedinfo = false,
            }
            local configs = newproxy(true)
            local configsmetatable = getmetatable(configs)

            configsmetatable.__index = function(self, index)
                return realconfigs[index]
            end

            local oth = syn and syn.oth or oth or Volcano and Volcano.oth
            local unhook = oth and oth.unhook
            local hook = oth and oth.hook
            local lower = string.lower
            local byte = string.byte
            local round = math.round
            local running = coroutine.running
            local resume = coroutine.resume
            local status = coroutine.status
            local yield = coroutine.yield
            local create = coroutine.create
            local close = coroutine.close
            local OldDebugId = game.GetDebugId
            local info = debug.info
            local IsA = game.IsA
            local tostring = tostring
            local tonumber = tonumber
            local delay = task.delay
            local spawn = task.spawn
            local clear = table.clear
            local clone = table.clone

            local function blankfunction(...)
                return ...
            end

            local get_thread_identity = (syn and syn.get_thread_identity) or getidentity or getthreadidentity
            local set_thread_identity = (syn and syn.set_thread_identity) or setidentity
            local islclosure = islclosure or is_l_closure
            local threadfuncs = (get_thread_identity and set_thread_identity and true) or false
            local getinfo = getinfo or blankfunction
            local getupvalues = getupvalues or debug.getupvalues or blankfunction
            local getconstants = getconstants or debug.getconstants or blankfunction
            local getcustomasset = getsynasset or getcustomasset
            local getcallingscript = getcallingscript or blankfunction
            local newcclosure = newcclosure or blankfunction
            local clonefunction = clonefunction or blankfunction
            local cloneref = cloneref or blankfunction
            local request = request or syn and syn.request
            local makewritable = makewriteable or function(tbl)
                setreadonly(tbl, false)
            end
            local makereadonly = makereadonly or function(tbl)
                setreadonly(tbl, true)
            end
            local isreadonly = isreadonly or table.isfrozen
            local setclipboard = setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set) or function(
                ...
            )
                return ErrorPrompt('Attempted to set clipboard: ' .. (...), true)
            end
            local hookmetamethod = hookmetamethod or (makewriteable and makereadonly and getrawmetatable) and function(
                obj,
                metamethod,
                func
            )
                local old = getrawmetatable(obj)

                if hookfunction then
                    return hookfunction(old[metamethod], func)
                else
                    local oldmetamethod = old[metamethod]

                    makewriteable(old)

                    old[metamethod] = func

                    makereadonly(old)

                    return oldmetamethod
                end
            end

            local function Create(instance, properties, children)
                local obj = Instance.new(instance)

                for i, v in next, properties or {}do
                    obj[i] = v

                    for _, child in next, children or {}do
                        child.Parent = obj
                    end
                end

                return obj
            end
            local function SafeGetService(service)
                return cloneref(game.GetService(game, service))
            end
            local function Search(logtable, tbl)
                table.insert(logtable, tbl)

                for i, v in tbl do
                    if type(v) == 'table' then
                        return table.find(logtable, v) ~= nil or Search(v)
                    end
                end
            end
            local function IsCyclicTable(tbl)
                local checkedtables = {}

                local function SearchTable(tbl)
                    table.insert(checkedtables, tbl)

                    for i, v in next, tbl do
                        if type(v) == 'table' then
                            return table.find(checkedtables, v) and true or SearchTable(v)
                        end
                    end
                end

                return SearchTable(tbl)
            end
            local function deepclone(args, copies)
                local copy

                copies = copies or {}

                if type(args) == 'table' then
                    if copies[args] then
                        copy = copies[args]
                    else
                        copy = {}
                        copies[args] = copy

                        for i, v in next, args do
                            copy[deepclone(i, copies)] = deepclone(v, copies)
                        end
                    end
                elseif typeof(args) == 'Instance' then
                    copy = cloneref(args)
                else
                    copy = args
                end

                return copy
            end
            local function rawtostring(userdata)
                if type(userdata) == 'table' or typeof(userdata) == 'userdata' then
                    local rawmetatable = getrawmetatable(userdata)
                    local cachedstring = rawmetatable and rawget(rawmetatable, '__tostring')

                    if cachedstring then
                        local wasreadonly = isreadonly(rawmetatable)

                        if wasreadonly then
                            makewritable(rawmetatable)
                        end

                        rawset(rawmetatable, '__tostring', nil)

                        local safestring = tostring(userdata)

                        rawset(rawmetatable, '__tostring', cachedstring)

                        if wasreadonly then
                            makereadonly(rawmetatable)
                        end

                        return safestring
                    end
                end

                return tostring(userdata)
            end

            local CoreGui = SafeGetService('CoreGui')
            local Players = SafeGetService('Players')
            local RunService = SafeGetService('RunService')
            local UserInputService = SafeGetService('UserInputService')
            local TweenService = SafeGetService('TweenService')
            local ContentProvider = SafeGetService('ContentProvider')
            local TextService = SafeGetService('TextService')
            local http = SafeGetService('HttpService')
            local GuiInset = (game.GetService(game, 'GuiService'):GetGuiInset())

            local function jsone(str)
                return http.JSONEncode(http, str)
            end
            local function jsond(str)
                local suc, err = pcall(http.JSONDecode, http, str)

                return suc and err or suc
            end

            ErrorPrompt = function(Message, state)
                if getrenv then
                    local ErrorPrompt = getrenv().require(CoreGui.WaitForChild(CoreGui, 'RobloxGui'):WaitForChild('Modules'):WaitForChild('ErrorPrompt'))
                    local prompt = ErrorPrompt.new('Default', {HideErrorCode = true})
                    local ErrorStoarge = Create('ScreenGui', {
                        Parent = CoreGui,
                        ResetOnSpawn = false,
                    })
                    local thread = state and running()

                    prompt.setParent(prompt, ErrorStoarge)
                    prompt.setErrorTitle(prompt, 'Simple Spy V3 Error')
                    prompt.updateButtons(prompt, {
                        {
                            Text = 'Proceed',
                            Callback = function()
                                prompt._close(prompt)
                                ErrorStoarge.Destroy(ErrorStoarge)

                                if thread then
                                    resume(thread)
                                end
                            end,
                            Primary = true,
                        },
                    }, 'Default')
                    prompt._open(prompt, Message)

                    if thread then
                        yield(thread)
                    end
                else
                    warn(Message)
                end
            end

            local cloneref = cloneref or function(...)
                return ...
            end
            local TextService = cloneref(game.GetService(game, 'TextService'))
            local RunService = cloneref(game.GetService(game, 'RunService'))
            local Highlight = {}
            local parentFrame
            local scrollingFrame
            local textFrame
            local lineNumbersFrame
            local lines = {}
            local tableContents = {}
            local line = 0
            local largestX = 0
            local lineSpace = 15
            local font = Enum.Font.Ubuntu
            local textSize = 14
            local backgroundColor = Color3.fromRGB(40, 44, 52)
            local operatorColor = Color3.fromRGB(187, 85, 255)
            local functionColor = Color3.fromRGB(97, 175, 239)
            local stringColor = Color3.fromRGB(152, 195, 121)
            local numberColor = Color3.fromRGB(209, 154, 102)
            local booleanColor = numberColor
            local objectColor = Color3.fromRGB(229, 192, 123)
            local defaultColor = Color3.fromRGB(224, 108, 117)
            local commentColor = Color3.fromRGB(148, 148, 148)
            local lineNumberColor = commentColor
            local genericColor = Color3.fromRGB(240, 240, 240)
            local operators = {
                '^(function)[^%w_]',
                '^(local)[^%w_]',
                '^(if)[^%w_]',
                '^(for)[^%w_]',
                '^(while)[^%w_]',
                '^(then)[^%w_]',
                '^(do)[^%w_]',
                '^(else)[^%w_]',
                '^(elseif)[^%w_]',
                '^(return)[^%w_]',
                '^(end)[^%w_]',
                '^(continue)[^%w_]',
                '^(and)[^%w_]',
                '^(not)[^%w_]',
                '^(or)[^%w_]',
                '[^%w_](or)[^%w_]',
                '[^%w_](and)[^%w_]',
                '[^%w_](not)[^%w_]',
                '[^%w_](continue)[^%w_]',
                '[^%w_](function)[^%w_]',
                '[^%w_](local)[^%w_]',
                '[^%w_](if)[^%w_]',
                '[^%w_](for)[^%w_]',
                '[^%w_](while)[^%w_]',
                '[^%w_](then)[^%w_]',
                '[^%w_](do)[^%w_]',
                '[^%w_](else)[^%w_]',
                '[^%w_](elseif)[^%w_]',
                '[^%w_](return)[^%w_]',
                '[^%w_](end)[^%w_]',
            }
            local strings = {
                {
                    '"',
                    '"',
                },
                {
                    "'",
                    "'",
                },
                {
                    '%[%[',
                    '%]%]',
                    true,
                },
            }
            local comments = {
                '%-%-%[%[[^%]%]]+%]?%]?',
                '(%-%-[^\n]+)',
            }
            local functions = {
                '[^%w_]([%a_][%a%d_]*)%s*%(',
                '^([%a_][%a%d_]*)%s*%(',
                '[:%.%(%[%p]([%a_][%a%d_]*)%s*%(',
            }
            local numbers = {
                '[^%w_](%d+[eE]?%d*)',
                '[^%w_](%.%d+[eE]?%d*)',
                '[^%w_](%d+%.%d+[eE]?%d*)',
                '^(%d+[eE]?%d*)',
                '^(%.%d+[eE]?%d*)',
                '^(%d+%.%d+[eE]?%d*)',
            }
            local booleans = {
                '[^%w_](true)',
                '^(true)',
                '[^%w_](false)',
                '^(false)',
                '[^%w_](nil)',
                '^(nil)',
            }
            local objects = {
                '[^%w_:]([%a_][%a%d_]*):',
                '^([%a_][%a%d_]*):',
            }
            local other = {
                '[^_%s%w=>~<%-%+%*]',
                '>',
                '~',
                '<',
                '%-',
                '%+',
                '=',
                '%*',
            }
            local offLimits = {}

            isOffLimits = function(index)
                for _, v in next, offLimits do
                    if index >= v[1] and index <= v[2] then
                        return true
                    end
                end

                return false
            end
            gfind = function(str, pattern)
                return coroutine.wrap(function()
                    local start = 0

                    while true do
                        local findStart, findEnd = str.find(str, pattern, start)

                        if findStart and findEnd ~= #str then
                            start = findEnd + 1

                            coroutine.yield(findStart, findEnd)
                        else
                            return
                        end
                    end
                end)
            end
            renderComments = function()
                local str = Highlight.getRaw(Highlight)
                local step = 1

                for _, pattern in next, comments do
                    for commentStart, commentEnd in gfind(str, pattern)do
                        if step % 1000 == 0 then
                            RunService.Heartbeat:Wait()
                        end

                        step = step + 1

                        if not isOffLimits(commentStart) then
                            for i = commentStart, commentEnd do
                                table.insert(offLimits, {commentStart, commentEnd})

                                if tableContents[i] then
                                    tableContents[i].Color = commentColor
                                end
                            end
                        end
                    end
                end
            end
            renderStrings = function()
                local stringType
                local stringEndType
                local ignoreBackslashes
                local stringStart
                local stringEnd
                local offLimitsIndex
                local skip = false

                for i, char in next, tableContents do
                    if stringType then
                        char.Color = stringColor

                        local possibleString = ''

                        for k = stringStart, i do
                            possibleString = possibleString .. tableContents[k].Char
                        end

                        if char.Char:match(stringEndType) and not not ignoreBackslashes or (possibleString.match(possibleString, '(\\*)' .. stringEndType .. '$') and #possibleString.match(possibleString, '(\\*)' .. stringEndType .. '$') % 2 == 0) then
                            skip = true
                            stringType = nil
                            stringEndType = nil
                            ignoreBackslashes = nil
                            stringEnd = i
                            offLimits[offLimitsIndex][2] = stringEnd
                        end
                    end
                    if not skip then
                        for _, v in next, strings do
                            if char.Char:match(v[1]) and not isOffLimits(i) then
                                stringType = v[1]
                                stringEndType = v[2]
                                ignoreBackslashes = v[3]
                                char.Color = stringColor
                                stringStart = i
                                offLimitsIndex = #offLimits + 1
                                offLimits[offLimitsIndex] = {
                                    stringStart,
                                    math.huge,
                                }
                            end
                        end
                    end

                    skip = false
                end
            end
            highlightPattern = function(patternArray, color)
                local str = Highlight.getRaw(Highlight)
                local step = 1

                for _, pattern in next, patternArray do
                    for findStart, findEnd in gfind(str, pattern)do
                        if step % 1000 == 0 then
                            RunService.Heartbeat:Wait()
                        end

                        step = step + 1

                        if not isOffLimits(findStart) and not isOffLimits(findEnd) then
                            for i = findStart, findEnd do
                                if tableContents[i] then
                                    tableContents[i].Color = color
                                end
                            end
                        end
                    end
                end
            end
            autoEscape = function(s)
                for i = 0, #s do
                    local char = string.sub(s, i, i)

                    if char == '<' then
                        s = string.format('%s%s%s', string.sub(s, 0, i - 1), '&lt;', string.sub(s, i + 1, 
-1))
                        i = i + 3
                    elseif char == '>' then
                        s = string.format('%s%s%s', string.sub(s, 0, i - 1), '&gt;', string.sub(s, i + 1, 
-1))
                        i = i + 3
                    elseif char == '"' then
                        s = string.format('%s%s%s', string.sub(s, 0, i - 1), '&quot;', string.sub(s, i + 1, 
-1))
                        i = i + 5
                    elseif char == "'" then
                        s = string.format('%s%s%s', string.sub(s, 0, i - 1), '&apos;', string.sub(s, i + 1, 
-1))
                        i = i + 5
                    elseif char == '&' then
                        s = string.format('%s%s%s', string.sub(s, 0, i - 1), '&amp;', string.sub(s, i + 1, 
-1))
                        i = i + 4
                    end
                end

                return s
            end
            render = function()
                offLimits = {}
                lines = {}

                textFrame.ClearAllChildren(textFrame)
                lineNumbersFrame.ClearAllChildren(lineNumbersFrame)
                highlightPattern(functions, functionColor)
                highlightPattern(numbers, numberColor)
                highlightPattern(operators, operatorColor)
                highlightPattern(objects, objectColor)
                highlightPattern(booleans, booleanColor)
                highlightPattern(other, genericColor)
                renderComments()
                renderStrings()

                local lastColor
                local lineStr = ''
                local rawStr = ''

                largestX = 0
                line = 1

                for i = 1, #tableContents + 1 do
                    local char = tableContents[i]

                    if i == #tableContents + 1 or char.Char == '\n' then
                        lineStr = lineStr .. (lastColor and '</font>' or '')

                        local lineText = Instance.new('TextLabel')
                        local x = TextService.GetTextSize(TextService, rawStr, textSize, font, Vector2.new(math.huge, math.huge)).X + 60

                        if x > largestX then
                            largestX = x
                        end

                        lineText.TextXAlignment = Enum.TextXAlignment.Left
                        lineText.TextYAlignment = Enum.TextYAlignment.Top
                        lineText.Position = UDim2.new(0, 0, 0, line * lineSpace - lineSpace / 2)
                        lineText.Size = UDim2.new(0, x, 0, textSize)
                        lineText.RichText = true
                        lineText.Font = font
                        lineText.TextSize = textSize
                        lineText.BackgroundTransparency = 1
                        lineText.Text = lineStr
                        lineText.Parent = textFrame

                        if i ~= #tableContents + 1 then
                            local lineNumber = Instance.new('TextLabel')

                            lineNumber.Text = line
                            lineNumber.Font = font
                            lineNumber.TextSize = textSize
                            lineNumber.Size = UDim2.new(1, 0, 0, lineSpace)
                            lineNumber.TextXAlignment = Enum.TextXAlignment.Right
                            lineNumber.TextColor3 = lineNumberColor
                            lineNumber.Position = UDim2.new(0, 0, 0, line * lineSpace - lineSpace / 2)
                            lineNumber.BackgroundTransparency = 1
                            lineNumber.Parent = lineNumbersFrame
                        end

                        lineStr = ''
                        rawStr = ''
                        lastColor = nil
                        line = line + 1

                        updateZIndex()
                        updateCanvasSize()

                        if line % 5 == 0 then
                            RunService.Heartbeat:Wait()
                        end
                    elseif char.Char == ' ' then
                        lineStr = lineStr .. char.Char
                        rawStr = rawStr .. char.Char
                    elseif char.Char == '\t' then
                        lineStr = lineStr .. string.rep(' ', 4)
                        rawStr = rawStr .. char.Char
                    else
                        if char.Color == lastColor then
                            lineStr = lineStr .. autoEscape(char.Char)
                        else
                            lineStr = lineStr .. string.format('%s<font color="rgb(%d,%d,%d)">', lastColor and '</font>' or '', char.Color.R * 255, char.Color.G * 255, char.Color.B * 255)
                            lineStr = lineStr .. autoEscape(char.Char)
                            lastColor = char.Color
                        end

                        rawStr = rawStr .. char.Char
                    end
                end

                updateZIndex()
                updateCanvasSize()
            end
            onFrameSizeChange = function()
                local newSize = parentFrame.AbsoluteSize

                scrollingFrame.Size = UDim2.new(0, newSize.X, 0, newSize.Y)
            end
            updateCanvasSize = function()
                scrollingFrame.CanvasSize = UDim2.new(0, largestX, 0, line * lineSpace)
            end
            updateZIndex = function()
                for _, v in next, parentFrame.GetDescendants(parentFrame)do
                    if v.IsA(v, 'GuiObject') then
                        v.ZIndex = parentFrame.ZIndex
                    end
                end
            end
            Highlight.init = function(self, frame)
                if typeof(frame) == 'Instance' and frame.IsA(frame, 'Frame') then
                    frame.ClearAllChildren(frame)

                    parentFrame = frame
                    scrollingFrame = Instance.new('ScrollingFrame')
                    textFrame = Instance.new('Frame')
                    lineNumbersFrame = Instance.new('Frame')

                    local parentSize = frame.AbsoluteSize

                    scrollingFrame.Size = UDim2.new(0, parentSize.X, 0, parentSize.Y)
                    scrollingFrame.BackgroundColor3 = backgroundColor
                    scrollingFrame.BorderSizePixel = 0
                    scrollingFrame.ScrollBarThickness = 4
                    textFrame.Size = UDim2.new(1, -40, 1, 0)
                    textFrame.Position = UDim2.new(0, 40, 0, 0)
                    textFrame.BackgroundTransparency = 1
                    lineNumbersFrame.Size = UDim2.new(0, 25, 1, 0)
                    lineNumbersFrame.BackgroundTransparency = 1
                    textFrame.Parent = scrollingFrame
                    lineNumbersFrame.Parent = scrollingFrame
                    scrollingFrame.Parent = parentFrame

                    render()
                    parentFrame.GetPropertyChangedSignal(parentFrame, 'AbsoluteSize'):Connect(onFrameSizeChange)
                    parentFrame.GetPropertyChangedSignal(parentFrame, 'ZIndex'):Connect(updateZIndex)
                else
                    error('Initialization error: argument ' .. typeof(frame) .. ' is not a Frame Instance')
                end
            end
            Highlight.setRaw = function(self, raw)
                raw = raw .. '\n'
                tableContents = {}

                local line = 1

                for i = 1, #raw do
                    table.insert(tableContents, {
                        Char = raw.sub(raw, i, i),
                        Color = defaultColor,
                    })

                    if i % 1000 == 0 then
                        RunService.Heartbeat:Wait()
                    end
                end

                render()
            end
            Highlight.getRaw = function(self)
                local result = ''

                for _, char in next, tableContents do
                    result = result .. char.Char
                end

                return result
            end
            Highlight.getString = function(self)
                local result = ''

                for _, char in next, tableContents do
                    result = result .. char.Char:sub(1, 1)
                end

                return result
            end
            Highlight.getTable = function(self)
                return tableContents
            end
            Highlight.getSize = function(self)
                return #tableContents
            end
            Highlight.getLine = function(self, line)
                local currentline = 0
                local rightLine = false
                local result = ''

                for _, v in next, tableContents do
                    currentline = currentline + 1

                    if v.Char == '\n' and not rightLine then
                        rightLine = true
                    end
                    if rightLine and v.Char ~= '\n' then
                        result = result .. v.Char
                    elseif rightLine then
                        break
                    end
                end

                return result
            end
            Highlight.setLine = function(self, line, text)
                if #tableContents and line >= tableContents[#tableContents].Line then
                    for i = tableContents[#tableContents].Line, line do
                        table.insert(tableContents, {
                            Char = '\n',
                            Line = i,
                            Color = defaultColor,
                        })

                        local str = Highlight.getRaw(Highlight)

                        str = str.sub(str, 0, #str) .. text

                        Highlight.setRaw(Highlight, str)

                        return
                    end
                elseif not #tableContents then
                    return
                end

                local str = Highlight.getRaw(Highlight)
                local lastStart = 0
                local currentLine = 0

                for i in gfind(str, '\n')do
                    currentLine = currentLine + 1

                    if line == currentLine then
                        str = str.sub(str, 0, lastStart) .. text .. str.sub(str, i, #str)

                        Highlight.setRaw(Highlight, str)

                        return
                    end
                end

                error('Unable to set line')
            end
            Highlight.insertLine = function(self, line, text)
                if #tableContents and line >= tableContents[#tableContents].Line then
                    Highlight.setLine(Highlight, line, text)
                elseif not #tableContents then
                    return
                end

                local str = Highlight.getRaw(Highlight)
                local lastStart = 0
                local currentLine = 0

                for i in gfind(str, '\n')do
                    currentLine = currentLine + 1

                    if line == currentLine then
                        str = str.sub(str, 0, lastStart) .. '\n' .. text .. '\n' .. str.sub(str, i, #str)

                        Highlight.setRaw(Highlight, str)

                        return
                    end
                end

                error('Unable to insert line')
            end

            local constructor = {}

            constructor.new = function(...)
                local class = Highlight
                local new = {}

                class.__index = class

                setmetatable(new, class)
                new.init(new, ...)

                return new
            end

            local LazyFix = (function()
                local assert, type, typeof, rawset, getmetatable, tostring = assert, type, typeof, rawset, getmetatable, tostring
                local print, warn, pack, unpack, next = print, warn, table.pack, unpack, next
                local IsSharedFrozen, SharedSize = SharedTable.isFrozen, SharedTable.size
                local bufftostring, fromstring, readu8 = buffer.tostring, buffer.fromstring, buffer.readu8
                local isfrozen, concat = table.isfrozen, table.concat
                local FindService = game.FindService
                local info = debug.info
                local IsClient = game.GetService(game, 'RunService'):IsClient()
                local Players = game.GetService(game, 'Players')
                local inf, neginf = math.huge, -math.huge
                local DefaultMethods = {}
                local Methods = setmetatable({}, {__index = DefaultMethods})
                local Class = {
                    Methods = Methods,
                    __tostringUnsupported = false,
                    __Serializeinf = false,
                }
                local Keywords = {
                    ['local'] = '"local"',
                    ['function'] = '"function"',
                    ['and'] = '"and"',
                    ['break'] = '"break"',
                    ['not'] = '"not"',
                    ['or'] = '"or"',
                    ['else'] = '"else"',
                    ['elseif'] = '"elseif"',
                    ['if'] = '"if"',
                    ['then'] = '"then"',
                    ['until'] = '"until"',
                    ['repeat'] = '"repeat"',
                    ['while'] = '"while"',
                    ['do'] = '"do"',
                    ['for'] = '"for"',
                    ['in'] = '"in"',
                    ['end'] = '"end"',
                    ['return'] = '"return"',
                    ['true'] = '"true"',
                    ['false'] = '"false"',
                    ['nil'] = '"nil"',
                }
                local islclosure = islclosure or function(Function)
                    return info(Function, 'l') ~= -1
                end
                local DefaultVectors, DefaultCFrames = {}, {}

                do
                    local function ExtractTypes(From, Path, DataType, Storage)
                        local Storage = Storage or setmetatable({}, {
                            __mode = 'k',
                        })

                        for i, v in next, From do
                            if typeof(v) == DataType and not Storage[v] and type(i) == 'string' and not Keywords[i] and not i.match(i, '[a-Z_][a-Z_0-9]') then
                                Storage[v] = Path .. '.' .. i
                            end
                        end

                        return Storage
                    end

                    ExtractTypes(vector, 'vector', 'Vector3', DefaultVectors)
                    ExtractTypes(Vector3, 'Vector3', 'Vector3', DefaultVectors)
                    ExtractTypes(CFrame, 'CFrame', 'CFrame', DefaultCFrames)

                    Class.DefaultTypes = {
                        Vector3 = DefaultVectors,
                        CFrame = DefaultCFrames,
                    }
                end

                local function Serialize(
                    DataStructure,
                    format,
                    indents,
                    CyclicList,
                    InComment
                )
                    local DataHandler = Methods[typeof(DataStructure)]

                    return DataHandler and DataHandler(DataStructure, format, indents, CyclicList, InComment) or 'nil --[' .. (not InComment and '' or '=') .. '[ Unsupported Data Type | ' .. typeof(DataStructure) .. (not Class.__tostringUnsupported and '' or ' | ' .. tostring(DataStructure)) .. ' ]' .. (not InComment and '' or '=') .. ']'
                end
                local function ValidateSharedTableIndex(Index)
                    local IsKeyword = type(Index) == 'number' and Index or Keywords[Index]

                    if not IsKeyword then
                        if Index ~= '' then
                            local IndexBuffer = fromstring(Index)
                            local FirstByte = readu8(IndexBuffer, 0)

                            if FirstByte >= 97 and FirstByte <= 122 or FirstByte >= 65 and FirstByte <= 90 or FirstByte == 95 then
                                for i = 1, #Index - 1 do
                                    local Byte = readu8(IndexBuffer, i)

                                    if not ((Byte >= 97 and Byte <= 122) or (Byte >= 65 and Byte <= 90) or Byte == 95 or (Byte >= 48 and Byte <= 57)) then
                                        return '[' .. Methods.string(Index) .. '] = '
                                    end
                                end

                                return Index .. ' = '
                            end

                            return '[' .. Methods.string(Index) .. '] = '
                        end

                        return '[""] = '
                    end

                    return '[' .. IsKeyword .. '] = '
                end
                local function ValidateIndex(Index)
                    local IndexType = type(Index)
                    local IsNumber = IndexType == 'number'

                    if IsNumber or IndexType == 'string' then
                        local IsKeyword = IsNumber and Index or Keywords[Index]

                        if not IsKeyword then
                            if Index ~= '' then
                                local IndexBuffer = fromstring(Index)
                                local FirstByte = readu8(IndexBuffer, 0)

                                if FirstByte >= 97 and FirstByte <= 122 or FirstByte >= 65 and FirstByte <= 90 or FirstByte == 95 then
                                    for i = 1, #Index - 1 do
                                        local Byte = readu8(IndexBuffer, i)

                                        if not ((Byte >= 97 and Byte <= 122) or (Byte >= 65 and Byte <= 90) or Byte == 95 or (Byte >= 48 and Byte <= 57)) then
                                            return '[' .. Methods.string(Index) .. '] = '
                                        end
                                    end

                                    return Index .. ' = '
                                end

                                return '[' .. Methods.string(Index) .. '] = '
                            end

                            return '[""] = '
                        end

                        return '[' .. IsKeyword .. '] = '
                    end

                    return '[' .. (IndexType ~= 'table' and Serialize(Index, false, '') or '"<Table> (table: ' .. (getmetatable(Index) == nil and tostring(Index):sub(8) or '@metatable') .. ')"') .. '] = '
                end

                DefaultMethods.Axes = function(Axes)
                    return 'Axes.new(' .. concat({
                        Axes.X and 'Enum.Axis.X' or nil,
                        Axes.Y and 'Enum.Axis.Y' or nil,
                        Axes.Z and 'Enum.Axis.Z' or nil,
                    }, ', ') .. ')'
                end
                DefaultMethods.BrickColor = function(Color)
                    return 'BrickColor.new(' .. Color.Number .. ')'
                end
                DefaultMethods.CFrame = function(CFrame)
                    local Generation = DefaultCFrames[CFrame]

                    if not Generation then
                        local SerializeNumber = Methods.number
                        local x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22 = CFrame.GetComponents(CFrame)

                        return 'CFrame.new(' .. SerializeNumber(x) .. ', ' .. SerializeNumber(y) .. ', ' .. SerializeNumber(z) .. ', ' .. SerializeNumber(R00) .. ', ' .. SerializeNumber(R01) .. ', ' .. SerializeNumber(R02) .. ', ' .. SerializeNumber(R10) .. ', ' .. SerializeNumber(R11) .. ', ' .. SerializeNumber(R12) .. ', ' .. SerializeNumber(R20) .. ', ' .. SerializeNumber(R21) .. ', ' .. SerializeNumber(R22) .. ')'
                    end

                    return Generation
                end

                do
                    local DefaultCatalogSearchParams = CatalogSearchParams.new()

                    DefaultMethods.CatalogSearchParams = function(
                        Params,
                        format,
                        indents
                    )
                        if DefaultCatalogSearchParams ~= Params then
                            local formatspace = format and '\n' .. indents or ' '
                            local SerializeString = Methods.string
                            local SearchKeyword = Params.SearchKeyword
                            local MinPrice = Params.MinPrice
                            local MaxPrice = Params.MaxPrice
                            local SortType = Params.SortType
                            local SortAggregation = Params.SortAggregation
                            local CategoryFilter = Params.CategoryFilter
                            local SalesTypeFilter = Params.SalesTypeFilter
                            local BundleTypes = Params.BundleTypes
                            local AssetTypes = Params.AssetTypes
                            local CreatorName = Params.CreatorName
                            local CreatorType = Params.CreatorType
                            local CreatorId = Params.CreatorId
                            local Limit = Params.Limit

                            return '(function(Param : CatalogSearchParams)' .. formatspace .. (SearchKeyword ~= '' and '\tParam.SearchKeyword = ' .. SerializeString(SearchKeyword) .. formatspace or '') .. (MinPrice ~= 0 and '\tParam.MinPrice = ' .. MinPrice .. formatspace or '') .. (MaxPrice ~= 2147483647 and '\tParam.MaxPrice = ' .. MaxPrice .. formatspace or '') .. (SortType ~= Enum.CatalogSortType.Relevance and '\tParam.SortType = Enum.CatalogSortType.' .. SortType.Name .. formatspace or '') .. (SortAggregation ~= Enum.CatalogSortAggregation.AllTime and '\tParam.SortAggregation = Enum.CatalogSortAggregation.' .. SortAggregation.Name .. formatspace or '') .. (CategoryFilter ~= Enum.CatalogCategoryFilter.None and '\tParam.CategoryFilter = Enum.CatalogCategoryFilter.' .. CategoryFilter.Name .. formatspace or '') .. (SalesTypeFilter ~= Enum.SalesTypeFilter.All and '\tParam.SalesTypeFilter = Enum.SalesTypeFilter.' .. SalesTypeFilter.Name .. formatspace or '') .. (#BundleTypes > 0 and '\tParam.BundleTypes = ' .. Methods.table(BundleTypes, false, '') .. formatspace or '') .. (#AssetTypes > 0 and '\tParam.AssetTypes = ' .. Methods.table(AssetTypes, false, '') .. formatspace or '') .. (Params.IncludeOffSale and '\tParams.IncludeOffSale = true' .. formatspace or '') .. (CreatorName ~= '' and '\tParams.CreatorName = ' .. SerializeString(CreatorName) .. formatspace or '') .. (CreatorType ~= Enum.CreatorTypeFilter.All and '\tParam.CreatorType = Enum.CreatorTypeFilter.' .. CreatorType.Name .. formatspace or '') .. (CreatorId ~= 0 and '\tParams.CreatorId = ' .. CreatorId .. formatspace or '') .. (Limit ~= 30 and '\tParams.Limit = ' .. Limit .. formatspace or '') .. '\treturn Params' .. formatspace .. 'end)(CatalogSearchParams.new())'
                        end

                        return 'CatalogSearchParams.new()'
                    end
                end

                DefaultMethods.Color3 = function(Color)
                    local SerializeNumber = Methods.number

                    return 'Color3.new(' .. SerializeNumber(Color.R) .. ', ' .. SerializeNumber(Color.G) .. ', ' .. SerializeNumber(Color.B) .. ')'
                end
                DefaultMethods.ColorSequence = function(Sequence)
                    local SerializeColorSequenceKeypoint = Methods.ColorSequenceKeypoint
                    local Keypoints = Sequence.Keypoints
                    local Size = #Keypoints
                    local Serialized = ''

                    for i = 1, Size - 1 do
                        Serialized = Serialized .. SerializeColorSequenceKeypoint(Keypoints[i]) .. ', '
                    end

                    return 'ColorSequence.new({' .. Serialized .. SerializeColorSequenceKeypoint(Keypoints[Size]) .. '})'
                end
                DefaultMethods.ColorSequenceKeypoint = function(KeyPoint)
                    return 'ColorSequenceKeypoint.new(' .. Methods.number(KeyPoint.Time) .. ', ' .. Methods.Color3(KeyPoint.Value) .. ')'
                end
                DefaultMethods.Content = function(content)
                    local Uri = content.Uri

                    return Uri and 'Content.fromUri(' .. Uri .. ')' or 'Content.none'
                end
                DefaultMethods.DateTime = function(Date)
                    return 'DateTime.fromUnixTimestampMillis(' .. Date.UnixTimestampMillis .. ')'
                end
                DefaultMethods.DockWidgetPluginGuiInfo = function(Dock)
                    local ArgumentFunction = tostring(Dock):gmatch(':([%w%-]+)')

                    return 'DockWidgetPluginGuiInfo.new(Enum.InitialDockState.' .. ArgumentFunction() .. ', ' .. (ArgumentFunction() == '1' and 'true' or 'false') .. ', ' .. (ArgumentFunction() == '1' and 'true' or 'false') .. ', ' .. ArgumentFunction() .. ', ' .. ArgumentFunction() .. ', ' .. ArgumentFunction() .. ', ' .. ArgumentFunction() .. ')'
                end
                DefaultMethods.Enum = function(Enum)
                    return 'Enums.' .. tostring(Enum)
                end

                do
                    local Enums = {}

                    for i, v in Enum.GetEnums(Enum)do
                        Enums[v] = 'Enum.' .. tostring(v)
                    end

                    DefaultMethods.EnumItem = function(Item)
                        return Enums[Item.EnumType] .. '.' .. Item.Name
                    end
                end

                DefaultMethods.Enums = function()
                    return 'Enums'
                end
                DefaultMethods.Faces = function(Faces)
                    return 'Faces.new(' .. concat({
                        Faces.Top and 'Enum.NormalId.Top' or nil,
                        Faces.Bottom and 'Enum.NormalId.Bottom' or nil,
                        Faces.Left and 'Enum.NormalId.Left' or nil,
                        Faces.Right and 'Enum.NormalId.Right' or nil,
                        Faces.Back and 'Enum.NormalId.Back' or nil,
                        Faces.Front and 'Enum.NormalId.Front' or nil,
                    }, ', ') .. ')'
                end
                DefaultMethods.FloatCurveKey = function(CurveKey)
                    local SerializeNumber = Methods.number

                    return 'FloatCurveKey.new(' .. SerializeNumber(CurveKey.Time) .. ', ' .. SerializeNumber(CurveKey.Value) .. ', Enum.KeyInterpolationMode.' .. CurveKey.Interpolation.Name .. ')'
                end
                DefaultMethods.Font = function(Font)
                    return 'Font.new(' .. Methods.string(Font.Family) .. ', Enum.FontWeight.' .. Font.Weight.Name .. ', Enum.FontStyle.' .. Font.Style.Name .. ')'
                end

                do
                    local Services = {
                        Workspace = 'workspace',
                        Lighting = 'game.lighting',
                        GlobalSettings = 'settings()',
                        Stats = 'stats()',
                        UserSettings = 'UserSettings()',
                        PluginManagerInterface = 'PluginManager()',
                        DebuggerManager = 'DebuggerManager()',
                    }

                    if IsClient then
                        local LocalPlayer = Players.LocalPlayer

                        if not LocalPlayer then
                            Players.GetPropertyChangedSignal(Players, 'LocalPlayer'):Once(function(
                            )
                                LocalPlayer = Players.LocalPlayer
                            end)
                        end

                        DefaultMethods.Instance = function(obj)
                            local ObjectParent = obj.Parent
                            local ObjectClassName = obj.ClassName

                            if ObjectParent then
                                local ObjectName = Methods.string(obj.Name)

                                if ObjectClassName ~= 'Model' and ObjectClassName ~= 'Player' then
                                    local IsService, Output = pcall(FindService, game, ObjectClassName)

                                    return (not IsService or not Output) and Methods.Instance(ObjectParent) .. ':WaitForChild(' .. ObjectName .. ')' or Services[ObjectClassName] or 'game:GetService("' .. ObjectClassName .. '")'
                                elseif ObjectClassName == 'Model' then
                                    local Player = Players.GetPlayerFromCharacter(Players, obj)

                                    return not Player and Methods.Instance(ObjectParent) .. ':WaitForChild(' .. ObjectName .. ')' or 'game:GetService("Players")' .. (Player == LocalPlayer and '.LocalPlayer.Character' or ':WaitForChild(' .. ObjectName .. ').Character')
                                end

                                return 'game:GetService("Players")' .. (obj == LocalPlayer and '.LocalPlayer' or ':WaitForChild(' .. ObjectName .. ')')
                            end

                            return ObjectClassName == 'DataModel' and 'game' or 'Instance.new("' .. ObjectClassName .. '", nil)'
                        end
                    else
                        DefaultMethods.Instance = function(obj)
                            local ObjectParent = obj.Parent
                            local ObjectClassName = obj.ClassName

                            if ObjectParent then
                                local ObjectName = Methods.string(obj.Name)

                                if ObjectClassName ~= 'Model' and ObjectClassName ~= 'Player' then
                                    local IsService, Output = pcall(FindService, game, ObjectClassName)

                                    return (not IsService or not Output) and Methods.Instance(ObjectParent) .. ':WaitForChild(' .. ObjectName .. ')' or Services[ObjectClassName] or 'game:GetService("' .. ObjectClassName .. '")'
                                elseif ObjectClassName == 'Model' then
                                    local Player = Players.GetPlayerFromCharacter(Players, obj)

                                    return not Player and Methods.Instance(ObjectParent) .. ':WaitForChild(' .. ObjectName .. ')' or 'game:GetService("Players"):WaitForChild(' .. ObjectName .. ').Character'
                                end

                                return 'game:GetService("Players"):WaitForChild(' .. ObjectName .. ')'
                            end

                            return ObjectClassName == 'DataModel' and 'game' or 'Instance.new("' .. ObjectClassName .. '", nil)'
                        end
                    end

                    Class.Services = Services
                end

                DefaultMethods.NumberRange = function(Range)
                    local SerializeNumber = Methods.number

                    return 'NumberRange.new(' .. SerializeNumber(Range.Min) .. ', ' .. SerializeNumber(Range.Max) .. ')'
                end
                DefaultMethods.NumberSequence = function(Sequence)
                    local SerializeNumberSequenceKeypoint = Methods.NumberSequenceKeypoint
                    local Keypoints = Sequence.Keypoints
                    local Size = #Keypoints
                    local Serialized = ''

                    for i = 1, Size - 1 do
                        Serialized = Serialized .. SerializeNumberSequenceKeypoint(Keypoints[i]) .. ', '
                    end

                    return 'NumberSequence.new({' .. Serialized .. SerializeNumberSequenceKeypoint(Keypoints[Size]) .. '})'
                end

                do
                    local DefaultOverlapParams = OverlapParams.new()

                    DefaultMethods.OverlapParams = function(
                        Params,
                        format,
                        indents
                    )
                        if DefaultOverlapParams ~= Params then
                            local formatspace = format and '\n' .. indents or ' '
                            local FilterDescendantsInstances = Params.FilterDescendantsInstances
                            local FilterType = Params.FilterType
                            local CollisionGroup = Params.CollisionGroup

                            return '(function(Param : OverlapParams)' .. formatspace .. (#FilterDescendantsInstances > 0 and '\tParam.FilterDescendantsInstances = ' .. Methods.table(FilterDescendantsInstances, false, '') .. formatspace or '') .. (FilterType ~= Enum.RaycastFilterType.Exclude and '\tParam.FilterType = Enum.RaycastFilterType.' .. FilterType.Name .. formatspace or '') .. (CollisionGroup ~= 'Default' and '\tParam.CollisionGroup = ' .. Methods.string(CollisionGroup) .. formatspace or '') .. (Params.RespectCanCollide and '\tParam.RespectCanCollide = true' .. formatspace or '') .. (Params.BruteForceAllSlow and '\tParam.BruteForceAllSlow = true' .. formatspace or '') .. '\treturn Params' .. formatspace .. 'end)(OverlapParams.new())'
                        end

                        return 'OverlapParams.new()'
                    end
                end

                DefaultMethods.NumberSequenceKeypoint = function(Keypoint)
                    local SerializeNumber = Methods.number

                    return 'NumberSequenceKeypoint.new(' .. SerializeNumber(Keypoint.Time) .. ', ' .. SerializeNumber(Keypoint.Value) .. ', ' .. SerializeNumber(Keypoint.Envelope) .. ')'
                end
                DefaultMethods.PathWaypoint = function(Waypoint)
                    return 'PathWaypoint.new(' .. Methods.Vector3(Waypoint.Position) .. ', Enum.PathWaypointAction.' .. Waypoint.Action.Name .. ', ' .. Methods.string(Waypoint.Label) .. ')'
                end

                do
                    local function nanToString(int)
                        return int == int and int or '0/0'
                    end

                    DefaultMethods.PhysicalProperties = function(Properties)
                        return 'PhysicalProperties.new(' .. (nanToString(Properties.Density)) .. ', ' .. nanToString(Properties.Friction) .. ', ' .. nanToString(Properties.Elasticity) .. ', ' .. nanToString(Properties.FrictionWeight) .. ', ' .. nanToString(Properties.ElasticityWeight) .. ')'
                    end
                end

                DefaultMethods.RBXScriptConnection = function(
                    Connection,
                    _,
                    _,
                    _,
                    InComment
                )
                    local CommentSeperator = not InComment and '' or '='

                    return '(nil --[' .. CommentSeperator .. '[ RBXScriptConnection | IsConnected: ' .. (Connection.Connected and 'true' or 'false') .. ' ]' .. CommentSeperator .. '])'
                end

                do
                    local Signals = {
                        GraphicsQualityChangeRequest = 'game.GraphicsQualityChangeRequest',
                        AllowedGearTypeChanged = 'game.AllowedGearTypeChanged',
                        ScreenshotSavedToAlbum = 'game.ScreenshotSavedToAlbum',
                        UniverseMetadataLoaded = 'game.UniverseMetadataLoaded',
                        ScreenshotReady = 'game.ScreenshotReady',
                        ServiceRemoving = 'game.ServiceRemoving',
                        ServiceAdded = 'game.ServiceAdded',
                        ItemChanged = 'game.ItemChanged',
                        CloseLate = 'game.CloseLate',
                        Loaded = 'game.Loaded',
                        Close = 'game.Close',
                        RobloxGuiFocusedChanged = 'game:GetService("RunService").RobloxGuiFocusedChanged',
                        PostSimulation = 'game:GetService("RunService").PostSimulation',
                        RenderStepped = 'game:GetService("RunService").RenderStepped',
                        PreSimulation = 'game:GetService("RunService").PreSimulation',
                        PreAnimation = 'game:GetService("RunService").PreAnimation',
                        PreRender = 'game:GetService("RunService").PreRender',
                        Heartbeat = 'game:GetService("RunService").Heartbeat',
                        Stepped = 'game:GetService("RunService").Stepped',
                    }

                    DefaultMethods.RBXScriptSignal = function(
                        Signal,
                        _,
                        _,
                        _,
                        InComment
                    )
                        local CommentSeperator = not InComment and '' or '='
                        local SignalName = tostring(Signal):match('Signal (%a+)')

                        return Signals[SignalName] or '(nil --[' .. CommentSeperator .. '[ RBXScriptSignal | ' .. SignalName .. ' is not supported ]' .. CommentSeperator .. '])'
                    end
                    Class.Signals = Signals
                end

                DefaultMethods.Random = function(_, _, _, _, InComment)
                    local CommentSeperator = not InComment and '' or '='

                    return 'Random.new(--[' .. CommentSeperator .. '[ <Seed> ]' .. CommentSeperator .. '])'
                end
                DefaultMethods.Ray = function(Ray)
                    local SerializeVector3 = Methods.Vector3

                    return 'Ray.new(' .. SerializeVector3(Ray.Origin) .. ', ' .. SerializeVector3(Ray.Direction) .. ')'
                end

                do
                    local DefaultRaycastParams = RaycastParams.new()

                    DefaultMethods.RaycastParams = function(
                        Params,
                        format,
                        indents
                    )
                        if DefaultRaycastParams ~= Params then
                            local formatspace = format and '\n' .. indents or ' '
                            local FilterDescendantsInstances = Params.FilterDescendantsInstances
                            local FilterType = Params.FilterType
                            local CollisionGroup = Params.CollisionGroup

                            return '(function(Param : RaycastParams)' .. formatspace .. (#FilterDescendantsInstances > 0 and '\tParam.FilterDescendantsInstances = ' .. Methods.table(FilterDescendantsInstances, false, '') .. formatspace or '') .. (FilterType ~= Enum.RaycastFilterType.Exclude and '\tParam.FilterType = Enum.RaycastFilterType.' .. FilterType.Name .. formatspace or '') .. (Params.IgnoreWater and '\tParam.IgnoreWater = true' .. formatspace or '') .. (CollisionGroup ~= 'Default' and '\tParam.CollisionGroup = ' .. Methods.string(CollisionGroup) .. formatspace or '') .. (Params.RespectCanCollide and '\tParam.RespectCanCollide = true' .. formatspace or '') .. (Params.BruteForceAllSlow and '\tParam.BruteForceAllSlow = true' .. formatspace or '') .. '\treturn Params' .. formatspace .. 'end)(RaycastParams.new())'
                        end

                        return 'RaycastParams.new()'
                    end
                end

                DefaultMethods.Rect = function(Rect)
                    local SerializeVector2 = Methods.Vector2

                    return 'Rect.new(' .. SerializeVector2(Rect.Min) .. ', ' .. SerializeVector2(Rect.Max) .. ')'
                end
                DefaultMethods.Region3 = function(Region)
                    local SerializeVector3 = Methods.Vector3
                    local Center = Region.CFrame.Position
                    local Size = Region.Size / 2

                    return 'Region3.new(' .. SerializeVector3(Center - Size) .. ', ' .. SerializeVector3(Center + Size) .. ')'
                end
                DefaultMethods.Region3int16 = function(Region)
                    local SerializeVector3int16 = Methods.Vector3int16

                    return 'Region3int16.new(' .. SerializeVector3int16(Region.Min) .. ', ' .. SerializeVector3int16(Region.Max) .. ')'
                end
                DefaultMethods.RotationCurveKey = function(Curve)
                    return 'RotationCurveKey.new(' .. Methods.number(Curve.Time) .. ', ' .. Methods.CFrame(Curve.Value) .. ', Enum.KeyInterpolationMode.' .. Curve.Interpolation.Name .. ')'
                end
                DefaultMethods.SharedTable = function(
                    Shared,
                    format,
                    indents,
                    _,
                    InComment
                )
                    local isreadonly = IsSharedFrozen(Shared)

                    if SharedSize(Shared) ~= 0 then
                        local stackindent = indents .. (format and '\t' or '')
                        local CurrentIndex = 1
                        local Serialized = {}

                        for i, v in Shared do
                            Serialized[CurrentIndex] = (CurrentIndex ~= i and ValidateSharedTableIndex(i) or '') .. Serialize(v, format, stackindent, nil, InComment)
                            CurrentIndex = CurrentIndex + 1
                        end

                        local formatspace = format and '\n' or ''
                        local Contents = formatspace .. stackindent .. concat(Serialized, (format and ',\n' or ', ') .. stackindent) .. formatspace .. indents

                        return not isreadonly and 'SharedTable.new({' .. Contents .. '})' or 'SharedTable.cloneAndFreeze(SharedTable.new({' .. Contents .. '}))'
                    end

                    return not isreadonly and 'SharedTable.new()' or 'SharedTable.cloneAndFreeze(SharedTable.new())'
                end
                DefaultMethods.TweenInfo = function(Info)
                    return 'TweenInfo.new(' .. Methods.number(Info.Time) .. ', Enum.EasingStyle.' .. Info.EasingStyle.Name .. ', Enum.EasingDirection.' .. Info.EasingDirection.Name .. ', ' .. Info.RepeatCount .. ', ' .. (Info.Reverses and 'true' or 'false') .. ', ' .. Methods.number(Info.DelayTime) .. ')'
                end
                DefaultMethods.UDim = function(UDim)
                    return 'UDim.new(' .. Methods.number(UDim.Scale) .. ', ' .. UDim.Offset .. ')'
                end
                DefaultMethods.UDim2 = function(UDim2)
                    local SerializeNumber = Methods.number
                    local Width = UDim2.X
                    local Height = UDim2.Y

                    return 'UDim2.new(' .. SerializeNumber(Width.Scale) .. ', ' .. Width.Offset .. ', ' .. SerializeNumber(Height.Scale) .. ', ' .. Height.Offset .. ')'
                end
                DefaultMethods.Vector2 = function(Vector)
                    local SerializeNumber = Methods.number

                    return 'Vector2.new(' .. SerializeNumber(Vector.X) .. ', ' .. SerializeNumber(Vector.Y) .. ')'
                end
                DefaultMethods.Vector2int16 = function(Vector)
                    return 'Vector2int16.new(' .. Vector.X .. ', ' .. Vector.Y .. ')'
                end
                DefaultMethods.Vector3 = function(Vector)
                    local SerializeNumber = Methods.number

                    return DefaultVectors[Vector] or 'vector.create(' .. SerializeNumber(Vector.X) .. ', ' .. SerializeNumber(Vector.Y) .. ', ' .. SerializeNumber(Vector.Z) .. ')'
                end
                DefaultMethods.Vector3int16 = function(Vector)
                    return 'Vector3int16.new(' .. Vector.X .. ', ' .. Vector.Y .. ', ' .. Vector.Z .. ')'
                end
                DefaultMethods.boolean = function(bool)
                    return bool and 'true' or 'false'
                end
                DefaultMethods.buffer = function(buff)
                    return 'buffer.fromstring(' .. Methods.string(bufftostring(buff)) .. ')'
                end

                do
                    local GlobalFunctions = {}

                    do
                        local getrenv = getrenv or (function()
                            local env = {
                                bit32 = bit32,
                                buffer = buffer,
                                coroutine = coroutine,
                                debug = debug,
                                math = math,
                                os = os,
                                string = string,
                                table = table,
                                utf8 = utf8,
                                Content = Content,
                                Axes = Axes,
                                AdReward = AdReward,
                                BrickColor = BrickColor,
                                CatalogSearchParams = CatalogSearchParams,
                                CFrame = CFrame,
                                Color3 = Color3,
                                ColorSequence = ColorSequence,
                                ColorSequenceKeypoint = ColorSequenceKeypoint,
                                DateTime = DateTime,
                                DockWidgetPluginGuiInfo = DockWidgetPluginGuiInfo,
                                Faces = Faces,
                                FloatCurveKey = FloatCurveKey,
                                Font = Font,
                                Instance = Instance,
                                NumberRange = NumberRange,
                                NumberSequence = NumberSequence,
                                NumberSequenceKeypoint = NumberSequenceKeypoint,
                                OverlapParams = OverlapParams,
                                PathWaypoint = PathWaypoint,
                                PhysicalProperties = PhysicalProperties,
                                Random = Random,
                                Ray = Ray,
                                RaycastParams = RaycastParams,
                                Rect = Rect,
                                Region3 = Region3,
                                Region3int16 = Region3int16,
                                RotationCurveKey = RotationCurveKey,
                                SharedTable = SharedTable,
                                task = task,
                                TweenInfo = TweenInfo,
                                UDim = UDim,
                                UDim2 = UDim2,
                                Vector2 = Vector2,
                                Vector2int16 = Vector2int16,
                                Vector3 = Vector3,
                                vector = vector,
                                Vector3int16 = Vector3int16,
                                CellId = CellId,
                                PluginDrag = PluginDrag,
                                SecurityCapabilities = SecurityCapabilities,
                                assert = assert,
                                error = error,
                                getfenv = getfenv,
                                getmetatable = getmetatable,
                                ipairs = ipairs,
                                loadstring = loadstring,
                                newproxy = newproxy,
                                next = next,
                                pairs = pairs,
                                pcall = pcall,
                                print = print,
                                rawequal = rawequal,
                                rawget = rawget,
                                rawlen = rawlen,
                                rawset = rawset,
                                select = select,
                                setfenv = setfenv,
                                setmetatable = setmetatable,
                                tonumber = tonumber,
                                tostring = tostring,
                                unpack = unpack,
                                xpcall = xpcall,
                                collectgarbage = collectgarbage,
                                delay = delay,
                                gcinfo = gcinfo,
                                PluginManager = PluginManager,
                                DebuggerManager = DebuggerManager,
                                require = require,
                                settings = settings,
                                spawn = spawn,
                                tick = tick,
                                time = time,
                                UserSettings = UserSettings,
                                wait = wait,
                                warn = warn,
                                Delay = Delay,
                                ElapsedTime = ElapsedTime,
                                elapsedTime = elapsedTime,
                                printidentity = printidentity,
                                Spawn = Spawn,
                                Stats = Stats,
                                stats = stats,
                                Version = Version,
                                version = version,
                                Wait = Wait,
                            }

                            return function()
                                return env
                            end
                        end)()
                        local Visited = setmetatable({}, {
                            __mode = 'k',
                        })

                        for i, v in getrenv()do
                            local ElementType = type(i) == 'string' and type(v)

                            if ElementType then
                                if ElementType == 'table' then
                                    local function LoadLibrary(Path, tbl)
                                        if not Visited[tbl] then
                                            Visited[tbl] = true

                                            for i, v in next, tbl do
                                                local Type = type(i) == 'string' and not Keywords[i] and i.match(i, '[A-z_][A-z_0-9]') and type(v)
                                                local NewPath = Type and (Type == 'function' or Type == 'table') and Path .. '.' .. i

                                                if NewPath then
                                                    if Type == 'function' then
                                                        GlobalFunctions[v] = NewPath
                                                    else
                                                        LoadLibrary(NewPath, v)
                                                    end
                                                end
                                            end

                                            Visited[tbl] = nil
                                        end
                                    end

                                    LoadLibrary(i, v)
                                    table.clear(Visited)
                                elseif ElementType == 'function' then
                                    GlobalFunctions[v] = i
                                end
                            end
                        end

                        Class.GlobalFunctions = GlobalFunctions
                    end

                    DefaultMethods['function'] = function(
                        Function,
                        format,
                        indents,
                        _,
                        InComment
                    )
                        local IsGlobal = GlobalFunctions[Function]

                        if not IsGlobal then
                            if format then
                                local SerializeString = Methods.string
                                local CommentSeperator = not InComment and '' or '='
                                local tempindents = indents .. '\t\t\t'
                                local newlineindent = ',\n' .. tempindents
                                local source, line, name, numparams, vargs = info(Function, 'slna')

                                return 'function()' .. (line ~= -1 and '' or ' --[' .. CommentSeperator .. '[ CClosure ' .. name .. ' ]' .. CommentSeperator .. ']') .. '\n\t' .. indents .. '--[' .. CommentSeperator .. '[\n\t\t' .. indents .. 'info = {\n' .. tempindents .. 'source = ' .. SerializeString(source) .. newlineindent .. 'line = ' .. line .. newlineindent .. 'what = ' .. (line ~= 
-1 and '"Lua"' or '"C"') .. newlineindent .. 'name = ' .. SerializeString(name) .. newlineindent .. 'numparams = ' .. numparams .. newlineindent .. 'vargs = ' .. (vargs and 'true' or 'false') .. newlineindent .. 'function = ' .. tostring(Function) .. '\n\t\t' .. indents .. '}\n\t' .. indents .. ']' .. CommentSeperator .. ']\n' .. indents .. 'end'
                            end

                            return islclosure(Function) and 'function() end' or 'function() --[' .. (not InComment and '' or '=') .. '[ CClosure ' .. (info(Function, 'n')) .. ' ]' .. (not InComment and '' or '=') .. '] end'
                        end

                        return IsGlobal
                    end
                end

                DefaultMethods.table = function(
                    tbl,
                    format,
                    indents,
                    CyclicList,
                    InComment
                )
                    local CyclicList = CyclicList or setmetatable({}, {
                        __mode = 'k',
                    })

                    if not CyclicList[tbl] then
                        local isreadonly = isfrozen(tbl)
                        local Index, Value = next(tbl)

                        if Index ~= nil then
                            local Indents = indents .. (format and '\t' or '')
                            local Ending = (format and ',\n' or ', ')
                            local formatspace = format and '\n' or ''
                            local Generation = '{' .. formatspace
                            local CurrentIndex = 1

                            CyclicList[tbl] = true

                            repeat
                                Generation = Generation .. Indents .. (CurrentIndex ~= Index and ValidateIndex(Index) or '') .. Serialize(Value, format, Indents, CyclicList, InComment)
                                Index, Value = next(tbl, Index)
                                Generation = Generation .. (Index ~= nil and Ending or formatspace .. indents .. '}')
                                CurrentIndex = CurrentIndex + 1
                            until Index == nil

                            CyclicList[tbl] = nil

                            return not isreadonly and Generation or 'table.freeze(' .. Generation .. ')'
                        end

                        return not isreadonly and '{}' or 'table.freeze({})'
                    else
                        return '*** cycle table reference detected ***'
                    end
                end
                DefaultMethods['nil'] = function()
                    return 'nil'
                end
                DefaultMethods.number = function(num)
                    return num ~= inf and num ~= neginf and num == num and tostring(num) or num == inf and (Class.__Serializeinf and 'math.huge' or '1/0') or num == neginf and (Class.__Serializeinf and '-math.huge' or '-1/0') or '0/0'
                end

                do
                    local ByteList = {
                        ['\a'] = '\\a',
                        ['\b'] = '\\b',
                        ['\t'] = '\\t',
                        ['\n'] = '\\n',
                        ['\v'] = '\\v',
                        ['\f'] = '\\f',
                        ['\r'] = '\\r',
                        ['"'] = '\\"',
                        ['\\'] = '\\\\',
                    }

                    for i = 0, 255 do
                        local Character = string.char(i)

                        if not ByteList[Character] and (i < 32 or i > 126) then
                            ByteList[Character] = ('\\%03d').format(('\\%03d'), i)
                        end
                    end

                    DefaultMethods.string = function(RawString)
                        return '"' .. RawString.gsub(RawString, '[\0-\31"\\\127-\255]', ByteList) .. '"'
                    end
                end

                DefaultMethods.thread = function(thread)
                    return 'coroutine.create(function() end)'
                end
                DefaultMethods.userdata = function(userdata)
                    return getmetatable(userdata) ~= nil and 'newproxy(true)' or 'newproxy(false)'
                end

                do
                    local SecurityCapabilityEnums = Enum.SecurityCapability:GetEnumItems()

                    DefaultMethods.SecurityCapabilities = function(
                        Capabilities,
                        format,
                        _,
                        _,
                        InComment
                    )
                        local Contains = {}
                        local CurrentIndex = 1

                        for i, v in SecurityCapabilityEnums do
                            if Capabilities.Contains(Capabilities, v) then
                                Contains[CurrentIndex] = 'Enum.SecurityCapability.' .. v.Name
                                CurrentIndex = CurrentIndex + 1
                            end
                        end

                        return 'SecurityCapabilities.new(' .. concat(Contains, ', ') .. ')'
                    end
                end

                DefaultMethods.PluginDrag = function(Drag)
                    local SerializeString = Methods.string

                    return 'PluginDrag.new(' .. SerializeString(Drag.Sender) .. ', ' .. SerializeString(Drag.MimeType) .. ', ' .. SerializeString(Drag.Data) .. ', ' .. SerializeString(Drag.MouseIcon) .. ', ' .. SerializeString(Drag.DragIcon) .. ', ' .. Methods.Vector2(Drag.HotSpot) .. ')'
                end
                DefaultMethods.CellId = function(_, _, _, _, InComment)
                    local Comment = (InComment and '=' or '')

                    return 'CellId.new(--[' .. Comment .. '[ Undocumented ]' .. Comment .. '])'
                end

                local function Serializevargs(...)
                    local tbl = pack(...)
                    local GenerationSize = 0

                    for i = 1, #tbl do
                        local Generation = Serialize(tbl[i], true, '')

                        tbl[i] = Generation
                        GenerationSize = GenerationSize + #Generation

                        if GenerationSize > 100000 then
                            break
                        end
                    end

                    return unpack(tbl, 1, tbl.n)
                end

                Class.Convert = function(DataStructure, format)
                    return Serialize(DataStructure, format, '')
                end
                Class.ConvertKnown = function(DataType, DataStructure, format)
                    return Methods[DataType](DataStructure, format, '')
                end
                Class.print = function(...)
                    print(Serializevargs(...))
                end
                Class.warn = function(...)
                    warn(Serializevargs(...))
                end

                if type(setclipboard) == 'function' then
                    local setclipboard = setclipboard

                    Class.setclipboard = function(DataStructure, format)
                        setclipboard(Serialize(DataStructure, format, ''))
                    end
                end

                return setmetatable(Class, {
                    __tostring = 'DataToCode',
                })
            end)()
            local SimpleSpy3 = Create('ScreenGui', {ResetOnSpawn = false})
            local Storage = Create('Folder', {})
            local Background = Create('Frame', {
                Parent = SimpleSpy3,
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 500, 0, 200),
                Size = UDim2.new(0, 450, 0, 268),
            })
            local LeftPanel = Create('Frame', {
                Parent = Background,
                BackgroundColor3 = Color3.fromRGB(53, 52, 55),
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0, 19),
                Size = UDim2.new(0, 131, 0, 249),
            })
            local LogList = Create('ScrollingFrame', {
                Parent = LeftPanel,
                Active = true,
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0, 9),
                Size = UDim2.new(0, 131, 0, 232),
                CanvasSize = UDim2.new(0, 0, 0, 0),
                ScrollBarThickness = 4,
            })
            local UIListLayout = Create('UIListLayout', {
                Parent = LogList,
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder,
            })
            local RightPanel = Create('Frame', {
                Parent = Background,
                BackgroundColor3 = Color3.fromRGB(37, 36, 38),
                BorderSizePixel = 0,
                Position = UDim2.new(0, 131, 0, 19),
                Size = UDim2.new(0, 319, 0, 249),
            })
            local CodeBox = Create('Frame', {
                Parent = RightPanel,
                BackgroundColor3 = Color3.new(0.0823529, 0.0745098, 0.0784314),
                BorderSizePixel = 0,
                Size = UDim2.new(0, 319, 0, 119),
            })
            local ScrollingFrame = Create('ScrollingFrame', {
                Parent = RightPanel,
                Active = true,
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0.5, 0),
                Size = UDim2.new(1, 0, 0.5, -9),
                CanvasSize = UDim2.new(0, 0, 0, 0),
                ScrollBarThickness = 4,
            })
            local UIGridLayout = Create('UIGridLayout', {
                Parent = ScrollingFrame,
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder,
                CellPadding = UDim2.new(0, 0, 0, 0),
                CellSize = UDim2.new(0, 94, 0, 27),
            })
            local TopBar = Create('Frame', {
                Parent = Background,
                BackgroundColor3 = Color3.fromRGB(37, 35, 38),
                BorderSizePixel = 0,
                Size = UDim2.new(0, 450, 0, 19),
            })
            local Simple = Create('TextButton', {
                Parent = TopBar,
                BackgroundColor3 = Color3.new(1, 1, 1),
                AutoButtonColor = false,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 5, 0, 0),
                Size = UDim2.new(0, 57, 0, 18),
                Font = Enum.Font.SourceSansBold,
                Text = 'SimpleSpy',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
            })
            local CloseButton = Create('TextButton', {
                Parent = TopBar,
                BackgroundColor3 = Color3.new(0.145098, 0.141176, 0.14902),
                BorderSizePixel = 0,
                Position = UDim2.new(1, -19, 0, 0),
                Size = UDim2.new(0, 19, 0, 19),
                Font = Enum.Font.SourceSans,
                Text = '',
                TextColor3 = Color3.new(0, 0, 0),
                TextSize = 14,
            })
            local ImageLabel = Create('ImageLabel', {
                Parent = CloseButton,
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 5, 0, 5),
                Size = UDim2.new(0, 9, 0, 9),
                Image = 'http://www.roblox.com/asset/?id=5597086202',
            })
            local MaximizeButton = Create('TextButton', {
                Parent = TopBar,
                BackgroundColor3 = Color3.new(0.145098, 0.141176, 0.14902),
                BorderSizePixel = 0,
                Position = UDim2.new(1, -38, 0, 0),
                Size = UDim2.new(0, 19, 0, 19),
                Font = Enum.Font.SourceSans,
                Text = '',
                TextColor3 = Color3.new(0, 0, 0),
                TextSize = 14,
            })
            local ImageLabel_2 = Create('ImageLabel', {
                Parent = MaximizeButton,
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 5, 0, 5),
                Size = UDim2.new(0, 9, 0, 9),
                Image = 'http://www.roblox.com/asset/?id=5597108117',
            })
            local MinimizeButton = Create('TextButton', {
                Parent = TopBar,
                BackgroundColor3 = Color3.new(0.145098, 0.141176, 0.14902),
                BorderSizePixel = 0,
                Position = UDim2.new(1, -57, 0, 0),
                Size = UDim2.new(0, 19, 0, 19),
                Font = Enum.Font.SourceSans,
                Text = '',
                TextColor3 = Color3.new(0, 0, 0),
                TextSize = 14,
            })
            local ImageLabel_3 = Create('ImageLabel', {
                Parent = MinimizeButton,
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 5, 0, 5),
                Size = UDim2.new(0, 9, 0, 9),
                Image = 'http://www.roblox.com/asset/?id=5597105827',
            })
            local ToolTip = Create('Frame', {
                Parent = SimpleSpy3,
                BackgroundColor3 = Color3.fromRGB(26, 26, 26),
                BackgroundTransparency = 0.1,
                BorderColor3 = Color3.new(1, 1, 1),
                Size = UDim2.new(0, 200, 0, 50),
                ZIndex = 3,
                Visible = false,
            })
            local TextLabel = Create('TextLabel', {
                Parent = ToolTip,
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 2, 0, 2),
                Size = UDim2.new(0, 196, 0, 46),
                ZIndex = 3,
                Font = Enum.Font.SourceSans,
                Text = 'This is some slightly longer text.',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Top,
            })
            local selectedColor = Color3.new(0.321569, 0.333333, 1)
            local deselectedColor = Color3.new(0.8, 0.8, 0.8)
            local layoutOrderNum = 999999999
            local mainClosing = false
            local closed = false
            local sideClosing = false
            local sideClosed = false
            local maximized = false
            local logs = {}
            local selected
            local blacklist = {}
            local blocklist = {}
            local getNil = false
            local connectedRemotes = {}
            local toggle = false
            local prevTables = {}
            local remoteLogs = {}

            getgenv().SIMPLESPYCONFIG_MaxRemotes = 300

            local indent = 4
            local scheduled = {}
            local schedulerconnect
            local SimpleSpy = {}
            local topstr = ''
            local bottomstr = ''
            local remotesFadeIn
            local rightFadeIn
            local codebox
            local p
            local getnilrequired = false
            local history = {}
            local excluding = {}
            local mouseInGui = false
            local connections = {}
            local DecompiledScripts = {}
            local generation = {}
            local running_threads = {}
            local originalnamecall
            local remoteEvent = Instance.new('RemoteEvent', Storage)
            local unreliableRemoteEvent = Instance.new('UnreliableRemoteEvent')
            local remoteFunction = Instance.new('RemoteFunction', Storage)
            local NamecallHandler = Instance.new('BindableEvent', Storage)
            local IndexHandler = Instance.new('BindableEvent', Storage)
            local GetDebugIdHandler = Instance.new('BindableFunction', Storage)
            local originalEvent = remoteEvent.FireServer
            local originalUnreliableEvent = unreliableRemoteEvent.FireServer
            local originalFunction = remoteFunction.InvokeServer
            local GetDebugIDInvoke = GetDebugIdHandler.Invoke

            GetDebugIdHandler.OnInvoke = function(obj)
                return OldDebugId(obj)
            end

            local function ThreadGetDebugId(obj)
                return GetDebugIDInvoke(GetDebugIdHandler, obj)
            end

            local synv3 = false

            if syn and identifyexecutor then
                local _, version = identifyexecutor()

                if (version and version.sub(version, 1, 2) == 'v3') then
                    synv3 = true
                end
            end

            xpcall(function()
                if isfile and readfile and isfolder and makefolder then
                    local cachedconfigs = isfile('SimpleSpy//Settings.json') and jsond(readfile('SimpleSpy//Settings.json'))

                    if cachedconfigs then
                        for i, v in next, realconfigs do
                            if cachedconfigs[i] == nil then
                                cachedconfigs[i] = v
                            end
                        end

                        realconfigs = cachedconfigs
                    end
                    if not isfolder('SimpleSpy') then
                        makefolder('SimpleSpy')
                    end
                    if not isfolder('SimpleSpy//Assets') then
                        makefolder('SimpleSpy//Assets')
                    end
                    if not isfile('SimpleSpy//Settings.json') then
                        writefile('SimpleSpy//Settings.json', jsone(realconfigs))
                    end

                    configsmetatable.__newindex = function(
                        self,
                        index,
                        newindex
                    )
                        realconfigs[index] = newindex

                        writefile('SimpleSpy//Settings.json', jsone(realconfigs))
                    end
                else
                    configsmetatable.__newindex = function(
                        self,
                        index,
                        newindex
                    )
                        realconfigs[index] = newindex
                    end
                end
            end, function(err)
                ErrorPrompt(('An error has occured: (%s)').format(('An error has occured: (%s)'), err))
            end)

            local function logthread(thread)
                table.insert(running_threads, thread)
            end

            clean = function()
                local max = getgenv().SIMPLESPYCONFIG_MaxRemotes

                if not typeof(max) == 'number' and math.floor(max) ~= max then
                    max = 500
                end
                if #remoteLogs > max then
                    for i = 100, #remoteLogs do
                        local v = remoteLogs[i]

                        if typeof(v[1]) == 'RBXScriptConnection' then
                            v[1]:Disconnect()
                        end
                        if typeof(v[2]) == 'Instance' then
                            v[2]:Destroy()
                        end
                    end

                    local newLogs = {}

                    for i = 1, 100 do
                        table.insert(newLogs, remoteLogs[i])
                    end

                    remoteLogs = newLogs
                end
            end

            local function ThreadIsNotDead(thread)
                return not status(thread) == 'dead'
            end

            scaleToolTip = function()
                local size = TextService.GetTextSize(TextService, TextLabel.Text, TextLabel.TextSize, TextLabel.Font, Vector2.new(196, math.huge))

                TextLabel.Size = UDim2.new(0, size.X, 0, size.Y)
                ToolTip.Size = UDim2.new(0, size.X + 4, 0, size.Y + 4)
            end
            onToggleButtonHover = function()
                if not toggle then
                    TweenService.Create(TweenService, Simple, TweenInfo.new(0.5), {
                        TextColor3 = Color3.fromRGB(252, 51, 51),
                    }):Play()
                else
                    TweenService.Create(TweenService, Simple, TweenInfo.new(0.5), {
                        TextColor3 = Color3.fromRGB(68, 206, 91),
                    }):Play()
                end
            end
            onToggleButtonUnhover = function()
                TweenService.Create(TweenService, Simple, TweenInfo.new(0.5), {
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                }):Play()
            end
            onXButtonHover = function()
                TweenService.Create(TweenService, CloseButton, TweenInfo.new(0.2), {
                    BackgroundColor3 = Color3.fromRGB(255, 60, 60),
                }):Play()
            end
            onXButtonUnhover = function()
                TweenService.Create(TweenService, CloseButton, TweenInfo.new(0.2), {
                    BackgroundColor3 = Color3.fromRGB(37, 36, 38),
                }):Play()
            end
            onToggleButtonClick = function()
                if toggle then
                    TweenService.Create(TweenService, Simple, TweenInfo.new(0.5), {
                        TextColor3 = Color3.fromRGB(252, 51, 51),
                    }):Play()
                else
                    TweenService.Create(TweenService, Simple, TweenInfo.new(0.5), {
                        TextColor3 = Color3.fromRGB(68, 206, 91),
                    }):Play()
                end

                toggleSpyMethod()
            end
            connectResize = function()
                if not workspace.CurrentCamera then
                    workspace.GetPropertyChangedSignal(workspace, 'CurrentCamera'):Wait()
                end

                local lastCam = workspace.CurrentCamera:GetPropertyChangedSignal('ViewportSize'):Connect(bringBackOnResize)

                workspace.GetPropertyChangedSignal(workspace, 'CurrentCamera'):Connect(function(
                )
                    lastCam.Disconnect(lastCam)

                    if typeof(lastCam) == 'Connection' then
                        lastCam.Disconnect(lastCam)
                    end

                    lastCam = workspace.CurrentCamera:GetPropertyChangedSignal('ViewportSize'):Connect(bringBackOnResize)
                end)
            end
            bringBackOnResize = function()
                validateSize()

                if sideClosed then
                    minimizeSize()
                else
                    maximizeSize()
                end

                local currentX = Background.AbsolutePosition.X
                local currentY = Background.AbsolutePosition.Y
                local viewportSize = workspace.CurrentCamera.ViewportSize

                if (currentX < 0) or (currentX > (viewportSize.X - (sideClosed and 131 or Background.AbsoluteSize.X))) then
                    if currentX < 0 then
                        currentX = 0
                    else
                        currentX = viewportSize.X - (sideClosed and 131 or Background.AbsoluteSize.X)
                    end
                end
                if (currentY < 0) or (currentY > (viewportSize.Y - (closed and 19 or Background.AbsoluteSize.Y) - GuiInset.Y)) then
                    if currentY < 0 then
                        currentY = 0
                    else
                        currentY = viewportSize.Y - (closed and 19 or Background.AbsoluteSize.Y) - GuiInset.Y
                    end
                end

                TweenService.Create(TweenService, Background, TweenInfo.new(0.1), {
                    Position = UDim2.new(0, currentX, 0, currentY),
                }):Play()
            end
            onBarInput = function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    local lastPos = UserInputService.GetMouseLocation(UserInputService)
                    local mainPos = Background.AbsolutePosition
                    local offset = mainPos - lastPos
                    local currentPos = offset + lastPos

                    if not connections.drag then
                        connections.drag = RunService.RenderStepped:Connect(function(
                        )
                            local newPos = UserInputService.GetMouseLocation(UserInputService)

                            if newPos ~= lastPos then
                                local currentX = (offset + newPos).X
                                local currentY = (offset + newPos).Y
                                local viewportSize = workspace.CurrentCamera.ViewportSize

                                if (currentX < 0 and currentX < currentPos.X) or (currentX > (viewportSize.X - (sideClosed and 131 or TopBar.AbsoluteSize.X)) and currentX > currentPos.X) then
                                    if currentX < 0 then
                                        currentX = 0
                                    else
                                        currentX = viewportSize.X - (sideClosed and 131 or TopBar.AbsoluteSize.X)
                                    end
                                end
                                if (currentY < 0 and currentY < currentPos.Y) or (currentY > (viewportSize.Y - (closed and 19 or Background.AbsoluteSize.Y) - GuiInset.Y) and currentY > currentPos.Y) then
                                    if currentY < 0 then
                                        currentY = 0
                                    else
                                        currentY = viewportSize.Y - (closed and 19 or Background.AbsoluteSize.Y) - GuiInset.Y
                                    end
                                end

                                currentPos = Vector2.new(currentX, currentY)
                                lastPos = newPos

                                TweenService.Create(TweenService, Background, TweenInfo.new(0.1), {
                                    Position = UDim2.new(0, currentPos.X, 0, currentPos.Y),
                                }):Play()
                            end
                        end)
                    end

                    table.insert(connections, UserInputService.InputEnded:Connect(function(
                        inputE
                    )
                        if input == inputE then
                            if connections.drag then
                                connections.drag:Disconnect()

                                connections.drag = nil
                            end
                        end
                    end))
                end
            end
            fadeOut = function(elements)
                local data = {}

                for _, v in next, elements do
                    if typeof(v) == 'Instance' and v.IsA(v, 'GuiObject') and v.Visible then
                        spawn(function()
                            data[v] = {
                                BackgroundTransparency = v.BackgroundTransparency,
                            }

                            TweenService.Create(TweenService, v, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()

                            if v.IsA(v, 'TextBox') or v.IsA(v, 'TextButton') or v.IsA(v, 'TextLabel') then
                                data[v].TextTransparency = v.TextTransparency

                                TweenService.Create(TweenService, v, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
                            elseif v.IsA(v, 'ImageButton') or v.IsA(v, 'ImageLabel') then
                                data[v].ImageTransparency = v.ImageTransparency

                                TweenService.Create(TweenService, v, TweenInfo.new(0.5), {ImageTransparency = 1}):Play()
                            end

                            delay(0.5, function()
                                v.Visible = false

                                for i, x in next, data[v]do
                                    v[i] = x
                                end

                                data[v] = true
                            end)
                        end)
                    end
                end

                return function()
                    for i, _ in next, data do
                        spawn(function()
                            local properties = {
                                BackgroundTransparency = i.BackgroundTransparency,
                            }

                            i.BackgroundTransparency = 1

                            TweenService.Create(TweenService, i, TweenInfo.new(0.5), {
                                BackgroundTransparency = properties.BackgroundTransparency,
                            }):Play()

                            if i.IsA(i, 'TextBox') or i.IsA(i, 'TextButton') or i.IsA(i, 'TextLabel') then
                                properties.TextTransparency = i.TextTransparency
                                i.TextTransparency = 1

                                TweenService.Create(TweenService, i, TweenInfo.new(0.5), {
                                    TextTransparency = properties.TextTransparency,
                                }):Play()
                            elseif i.IsA(i, 'ImageButton') or i.IsA(i, 'ImageLabel') then
                                properties.ImageTransparency = i.ImageTransparency
                                i.ImageTransparency = 1

                                TweenService.Create(TweenService, i, TweenInfo.new(0.5), {
                                    ImageTransparency = properties.ImageTransparency,
                                }):Play()
                            end

                            i.Visible = true
                        end)
                    end
                end
            end
            toggleMinimize = function(override)
                if mainClosing and not override or maximized then
                    return
                end

                mainClosing = true
                closed = not closed

                if closed then
                    if not sideClosed then
                        toggleSideTray(true)
                    end

                    LeftPanel.Visible = true
                    remotesFadeIn = fadeOut(LeftPanel.GetDescendants(LeftPanel))

                    TweenService.Create(TweenService, LeftPanel, TweenInfo.new(0.5), {
                        Size = UDim2.new(0, 131, 0, 0),
                    }):Play()
                    wait(0.5)
                else
                    TweenService.Create(TweenService, LeftPanel, TweenInfo.new(0.5), {
                        Size = UDim2.new(0, 131, 0, 249),
                    }):Play()
                    wait(0.5)

                    if remotesFadeIn then
                        remotesFadeIn()

                        remotesFadeIn = nil
                    end

                    bringBackOnResize()
                end

                mainClosing = false
            end
            toggleSideTray = function(override)
                if sideClosing and not override or maximized then
                    return
                end

                sideClosing = true
                sideClosed = not sideClosed

                if sideClosed then
                    rightFadeIn = fadeOut(RightPanel.GetDescendants(RightPanel))

                    wait(0.5)
                    minimizeSize(0.5)
                    wait(0.5)

                    RightPanel.Visible = false
                else
                    if closed then
                        toggleMinimize(true)
                    end

                    RightPanel.Visible = true

                    maximizeSize(0.5)
                    wait(0.5)

                    if rightFadeIn then
                        rightFadeIn()
                    end

                    bringBackOnResize()
                end

                sideClosing = false
            end
            toggleMaximize = function()
                if not sideClosed and not maximized then
                    maximized = true

                    local disable = Instance.new('TextButton')
                    local prevSize = UDim2.new(0, CodeBox.AbsoluteSize.X, 0, CodeBox.AbsoluteSize.Y)
                    local prevPos = UDim2.new(0, CodeBox.AbsolutePosition.X, 0, CodeBox.AbsolutePosition.Y)

                    disable.Size = UDim2.new(1, 0, 1, 0)
                    disable.BackgroundColor3 = Color3.new()
                    disable.BorderSizePixel = 0
                    disable.Text = 0
                    disable.ZIndex = 3
                    disable.BackgroundTransparency = 1
                    disable.AutoButtonColor = false
                    CodeBox.ZIndex = 4
                    CodeBox.Position = prevPos
                    CodeBox.Size = prevSize

                    TweenService.Create(TweenService, CodeBox, TweenInfo.new(0.5), {
                        Size = UDim2.new(0.5, 0, 0.5, 0),
                        Position = UDim2.new(0.25, 0, 0.25, 0),
                    }):Play()
                    TweenService.Create(TweenService, disable, TweenInfo.new(0.5), {BackgroundTransparency = 0.5}):Play()
                    disable.MouseButton1Click:Connect(function()
                        if UserInputService.GetMouseLocation(UserInputService).Y + GuiInset.Y >= CodeBox.AbsolutePosition.Y and UserInputService.GetMouseLocation(UserInputService).Y + GuiInset.Y <= CodeBox.AbsolutePosition.Y + CodeBox.AbsoluteSize.Y and UserInputService.GetMouseLocation(UserInputService).X >= CodeBox.AbsolutePosition.X and UserInputService.GetMouseLocation(UserInputService).X <= CodeBox.AbsolutePosition.X + CodeBox.AbsoluteSize.X then
                            return
                        end

                        TweenService.Create(TweenService, CodeBox, TweenInfo.new(0.5), {
                            Size = prevSize,
                            Position = prevPos,
                        }):Play()
                        TweenService.Create(TweenService, disable, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
                        wait(0.5)
                        disable.Destroy(disable)

                        CodeBox.Size = UDim2.new(1, 0, 0.5, 0)
                        CodeBox.Position = UDim2.new(0, 0, 0, 0)
                        CodeBox.ZIndex = 0
                        maximized = false
                    end)
                end
            end
            isInResizeRange = function(p)
                local relativeP = p - Background.AbsolutePosition
                local range = 5

                if relativeP.X >= TopBar.AbsoluteSize.X - range and relativeP.Y >= Background.AbsoluteSize.Y - range and relativeP.X <= TopBar.AbsoluteSize.X and relativeP.Y <= Background.AbsoluteSize.Y then
                    return true, 'B'
                elseif relativeP.X >= TopBar.AbsoluteSize.X - range and relativeP.X <= Background.AbsoluteSize.X then
                    return true, 'X'
                elseif relativeP.Y >= Background.AbsoluteSize.Y - range and relativeP.Y <= Background.AbsoluteSize.Y then
                    return true, 'Y'
                end

                return false
            end
            isInDragRange = function(p)
                local relativeP = p - Background.AbsolutePosition
                local topbarAS = TopBar.AbsoluteSize

                return relativeP.X <= topbarAS.X - CloseButton.AbsoluteSize.X * 3 and relativeP.X >= 0 and relativeP.Y <= topbarAS.Y and relativeP.Y >= 0 or false
            end

            local customCursor = Create('ImageLabel', {
                Parent = SimpleSpy3,
                Visible = false,
                Size = UDim2.fromOffset(200, 200),
                ZIndex = 1e9,
                BackgroundTransparency = 1,
                Image = '',
                Parent = SimpleSpy3,
            })

            mouseEntered = function()
                local con = connections.SIMPLESPY_CURSOR

                if con then
                    con.Disconnect(con)

                    connections.SIMPLESPY_CURSOR = nil
                end

                connections.SIMPLESPY_CURSOR = RunService.RenderStepped:Connect(function(
                )
                    UserInputService.MouseIconEnabled = not mouseInGui
                    customCursor.Visible = mouseInGui

                    if mouseInGui and getgenv().SimpleSpyExecuted then
                        local mouseLocation = UserInputService.GetMouseLocation(UserInputService) - GuiInset

                        customCursor.Position = UDim2.fromOffset(mouseLocation.X - customCursor.AbsoluteSize.X / 2, mouseLocation.Y - customCursor.AbsoluteSize.Y / 2)

                        local inRange, type = isInResizeRange(mouseLocation)

                        if inRange and not closed then
                            if not sideClosed then
                                customCursor.Image = type == 'B' and 'rbxassetid://6065821980' or type == 'X' and 'rbxassetid://6065821086' or type == 'Y' and 'rbxassetid://6065821596'
                            elseif type == 'Y' or type == 'B' then
                                customCursor.Image = 'rbxassetid://6065821596'
                            end
                        elseif customCursor.Image ~= 'rbxassetid://6065775281' then
                            customCursor.Image = 'rbxassetid://6065775281'
                        end
                    else
                        connections.SIMPLESPY_CURSOR:Disconnect()
                    end
                end)
            end
            mouseMoved = function()
                local mousePos = UserInputService.GetMouseLocation(UserInputService) - GuiInset

                if not closed and mousePos.X >= TopBar.AbsolutePosition.X and mousePos.X <= TopBar.AbsolutePosition.X + TopBar.AbsoluteSize.X and mousePos.Y >= Background.AbsolutePosition.Y and mousePos.Y <= Background.AbsolutePosition.Y + Background.AbsoluteSize.Y then
                    if not mouseInGui then
                        mouseInGui = true

                        mouseEntered()
                    end
                else
                    mouseInGui = false
                end
            end
            maximizeSize = function(speed)
                if not speed then
                    speed = 0.05
                end

                TweenService.Create(TweenService, LeftPanel, TweenInfo.new(speed), {
                    Size = UDim2.fromOffset(LeftPanel.AbsoluteSize.X, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y),
                }):Play()
                TweenService.Create(TweenService, RightPanel, TweenInfo.new(speed), {
                    Size = UDim2.fromOffset(Background.AbsoluteSize.X - LeftPanel.AbsoluteSize.X, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y),
                }):Play()
                TweenService.Create(TweenService, TopBar, TweenInfo.new(speed), {
                    Size = UDim2.fromOffset(Background.AbsoluteSize.X, TopBar.AbsoluteSize.Y),
                }):Play()
                TweenService.Create(TweenService, ScrollingFrame, TweenInfo.new(speed), {
                    Size = UDim2.fromOffset(Background.AbsoluteSize.X - LeftPanel.AbsoluteSize.X, 110),
                    Position = UDim2.fromOffset(0, Background.AbsoluteSize.Y - 119 - TopBar.AbsoluteSize.Y),
                }):Play()
                TweenService.Create(TweenService, CodeBox, TweenInfo.new(speed), {
                    Size = UDim2.fromOffset(Background.AbsoluteSize.X - LeftPanel.AbsoluteSize.X, Background.AbsoluteSize.Y - 119 - TopBar.AbsoluteSize.Y),
                }):Play()
                TweenService.Create(TweenService, LogList, TweenInfo.new(speed), {
                    Size = UDim2.fromOffset(LogList.AbsoluteSize.X, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y - 18),
                }):Play()
            end
            minimizeSize = function(speed)
                if not speed then
                    speed = 0.05
                end

                TweenService.Create(TweenService, LeftPanel, TweenInfo.new(speed), {
                    Size = UDim2.fromOffset(LeftPanel.AbsoluteSize.X, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y),
                }):Play()
                TweenService.Create(TweenService, RightPanel, TweenInfo.new(speed), {
                    Size = UDim2.fromOffset(0, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y),
                }):Play()
                TweenService.Create(TweenService, TopBar, TweenInfo.new(speed), {
                    Size = UDim2.fromOffset(LeftPanel.AbsoluteSize.X, TopBar.AbsoluteSize.Y),
                }):Play()
                TweenService.Create(TweenService, ScrollingFrame, TweenInfo.new(speed), {
                    Size = UDim2.fromOffset(0, 119),
                    Position = UDim2.fromOffset(0, Background.AbsoluteSize.Y - 119 - TopBar.AbsoluteSize.Y),
                }):Play()
                TweenService.Create(TweenService, CodeBox, TweenInfo.new(speed), {
                    Size = UDim2.fromOffset(0, Background.AbsoluteSize.Y - 119 - TopBar.AbsoluteSize.Y),
                }):Play()
                TweenService.Create(TweenService, LogList, TweenInfo.new(speed), {
                    Size = UDim2.fromOffset(LogList.AbsoluteSize.X, Background.AbsoluteSize.Y - TopBar.AbsoluteSize.Y - 18),
                }):Play()
            end
            validateSize = function()
                local x, y = Background.AbsoluteSize.X, Background.AbsoluteSize.Y
                local screenSize = workspace.CurrentCamera.ViewportSize

                if x + Background.AbsolutePosition.X > screenSize.X then
                    if screenSize.X - Background.AbsolutePosition.X >= 450 then
                        x = screenSize.X - Background.AbsolutePosition.X
                    else
                        x = 450
                    end
                elseif y + Background.AbsolutePosition.Y > screenSize.Y then
                    if screenSize.X - Background.AbsolutePosition.Y >= 268 then
                        y = screenSize.Y - Background.AbsolutePosition.Y
                    else
                        y = 268
                    end
                end

                Background.Size = UDim2.fromOffset(x, y)
            end
            backgroundUserInput = function(input)
                local mousePos = UserInputService.GetMouseLocation(UserInputService) - GuiInset
                local inResizeRange, type = isInResizeRange(mousePos)

                if input.UserInputType == Enum.UserInputType.MouseButton1 and inResizeRange then
                    local lastPos = UserInputService.GetMouseLocation(UserInputService)
                    local offset = Background.AbsoluteSize - lastPos
                    local currentPos = lastPos + offset

                    if not connections.SIMPLESPY_RESIZE then
                        connections.SIMPLESPY_RESIZE = RunService.RenderStepped:Connect(function(
                        )
                            local newPos = UserInputService.GetMouseLocation(UserInputService)

                            if newPos ~= lastPos then
                                local currentX = (newPos + offset).X
                                local currentY = (newPos + offset).Y

                                if currentX < 450 then
                                    currentX = 450
                                end
                                if currentY < 268 then
                                    currentY = 268
                                end

                                currentPos = Vector2.new(currentX, currentY)
                                Background.Size = UDim2.fromOffset((not sideClosed and not closed and (type == 'X' or type == 'B')) and currentPos.X or Background.AbsoluteSize.X, (not closed and (type == 'Y' or type == 'B')) and currentPos.Y or Background.AbsoluteSize.Y)

                                validateSize()

                                if sideClosed then
                                    minimizeSize()
                                else
                                    maximizeSize()
                                end

                                lastPos = newPos
                            end
                        end)
                    end

                    table.insert(connections, UserInputService.InputEnded:Connect(function(
                        inputE
                    )
                        if input == inputE then
                            if connections.SIMPLESPY_RESIZE then
                                connections.SIMPLESPY_RESIZE:Disconnect()

                                connections.SIMPLESPY_RESIZE = nil
                            end
                        end
                    end))
                elseif isInDragRange(mousePos) then
                    onBarInput(input)
                end
            end
            getPlayerFromInstance = function(instance)
                for _, v in next, Players.GetPlayers(Players)do
                    if v.Character and (instance.IsDescendantOf(instance, v.Character) or instance == v.Character) then
                        return v
                    end
                end
            end
            eventSelect = function(frame)
                if selected and selected.Log then
                    if selected.Button then
                        spawn(function()
                            TweenService.Create(TweenService, selected.Button, TweenInfo.new(0.5), {
                                BackgroundColor3 = Color3.fromRGB(0, 0, 0),
                            }):Play()
                        end)
                    end

                    selected = nil
                end

                for _, v in next, logs do
                    if frame == v.Log then
                        selected = v
                    end
                end

                if selected and selected.Log then
                    spawn(function()
                        TweenService.Create(TweenService, frame.Button, TweenInfo.new(0.5), {
                            BackgroundColor3 = Color3.fromRGB(92, 126, 229),
                        }):Play()
                    end)
                    codebox.setRaw(codebox, selected.GenScript)
                end
                if sideClosed then
                    toggleSideTray()
                end
            end
            updateFunctionCanvas = function()
                ScrollingFrame.CanvasSize = UDim2.fromOffset(UIGridLayout.AbsoluteContentSize.X, UIGridLayout.AbsoluteContentSize.Y)
            end
            updateRemoteCanvas = function()
                LogList.CanvasSize = UDim2.fromOffset(UIListLayout.AbsoluteContentSize.X, UIListLayout.AbsoluteContentSize.Y)
            end
            makeToolTip = function(enable, text)
                if enable and text then
                    if ToolTip.Visible then
                        ToolTip.Visible = false

                        local tooltip = connections.ToolTip

                        if tooltip then
                            tooltip.Disconnect(tooltip)
                        end
                    end

                    local first = true

                    connections.ToolTip = RunService.RenderStepped:Connect(function(
                    )
                        local MousePos = UserInputService.GetMouseLocation(UserInputService)
                        local topLeft = MousePos + Vector2.new(20, -15)
                        local bottomRight = topLeft + ToolTip.AbsoluteSize
                        local ViewportSize = workspace.CurrentCamera.ViewportSize
                        local ViewportSizeX = ViewportSize.X
                        local ViewportSizeY = ViewportSize.Y

                        if topLeft.X < 0 then
                            topLeft = Vector2.new(0, topLeft.Y)
                        elseif bottomRight.X > ViewportSizeX then
                            topLeft = Vector2.new(ViewportSizeX - ToolTip.AbsoluteSize.X, topLeft.Y)
                        end
                        if topLeft.Y < 0 then
                            topLeft = Vector2.new(topLeft.X, 0)
                        elseif bottomRight.Y > ViewportSizeY - 35 then
                            topLeft = Vector2.new(topLeft.X, ViewportSizeY - ToolTip.AbsoluteSize.Y - 35)
                        end
                        if topLeft.X <= MousePos.X and topLeft.Y <= MousePos.Y then
                            topLeft = Vector2.new(MousePos.X - ToolTip.AbsoluteSize.X - 2, MousePos.Y - ToolTip.AbsoluteSize.Y - 2)
                        end
                        if first then
                            ToolTip.Position = UDim2.fromOffset(topLeft.X, topLeft.Y)
                            first = false
                        else
                            ToolTip.TweenPosition(ToolTip, UDim2.fromOffset(topLeft.X, topLeft.Y), 'Out', 'Linear', 0.1)
                        end
                    end)
                    TextLabel.Text = text
                    TextLabel.TextScaled = true
                    ToolTip.Visible = true

                    return
                else
                    if ToolTip.Visible then
                        ToolTip.Visible = false

                        local tooltip = connections.ToolTip

                        if tooltip then
                            tooltip.Disconnect(tooltip)
                        end
                    end
                end
            end
            newButton = function(name, description, onClick)
                local FunctionTemplate = Create('Frame', {
                    Name = 'FunctionTemplate',
                    Parent = ScrollingFrame,
                    BackgroundColor3 = Color3.new(1, 1, 1),
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, 117, 0, 23),
                })
                local ColorBar = Create('Frame', {
                    Name = 'ColorBar',
                    Parent = FunctionTemplate,
                    BackgroundColor3 = Color3.new(1, 1, 1),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 7, 0, 10),
                    Size = UDim2.new(0, 7, 0, 18),
                    ZIndex = 3,
                })
                local Text = Create('TextLabel', {
                    Text = name,
                    Name = 'Text',
                    Parent = FunctionTemplate,
                    BackgroundColor3 = Color3.new(1, 1, 1),
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 19, 0, 10),
                    Size = UDim2.new(0, 69, 0, 18),
                    ZIndex = 2,
                    Font = Enum.Font.SourceSans,
                    TextColor3 = Color3.new(1, 1, 1),
                    TextSize = 14,
                    TextStrokeColor3 = Color3.new(0.145098, 0.141176, 0.14902),
                    TextXAlignment = Enum.TextXAlignment.Left,
                })
                local Button = Create('TextButton', {
                    Name = 'Button',
                    Parent = FunctionTemplate,
                    BackgroundColor3 = Color3.new(0, 0, 0),
                    BackgroundTransparency = 0.69999998807907,
                    BorderColor3 = Color3.new(1, 1, 1),
                    Position = UDim2.new(0, 7, 0, 10),
                    Size = UDim2.new(0, 80, 0, 18),
                    AutoButtonColor = false,
                    Font = Enum.Font.SourceSans,
                    Text = '',
                    TextColor3 = Color3.new(0, 0, 0),
                    TextSize = 14,
                })

                Button.MouseEnter:Connect(function()
                    makeToolTip(true, description())
                end)
                Button.MouseLeave:Connect(function()
                    makeToolTip(false)
                end)
                FunctionTemplate.AncestryChanged:Connect(function()
                    makeToolTip(false)
                end)
                Button.MouseButton1Click:Connect(function(...)
                    logthread(running())
                    onClick(FunctionTemplate, ...)
                end)
                updateFunctionCanvas()
            end
            newRemote = function(type, data)
                if layoutOrderNum < 1 then
                    layoutOrderNum = 999999999
                end

                local remote = data.remote
                local callingscript = data.callingscript
                local RemoteTemplate = Create('Frame', {
                    LayoutOrder = layoutOrderNum,
                    Name = 'RemoteTemplate',
                    Parent = LogList,
                    BackgroundColor3 = Color3.new(1, 1, 1),
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, 117, 0, 27),
                })
                local ColorBar = Create('Frame', {
                    Name = 'ColorBar',
                    Parent = RemoteTemplate,
                    BackgroundColor3 = (type == 'event' and Color3.fromRGB(255, 242, 0)) or Color3.fromRGB(99, 86, 245),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 1),
                    Size = UDim2.new(0, 7, 0, 18),
                    ZIndex = 2,
                })
                local Text = Create('TextLabel', {
                    TextTruncate = Enum.TextTruncate.AtEnd,
                    Name = 'Text',
                    Parent = RemoteTemplate,
                    BackgroundColor3 = Color3.new(1, 1, 1),
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 12, 0, 1),
                    Size = UDim2.new(0, 105, 0, 18),
                    ZIndex = 2,
                    Font = Enum.Font.SourceSans,
                    Text = remote.Name,
                    TextColor3 = Color3.new(1, 1, 1),
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                })
                local Button = Create('TextButton', {
                    Name = 'Button',
                    Parent = RemoteTemplate,
                    BackgroundColor3 = Color3.new(0, 0, 0),
                    BackgroundTransparency = 0.75,
                    BorderColor3 = Color3.new(1, 1, 1),
                    Position = UDim2.new(0, 0, 0, 1),
                    Size = UDim2.new(0, 117, 0, 18),
                    AutoButtonColor = false,
                    Font = Enum.Font.SourceSans,
                    Text = '',
                    TextColor3 = Color3.new(0, 0, 0),
                    TextSize = 14,
                })
                local log = {
                    Name = remote.name,
                    Function = data.infofunc or '--Function Info is disabled',
                    Remote = remote,
                    DebugId = data.id,
                    metamethod = data.metamethod,
                    args = data.args,
                    Log = RemoteTemplate,
                    Button = Button,
                    Blocked = data.blocked,
                    Source = callingscript,
                    returnvalue = data.returnvalue,
                    GenScript = 
[[-- Generating, please wait...
-- (If this message persists, the remote args are likely extremely long)]],
                }

                logs[#logs + 1] = log

                local connect = Button.MouseButton1Click:Connect(function()
                    logthread(running())
                    eventSelect(RemoteTemplate)

                    log.GenScript = genScript(log.Remote, log.args)

                    if blocked then
                        log.GenScript = 
[[-- THIS REMOTE WAS PREVENTED FROM FIRING TO THE SERVER BY SIMPLESPY

]] .. log.GenScript
                    end
                    if selected == log and RemoteTemplate then
                        eventSelect(RemoteTemplate)
                    end
                end)

                layoutOrderNum = layoutOrderNum - 1

                table.insert(remoteLogs, 1, {connect, RemoteTemplate})
                clean()
                updateRemoteCanvas()
            end
            genScript = function(remote, args)
                prevTables = {}

                local gen = ''

                if #args > 0 then
                    xpcall(function()
                        gen = 'local args = ' .. LazyFix.Convert(args, true) .. '\n'
                    end, function(err)
                        gen = gen .. '-- An error has occured:\n--' .. err .. 
[[

-- TableToString failure! Reverting to legacy functionality (results may vary)
local args = {]]

                        xpcall(function()
                            for i, v in next, args do
                                if type(i) ~= 'Instance' and type(i) ~= 'userdata' then
                                    gen = gen .. '\n    [object] = '
                                elseif type(i) == 'string' then
                                    gen = gen .. '\n    ["' .. i .. '"] = '
                                elseif type(i) == 'userdata' and typeof(i) ~= 'Instance' then
                                    gen = gen .. '\n    [' .. string.format('nil --[[%s]]', typeof(v)) .. ')] = '
                                elseif type(i) == 'userdata' then
                                    gen = gen .. '\n    [game.' .. i.GetFullName(i) .. ')] = '
                                end
                                if type(v) ~= 'Instance' and type(v) ~= 'userdata' then
                                    gen = gen .. 'object'
                                elseif type(v) == 'string' then
                                    gen = gen .. '"' .. v .. '"'
                                elseif type(v) == 'userdata' and typeof(v) ~= 'Instance' then
                                    gen = gen .. string.format('nil --[[%s]]', typeof(v))
                                elseif type(v) == 'userdata' then
                                    gen = gen .. 'game.' .. v.GetFullName(v)
                                end
                            end

                            gen = gen .. '\n}\n\n'
                        end, function()
                            gen = gen .. '}\n-- Legacy tableToString failure! Unable to decompile.'
                        end)
                    end)

                    if not remote.IsDescendantOf(remote, game) and not getnilrequired then
                        gen = 
[[function getNil(name,class) for _,v in next, getnilinstances()do if v.ClassName==class and v.Name==name then return v;end end end

]] .. gen
                    end
                    if remote.IsA(remote, 'RemoteEvent') or remote.IsA(remote, 'UnreliableRemoteEvent') then
                        gen = gen .. LazyFix.ConvertKnown('Instance', remote) .. ':FireServer(unpack(args))'
                    elseif remote.IsA(remote, 'RemoteFunction') then
                        gen = gen .. LazyFix.ConvertKnown('Instance', remote) .. ':InvokeServer(unpack(args))'
                    end
                else
                    if remote.IsA(remote, 'RemoteEvent') or remote.IsA(remote, 'UnreliableRemoteEvent') then
                        gen = gen .. LazyFix.ConvertKnown('Instance', remote) .. ':FireServer()'
                    elseif remote.IsA(remote, 'RemoteFunction') then
                        gen = gen .. LazyFix.ConvertKnown('Instance', remote) .. ':InvokeServer()'
                    end
                end

                prevTables = {}

                return gen
            end

            local CustomGeneration = {
                Vector3 = (function()
                    local temp = {}

                    for i, v in Vector3 do
                        if type(v) == 'vector' then
                            temp[v] = string.format('Vector3.%s', __DARKLUA_TO_STR(i))
                        end
                    end

                    return temp
                end)(),
                Vector2 = (function()
                    local temp = {}

                    for i, v in Vector2 do
                        if type(v) == 'userdata' then
                            temp[v] = string.format('Vector2.%s', __DARKLUA_TO_STR(i))
                        end
                    end

                    return temp
                end)(),
                CFrame = {
                    [CFrame.identity] = 'CFrame.identity',
                },
            }
            local number_table = {
                inf = 'math.huge',
                ['-inf'] = '-math.huge',
                nan = '0/0',
            }
            local ufunctions

            ufunctions = {
                TweenInfo = function(u)
                    return string.format('TweenInfo.new(%s, %s, %s, %s, %s, %s)', __DARKLUA_TO_STR(u.Time), __DARKLUA_TO_STR(u.EasingStyle), __DARKLUA_TO_STR(u.EasingDirection), __DARKLUA_TO_STR(u.RepeatCount), __DARKLUA_TO_STR(u.Reverses), __DARKLUA_TO_STR(u.DelayTime))
                end,
                Ray = function(u)
                    local Vector3tostring = ufunctions.Vector3

                    return string.format('Ray.new(%s, %s)', __DARKLUA_TO_STR(Vector3tostring(u.Origin)), __DARKLUA_TO_STR(Vector3tostring(u.Direction)))
                end,
                BrickColor = function(u)
                    return string.format('BrickColor.new(%s)', __DARKLUA_TO_STR(u.Number))
                end,
                NumberRange = function(u)
                    return string.format('NumberRange.new(%s, %s)', __DARKLUA_TO_STR(u.Min), __DARKLUA_TO_STR(u.Max))
                end,
                Region3 = function(u)
                    local center = u.CFrame.Position
                    local centersize = u.Size / 2
                    local Vector3tostring = ufunctions.Vector3

                    return string.format('Region3.new(%s, %s)', __DARKLUA_TO_STR(Vector3tostring(center - centersize)), __DARKLUA_TO_STR(Vector3tostring(center + centersize)))
                end,
                Faces = function(u)
                    local faces = {}

                    if u.Top then
                        table.insert(faces, 'Top')
                    end
                    if u.Bottom then
                        table.insert(faces, 'Enum.NormalId.Bottom')
                    end
                    if u.Left then
                        table.insert(faces, 'Enum.NormalId.Left')
                    end
                    if u.Right then
                        table.insert(faces, 'Enum.NormalId.Right')
                    end
                    if u.Back then
                        table.insert(faces, 'Enum.NormalId.Back')
                    end
                    if u.Front then
                        table.insert(faces, 'Enum.NormalId.Front')
                    end

                    return string.format('Faces.new(%s)', __DARKLUA_TO_STR(table.concat(faces, ', ')))
                end,
                EnumItem = function(u)
                    return tostring(u)
                end,
                Enums = function(u)
                    return 'Enum'
                end,
                Enum = function(u)
                    return string.format('Enum.%s', __DARKLUA_TO_STR(u))
                end,
                Vector3 = function(u)
                    return CustomGeneration.Vector3[u] or string.format('Vector3.new(%s)', __DARKLUA_TO_STR(u))
                end,
                Vector2 = function(u)
                    return CustomGeneration.Vector2[u] or string.format('Vector2.new(%s)', __DARKLUA_TO_STR(u))
                end,
                CFrame = function(u)
                    return CustomGeneration.CFrame[u] or string.format('CFrame.new(%s)', __DARKLUA_TO_STR(table.concat({
                        u.GetComponents(u),
                    }, ', ')))
                end,
                PathWaypoint = function(u)
                    return string.format('PathWaypoint.new(%s, %s, "%s")', __DARKLUA_TO_STR(ufunctions.Vector3(u.Position)), __DARKLUA_TO_STR(u.Action), __DARKLUA_TO_STR(u.Label))
                end,
                UDim = function(u)
                    return string.format('UDim.new(%s)', __DARKLUA_TO_STR(u))
                end,
                UDim2 = function(u)
                    return string.format('UDim2.new(%s)', __DARKLUA_TO_STR(u))
                end,
                Rect = function(u)
                    local Vector2tostring = ufunctions.Vector2

                    return string.format('Rect.new(%s, %s)', __DARKLUA_TO_STR(Vector2tostring(u.Min)), __DARKLUA_TO_STR(Vector2tostring(u.Max)))
                end,
                Color3 = function(u)
                    return string.format('Color3.new(%s, %s, %s)', __DARKLUA_TO_STR(u.R), __DARKLUA_TO_STR(u.G), __DARKLUA_TO_STR(u.B))
                end,
                RBXScriptSignal = function(u)
                    return "RBXScriptSignal --[[RBXScriptSignal's are not supported]]"
                end,
                RBXScriptConnection = function(u)
                    return 
[=[RBXScriptConnection --[[RBXScriptConnection's are not supported]]]=]
                end,
            }

            local typeofv2sfunctions = {
                number = function(v)
                    local number = tostring(v)

                    return number_table[number] or number
                end,
                boolean = function(v)
                    return tostring(v)
                end,
                string = function(v, l)
                    return formatstr(v, l)
                end,
                ['function'] = function(v)
                    return f2s(v)
                end,
                table = function(v, l, p, n, vtv, i, pt, path, tables, tI)
                    return t2s(v, l, p, n, vtv, i, pt, path, tables, tI)
                end,
                Instance = function(v)
                    local DebugId = OldDebugId(v)

                    return i2p(v, generation[DebugId])
                end,
                userdata = function(v)
                    if configs.advancedinfo then
                        if getrawmetatable(v) then
                            return 'newproxy(true)'
                        end

                        return 'newproxy(false)'
                    end

                    return 'newproxy(true)'
                end,
            }
            local typev2sfunctions = {
                userdata = function(v, vtypeof)
                    if ufunctions[vtypeof] then
                        return ufunctions[vtypeof](v)
                    end

                    return string.format('%s(%s) --[[Generation Failure]]', __DARKLUA_TO_STR(vtypeof), __DARKLUA_TO_STR(rawtostring(v)))
                end,
                vector = ufunctions.Vector3,
            }

            v2s = function(v, l, p, n, vtv, i, pt, path, tables, tI)
                local vtypeof = typeof(v)
                local vtypeoffunc = typeofv2sfunctions[vtypeof]
                local vtypefunc = typev2sfunctions[type(v)]
                local vtype = type(v)

                if not tI then
                    tI = {0}
                else
                    tI[1] = tI[1] + 1
                end
                if vtypeoffunc then
                    return vtypeoffunc(v, l, p, n, vtv, i, pt, path, tables, tI)
                elseif vtypefunc then
                    return vtypefunc(v, vtypeof)
                end

                return string.format('%s(%s) --[[Generation Failure]]', __DARKLUA_TO_STR(vtypeof), __DARKLUA_TO_STR(rawtostring(v)))
            end
            v2v = function(t)
                topstr = ''
                bottomstr = ''
                getnilrequired = false

                local ret = ''
                local count = 1

                for i, v in next, t do
                    if type(i) == 'string' and i.match(i, '^[%a_]+[%w_]*$') then
                        ret = ret .. 'local ' .. i .. ' = ' .. v2s(v, nil, nil, i, true) .. '\n'
                    elseif rawtostring(i):match('^[%a_]+[%w_]*$') then
                        ret = ret .. 'local ' .. lower(rawtostring(i)) .. '_' .. rawtostring(count) .. ' = ' .. v2s(v, nil, nil, lower(rawtostring(i)) .. '_' .. rawtostring(count), true) .. '\n'
                    else
                        ret = ret .. 'local ' .. type(v) .. '_' .. rawtostring(count) .. ' = ' .. v2s(v, nil, nil, type(v) .. '_' .. rawtostring(count), true) .. '\n'
                    end

                    count = count + 1
                end

                if getnilrequired then
                    topstr = 
[[function getNil(name,class) for _,v in next, getnilinstances() do if v.ClassName==class and v.Name==name then return v;end end end
]] .. topstr
                end
                if #topstr > 0 then
                    ret = topstr .. '\n' .. ret
                end
                if #bottomstr > 0 then
                    ret = ret .. bottomstr
                end

                return ret
            end
            tabletostring = function(tbl, format) end
            t2s = function(t, l, p, n, vtv, i, pt, path, tables, tI)
                local globalIndex = table.find(getgenv(), t)

                if type(globalIndex) == 'string' then
                    return globalIndex
                end
                if not tI then
                    tI = {0}
                end
                if not path then
                    path = ''
                end
                if not l then
                    l = 0
                    tables = {}
                end
                if not p then
                    p = t
                end

                for _, v in next, tables do
                    if n and rawequal(v, t) then
                        bottomstr = bottomstr .. '\n' .. rawtostring(n) .. rawtostring(path) .. ' = ' .. rawtostring(n) .. rawtostring(({
                            v2p(v, p),
                        })[2])

                        return '{} --[[DUPLICATE]]'
                    end
                end

                table.insert(tables, t)

                local s = '{'
                local size = 0

                l = l + indent

                for k, v in next, t do
                    local __DARKLUA_CONTINUE_53 = false

                    repeat
                        size = size + 1

                        if size > (getgenv().SimpleSpyMaxTableSize or 1000) then
                            s = s .. '\n' .. string.rep(' ', l) .. 
[[-- MAXIMUM TABLE SIZE REACHED, CHANGE 'getgenv().SimpleSpyMaxTableSize' TO ADJUST MAXIMUM SIZE ]]

                            break
                        end
                        if rawequal(k, t) then
                            bottomstr = bottomstr .. string.format('\n%s%s[%s%s] = %s', __DARKLUA_TO_STR(n), __DARKLUA_TO_STR(path), __DARKLUA_TO_STR(n), __DARKLUA_TO_STR(path), __DARKLUA_TO_STR((rawequal(v, k) and string.format('%s%s', __DARKLUA_TO_STR(n), __DARKLUA_TO_STR(path)) or v2s(v, l, p, n, vtv, k, t, string.format('%s[%s%s]', __DARKLUA_TO_STR(path), __DARKLUA_TO_STR(n), __DARKLUA_TO_STR(path)), tables))))
                            size = size - 1
                            __DARKLUA_CONTINUE_53 = true

                            break
                        end

                        local currentPath = ''

                        if type(k) == 'string' and k.match(k, '^[%a_]+[%w_]*$') then
                            currentPath = '.' .. k
                        else
                            currentPath = '[' .. v2s(k, l, p, n, vtv, k, t, path .. currentPath, tables, tI) .. ']'
                        end
                        if size % 100 == 0 then
                            scheduleWait()
                        end

                        s = s .. '\n' .. string.rep(' ', l) .. '[' .. v2s(k, l, p, n, vtv, k, t, path .. currentPath, tables, tI) .. '] = ' .. v2s(v, l, p, n, vtv, k, t, path .. currentPath, tables, tI) .. ','
                        __DARKLUA_CONTINUE_53 = true
                    until true

                    if not __DARKLUA_CONTINUE_53 then
                        break
                    end
                end

                if #s > 1 then
                    s = s.sub(s, 1, #s - 1)
                end
                if size > 0 then
                    s = s .. '\n' .. string.rep(' ', l - indent)
                end

                return s .. '}'
            end
            f2s = function(f)
                for k, x in next, getgenv()do
                    local isgucci, gpath

                    if rawequal(x, f) then
                        isgucci, gpath = true, ''
                    elseif type(x) == 'table' then
                        isgucci, gpath = v2p(f, x)
                    end
                    if isgucci and type(k) ~= 'function' then
                        if type(k) == 'string' and k.match(k, '^[%a_]+[%w_]*$') then
                            return k .. gpath
                        else
                            return 'getgenv()[' .. v2s(k) .. ']' .. gpath
                        end
                    end
                end

                if configs.funcEnabled then
                    local funcname = info(f, 'n')

                    if funcname and funcname.match(funcname, '^[%a_]+[%w_]*$') then
                        return string.format('function %s() end -- Function Called: %s', __DARKLUA_TO_STR(funcname), __DARKLUA_TO_STR(funcname))
                    end
                end

                return tostring(f)
            end
            i2p = function(i, customgen)
                if customgen then
                    return customgen
                end

                local player = getplayer(i)
                local parent = i
                local out = ''

                if parent == nil then
                    return 'nil'
                elseif player then
                    while true do
                        if parent and parent == player.Character then
                            if player == Players.LocalPlayer then
                                return 'game:GetService("Players").LocalPlayer.Character' .. out
                            else
                                return i2p(player) .. '.Character' .. out
                            end
                        else
                            if parent.Name:match('[%a_]+[%w+]*') ~= parent.Name then
                                out = ':FindFirstChild(' .. formatstr(parent.Name) .. ')' .. out
                            else
                                out = '.' .. parent.Name .. out
                            end
                        end

                        task.wait()

                        parent = parent.Parent
                    end
                elseif parent ~= game then
                    while true do
                        if parent and parent.Parent == game then
                            if SafeGetService(parent.ClassName) then
                                if lower(parent.ClassName) == 'workspace' then
                                    return string.format('workspace%s', __DARKLUA_TO_STR(out))
                                else
                                    return 'game:GetService("' .. parent.ClassName .. '")' .. out
                                end
                            else
                                if parent.Name:match('[%a_]+[%w_]*') then
                                    return 'game.' .. parent.Name .. out
                                else
                                    return 'game:FindFirstChild(' .. formatstr(parent.Name) .. ')' .. out
                                end
                            end
                        elseif not parent.Parent then
                            getnilrequired = true

                            return 'getNil(' .. formatstr(parent.Name) .. ', "' .. parent.ClassName .. '")' .. out
                        else
                            if parent.Name:match('[%a_]+[%w_]*') ~= parent.Name then
                                out = ':WaitForChild(' .. formatstr(parent.Name) .. ')' .. out
                            else
                                out = ':WaitForChild("' .. parent.Name .. '")' .. out
                            end
                        end
                        if i.IsDescendantOf(i, Players.LocalPlayer) then
                            return 'game:GetService("Players").LocalPlayer' .. out
                        end

                        parent = parent.Parent

                        task.wait()
                    end
                else
                    return 'game'
                end
            end
            getplayer = function(instance)
                for _, v in next, Players.GetPlayers(Players)do
                    if v.Character and (instance.IsDescendantOf(instance, v.Character) or instance == v.Character) then
                        return v
                    end
                end
            end
            v2p = function(x, t, path, prev)
                if not path then
                    path = ''
                end
                if not prev then
                    prev = {}
                end
                if rawequal(x, t) then
                    return true, ''
                end

                for i, v in next, t do
                    if rawequal(v, x) then
                        if type(i) == 'string' and i.match(i, '^[%a_]+[%w_]*$') then
                            return true, (path .. '.' .. i)
                        else
                            return true, (path .. '[' .. v2s(i) .. ']')
                        end
                    end
                    if type(v) == 'table' then
                        local duplicate = false

                        for _, y in next, prev do
                            if rawequal(y, v) then
                                duplicate = true
                            end
                        end

                        if not duplicate then
                            table.insert(prev, t)

                            local found

                            found, p = v2p(x, v, path, prev)

                            if found then
                                if type(i) == 'string' and i.match(i, '^[%a_]+[%w_]*$') then
                                    return true, '.' .. i .. p
                                else
                                    return true, '[' .. v2s(i) .. ']' .. p
                                end
                            end
                        end
                    end
                end

                return false, ''
            end
            formatstr = function(s, indentation)
                if not indentation then
                    indentation = 0
                end

                local handled, reachedMax = handlespecials(s, indentation)

                return '"' .. handled .. '"' .. (reachedMax and 
[=[ --[[ MAXIMUM STRING SIZE REACHED, CHANGE 'getgenv().SimpleSpyMaxStringSize' TO ADJUST MAXIMUM SIZE ]]]=] or '')
            end

            local function isFinished(coroutines)
                for _, v in next, coroutines do
                    if status(v) == 'running' then
                        return false
                    end
                end

                return true
            end

            local specialstrings = {
                ['\n'] = function(thread, index)
                    resume(thread, index, '\\n')
                end,
                ['\t'] = function(thread, index)
                    resume(thread, index, '\\t')
                end,
                ['\\'] = function(thread, index)
                    resume(thread, index, '\\\\')
                end,
                ['"'] = function(thread, index)
                    resume(thread, index, '\\"')
                end,
            }

            handlespecials = function(s, indentation)
                local i = 0
                local n = 1
                local coroutines = {}
                local coroutineFunc = function(i, r)
                    s = s.sub(s, 0, i - 1) .. r .. s.sub(s, i + 1, -1)
                end
                local timeout = 0

                repeat
                    i = i + 1

                    if timeout >= 10 then
                        task.wait()

                        timeout = 0
                    end

                    local char = s.sub(s, i, i)

                    if byte(char) then
                        timeout = timeout + 1

                        local c = create(coroutineFunc)

                        table.insert(coroutines, c)

                        local specialfunc = specialstrings[char]

                        if specialfunc then
                            specialfunc(c, i)

                            i = i + 1
                        elseif byte(char) > 126 or byte(char) < 32 then
                            resume(c, i, '\\' .. byte(char))

                            i = i + #rawtostring(byte(char))
                        end
                        if i >= n * 100 then
                            local extra = string.format('" ..\n%s"', string.rep(' ', indentation + indent))

                            s = s.sub(s, 0, i) .. extra .. s.sub(s, i + 1, -1)
                            i = i + #extra
                            n = n + 1
                        end
                    end
                until char == '' or i > (getgenv().SimpleSpyMaxStringSize or 10000)

                while not isFinished(coroutines) do
                    RunService.Heartbeat:Wait()
                end

                clear(coroutines)

                if i > (getgenv().SimpleSpyMaxStringSize or 10000) then
                    s = string.sub(s, 0, getgenv().SimpleSpyMaxStringSize or 10000)

                    return s, true
                end

                return s, false
            end
            getScriptFromSrc = function(src)
                local realPath
                local runningTest
                local s, e
                local match = false

                if src.sub(src, 1, 1) == '=' then
                    realPath = game
                    s = 2
                else
                    runningTest = src.sub(src, 2, e and e - 1 or -1)

                    for _, v in next, getnilinstances()do
                        if v.Name == runningTest then
                            realPath = v

                            break
                        end
                    end

                    s = #runningTest + 1
                end
                if realPath then
                    e = src.sub(src, s, -1):find('%.')

                    local i = 0

                    repeat
                        i = i + 1

                        if not e then
                            runningTest = src.sub(src, s, -1)

                            local test = realPath.FindFirstChild(realPath, runningTest)

                            if test then
                                realPath = test
                            end

                            match = true
                        else
                            runningTest = src.sub(src, s, e)

                            local test = realPath.FindFirstChild(realPath, runningTest)
                            local yeOld = e

                            if test then
                                realPath = test
                                s = e + 2
                                e = src.sub(src, e + 2, -1):find('%.')
                                e = e and e + yeOld or e
                            else
                                e = src.sub(src, e + 2, -1):find('%.')
                                e = e and e + yeOld or e
                            end
                        end
                    until match or i >= 50
                end

                return realPath
            end
            schedule = function(f, ...)
                table.insert(scheduled, {f, ...})
            end
            scheduleWait = function()
                local thread = running()

                schedule(function()
                    resume(thread)
                end)
                yield()
            end

            local function taskscheduler()
                if not toggle then
                    scheduled = {}

                    return
                end
                if #scheduled > SIMPLESPYCONFIG_MaxRemotes + 100 then
                    table.remove(scheduled, #scheduled)
                end
                if #scheduled > 0 then
                    local currentf = scheduled[1]

                    table.remove(scheduled, 1)

                    if type(currentf) == 'table' and type(currentf[1]) == 'function' then
                        pcall(unpack(currentf))
                    end
                end
            end
            local function tablecheck(tabletocheck, instance, id)
                return tabletocheck[id] or tabletocheck[instance.Name]
            end

            remoteHandler = function(data)
                if configs.autoblock then
                    local id = data.id

                    if excluding[id] then
                        return
                    end
                    if not history[id] then
                        history[id] = {
                            badOccurances = 0,
                            lastCall = tick(),
                        }
                    end
                    if tick() - history[id].lastCall < 1 then
                        do
                            local __DARKLUA_VAR = history[id]

                            __DARKLUA_VAR.badOccurances = __DARKLUA_VAR.badOccurances + 1
                        end

                        return
                    else
                        history[id].badOccurances = 0
                    end
                    if history[id].badOccurances > 3 then
                        excluding[id] = true

                        return
                    end

                    history[id].lastCall = tick()
                end
                if (data.remote:IsA('RemoteEvent') or data.remote:IsA('UnreliableRemoteEvent')) and lower(data.method) == 'fireserver' then
                    newRemote('event', data)
                elseif data.remote:IsA('RemoteFunction') and lower(data.method) == 'invokeserver' then
                    newRemote('function', data)
                end
            end

            local newindex = function(method, originalfunction, ...)
                if typeof(...) == 'Instance' then
                    local remote = cloneref(...)

                    if remote.IsA(remote, 'RemoteEvent') or remote.IsA(remote, 'RemoteFunction') or remote.IsA(remote, 'UnreliableRemoteEvent') then
                        if not configs.logcheckcaller and checkcaller() then
                            return originalfunction(...)
                        end

                        local id = ThreadGetDebugId(remote)
                        local blockcheck = tablecheck(blocklist, remote, id)
                        local args = {
                            select(2, ...),
                        }

                        if not tablecheck(blacklist, remote, id) and not IsCyclicTable(args) then
                            local data = {
                                method = method,
                                remote = remote,
                                args = deepclone(args),
                                infofunc = infofunc,
                                callingscript = callingscript,
                                metamethod = '__index',
                                blockcheck = blockcheck,
                                id = id,
                                returnvalue = {},
                            }

                            args = nil

                            if configs.funcEnabled then
                                data.infofunc = info(2, 'f')

                                local calling = getcallingscript()

                                data.callingscript = calling and cloneref(calling) or nil
                            end

                            schedule(remoteHandler, data)
                        end
                        if blockcheck then
                            return
                        end
                    end
                end

                return originalfunction(...)
            end
            local newnamecall = newcclosure(function(...)
                local method = getnamecallmethod()

                if method and (method == 'FireServer' or method == 'fireServer' or method == 'InvokeServer' or method == 'invokeServer') then
                    if typeof(...) == 'Instance' then
                        local remote = cloneref(...)

                        if IsA(remote, 'RemoteEvent') or IsA(remote, 'RemoteFunction') or IsA(remote, 'UnreliableRemoteEvent') then
                            if not configs.logcheckcaller and checkcaller() then
                                return originalnamecall(...)
                            end

                            local id = ThreadGetDebugId(remote)
                            local blockcheck = tablecheck(blocklist, remote, id)
                            local args = {
                                select(2, ...),
                            }

                            if not tablecheck(blacklist, remote, id) and not IsCyclicTable(args) then
                                local data = {
                                    method = method,
                                    remote = remote,
                                    args = deepclone(args),
                                    infofunc = infofunc,
                                    callingscript = callingscript,
                                    metamethod = '__namecall',
                                    blockcheck = blockcheck,
                                    id = id,
                                    returnvalue = {},
                                }

                                args = nil

                                if configs.funcEnabled then
                                    data.infofunc = info(2, 'f')

                                    local calling = getcallingscript()

                                    data.callingscript = calling and cloneref(calling) or nil
                                end

                                schedule(remoteHandler, data)
                            end
                            if blockcheck then
                                return
                            end
                        end
                    end
                end

                return originalnamecall(...)
            end)
            local newFireServer = newcclosure(function(...)
                return newindex('FireServer', originalEvent, ...)
            end)
            local newUnreliableFireServer = newcclosure(function(...)
                return newindex('FireServer', originalUnreliableEvent, ...)
            end)
            local newInvokeServer = newcclosure(function(...)
                return newindex('InvokeServer', originalFunction, ...)
            end)

            local function disablehooks()
                if synv3 then
                    unhook(getrawmetatable(game).__namecall, originalnamecall)
                    unhook(Instance.new('RemoteEvent').FireServer, originalEvent)
                    unhook(Instance.new('RemoteFunction').InvokeServer, originalFunction)
                    unhook(Instance.new('UnreliableRemoteEvent').FireServer, originalUnreliableEvent)
                    restorefunction(originalnamecall)
                    restorefunction(originalEvent)
                    restorefunction(originalFunction)
                else
                    if hookmetamethod then
                        hookmetamethod(game, '__namecall', originalnamecall)
                    else
                        hookfunction(getrawmetatable(game).__namecall, originalnamecall)
                    end

                    hookfunction(Instance.new('RemoteEvent').FireServer, originalEvent)
                    hookfunction(Instance.new('RemoteFunction').InvokeServer, originalFunction)
                    hookfunction(Instance.new('UnreliableRemoteEvent').FireServer, originalUnreliableEvent)
                end
            end

            toggleSpy = function()
                if not toggle then
                    local oldnamecall

                    if synv3 then
                        oldnamecall = hook(getrawmetatable(game).__namecall, clonefunction(newnamecall))
                        originalEvent = hook(Instance.new('RemoteEvent').FireServer, clonefunction(newFireServer))
                        originalFunction = hook(Instance.new('RemoteFunction').InvokeServer, clonefunction(newInvokeServer))
                        originalUnreliableEvent = hook(Instance.new('UnreliableRemoteEvent').FireServer, clonefunction(newUnreliableFireServer))
                    else
                        if hookmetamethod then
                            oldnamecall = hookmetamethod(game, '__namecall', clonefunction(newnamecall))
                        else
                            oldnamecall = hookfunction(getrawmetatable(game).__namecall, clonefunction(newnamecall))
                        end

                        originalEvent = hookfunction(Instance.new('RemoteEvent').FireServer, clonefunction(newFireServer))
                        originalFunction = hookfunction(Instance.new('RemoteFunction').InvokeServer, clonefunction(newInvokeServer))
                        originalUnreliableEvent = hookfunction(Instance.new('UnreliableRemoteEvent').FireServer, clonefunction(newUnreliableFireServer))
                    end

                    originalnamecall = originalnamecall or function(...)
                        return oldnamecall(...)
                    end
                else
                    disablehooks()
                end
            end
            toggleSpyMethod = function()
                toggleSpy()

                toggle = not toggle
            end

            local function shutdown()
                if schedulerconnect then
                    schedulerconnect.Disconnect(schedulerconnect)
                end

                for _, connection in next, connections do
                    connection.Disconnect(connection)
                end
                for i, v in next, running_threads do
                    if ThreadIsNotDead(v) then
                        close(v)
                    end
                end

                clear(running_threads)
                clear(connections)
                clear(logs)
                clear(remoteLogs)
                disablehooks()
                SimpleSpy3.Destroy(SimpleSpy3)
                Storage.Destroy(Storage)

                UserInputService.MouseIconEnabled = true
                getgenv().SimpleSpyExecuted = false
            end

            if not getgenv().SimpleSpyExecuted then
                local succeeded, err = pcall(function()
                    if not RunService.IsClient(RunService) then
                        error('SimpleSpy cannot run on the server!')
                    end

                    getgenv().SimpleSpyShutdown = shutdown

                    onToggleButtonClick()

                    if not hookmetamethod then
                        ErrorPrompt(
[[Simple Spy V3 will not function to it's fullest capablity due to your executor not supporting hookmetamethod.]], true)
                    end

                    codebox = constructor.new(CodeBox)

                    logthread(spawn(function()
                        local suc, err = pcall(game.HttpGet, game, 
[[https://raw.githubusercontent.com/infyiff/backup/refs/heads/main/SimpleSpyV3/update.txt]])

                        codebox.setRaw(codebox, (suc and err) or '')
                    end))

                    getgenv().SimpleSpy = SimpleSpy
                    getgenv().getNil = function(name, class)
                        for _, v in next, getnilinstances()do
                            if v.ClassName == class and v.Name == name then
                                return v
                            end
                        end
                    end

                    Background.MouseEnter:Connect(function(...)
                        mouseInGui = true

                        mouseEntered()
                    end)
                    Background.MouseLeave:Connect(function(...)
                        mouseInGui = false

                        mouseEntered()
                    end)
                    TextLabel.GetPropertyChangedSignal(TextLabel, 'Text'):Connect(scaleToolTip)
                    MinimizeButton.MouseButton1Click:Connect(toggleMinimize)
                    MaximizeButton.MouseButton1Click:Connect(toggleSideTray)
                    Simple.MouseButton1Click:Connect(onToggleButtonClick)
                    CloseButton.MouseEnter:Connect(onXButtonHover)
                    CloseButton.MouseLeave:Connect(onXButtonUnhover)
                    Simple.MouseEnter:Connect(onToggleButtonHover)
                    Simple.MouseLeave:Connect(onToggleButtonUnhover)
                    CloseButton.MouseButton1Click:Connect(shutdown)
                    table.insert(connections, UserInputService.InputBegan:Connect(backgroundUserInput))
                    connectResize()

                    SimpleSpy3.Enabled = true

                    logthread(spawn(function()
                        delay(1, onToggleButtonUnhover)
                    end))

                    schedulerconnect = RunService.Heartbeat:Connect(taskscheduler)

                    bringBackOnResize()

                    SimpleSpy3.Parent = (gethui and gethui()) or (syn and syn.protect_gui and syn.protect_gui(SimpleSpy3)) or CoreGui

                    logthread(spawn(function()
                        local lp = Players.LocalPlayer or Players.GetPropertyChangedSignal(Players, 'LocalPlayer'):Wait() or Players.LocalPlayer

                        generation = {
                            [OldDebugId(lp)] = 'game:GetService("Players").LocalPlayer',
                            [OldDebugId(lp.GetMouse(lp))] = 'game:GetService("Players").LocalPlayer:GetMouse',
                            [OldDebugId(game)] = 'game',
                            [OldDebugId(workspace)] = 'workspace',
                        }
                    end))
                end)

                if succeeded then
                    getgenv().SimpleSpyExecuted = true
                else
                    shutdown()
                    ErrorPrompt('An error has occured:\n' .. rawtostring(err))

                    return
                end
            else
                SimpleSpy3.Destroy(SimpleSpy3)

                return
            end

            SimpleSpy.newButton = function(self, name, description, onClick)
                return newButton(name, description, onClick)
            end

            newButton('Copy Code', function()
                return 'Click to copy code'
            end, function()
                setclipboard(codebox.getString(codebox))

                TextLabel.Text = 'Copied successfully!'
            end)
            newButton('Copy Remote', function()
                return 'Click to copy the path of the remote'
            end, function()
                if selected and selected.Remote then
                    setclipboard(v2s(selected.Remote))

                    TextLabel.Text = 'Copied!'
                end
            end)
            newButton('Run Code', function()
                return 'Click to execute code'
            end, function()
                local Remote = selected and selected.Remote

                if Remote then
                    TextLabel.Text = 'Executing...'

                    xpcall(function()
                        local returnvalue

                        if Remote.IsA(Remote, 'RemoteEvent') or Remote.IsA(Remote, 'UnreliableRemoteEvent') then
                            returnvalue = Remote.FireServer(Remote, unpack(selected.args))
                        elseif Remote.IsA(Remote, 'RemoteFunction') then
                            returnvalue = Remote.InvokeServer(Remote, unpack(selected.args))
                        end

                        TextLabel.Text = ('Executed successfully!\n%s').format(('Executed successfully!\n%s'), v2s(returnvalue))
                    end, function(err)
                        TextLabel.Text = ('Execution error!\n%s').format(('Execution error!\n%s'), err)
                    end)

                    return
                end

                TextLabel.Text = 'Source not found'
            end)
            newButton('Get Script', function()
                return 
[[Click to copy calling script to clipboard
WARNING: Not super reliable, nil == could not find]]
            end, function()
                if selected then
                    if not selected.Source then
                        selected.Source = rawget(getfenv(selected.Function), 'script')
                    end

                    setclipboard(v2s(selected.Source))

                    TextLabel.Text = 'Done!'
                end
            end)
            newButton('Function Info', function()
                return 'Click to view calling function information'
            end, function()
                local func = selected and selected.Function

                if func then
                    local typeoffunc = typeof(func)

                    if typeoffunc ~= 'string' then
                        codebox.setRaw(codebox, '--[[Generating Function Info please wait]]')
                        RunService.Heartbeat:Wait()

                        local lclosure = islclosure(func)
                        local SourceScript = rawget(getfenv(func), 'script')
                        local CallingScript = selected.Source or nil
                        local info = {}

                        info = {
                            info = getinfo(func),
                            constants = lclosure and deepclone(getconstants(func)) or 'N/A --Lua Closure expected got C Closure',
                            upvalues = deepclone(getupvalues(func)),
                            script = {
                                SourceScript = SourceScript or 'nil',
                                CallingScript = CallingScript or 'nil',
                            },
                        }

                        if configs.advancedinfo then
                            local Remote = selected.Remote

                            info.advancedinfo = {
                                Metamethod = selected.metamethod,
                                DebugId = {
                                    SourceScriptDebugId = SourceScript and typeof(SourceScript) == 'Instance' and OldDebugId(SourceScript) or 'N/A',
                                    CallingScriptDebugId = CallingScript and typeof(SourceScript) == 'Instance' and OldDebugId(CallingScript) or 'N/A',
                                    RemoteDebugId = OldDebugId(Remote),
                                },
                                Protos = lclosure and getprotos(func) or 'N/A --Lua Closure expected got C Closure',
                            }

                            if Remote.IsA(Remote, 'RemoteFunction') then
                                info.advancedinfo.OnClientInvoke = getcallbackmember and (getcallbackmember(Remote, 'OnClientInvoke') or 'N/A') or 'N/A --Missing function getcallbackmember'
                            elseif getconnections then
                                info.advancedinfo.OnClientEvents = {}

                                for i, v in next, getconnections(Remote.OnClientEvent)do
                                    info.advancedinfo.OnClientEvents[i] = {
                                        Function = v.Function or 'N/A',
                                        State = v.State or 'N/A',
                                    }
                                end
                            end
                        end

                        codebox.setRaw(codebox, '--[[Converting table to string please wait]]')

                        selected.Function = v2v({functionInfo = info})
                    end

                    codebox.setRaw(codebox, 
[[-- Calling function info
-- Generated by the SimpleSpy V3 serializer

]] .. selected.Function)

                    TextLabel.Text = 
[[Done! Function info generated by the SimpleSpy V3 Serializer.]]
                else
                    TextLabel.Text = 'Error! Selected function was not found.'
                end
            end)
            newButton('Clr Logs', function()
                return 'Click to clear logs'
            end, function()
                TextLabel.Text = 'Clearing...'

                clear(logs)

                for i, v in next, LogList.GetChildren(LogList)do
                    if not v.IsA(v, 'UIListLayout') then
                        v.Destroy(v)
                    end
                end

                codebox.setRaw(codebox, '')

                selected = nil
                TextLabel.Text = 'Logs cleared!'
            end)
            newButton('Exclude (i)', function()
                return 
[[Click to exclude this Remote.
Excluding a remote makes SimpleSpy ignore it, but it will continue to be usable.]]
            end, function()
                if selected then
                    blacklist[OldDebugId(selected.Remote)] = true
                    TextLabel.Text = 'Excluded!'
                end
            end)
            newButton('Exclude (n)', function()
                return 
[[Click to exclude all remotes with this name.
Excluding a remote makes SimpleSpy ignore it, but it will continue to be usable.]]
            end, function()
                if selected then
                    blacklist[selected.Name] = true
                    TextLabel.Text = 'Excluded!'
                end
            end)
            newButton('Clr Blacklist', function()
                return 
[[Click to clear the blacklist.
Excluding a remote makes SimpleSpy ignore it, but it will continue to be usable.]]
            end, function()
                blacklist = {}
                TextLabel.Text = 'Blacklist cleared!'
            end)
            newButton('Block (i)', function()
                return 
[[Click to stop this remote from firing.
Blocking a remote won't remove it from SimpleSpy logs, but it will not continue to fire the server.]]
            end, function()
                if selected then
                    blocklist[OldDebugId(selected.Remote)] = true
                    TextLabel.Text = 'Excluded!'
                end
            end)
            newButton('Block (n)', function()
                return 
[[Click to stop remotes with this name from firing.
Blocking a remote won't remove it from SimpleSpy logs, but it will not continue to fire the server.]]
            end, function()
                if selected then
                    blocklist[selected.Name] = true
                    TextLabel.Text = 'Excluded!'
                end
            end)
            newButton('Clr Blocklist', function()
                return 
[[Click to stop blocking remotes.
Blocking a remote won't remove it from SimpleSpy logs, but it will not continue to fire the server.]]
            end, function()
                blocklist = {}
                TextLabel.Text = 'Blocklist cleared!'
            end)
            newButton('Decompile', function()
                return 'Decompile source script'
            end, function()
                if decompile then
                    if selected and selected.Source then
                        local Source = selected.Source

                        if not DecompiledScripts[Source] then
                            codebox.setRaw(codebox, '--[[Decompiling]]')
                            xpcall(function()
                                local decompiledsource = decompile(Source):gsub('-- Decompiled with the Synapse X Luau decompiler.', '')
                                local Sourcev2s = v2s(Source)

                                if decompiledsource.find(decompiledsource, 'script') and Sourcev2s then
                                    DecompiledScripts[Source] = ('local script = %s\n%s').format(('local script = %s\n%s'), Sourcev2s, decompiledsource)
                                end
                            end, function(err)
                                return codebox.setRaw(codebox, ('--[[\nAn error has occured\n%s\n]]').format(('--[[\nAn error has occured\n%s\n]]'), err))
                            end)
                        end

                        codebox.setRaw(codebox, DecompiledScripts[Source] or '--No Source Found')

                        TextLabel.Text = 'Done!'
                    else
                        TextLabel.Text = 'Source not found!'
                    end
                else
                    TextLabel.Text = 'Missing function (decompile)'
                end
            end)
            newButton('Disable Info', function()
                return string.format(
[[[%s] Toggle function info (because it can cause lag in some games)]], configs.funcEnabled and 'ENABLED' or 'DISABLED')
            end, function()
                configs.funcEnabled = not configs.funcEnabled
                TextLabel.Text = string.format(
[[[%s] Toggle function info (because it can cause lag in some games)]], configs.funcEnabled and 'ENABLED' or 'DISABLED')
            end)
            newButton('Autoblock', function()
                return string.format(
[[[%s] [BETA] Intelligently detects and excludes spammy remote calls from logs]], configs.autoblock and 'ENABLED' or 'DISABLED')
            end, function()
                configs.autoblock = not configs.autoblock
                TextLabel.Text = string.format(
[[[%s] [BETA] Intelligently detects and excludes spammy remote calls from logs]], configs.autoblock and 'ENABLED' or 'DISABLED')
                history = {}
                excluding = {}
            end)
            newButton('Logcheckcaller', function()
                return ('[%s] Log remotes fired by the client').format(('[%s] Log remotes fired by the client'), configs.logcheckcaller and 'ENABLED' or 'DISABLED')
            end, function()
                configs.logcheckcaller = not configs.logcheckcaller
                TextLabel.Text = ('[%s] Log remotes fired by the client').format(('[%s] Log remotes fired by the client'), configs.logcheckcaller and 'ENABLED' or 'DISABLED')
            end)
            newButton('Advanced Info', function()
                return ('[%s] Display more remoteinfo').format(('[%s] Display more remoteinfo'), configs.advancedinfo and 'ENABLED' or 'DISABLED')
            end, function()
                configs.advancedinfo = not configs.advancedinfo
                TextLabel.Text = ('[%s] Display more remoteinfo').format(('[%s] Display more remoteinfo'), configs.advancedinfo and 'ENABLED' or 'DISABLED')
            end)
            newButton('Join Discord', function()
                return 'Joins The Simple Spy Discord'
            end, function()
                setclipboard('https://discord.com/invite/AWS6ez9')

                TextLabel.Text = 'Copied invite to your clipboard'

                if request then
                    request({
                        Url = 'http://127.0.0.1:6463/rpc?v=1',
                        Method = 'POST',
                        Headers = {
                            ['Content-Type'] = 'application/json',
                            Origin = 'https://discord.com',
                        },
                        Body = http.JSONEncode(http, {
                            cmd = 'INVITE_BROWSER',
                            nonce = http.GenerateGUID(http, false),
                            args = {
                                code = 'AWS6ez9',
                            },
                        }),
                    })
                end
            end)

            if table.find({
                Enum.Platform.IOS,
                Enum.Platform.Android,
            }, UserInputService.GetPlatform(UserInputService)) then
                Background.Draggable = true

                local QuickCapture = Instance.new('TextButton')
                local UICorner = Instance.new('UICorner')

                QuickCapture.Parent = SimpleSpy3
                QuickCapture.BackgroundColor3 = Color3.fromRGB(37, 36, 38)
                QuickCapture.BackgroundTransparency = 0.14
                QuickCapture.Position = UDim2.new(0.529, 0, 0, 0)
                QuickCapture.Size = UDim2.new(0, 32, 0, 33)
                QuickCapture.Font = Enum.Font.SourceSansBold
                QuickCapture.Text = 'Spy'
                QuickCapture.TextColor3 = Background.Visible and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(252, 51, 51)
                QuickCapture.TextSize = 16
                QuickCapture.TextWrapped = true
                QuickCapture.ZIndex = 10
                QuickCapture.Draggable = true
                UICorner.CornerRadius = UDim.new(0.5, 0)
                UICorner.Parent = QuickCapture

                QuickCapture.MouseButton1Click:Connect(function()
                    Background.Visible = not Background.Visible
                    QuickCapture.TextColor3 = Background.Visible and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(252, 51, 51)
                end)
            end

            return true
        end

        __DARKLUA_BUNDLE_MODULES.d = function()
            local v = __DARKLUA_BUNDLE_MODULES.cache.d

            if not v then
                v = {
                    c = __modImpl(),
                }
                __DARKLUA_BUNDLE_MODULES.cache.d = v
            end

            return v.c
        end
    end
    do
        local function __modImpl()
            local successForHui, hui = pcall(gethui or get_hidden_ui or get_hui or get_hidden_gui or gethiddenui or gethiddengui)
            local successForCoreGui, CoreGui = pcall(game.GetService, game, 'CoreGui')

            GUITOUSE = (successForHui and hui or successForCoreGui and CoreGui or game.GetService(game, 'Players').LocalPlayer:WaitForChild('PlayerGui'))

            if GUITOUSE == game.GetService(game, 'Players').LocalPlayer:WaitForChild('PlayerGui') then
                pcall(function()
                    task.spawn(function()
                        while task.wait(0.5) do
                            for i, v in game.GetService(game, 'Players').LocalPlayer:WaitForChild('PlayerGui'):GetDescendants()do
                                pcall(function()
                                    v.ResetOnSpawn = false
                                end)
                            end
                        end
                    end)
                end)
            end

            local aa = game.GetObjects(game, 'rbxassetid://01997056190')[1]

            aa.Parent = GUITOUSE

            task.wait(0.3)

            local GUI = aa.PopupFrame.PopupFrame
            local pos = 0
            local ignore = {
                'rbxasset://sounds/action_get_up.mp3',
                'rbxasset://sounds/uuhhh.mp3',
                'rbxasset://sounds/action_falling.mp3',
                'rbxasset://sounds/action_jump.mp3',
                'rbxasset://sounds/action_jump_land.mp3',
                'rbxasset://sounds/impact_water.mp3',
                'rbxasset://sounds/action_swim.mp3',
                'rbxasset://sounds/action_footsteps_plastic.mp3',
            }

            GUI.Close.MouseButton1Click:Connect(function()
                GUI.TweenSize(GUI, UDim2.new(0, 360, 0, 0), 'Out', 'Quad', 0.5, true)
                task.wait(0.6)
                GUI.Parent:TweenSize(UDim2.new(0, 0, 0, 20), 'Out', 'Quad', 0.5, true)
                task.wait(0.6)
                itemadded.Disconnect(itemadded)
                aa.Destroy(aa)
            end)

            local min = false

            GUI.Minimize.MouseButton1Click:Connect(function()
                if min == false then
                    GUI.TweenSize(GUI, UDim2.new(0, 360, 0, 20), 'Out', 'Quad', 0.5, true)

                    min = true
                else
                    GUI.TweenSize(GUI, UDim2.new(0, 360, 0, 260), 'Out', 'Quad', 0.5, true)

                    min = false
                end
            end)

            local function printTable(tbl)
                if (typeof or type)(tbl) ~= 'table' then
                    return nil
                end

                local depthCount = -15

                local function run(val)
                    depthCount = depthCount + 15

                    for i, v in pairs(val)do
                        if (typeof or type)(v) == 'table' then
                            GUI.Store.Text = GUI.Store.Text .. '\n' .. string.rep(' ', depthCount) .. ' [' .. tostring(i) .. '] = {'

                            run(v)
                            task.wait()
                        else
                            GUI.Store.Text = GUI.Store.Text .. '\n' .. string.rep(' ', depthCount) .. ' [' .. tostring(i) .. '] = ' .. tostring(v)

                            task.wait()
                        end
                    end

                    depthCount = depthCount - 15
                end

                run(tbl)
            end
            local function refreshlist()
                pos = 0
                GUI.Logs.CanvasSize = UDim2.new(0, 0, 0, 0)

                for i, v in pairs(GUI.Logs:GetChildren())do
                    if v.IsA(v, 'Frame') then
                        v.Position = UDim2.new(0, 0, 0, pos)
                        pos = pos + 20
                    end
                end

                GUI.Logs.CanvasSize = UDim2.new(0, 0, 0, pos)
            end
            local function FindTable(Table, Name)
                for i, v in pairs(Table)do
                    if v == Name then
                        return true
                    end
                end

                return false
            end
            local function writefileExploit()
                return writefile ~= nil
            end

            local writeaudio = {}
            local running = false

            GUI.SS.MouseButton1Click:Connect(function()
                if writefileExploit() then
                    if running == false then
                        GUI.Load.Visible = true
                        running = true

                        GUI.Load:TweenSize(UDim2.new(0, 360, 0, 20), 'Out', 'Quad', 0.5, true)
                        task.wait(0.3)

                        for _, child in pairs(GUI.Logs:GetChildren())do
                            if child.FindFirstChild(child, 'ImageButton') then
                                local bttn = child.FindFirstChild(child, 'ImageButton')

                                if bttn.BackgroundTransparency == 0 then
                                    writeaudio[#writeaudio + 1] = {
                                        NAME = child.NAME.Value,
                                        ID = child.ID.Value,
                                    }
                                end
                            end
                        end

                        GUI.Store.Visible = true

                        printTable(writeaudio)
                        task.wait(0.2)

                        local filename = 0

                        local function write()
                            local file

                            pcall(function()
                                file = readfile('Audios' .. filename .. '.txt')
                            end)

                            if file then
                                filename = filename + 1

                                write()
                            else
                                local text = tostring(GUI.Store.Text)

                                text = text.gsub(text, '\n', '\r\n')

                                writefile('Audios' .. filename .. '.txt', text)
                            end
                        end

                        write()

                        for rep = 1, 10 do
                            GUI.Load.BackgroundTransparency = GUI.Load.BackgroundTransparency + 0.1

                            task.wait(0.05)
                        end

                        GUI.Load.Visible = false
                        GUI.Load.BackgroundTransparency = 0
                        GUI.Load.Size = UDim2.new(0, 0, 0, 20)
                        running = false
                        GUI.Store.Visible = false
                        GUI.Store.Text = ''
                        writeaudio = {}

                        game.GetService(game, 'StarterGui'):SetCore('SendNotification', {
                            Title = 'Audio Logger',
                            Text = 'Saved audios\n(Audios' .. filename .. '.txt)',
                            Icon = 'http://www.roblox.com/asset/?id=176572847',
                            Duration = 5,
                        })
                    end
                else
                    game.GetService(game, 'StarterGui'):SetCore('SendNotification', {
                        Title = 'Audio Logger',
                        Text = 'Exploit cannot writefile :(',
                        Icon = 'http://www.roblox.com/asset/?id=176572847',
                        Duration = 5,
                    })
                end
            end)
            GUI.SA.MouseButton1Click:Connect(function()
                if writefileExploit() then
                    if running == false then
                        GUI.Load.Visible = true
                        running = true

                        GUI.Load:TweenSize(UDim2.new(0, 360, 0, 20), 'Out', 'Quad', 0.5, true)
                        task.wait(0.3)

                        for _, child in pairs(GUI.Logs:GetChildren())do
                            if child.IsA(child, 'Frame') and child.Name ~= 'Audio' then
                                writeaudio[#writeaudio + 1] = {
                                    NAME = child.NAME.Value,
                                    ID = child.ID.Value,
                                }
                            end
                        end

                        GUI.Store.Visible = true

                        printTable(writeaudio)
                        task.wait(0.2)

                        local filename = 0

                        local function write()
                            local file

                            pcall(function()
                                file = readfile('Audios' .. filename .. '.txt')
                            end)

                            if file then
                                filename = filename + 1

                                write()
                            else
                                local text = tostring(GUI.Store.Text)

                                text = text.gsub(text, '\n', '\r\n')

                                writefile('Audios' .. filename .. '.txt', text)
                            end
                        end

                        write()

                        for rep = 1, 10 do
                            GUI.Load.BackgroundTransparency = GUI.Load.BackgroundTransparency + 0.1

                            task.wait(0.05)
                        end

                        GUI.Load.Visible = false
                        GUI.Load.BackgroundTransparency = 0
                        GUI.Load.Size = UDim2.new(0, 0, 0, 20)
                        running = false
                        GUI.Store.Visible = false
                        GUI.Store.Text = ''
                        writeaudio = {}

                        game.GetService(game, 'StarterGui'):SetCore('SendNotification', {
                            Title = 'Audio Logger',
                            Text = 'Saved audios\n(Audios' .. filename .. '.txt)',
                            Icon = 'http://www.roblox.com/asset/?id=176572847',
                            Duration = 5,
                        })
                    end
                else
                    game.GetService(game, 'StarterGui'):SetCore('SendNotification', {
                        Title = 'Audio Logger',
                        Text = 'Exploit cannot writefile :(',
                        Icon = 'http://www.roblox.com/asset/?id=176572847',
                        Duration = 5,
                    })
                end
            end)

            local selectedaudio

            local function getaudio(place)
                if running == false then
                    GUI.Load.Visible = true
                    running = true

                    GUI.Load:TweenSize(UDim2.new(0, 360, 0, 20), 'Out', 'Quad', 0.5, true)
                    task.wait(0.3)

                    for _, child in pairs(place.GetDescendants(place))do
                        pcall(function()
                            if child.IsA(child, 'Sound') and not GUI.Logs:FindFirstChild(child.SoundId) and not FindTable(ignore, child.SoundId) then
                                local id = string.match(child.SoundId, '%d+')

                                if id ~= nil then
                                    local newsound = GUI.Audio:Clone()

                                    newsound.Parent = GUI.Logs
                                    newsound.Name = child.SoundId
                                    newsound.Visible = true
                                    newsound.Position = UDim2.new(0, 0, 0, pos)
                                    GUI.Logs.CanvasSize = UDim2.new(0, 0, 0, pos + 20)
                                    pos = pos + 20

                                    local audioname = 'error'
                                    local success, Asset = pcall(game.GetService(game, 'MarketplaceService').GetProductInfo, game.GetService(game, 'MarketplaceService'), id)

                                    if success and Asset then
                                        newsound.TextLabel.Text = Asset.Name
                                        audioname = Asset.Name
                                    else
                                        newsound.TextLabel.Text = child.Name
                                        audioname = child.Name
                                    end

                                    local data = Instance.new('StringValue')

                                    data.Parent = newsound
                                    data.Value = child.SoundId
                                    data.Name = 'ID'

                                    local data2 = Instance.new('StringValue')

                                    data2.Parent = newsound
                                    data2.Value = audioname
                                    data2.Name = 'NAME'

                                    local soundselected = false

                                    newsound.ImageButton.MouseButton1Click:Connect(function(
                                    )
                                        if not GUI.Info.Visible then
                                            soundselected = not soundselected
                                            newsound.ImageButton.BackgroundTransparency = soundselected and 0 or 1
                                        end
                                    end)
                                    newsound.Click.MouseButton1Click:Connect(function(
                                    )
                                        if not GUI.Info.Visible then
                                            GUI.Info.TextLabel.Text = 'Name: ' .. audioname .. '\n\nID: ' .. child.SoundId .. '\n\nWorkspace Name: ' .. child.Name
                                            selectedaudio = child.SoundId
                                            GUI.Info.Visible = true
                                        end
                                    end)
                                end
                            end
                        end)
                    end

                    for rep = 1, 10 do
                        GUI.Load.BackgroundTransparency = GUI.Load.BackgroundTransparency + 0.1

                        task.wait(0.05)
                    end

                    GUI.Load.Visible = false
                    GUI.Load.BackgroundTransparency = 0
                    GUI.Load.Size = UDim2.new(0, 0, 0, 20)
                    running = false
                end
            end

            GUI.All.MouseButton1Click:Connect(function()
                getaudio(game)
            end)
            GUI.Workspace.MouseButton1Click:Connect(function()
                getaudio(workspace)
            end)
            GUI.Lighting.MouseButton1Click:Connect(function()
                getaudio(game.GetService(game, 'Lighting'))
            end)
            GUI.SoundS.MouseButton1Click:Connect(function()
                getaudio(game.GetService(game, 'SoundService'))
            end)
            GUI.Clr.MouseButton1Click:Connect(function()
                for _, child in pairs(GUI.Logs:GetChildren())do
                    if child.FindFirstChild(child, 'ImageButton') then
                        local bttn = child.FindFirstChild(child, 'ImageButton')

                        if bttn.BackgroundTransparency == 1 then
                            child.Destroy(child)
                        end
                    end
                end

                refreshlist()
            end)
            GUI.ClrS.MouseButton1Click:Connect(function()
                for _, child in pairs(GUI.Logs:GetChildren())do
                    if child.FindFirstChild(child, 'ImageButton') then
                        local bttn = child.FindFirstChild(child, 'ImageButton')

                        if bttn.BackgroundTransparency == 0 then
                            child.Destroy(child)
                        end
                    end
                end

                refreshlist()
            end)

            local autoscan = false

            GUI.AutoScan.MouseButton1Click:Connect(function()
                autoscan = not autoscan
                GUI.AutoScan.BackgroundTransparency = autoscan and 0.5 or 0

                game.GetService(game, 'StarterGui'):SetCore('SendNotification', {
                    Title = 'Audio Logger',
                    Text = 'Auto Scan ' .. (autoscan and 'ENABLED' or 'DISABLED'),
                    Icon = 'http://www.roblox.com/asset/?id=176572847',
                    Duration = 5,
                })
            end)

            itemadded = game.DescendantAdded:Connect(function(added)
                task.wait()

                if autoscan and added.IsA(added, 'Sound') and not GUI.Logs:FindFirstChild(added.SoundId) and not FindTable(ignore, added.SoundId) then
                    local id = string.match(added.SoundId, '%d+')

                    if id ~= nil then
                        local newsound = GUI.Audio:Clone()
                        local scrolldown = false

                        if GUI.Logs.CanvasPosition.Y >= GUI.Logs.CanvasSize.Y.Offset - 230 then
                            scrolldown = true
                        end

                        newsound.Parent = GUI.Logs
                        newsound.Name = added.SoundId
                        newsound.Visible = true
                        newsound.Position = UDim2.new(0, 0, 0, pos)
                        GUI.Logs.CanvasSize = UDim2.new(0, 0, 0, pos + 20)
                        pos = pos + 20

                        local audioname = 'error'
                        local success, Asset = pcall(game.GetService(game, 'MarketplaceService').GetProductInfo, game.GetService(game, 'MarketplaceService'), id)

                        if success and Asset then
                            newsound.TextLabel.Text = Asset.Name
                            audioname = Asset.Name
                        else
                            newsound.TextLabel.Text = added.Name
                            audioname = added.Name
                        end

                        local data = Instance.new('StringValue')

                        data.Parent = newsound
                        data.Value = added.SoundId
                        data.Name = 'ID'

                        local data2 = Instance.new('StringValue')

                        data2.Parent = newsound
                        data2.Value = audioname
                        data2.Name = 'NAME'

                        local soundselected = false

                        newsound.ImageButton.MouseButton1Click:Connect(function()
                            if not GUI.Info.Visible then
                                soundselected = not soundselected
                                newsound.ImageButton.BackgroundTransparency = soundselected and 0 or 1
                            end
                        end)
                        newsound.Click.MouseButton1Click:Connect(function()
                            if not GUI.Info.Visible then
                                GUI.Info.TextLabel.Text = 'Name: ' .. audioname .. '\n\nID: ' .. added.SoundId .. '\n\nWorkspace Name: ' .. added.Name
                                selectedaudio = added.SoundId
                                GUI.Info.Visible = true
                            end
                        end)

                        if scrolldown then
                            GUI.Logs.CanvasPosition = Vector2.new(0, 387420489)
                        end
                    end
                end
            end)

            GUI.Info.Copy.MouseButton1Click:Connect(function()
                local success, err = pcall(function()
                    local clipboard_func = setclipboard or (syn and syn.set_clipboard) or Clipboard.set

                    clipboard_func(selectedaudio)
                end)

                if success then
                    game.GetService(game, 'StarterGui'):SetCore('SendNotification', {
                        Title = 'Audio Logger',
                        Text = 'Copied to clipboard',
                        Icon = 'http://www.roblox.com/asset/?id=176572847',
                        Duration = 5,
                    })
                end
            end)
            GUI.Info.Close.MouseButton1Click:Connect(function()
                GUI.Info.Visible = false

                for _, sound in pairs(game.GetService(game, 'Players').LocalPlayer.PlayerGui:GetChildren())do
                    if sound.Name == 'SampleSound' then
                        sound.Destroy(sound)
                    end
                end

                GUI.Info.Listen.Text = 'Listen'
            end)
            GUI.Info.Listen.MouseButton1Click:Connect(function()
                if GUI.Info.Listen.Text == 'Listen' then
                    local samplesound = Instance.new('Sound')

                    samplesound.Parent = game.GetService(game, 'Players').LocalPlayer.PlayerGui
                    samplesound.Looped = true
                    samplesound.SoundId = selectedaudio
                    samplesound.Name = 'SampleSound'
                    samplesound.Volume = 5

                    samplesound.Play(samplesound)

                    GUI.Info.Listen.Text = 'Stop'
                else
                    for _, sound in pairs(game.GetService(game, 'Players').LocalPlayer.PlayerGui:GetChildren())do
                        if sound.Name == 'SampleSound' then
                            sound.Destroy(sound)
                        end
                    end

                    GUI.Info.Listen.Text = 'Listen'
                end
            end)

            drag = function(gui)
                pcall(function()
                    local UserInputService = game.GetService(game, 'UserInputService')
                    local dragging
                    local dragInput
                    local dragStart
                    local startPos

                    local function update(input)
                        local delta = input.Position - dragStart

                        gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
                    end

                    gui.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                            dragging = true
                            dragStart = input.Position
                            startPos = gui.Position

                            input.Changed:Connect(function()
                                if input.UserInputState == Enum.UserInputState.End then
                                    dragging = false
                                end
                            end)
                        end
                    end)
                    gui.InputChanged:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                            dragInput = input
                        end
                    end)
                    UserInputService.InputChanged:Connect(function(input)
                        if input == dragInput and dragging then
                            update(input)
                        end
                    end)
                end)
            end

            drag(aa.PopupFrame)

            return true
        end

        __DARKLUA_BUNDLE_MODULES.e = function()
            local v = __DARKLUA_BUNDLE_MODULES.cache.e

            if not v then
                v = {
                    c = __modImpl(),
                }
                __DARKLUA_BUNDLE_MODULES.cache.e = v
            end

            return v.c
        end
    end
end

getgenv = getgenv or getglobalenvironment or get_global_environment or getgenvironment or get_g_environment or getfenv

if getgenv().IY_LOADED and not getgenv().IY_DEBUG == true then
    return
end

pcall(function()
    getgenv().IY_LOADED = true
end)

if not game.IsLoaded(game) then
    game.Loaded:Wait()
end

missing = function(t, f, fallback)
    if type(f) == t then
        return f
    end

    return fallback
end
cloneref = missing('function', cloneref, function(...)
    return ...
end)
sethidden = missing('function', sethiddenproperty or set_hidden_property or set_hidden_prop)
gethidden = missing('function', gethiddenproperty or get_hidden_property or get_hidden_prop)
queueteleport = missing('function', queue_on_teleport or (syn and syn.queue_on_teleport) or (fluxus and fluxus.queue_on_teleport))
httprequest = missing('function', request or http_request or (syn and syn.request) or (http and http.request) or (fluxus and fluxus.request))
everyClipboard = missing('function', setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set))
firetouchinterest = missing('function', firetouchinterest)
waxwritefile, waxreadfile = writefile, readfile
writefile = missing('function', waxwritefile) and function(file, data, safe)
    if safe == true then
        return pcall(waxwritefile, file, data)
    end

    waxwritefile(file, data)
end
readfile = missing('function', waxreadfile) and function(file, safe)
    if safe == true then
        return pcall(waxreadfile, file)
    end

    return waxreadfile(file)
end
isfile = missing('function', isfile, readfile and function(file)
    local success, result = pcall(function()
        return readfile(file)
    end)

    return success and result ~= nil and result ~= ''
end)
makefolder = missing('function', makefolder)
isfolder = missing('function', isfolder)
waxgetcustomasset = missing('function', getcustomasset or getsynasset)
hookfunction = missing('function', hookfunction)
hookmetamethod = missing('function', hookmetamethod)
getnamecallmethod = missing('function', getnamecallmethod or get_namecall_method)
checkcaller = missing('function', checkcaller, function()
    return false
end)
newcclosure = missing('function', newcclosure)
getgc = missing('function', getgc or get_gc_objects)
setthreadidentity = missing('function', setthreadidentity or (syn and syn.set_thread_identity) or syn_context_set or setthreadcontext)
replicatesignal = missing('function', replicatesignal)
getconnections = missing('function', getconnections or get_signal_cons)
Services = setmetatable({}, {
    __index = function(self, name)
        local success, cache = pcall(function()
            return cloneref(game.GetService(game, name))
        end)

        if success then
            rawset(self, name, cache)

            return cache
        else
            error('Invalid Roblox Service: ' .. tostring(name))
        end
    end,
})
COREGUI = Services.CoreGui
Players = Services.Players
UserInputService = Services.UserInputService
TweenService = Services.TweenService
HttpService = Services.HttpService
MarketplaceService = Services.MarketplaceService
RunService = Services.RunService
TeleportService = Services.TeleportService
StarterGui = Services.StarterGui
GuiService = Services.GuiService
Lighting = Services.Lighting
ContextActionService = Services.ContextActionService
ReplicatedStorage = Services.ReplicatedStorage
GroupService = Services.GroupService
PathService = Services.PathfindingService
SoundService = Services.SoundService
Teams = Services.Teams
StarterPlayer = Services.StarterPlayer
InsertService = Services.InsertService
ChatService = Services.Chat
ProximityPromptService = Services.ProximityPromptService
ContentProvider = Services.ContentProvider
StatsService = Services.Stats
MaterialService = Services.MaterialService
AvatarEditorService = Services.AvatarEditorService
TextService = Services.TextService
TextChatService = Services.TextChatService
CaptureService = Services.CaptureService
VoiceChatService = Services.VoiceChatService
IYMouse = cloneref(Players.LocalPlayer:GetMouse())
PlayerGui = cloneref(Players.LocalPlayer:FindFirstChildWhichIsA('PlayerGui'))
PlaceId, JobId = game.PlaceId, game.JobId

xpcall(function()
    IsOnMobile = table.find({
        Enum.Platform.Android,
        Enum.Platform.IOS,
    }, UserInputService.GetPlatform(UserInputService))
end, function()
    IsOnMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
end)

isLegacyChat = TextChatService.ChatVersion == Enum.ChatVersion.LegacyChatService

local iyassets = {
    ['infiniteyield/assets/bindsandplugins.png'] = 'rbxassetid://5147695474',
    ['infiniteyield/assets/close.png'] = 'rbxassetid://5054663650',
    ['infiniteyield/assets/editaliases.png'] = 'rbxassetid://5147488658',
    ['infiniteyield/assets/editkeybinds.png'] = 'rbxassetid://129697930',
    ['infiniteyield/assets/edittheme.png'] = 'rbxassetid://4911962991',
    ['infiniteyield/assets/editwaypoints.png'] = 'rbxassetid://5147488592',
    ['infiniteyield/assets/imgstudiopluginlogo.png'] = 'rbxassetid://4113050383',
    ['infiniteyield/assets/logo.png'] = 'rbxassetid://1352543873',
    ['infiniteyield/assets/minimize.png'] = 'rbxassetid://2406617031',
    ['infiniteyield/assets/pin.png'] = 'rbxassetid://6234691350',
    ['infiniteyield/assets/reference.png'] = 'rbxassetid://3523243755',
    ['infiniteyield/assets/settings.png'] = 'rbxassetid://1204397029',
}

local function getcustomasset(asset)
    if waxgetcustomasset then
        local success, result = pcall(function()
            return waxgetcustomasset(asset)
        end)

        if success and result ~= nil and result ~= '' then
            return result
        end
    end

    return iyassets[asset]
end

if makefolder and isfolder and writefile and isfile then
    pcall(function()
        local assets = 
[[https://raw.githubusercontent.com/infyiff/backup/refs/heads/main/]]

        for _, folder in {
            'infiniteyield',
            'infiniteyield/assets',
        }do
            if not isfolder(folder) then
                makefolder(folder)
            end
        end
        for path in iyassets do
            if not isfile(path) then
                writefile(path, game.HttpGet(game, (path.gsub(path, 'infiniteyield/', assets))))
            end
        end

        if IsOnMobile then
            writefile('infiniteyield/assets/.nomedia')
        end
    end)
end

currentVersion = '6.3.5'
ScaledHolder = Instance.new('Frame')
Scale = Instance.new('UIScale')
Holder = Instance.new('Frame')
Title = Instance.new('TextLabel')
Dark = Instance.new('Frame')
Cmdbar = Instance.new('TextBox')
CMDsF = Instance.new('ScrollingFrame')
cmdListLayout = Instance.new('UIListLayout')
SettingsButton = Instance.new('ImageButton')
ColorsButton = Instance.new('ImageButton')
Settings = Instance.new('Frame')
Prefix = Instance.new('TextLabel')
PrefixBox = Instance.new('TextBox')
Keybinds = Instance.new('TextLabel')
StayOpen = Instance.new('TextLabel')
Button = Instance.new('Frame')
On = Instance.new('TextButton')
Positions = Instance.new('TextLabel')
EventBind = Instance.new('TextLabel')
Plugins = Instance.new('TextLabel')
Example = Instance.new('TextButton')
Notification = Instance.new('Frame')
Title_2 = Instance.new('TextLabel')
Text_2 = Instance.new('TextLabel')
CloseButton = Instance.new('TextButton')
CloseImage = Instance.new('ImageLabel')
PinButton = Instance.new('TextButton')
PinImage = Instance.new('ImageLabel')
Tooltip = Instance.new('Frame')
Title_3 = Instance.new('TextLabel')
Description = Instance.new('TextLabel')
IntroBackground = Instance.new('Frame')
Logo = Instance.new('ImageLabel')
Credits = Instance.new('TextBox')
KeybindsFrame = Instance.new('Frame')
Close = Instance.new('TextButton')
Add = Instance.new('TextButton')
Delete = Instance.new('TextButton')
Holder_2 = Instance.new('ScrollingFrame')
Example_2 = Instance.new('Frame')
Text_3 = Instance.new('TextLabel')
Delete_2 = Instance.new('TextButton')
KeybindEditor = Instance.new('Frame')
background_2 = Instance.new('Frame')
Dark_3 = Instance.new('Frame')
Directions = Instance.new('TextLabel')
BindTo = Instance.new('TextButton')
TriggerLabel = Instance.new('TextLabel')
BindTriggerSelect = Instance.new('TextButton')
Add_2 = Instance.new('TextButton')
Toggles = Instance.new('ScrollingFrame')
ClickTP = Instance.new('TextLabel')
Select = Instance.new('TextButton')
ClickDelete = Instance.new('TextLabel')
Select_2 = Instance.new('TextButton')
Cmdbar_2 = Instance.new('TextBox')
Cmdbar_3 = Instance.new('TextBox')
CreateToggle = Instance.new('TextLabel')
Button_2 = Instance.new('Frame')
On_2 = Instance.new('TextButton')
shadow_2 = Instance.new('Frame')
PopupText_2 = Instance.new('TextLabel')
Exit_2 = Instance.new('TextButton')
ExitImage_2 = Instance.new('ImageLabel')
PositionsFrame = Instance.new('Frame')
Close_3 = Instance.new('TextButton')
Delete_5 = Instance.new('TextButton')
Part = Instance.new('TextButton')
Holder_4 = Instance.new('ScrollingFrame')
Example_4 = Instance.new('Frame')
Text_5 = Instance.new('TextLabel')
Delete_6 = Instance.new('TextButton')
TP = Instance.new('TextButton')
AliasesFrame = Instance.new('Frame')
Close_2 = Instance.new('TextButton')
Delete_3 = Instance.new('TextButton')
Holder_3 = Instance.new('ScrollingFrame')
Example_3 = Instance.new('Frame')
Text_4 = Instance.new('TextLabel')
Delete_4 = Instance.new('TextButton')
Aliases = Instance.new('TextLabel')
PluginsFrame = Instance.new('Frame')
Close_4 = Instance.new('TextButton')
Add_3 = Instance.new('TextButton')
Holder_5 = Instance.new('ScrollingFrame')
Example_5 = Instance.new('Frame')
Text_6 = Instance.new('TextLabel')
Delete_7 = Instance.new('TextButton')
PluginEditor = Instance.new('Frame')
background_3 = Instance.new('Frame')
Dark_2 = Instance.new('Frame')
Img = Instance.new('ImageButton')
AddPlugin = Instance.new('TextButton')
FileName = Instance.new('TextBox')
About = Instance.new('TextLabel')
Directions_2 = Instance.new('TextLabel')
shadow_3 = Instance.new('Frame')
PopupText_3 = Instance.new('TextLabel')
Exit_3 = Instance.new('TextButton')
ExitImage_3 = Instance.new('ImageLabel')
AliasHint = Instance.new('TextLabel')
PluginsHint = Instance.new('TextLabel')
PositionsHint = Instance.new('TextLabel')
ToPartFrame = Instance.new('Frame')
background_4 = Instance.new('Frame')
ChoosePart = Instance.new('TextButton')
CopyPath = Instance.new('TextButton')
Directions_3 = Instance.new('TextLabel')
Path = Instance.new('TextLabel')
shadow_4 = Instance.new('Frame')
PopupText_5 = Instance.new('TextLabel')
Exit_4 = Instance.new('TextButton')
ExitImage_5 = Instance.new('ImageLabel')
logs = Instance.new('Frame')
shadow = Instance.new('Frame')
Hide = Instance.new('TextButton')
ImageLabel = Instance.new('ImageLabel')
PopupText = Instance.new('TextLabel')
Exit = Instance.new('TextButton')
ImageLabel_2 = Instance.new('ImageLabel')
background = Instance.new('Frame')
chat = Instance.new('Frame')
Clear = Instance.new('TextButton')
SaveChatlogs = Instance.new('TextButton')
Toggle = Instance.new('TextButton')
scroll_2 = Instance.new('ScrollingFrame')
join = Instance.new('Frame')
Toggle_2 = Instance.new('TextButton')
Clear_2 = Instance.new('TextButton')
scroll_3 = Instance.new('ScrollingFrame')
listlayout = Instance.new('UIListLayout', scroll_3)
selectChat = Instance.new('TextButton')
selectJoin = Instance.new('TextButton')
randomString = function()
    local length = math.random(10, 20)
    local array = {}

    for i = 1, length do
        array[i] = string.char(math.random(32, 126))
    end

    return table.concat(array)
end
PARENT = nil

if get_hidden_gui or gethui then
    local hiddenUI = get_hidden_gui or gethui
    local Main = Instance.new('ScreenGui')

    Main.Name = randomString()
    Main.Parent = hiddenUI()
    PARENT = Main
elseif (not is_sirhurt_closure) and (syn and syn.protect_gui) then
    local Main = Instance.new('ScreenGui')

    Main.Name = randomString()

    syn.protect_gui(Main)

    Main.Parent = COREGUI
    PARENT = Main
elseif COREGUI.FindFirstChild(COREGUI, 'RobloxGui') then
    PARENT = COREGUI.RobloxGui
else
    local Main = Instance.new('ScreenGui')

    Main.Name = randomString()
    Main.Parent = COREGUI
    PARENT = Main
end

shade1 = {}
shade2 = {}
shade3 = {}
text1 = {}
text2 = {}
scroll = {}
ScaledHolder.Name = randomString()
ScaledHolder.Size = UDim2.fromScale(1, 1)
ScaledHolder.BackgroundTransparency = 1
ScaledHolder.Parent = PARENT
Scale.Name = randomString()
Holder.Name = randomString()
Holder.Parent = ScaledHolder
Holder.Active = true
Holder.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Holder.BorderSizePixel = 0
Holder.Position = UDim2.new(1, -250, 1, -220)
Holder.Size = UDim2.new(0, 250, 0, 220)
Holder.ZIndex = 10

table.insert(shade2, Holder)

Title.Name = 'Title'
Title.Parent = Holder
Title.Active = true
Title.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
Title.BorderSizePixel = 0
Title.Size = UDim2.new(0, 250, 0, 20)
Title.Font = Enum.Font.SourceSans
Title.TextSize = 18
Title.Text = 'Infinite Yield FE v' .. currentVersion

do
    local emoji = ({
        ['01 01'] = '\u{1f386}',
        [(function(Year)
            local A = math.floor(Year / 100)
            local B = math.floor((13 + 8 * A) / 25)
            local C = (15 - B + A - math.floor(A / 4)) % 30
            local D = (4 + A - math.floor(A / 4)) % 7
            local E = (19 * (Year % 19) + C) % 30
            local F = (2 * (Year % 4) + 4 * (Year % 7) + 6 * E + D) % 7
            local G = (22 + E + F)

            if E == 29 and F == 6 then
                return '04 19'
            elseif E == 28 and F == 6 then
                return '04 18'
            elseif 31 < G then
                return ('04 %02d').format(('04 %02d'), G - 31)
            end

            return ('03 %02d').format(('03 %02d'), G)
        end)(tonumber(os.date'%Y'))] = '\u{1f95a}',
        ['10 31'] = '\u{1f383}',
        ['12 25'] = '\u{1f384}',
    })[os.date('%m %d')]

    if emoji then
        Title.Text = ('%s %s %s').format(('%s %s %s'), emoji, Title.Text, emoji)
    end
end

Title.TextColor3 = Color3.new(1, 1, 1)
Title.ZIndex = 10

table.insert(shade1, Title)
table.insert(text1, Title)

Dark.Name = 'Dark'
Dark.Parent = Holder
Dark.Active = true
Dark.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
Dark.BorderSizePixel = 0
Dark.Position = UDim2.new(0, 0, 0, 45)
Dark.Size = UDim2.new(0, 250, 0, 175)
Dark.ZIndex = 10

table.insert(shade1, Dark)

Cmdbar.Name = 'Cmdbar'
Cmdbar.Parent = Holder
Cmdbar.BackgroundTransparency = 1
Cmdbar.BorderSizePixel = 0
Cmdbar.Position = UDim2.new(0, 5, 0, 20)
Cmdbar.Size = UDim2.new(0, 240, 0, 25)
Cmdbar.Font = Enum.Font.SourceSans
Cmdbar.TextSize = 18
Cmdbar.TextXAlignment = Enum.TextXAlignment.Left
Cmdbar.TextColor3 = Color3.new(1, 1, 1)
Cmdbar.Text = ''
Cmdbar.ZIndex = 10
Cmdbar.PlaceholderText = 'Command Bar'
CMDsF.Name = 'CMDs'
CMDsF.Parent = Holder
CMDsF.BackgroundTransparency = 1
CMDsF.BorderSizePixel = 0
CMDsF.Position = UDim2.new(0, 5, 0, 45)
CMDsF.Size = UDim2.new(0, 245, 0, 175)
CMDsF.ScrollBarImageColor3 = Color3.fromRGB(78, 78, 79)
CMDsF.BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
CMDsF.CanvasSize = UDim2.new(0, 0, 0, 0)
CMDsF.MidImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
CMDsF.ScrollBarThickness = 8
CMDsF.TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
CMDsF.VerticalScrollBarInset = 'Always'
CMDsF.ZIndex = 10

table.insert(scroll, CMDsF)

cmdListLayout.Parent = CMDsF
SettingsButton.Name = 'SettingsButton'
SettingsButton.Parent = Holder
SettingsButton.BackgroundTransparency = 1
SettingsButton.Position = UDim2.new(0, 230, 0, 0)
SettingsButton.Size = UDim2.new(0, 20, 0, 20)
SettingsButton.Image = getcustomasset('infiniteyield/assets/settings.png')
SettingsButton.ZIndex = 10
ReferenceButton = Instance.new('ImageButton')
ReferenceButton.Name = 'ReferenceButton'
ReferenceButton.Parent = Holder
ReferenceButton.BackgroundTransparency = 1
ReferenceButton.Position = UDim2.new(0, 212, 0, 2)
ReferenceButton.Size = UDim2.new(0, 16, 0, 16)
ReferenceButton.Image = getcustomasset('infiniteyield/assets/reference.png')
ReferenceButton.ZIndex = 10
Settings.Name = 'Settings'
Settings.Parent = Holder
Settings.Active = true
Settings.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
Settings.BorderSizePixel = 0
Settings.Position = UDim2.new(0, 0, 0, 220)
Settings.Size = UDim2.new(0, 250, 0, 175)
Settings.ZIndex = 10

table.insert(shade1, Settings)

SettingsHolder = Instance.new('ScrollingFrame')
SettingsHolder.Name = 'Holder'
SettingsHolder.Parent = Settings
SettingsHolder.BackgroundTransparency = 1
SettingsHolder.BorderSizePixel = 0
SettingsHolder.Size = UDim2.new(1, 0, 1, 0)
SettingsHolder.ScrollBarImageColor3 = Color3.fromRGB(78, 78, 79)
SettingsHolder.BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
SettingsHolder.CanvasSize = UDim2.new(0, 0, 0, 235)
SettingsHolder.MidImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
SettingsHolder.ScrollBarThickness = 8
SettingsHolder.TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
SettingsHolder.VerticalScrollBarInset = 'Always'
SettingsHolder.ZIndex = 10

table.insert(scroll, SettingsHolder)

Prefix.Name = 'Prefix'
Prefix.Parent = SettingsHolder
Prefix.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Prefix.BorderSizePixel = 0
Prefix.BackgroundTransparency = 1
Prefix.Position = UDim2.new(0, 5, 0, 5)
Prefix.Size = UDim2.new(1, -10, 0, 20)
Prefix.Font = Enum.Font.SourceSans
Prefix.TextSize = 14
Prefix.Text = 'Prefix'
Prefix.TextColor3 = Color3.new(1, 1, 1)
Prefix.TextXAlignment = Enum.TextXAlignment.Left
Prefix.ZIndex = 10

table.insert(shade2, Prefix)
table.insert(text1, Prefix)

PrefixBox.Name = 'PrefixBox'
PrefixBox.Parent = Prefix
PrefixBox.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
PrefixBox.BorderSizePixel = 0
PrefixBox.Position = UDim2.new(1, -20, 0, 0)
PrefixBox.Size = UDim2.new(0, 20, 0, 20)
PrefixBox.Font = Enum.Font.SourceSansBold
PrefixBox.TextSize = 14
PrefixBox.Text = ''
PrefixBox.TextColor3 = Color3.new(0, 0, 0)
PrefixBox.ZIndex = 10

table.insert(shade3, PrefixBox)
table.insert(text2, PrefixBox)

makeSettingsButton = function(name, iconID, off)
    local button = Instance.new('TextButton')

    button.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
    button.BorderSizePixel = 0
    button.Position = UDim2.new(0, 0, 0, 0)
    button.Size = UDim2.new(1, 0, 0, 25)
    button.Text = ''
    button.ZIndex = 10

    local icon = Instance.new('ImageLabel')

    icon.Name = 'Icon'
    icon.Parent = button
    icon.Position = UDim2.new(0, 5, 0, 5)
    icon.Size = UDim2.new(0, 16, 0, 16)
    icon.BackgroundTransparency = 1
    icon.Image = iconID
    icon.ZIndex = 10

    if off then
        icon.ScaleType = Enum.ScaleType.Crop
        icon.ImageRectSize = Vector2.new(16, 16)
        icon.ImageRectOffset = Vector2.new(off, 0)
    end

    local label = Instance.new('TextLabel')

    label.Name = 'ButtonLabel'
    label.Parent = button
    label.BackgroundTransparency = 1
    label.Text = name
    label.Position = UDim2.new(0, 28, 0, 0)
    label.Size = UDim2.new(1, -28, 1, 0)
    label.Font = Enum.Font.SourceSans
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextSize = 14
    label.ZIndex = 10
    label.TextXAlignment = Enum.TextXAlignment.Left

    table.insert(shade2, button)
    table.insert(text1, label)

    return button
end
ColorsButton = makeSettingsButton('Edit Theme', getcustomasset('infiniteyield/assets/edittheme.png'))
ColorsButton.Position = UDim2.new(0, 5, 0, 55)
ColorsButton.Size = UDim2.new(1, -10, 0, 25)
ColorsButton.Name = 'Colors'
ColorsButton.Parent = SettingsHolder
Keybinds = makeSettingsButton('Edit Keybinds', getcustomasset('infiniteyield/assets/editkeybinds.png'))
Keybinds.Position = UDim2.new(0, 5, 0, 85)
Keybinds.Size = UDim2.new(1, -10, 0, 25)
Keybinds.Name = 'Keybinds'
Keybinds.Parent = SettingsHolder
Aliases = makeSettingsButton('Edit Aliases', getcustomasset('infiniteyield/assets/editaliases.png'))
Aliases.Position = UDim2.new(0, 5, 0, 115)
Aliases.Size = UDim2.new(1, -10, 0, 25)
Aliases.Name = 'Aliases'
Aliases.Parent = SettingsHolder
StayOpen.Name = 'StayOpen'
StayOpen.Parent = SettingsHolder
StayOpen.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
StayOpen.BorderSizePixel = 0
StayOpen.BackgroundTransparency = 1
StayOpen.Position = UDim2.new(0, 5, 0, 30)
StayOpen.Size = UDim2.new(1, -10, 0, 20)
StayOpen.Font = Enum.Font.SourceSans
StayOpen.TextSize = 14
StayOpen.Text = 'Keep Menu Open'
StayOpen.TextColor3 = Color3.new(1, 1, 1)
StayOpen.TextXAlignment = Enum.TextXAlignment.Left
StayOpen.ZIndex = 10

table.insert(shade2, StayOpen)
table.insert(text1, StayOpen)

Button.Name = 'Button'
Button.Parent = StayOpen
Button.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Button.BorderSizePixel = 0
Button.Position = UDim2.new(1, -20, 0, 0)
Button.Size = UDim2.new(0, 20, 0, 20)
Button.ZIndex = 10

table.insert(shade3, Button)

On.Name = 'On'
On.Parent = Button
On.BackgroundColor3 = Color3.fromRGB(150, 150, 151)
On.BackgroundTransparency = 1
On.BorderSizePixel = 0
On.Position = UDim2.new(0, 2, 0, 2)
On.Size = UDim2.new(0, 16, 0, 16)
On.Font = Enum.Font.SourceSans
On.FontSize = Enum.FontSize.Size14
On.Text = ''
On.TextColor3 = Color3.new(0, 0, 0)
On.ZIndex = 10
Positions = makeSettingsButton('Edit/Goto Waypoints', getcustomasset('infiniteyield/assets/editwaypoints.png'))
Positions.Position = UDim2.new(0, 5, 0, 145)
Positions.Size = UDim2.new(1, -10, 0, 25)
Positions.Name = 'Waypoints'
Positions.Parent = SettingsHolder
EventBind = makeSettingsButton('Edit Event Binds', getcustomasset('infiniteyield/assets/bindsandplugins.png'), 759)
EventBind.Position = UDim2.new(0, 5, 0, 205)
EventBind.Size = UDim2.new(1, -10, 0, 25)
EventBind.Name = 'EventBinds'
EventBind.Parent = SettingsHolder
Plugins = makeSettingsButton('Manage Plugins', getcustomasset('infiniteyield/assets/bindsandplugins.png'), 743)
Plugins.Position = UDim2.new(0, 5, 0, 175)
Plugins.Size = UDim2.new(1, -10, 0, 25)
Plugins.Name = 'Plugins'
Plugins.Parent = SettingsHolder
Example.Name = 'Example'
Example.Parent = Holder
Example.BackgroundTransparency = 1
Example.BorderSizePixel = 0
Example.Size = UDim2.new(0, 190, 0, 20)
Example.Visible = false
Example.Font = Enum.Font.SourceSans
Example.TextSize = 18
Example.Text = 'Example'
Example.TextColor3 = Color3.new(1, 1, 1)
Example.TextXAlignment = Enum.TextXAlignment.Left
Example.ZIndex = 10

table.insert(text1, Example)

Notification.Name = randomString()
Notification.Parent = ScaledHolder
Notification.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
Notification.BorderSizePixel = 0
Notification.Position = UDim2.new(1, -500, 1, 20)
Notification.Size = UDim2.new(0, 250, 0, 100)
Notification.ZIndex = 10

table.insert(shade1, Notification)

Title_2.Name = 'Title'
Title_2.Parent = Notification
Title_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Title_2.BorderSizePixel = 0
Title_2.Size = UDim2.new(0, 250, 0, 20)
Title_2.Font = Enum.Font.SourceSans
Title_2.TextSize = 14
Title_2.Text = 'Notification Title'
Title_2.TextColor3 = Color3.new(1, 1, 1)
Title_2.ZIndex = 10

table.insert(shade2, Title_2)
table.insert(text1, Title_2)

Text_2.Name = 'Text'
Text_2.Parent = Notification
Text_2.BackgroundTransparency = 1
Text_2.BorderSizePixel = 0
Text_2.Position = UDim2.new(0, 5, 0, 25)
Text_2.Size = UDim2.new(0, 240, 0, 75)
Text_2.Font = Enum.Font.SourceSans
Text_2.TextSize = 16
Text_2.Text = 'Notification Text'
Text_2.TextColor3 = Color3.new(1, 1, 1)
Text_2.TextWrapped = true
Text_2.ZIndex = 10

table.insert(text1, Text_2)

CloseButton.Name = 'CloseButton'
CloseButton.Parent = Notification
CloseButton.BackgroundTransparency = 1
CloseButton.Position = UDim2.new(1, -20, 0, 0)
CloseButton.Size = UDim2.new(0, 20, 0, 20)
CloseButton.Text = ''
CloseButton.ZIndex = 10
CloseImage.Parent = CloseButton
CloseImage.BackgroundColor3 = Color3.new(1, 1, 1)
CloseImage.BackgroundTransparency = 1
CloseImage.Position = UDim2.new(0, 5, 0, 5)
CloseImage.Size = UDim2.new(0, 10, 0, 10)
CloseImage.Image = getcustomasset('infiniteyield/assets/close.png')
CloseImage.ZIndex = 10
PinButton.Name = 'PinButton'
PinButton.Parent = Notification
PinButton.BackgroundTransparency = 1
PinButton.Size = UDim2.new(0, 20, 0, 20)
PinButton.ZIndex = 10
PinButton.Text = ''
PinImage.Parent = PinButton
PinImage.BackgroundColor3 = Color3.new(1, 1, 1)
PinImage.BackgroundTransparency = 1
PinImage.Position = UDim2.new(0, 3, 0, 3)
PinImage.Size = UDim2.new(0, 14, 0, 14)
PinImage.ZIndex = 10
PinImage.Image = getcustomasset('infiniteyield/assets/pin.png')
Tooltip.Name = randomString()
Tooltip.Parent = ScaledHolder
Tooltip.Active = true
Tooltip.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
Tooltip.BackgroundTransparency = 0.1
Tooltip.BorderSizePixel = 0
Tooltip.Size = UDim2.new(0, 200, 0, 96)
Tooltip.Visible = false
Tooltip.ZIndex = 10

table.insert(shade1, Tooltip)

Title_3.Name = 'Title'
Title_3.Parent = Tooltip
Title_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Title_3.BackgroundTransparency = 0.1
Title_3.BorderSizePixel = 0
Title_3.Size = UDim2.new(0, 200, 0, 20)
Title_3.Font = Enum.Font.SourceSans
Title_3.TextSize = 14
Title_3.Text = ''
Title_3.TextColor3 = Color3.new(1, 1, 1)
Title_3.TextTransparency = 0.1
Title_3.ZIndex = 10

table.insert(shade2, Title_3)
table.insert(text1, Title_3)

Description.Name = 'Description'
Description.Parent = Tooltip
Description.BackgroundTransparency = 1
Description.BorderSizePixel = 0
Description.Size = UDim2.new(0, 180, 0, 72)
Description.Position = UDim2.new(0, 10, 0, 18)
Description.Font = Enum.Font.SourceSans
Description.TextSize = 16
Description.Text = ''
Description.TextColor3 = Color3.new(1, 1, 1)
Description.TextTransparency = 0.1
Description.TextWrapped = true
Description.ZIndex = 10

table.insert(text1, Description)

IntroBackground.Name = 'IntroBackground'
IntroBackground.Parent = Holder
IntroBackground.Active = true
IntroBackground.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
IntroBackground.BorderSizePixel = 0
IntroBackground.Position = UDim2.new(0, 0, 0, 45)
IntroBackground.Size = UDim2.new(0, 250, 0, 175)
IntroBackground.ZIndex = 10
Logo.Name = 'Logo'
Logo.Parent = Holder
Logo.BackgroundTransparency = 1
Logo.BorderSizePixel = 0
Logo.Position = UDim2.new(0, 125, 0, 127)
Logo.Size = UDim2.new(0, 10, 0, 10)
Logo.Image = getcustomasset('infiniteyield/assets/logo.png')
Logo.ImageTransparency = 0
Logo.ZIndex = 10
Credits.Name = 'Credits'
Credits.Parent = Holder
Credits.BackgroundTransparency = 1
Credits.BorderSizePixel = 0
Credits.Position = UDim2.new(0, 0, 0.9, 30)
Credits.Size = UDim2.new(0, 250, 0, 20)
Credits.Font = Enum.Font.SourceSansLight
Credits.FontSize = Enum.FontSize.Size14
Credits.Text = 'Edge // Zwolf // Moon // Toon // Peyton // ATP'
Credits.TextColor3 = Color3.new(1, 1, 1)
Credits.ZIndex = 10
KeybindsFrame.Name = 'KeybindsFrame'
KeybindsFrame.Parent = Settings
KeybindsFrame.Active = true
KeybindsFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
KeybindsFrame.BorderSizePixel = 0
KeybindsFrame.Position = UDim2.new(0, 0, 0, 175)
KeybindsFrame.Size = UDim2.new(0, 250, 0, 175)
KeybindsFrame.ZIndex = 10

table.insert(shade1, KeybindsFrame)

Close.Name = 'Close'
Close.Parent = KeybindsFrame
Close.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Close.BorderSizePixel = 0
Close.Position = UDim2.new(0, 205, 0, 150)
Close.Size = UDim2.new(0, 40, 0, 20)
Close.Font = Enum.Font.SourceSans
Close.TextSize = 14
Close.Text = 'Close'
Close.TextColor3 = Color3.new(1, 1, 1)
Close.ZIndex = 10

table.insert(shade2, Close)
table.insert(text1, Close)

Add.Name = 'Add'
Add.Parent = KeybindsFrame
Add.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Add.BorderSizePixel = 0
Add.Position = UDim2.new(0, 5, 0, 150)
Add.Size = UDim2.new(0, 40, 0, 20)
Add.Font = Enum.Font.SourceSans
Add.TextSize = 14
Add.Text = 'Add'
Add.TextColor3 = Color3.new(1, 1, 1)
Add.ZIndex = 10

table.insert(shade2, Add)
table.insert(text1, Add)

Delete.Name = 'Delete'
Delete.Parent = KeybindsFrame
Delete.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Delete.BorderSizePixel = 0
Delete.Position = UDim2.new(0, 50, 0, 150)
Delete.Size = UDim2.new(0, 40, 0, 20)
Delete.Font = Enum.Font.SourceSans
Delete.TextSize = 14
Delete.Text = 'Clear'
Delete.TextColor3 = Color3.new(1, 1, 1)
Delete.ZIndex = 10

table.insert(shade2, Delete)
table.insert(text1, Delete)

Holder_2.Name = 'Holder'
Holder_2.Parent = KeybindsFrame
Holder_2.BackgroundTransparency = 1
Holder_2.BorderSizePixel = 0
Holder_2.Position = UDim2.new(0, 0, 0, 0)
Holder_2.Size = UDim2.new(0, 250, 0, 145)
Holder_2.ScrollBarImageColor3 = Color3.fromRGB(78, 78, 79)
Holder_2.BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
Holder_2.CanvasSize = UDim2.new(0, 0, 0, 0)
Holder_2.MidImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
Holder_2.ScrollBarThickness = 0
Holder_2.TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
Holder_2.VerticalScrollBarInset = 'Always'
Holder_2.ZIndex = 10
Example_2.Name = 'Example'
Example_2.Parent = KeybindsFrame
Example_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Example_2.BorderSizePixel = 0
Example_2.Size = UDim2.new(0, 10, 0, 20)
Example_2.Visible = false
Example_2.ZIndex = 10

table.insert(shade2, Example_2)

Text_3.Name = 'Text'
Text_3.Parent = Example_2
Text_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Text_3.BorderSizePixel = 0
Text_3.Position = UDim2.new(0, 10, 0, 0)
Text_3.Size = UDim2.new(0, 240, 0, 20)
Text_3.Font = Enum.Font.SourceSans
Text_3.TextSize = 14
Text_3.Text = 'nom'
Text_3.TextColor3 = Color3.new(1, 1, 1)
Text_3.TextXAlignment = Enum.TextXAlignment.Left
Text_3.ZIndex = 10

table.insert(shade2, Text_3)
table.insert(text1, Text_3)

Delete_2.Name = 'Delete'
Delete_2.Parent = Text_3
Delete_2.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Delete_2.BorderSizePixel = 0
Delete_2.Position = UDim2.new(0, 200, 0, 0)
Delete_2.Size = UDim2.new(0, 40, 0, 20)
Delete_2.Font = Enum.Font.SourceSans
Delete_2.TextSize = 14
Delete_2.Text = 'Delete'
Delete_2.TextColor3 = Color3.new(0, 0, 0)
Delete_2.ZIndex = 10

table.insert(shade3, Delete_2)
table.insert(text2, Delete_2)

KeybindEditor.Name = randomString()
KeybindEditor.Parent = ScaledHolder
KeybindEditor.Active = true
KeybindEditor.BackgroundTransparency = 1
KeybindEditor.Position = UDim2.new(0.5, -180, 0, -500)
KeybindEditor.Size = UDim2.new(0, 360, 0, 20)
KeybindEditor.ZIndex = 10
background_2.Name = 'background'
background_2.Parent = KeybindEditor
background_2.Active = true
background_2.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
background_2.BorderSizePixel = 0
background_2.Position = UDim2.new(0, 0, 0, 20)
background_2.Size = UDim2.new(0, 360, 0, 185)
background_2.ZIndex = 10

table.insert(shade1, background_2)

Dark_3.Name = 'Dark'
Dark_3.Parent = background_2
Dark_3.Active = true
Dark_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Dark_3.BorderSizePixel = 0
Dark_3.Position = UDim2.new(0, 135, 0, 0)
Dark_3.Size = UDim2.new(0, 2, 0, 185)
Dark_3.ZIndex = 10

table.insert(shade2, Dark_3)

Directions.Name = 'Directions'
Directions.Parent = background_2
Directions.BackgroundTransparency = 1
Directions.BorderSizePixel = 0
Directions.Position = UDim2.new(0, 10, 0, 15)
Directions.Size = UDim2.new(0, 115, 0, 90)
Directions.ZIndex = 10
Directions.Font = Enum.Font.SourceSans
Directions.Text = 
[[Click the button below and press a key/mouse button. Then select what you want to bind it to.]]
Directions.TextColor3 = Color3.fromRGB(255, 255, 255)
Directions.TextSize = 14
Directions.TextWrapped = true
Directions.TextYAlignment = Enum.TextYAlignment.Top

table.insert(text1, Directions)

BindTo.Name = 'BindTo'
BindTo.Parent = background_2
BindTo.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
BindTo.BorderSizePixel = 0
BindTo.Position = UDim2.new(0, 10, 0, 95)
BindTo.Size = UDim2.new(0, 115, 0, 50)
BindTo.ZIndex = 10
BindTo.Font = Enum.Font.SourceSans
BindTo.Text = 'Click to bind'
BindTo.TextColor3 = Color3.fromRGB(255, 255, 255)
BindTo.TextSize = 16

table.insert(shade2, BindTo)
table.insert(text1, BindTo)

TriggerLabel.Name = 'TriggerLabel'
TriggerLabel.Parent = background_2
TriggerLabel.BackgroundTransparency = 1
TriggerLabel.Position = UDim2.new(0, 10, 0, 155)
TriggerLabel.Size = UDim2.new(0, 45, 0, 20)
TriggerLabel.ZIndex = 10
TriggerLabel.Font = Enum.Font.SourceSans
TriggerLabel.Text = 'Trigger:'
TriggerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TriggerLabel.TextSize = 14
TriggerLabel.TextXAlignment = Enum.TextXAlignment.Left

table.insert(text1, TriggerLabel)

BindTriggerSelect.Name = 'BindTo'
BindTriggerSelect.Parent = background_2
BindTriggerSelect.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
BindTriggerSelect.BorderSizePixel = 0
BindTriggerSelect.Position = UDim2.new(0, 60, 0, 155)
BindTriggerSelect.Size = UDim2.new(0, 65, 0, 20)
BindTriggerSelect.ZIndex = 10
BindTriggerSelect.Font = Enum.Font.SourceSans
BindTriggerSelect.Text = 'KeyDown'
BindTriggerSelect.TextColor3 = Color3.fromRGB(255, 255, 255)
BindTriggerSelect.TextSize = 16

table.insert(shade2, BindTriggerSelect)
table.insert(text1, BindTriggerSelect)

Add_2.Name = 'Add'
Add_2.Parent = background_2
Add_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Add_2.BorderSizePixel = 0
Add_2.Position = UDim2.new(0, 310, 0, 35)
Add_2.Size = UDim2.new(0, 40, 0, 20)
Add_2.ZIndex = 10
Add_2.Font = Enum.Font.SourceSans
Add_2.Text = 'Add'
Add_2.TextColor3 = Color3.fromRGB(255, 255, 255)
Add_2.TextSize = 14

table.insert(shade2, Add_2)
table.insert(text1, Add_2)

Toggles.Name = 'Toggles'
Toggles.Parent = background_2
Toggles.BackgroundTransparency = 1
Toggles.BorderSizePixel = 0
Toggles.Position = UDim2.new(0, 150, 0, 125)
Toggles.Size = UDim2.new(0, 200, 0, 50)
Toggles.ZIndex = 10
Toggles.BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
Toggles.CanvasSize = UDim2.new(0, 0, 0, 50)
Toggles.ScrollBarThickness = 8
Toggles.TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
Toggles.VerticalScrollBarInset = Enum.ScrollBarInset.Always

table.insert(scroll, Toggles)

ClickTP.Name = 'Click TP (Hold Key & Click)'
ClickTP.Parent = Toggles
ClickTP.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
ClickTP.BorderSizePixel = 0
ClickTP.Size = UDim2.new(0, 200, 0, 20)
ClickTP.ZIndex = 10
ClickTP.Font = Enum.Font.SourceSans
ClickTP.Text = '    Click TP (Hold Key & Click)'
ClickTP.TextColor3 = Color3.fromRGB(255, 255, 255)
ClickTP.TextSize = 14
ClickTP.TextXAlignment = Enum.TextXAlignment.Left

table.insert(shade2, ClickTP)
table.insert(text1, ClickTP)

Select.Name = 'Select'
Select.Parent = ClickTP
Select.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Select.BorderSizePixel = 0
Select.Position = UDim2.new(0, 160, 0, 0)
Select.Size = UDim2.new(0, 40, 0, 20)
Select.ZIndex = 10
Select.Font = Enum.Font.SourceSans
Select.Text = 'Add'
Select.TextColor3 = Color3.fromRGB(0, 0, 0)
Select.TextSize = 14

table.insert(shade3, Select)
table.insert(text2, Select)

ClickDelete.Name = 'Click Delete (Hold Key & Click)'
ClickDelete.Parent = Toggles
ClickDelete.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
ClickDelete.BorderSizePixel = 0
ClickDelete.Position = UDim2.new(0, 0, 0, 25)
ClickDelete.Size = UDim2.new(0, 200, 0, 20)
ClickDelete.ZIndex = 10
ClickDelete.Font = Enum.Font.SourceSans
ClickDelete.Text = '    Click Delete (Hold Key & Click)'
ClickDelete.TextColor3 = Color3.fromRGB(255, 255, 255)
ClickDelete.TextSize = 14
ClickDelete.TextXAlignment = Enum.TextXAlignment.Left

table.insert(shade2, ClickDelete)
table.insert(text1, ClickDelete)

Select_2.Name = 'Select'
Select_2.Parent = ClickDelete
Select_2.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Select_2.BorderSizePixel = 0
Select_2.Position = UDim2.new(0, 160, 0, 0)
Select_2.Size = UDim2.new(0, 40, 0, 20)
Select_2.ZIndex = 10
Select_2.Font = Enum.Font.SourceSans
Select_2.Text = 'Add'
Select_2.TextColor3 = Color3.fromRGB(0, 0, 0)
Select_2.TextSize = 14

table.insert(shade3, Select_2)
table.insert(text2, Select_2)

Cmdbar_2.Name = 'Cmdbar_2'
Cmdbar_2.Parent = background_2
Cmdbar_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Cmdbar_2.BorderSizePixel = 0
Cmdbar_2.Position = UDim2.new(0, 150, 0, 35)
Cmdbar_2.Size = UDim2.new(0, 150, 0, 20)
Cmdbar_2.ZIndex = 10
Cmdbar_2.Font = Enum.Font.SourceSans
Cmdbar_2.PlaceholderText = 'Command'
Cmdbar_2.Text = ''
Cmdbar_2.TextColor3 = Color3.fromRGB(255, 255, 255)
Cmdbar_2.TextSize = 14
Cmdbar_2.TextXAlignment = Enum.TextXAlignment.Left
Cmdbar_3.Name = 'Cmdbar_3'
Cmdbar_3.Parent = background_2
Cmdbar_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Cmdbar_3.BorderSizePixel = 0
Cmdbar_3.Position = UDim2.new(0, 150, 0, 60)
Cmdbar_3.Size = UDim2.new(0, 150, 0, 20)
Cmdbar_3.ZIndex = 10
Cmdbar_3.Font = Enum.Font.SourceSans
Cmdbar_3.PlaceholderText = 'Command 2'
Cmdbar_3.Text = ''
Cmdbar_3.TextColor3 = Color3.fromRGB(255, 255, 255)
Cmdbar_3.TextSize = 14
Cmdbar_3.TextXAlignment = Enum.TextXAlignment.Left
CreateToggle.Name = 'CreateToggle'
CreateToggle.Parent = background_2
CreateToggle.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
CreateToggle.BackgroundTransparency = 1
CreateToggle.BorderSizePixel = 0
CreateToggle.Position = UDim2.new(0, 152, 0, 10)
CreateToggle.Size = UDim2.new(0, 198, 0, 20)
CreateToggle.ZIndex = 10
CreateToggle.Font = Enum.Font.SourceSans
CreateToggle.Text = 'Create Toggle'
CreateToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
CreateToggle.TextSize = 14
CreateToggle.TextXAlignment = Enum.TextXAlignment.Left

table.insert(text1, CreateToggle)

Button_2.Name = 'Button'
Button_2.Parent = CreateToggle
Button_2.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Button_2.BorderSizePixel = 0
Button_2.Position = UDim2.new(1, -20, 0, 0)
Button_2.Size = UDim2.new(0, 20, 0, 20)
Button_2.ZIndex = 10

table.insert(shade3, Button_2)

On_2.Name = 'On'
On_2.Parent = Button_2
On_2.BackgroundColor3 = Color3.fromRGB(150, 150, 151)
On_2.BackgroundTransparency = 1
On_2.BorderSizePixel = 0
On_2.Position = UDim2.new(0, 2, 0, 2)
On_2.Size = UDim2.new(0, 16, 0, 16)
On_2.ZIndex = 10
On_2.Font = Enum.Font.SourceSans
On_2.Text = ''
On_2.TextColor3 = Color3.fromRGB(0, 0, 0)
On_2.TextSize = 14
shadow_2.Name = 'shadow'
shadow_2.Parent = KeybindEditor
shadow_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
shadow_2.BorderSizePixel = 0
shadow_2.Size = UDim2.new(0, 360, 0, 20)
shadow_2.ZIndex = 10

table.insert(shade2, shadow_2)

PopupText_2.Name = 'PopupText_2'
PopupText_2.Parent = shadow_2
PopupText_2.BackgroundTransparency = 1
PopupText_2.Size = UDim2.new(1, 0, 0.949999988, 0)
PopupText_2.ZIndex = 10
PopupText_2.Font = Enum.Font.SourceSans
PopupText_2.Text = 'Set Keybinds'
PopupText_2.TextColor3 = Color3.fromRGB(255, 255, 255)
PopupText_2.TextSize = 14
PopupText_2.TextWrapped = true

table.insert(text1, PopupText_2)

Exit_2.Name = 'Exit_2'
Exit_2.Parent = shadow_2
Exit_2.BackgroundTransparency = 1
Exit_2.Position = UDim2.new(1, -20, 0, 0)
Exit_2.Size = UDim2.new(0, 20, 0, 20)
Exit_2.ZIndex = 10
Exit_2.Text = ''
ExitImage_2.Parent = Exit_2
ExitImage_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ExitImage_2.BackgroundTransparency = 1
ExitImage_2.Position = UDim2.new(0, 5, 0, 5)
ExitImage_2.Size = UDim2.new(0, 10, 0, 10)
ExitImage_2.ZIndex = 10
ExitImage_2.Image = getcustomasset('infiniteyield/assets/close.png')
PositionsFrame.Name = 'PositionsFrame'
PositionsFrame.Parent = Settings
PositionsFrame.Active = true
PositionsFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
PositionsFrame.BorderSizePixel = 0
PositionsFrame.Size = UDim2.new(0, 250, 0, 175)
PositionsFrame.Position = UDim2.new(0, 0, 0, 175)
PositionsFrame.ZIndex = 10

table.insert(shade1, PositionsFrame)

Close_3.Name = 'Close'
Close_3.Parent = PositionsFrame
Close_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Close_3.BorderSizePixel = 0
Close_3.Position = UDim2.new(0, 205, 0, 150)
Close_3.Size = UDim2.new(0, 40, 0, 20)
Close_3.Font = Enum.Font.SourceSans
Close_3.TextSize = 14
Close_3.Text = 'Close'
Close_3.TextColor3 = Color3.new(1, 1, 1)
Close_3.ZIndex = 10

table.insert(shade2, Close_3)
table.insert(text1, Close_3)

Delete_5.Name = 'Delete'
Delete_5.Parent = PositionsFrame
Delete_5.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Delete_5.BorderSizePixel = 0
Delete_5.Position = UDim2.new(0, 50, 0, 150)
Delete_5.Size = UDim2.new(0, 40, 0, 20)
Delete_5.Font = Enum.Font.SourceSans
Delete_5.TextSize = 14
Delete_5.Text = 'Clear'
Delete_5.TextColor3 = Color3.new(1, 1, 1)
Delete_5.ZIndex = 10

table.insert(shade2, Delete_5)
table.insert(text1, Delete_5)

Part.Name = 'PartGoto'
Part.Parent = PositionsFrame
Part.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Part.BorderSizePixel = 0
Part.Position = UDim2.new(0, 5, 0, 150)
Part.Size = UDim2.new(0, 40, 0, 20)
Part.Font = Enum.Font.SourceSans
Part.TextSize = 14
Part.Text = 'Part'
Part.TextColor3 = Color3.new(1, 1, 1)
Part.ZIndex = 10

table.insert(shade2, Part)
table.insert(text1, Part)

Holder_4.Name = 'Holder'
Holder_4.Parent = PositionsFrame
Holder_4.BackgroundTransparency = 1
Holder_4.BorderSizePixel = 0
Holder_4.Position = UDim2.new(0, 0, 0, 0)
Holder_4.Selectable = false
Holder_4.Size = UDim2.new(0, 250, 0, 145)
Holder_4.ScrollBarImageColor3 = Color3.fromRGB(78, 78, 79)
Holder_4.BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
Holder_4.CanvasSize = UDim2.new(0, 0, 0, 0)
Holder_4.MidImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
Holder_4.ScrollBarThickness = 0
Holder_4.TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
Holder_4.VerticalScrollBarInset = 'Always'
Holder_4.ZIndex = 10
Example_4.Name = 'Example'
Example_4.Parent = PositionsFrame
Example_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Example_4.BorderSizePixel = 0
Example_4.Size = UDim2.new(0, 10, 0, 20)
Example_4.Visible = false
Example_4.Position = UDim2.new(0, 0, 0, -5)
Example_4.ZIndex = 10

table.insert(shade2, Example_4)

Text_5.Name = 'Text'
Text_5.Parent = Example_4
Text_5.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Text_5.BorderSizePixel = 0
Text_5.Position = UDim2.new(0, 10, 0, 0)
Text_5.Size = UDim2.new(0, 240, 0, 20)
Text_5.Font = Enum.Font.SourceSans
Text_5.TextSize = 14
Text_5.Text = 'Position'
Text_5.TextColor3 = Color3.new(1, 1, 1)
Text_5.TextXAlignment = Enum.TextXAlignment.Left
Text_5.ZIndex = 10

table.insert(shade2, Text_5)
table.insert(text1, Text_5)

Delete_6.Name = 'Delete'
Delete_6.Parent = Text_5
Delete_6.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Delete_6.BorderSizePixel = 0
Delete_6.Position = UDim2.new(0, 200, 0, 0)
Delete_6.Size = UDim2.new(0, 40, 0, 20)
Delete_6.Font = Enum.Font.SourceSans
Delete_6.TextSize = 14
Delete_6.Text = 'Delete'
Delete_6.TextColor3 = Color3.new(0, 0, 0)
Delete_6.ZIndex = 10

table.insert(shade3, Delete_6)
table.insert(text2, Delete_6)

TP.Name = 'TP'
TP.Parent = Text_5
TP.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
TP.BorderSizePixel = 0
TP.Position = UDim2.new(0, 155, 0, 0)
TP.Size = UDim2.new(0, 40, 0, 20)
TP.Font = Enum.Font.SourceSans
TP.TextSize = 14
TP.Text = 'Goto'
TP.TextColor3 = Color3.new(0, 0, 0)
TP.ZIndex = 10

table.insert(shade3, TP)
table.insert(text2, TP)

AliasesFrame.Name = 'AliasesFrame'
AliasesFrame.Parent = Settings
AliasesFrame.Active = true
AliasesFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
AliasesFrame.BorderSizePixel = 0
AliasesFrame.Position = UDim2.new(0, 0, 0, 175)
AliasesFrame.Size = UDim2.new(0, 250, 0, 175)
AliasesFrame.ZIndex = 10

table.insert(shade1, AliasesFrame)

Close_2.Name = 'Close'
Close_2.Parent = AliasesFrame
Close_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Close_2.BorderSizePixel = 0
Close_2.Position = UDim2.new(0, 205, 0, 150)
Close_2.Size = UDim2.new(0, 40, 0, 20)
Close_2.Font = Enum.Font.SourceSans
Close_2.TextSize = 14
Close_2.Text = 'Close'
Close_2.TextColor3 = Color3.new(1, 1, 1)
Close_2.ZIndex = 10

table.insert(shade2, Close_2)
table.insert(text1, Close_2)

Delete_3.Name = 'Delete'
Delete_3.Parent = AliasesFrame
Delete_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Delete_3.BorderSizePixel = 0
Delete_3.Position = UDim2.new(0, 5, 0, 150)
Delete_3.Size = UDim2.new(0, 40, 0, 20)
Delete_3.Font = Enum.Font.SourceSans
Delete_3.TextSize = 14
Delete_3.Text = 'Clear'
Delete_3.TextColor3 = Color3.new(1, 1, 1)
Delete_3.ZIndex = 10

table.insert(shade2, Delete_3)
table.insert(text1, Delete_3)

Holder_3.Name = 'Holder'
Holder_3.Parent = AliasesFrame
Holder_3.BackgroundTransparency = 1
Holder_3.BorderSizePixel = 0
Holder_3.Position = UDim2.new(0, 0, 0, 0)
Holder_3.Size = UDim2.new(0, 250, 0, 145)
Holder_3.ScrollBarImageColor3 = Color3.fromRGB(78, 78, 79)
Holder_3.BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
Holder_3.CanvasSize = UDim2.new(0, 0, 0, 0)
Holder_3.MidImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
Holder_3.ScrollBarThickness = 0
Holder_3.TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
Holder_3.VerticalScrollBarInset = 'Always'
Holder_3.ZIndex = 10
Example_3.Name = 'Example'
Example_3.Parent = AliasesFrame
Example_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Example_3.BorderSizePixel = 0
Example_3.Size = UDim2.new(0, 10, 0, 20)
Example_3.Visible = false
Example_3.ZIndex = 10

table.insert(shade2, Example_3)

Text_4.Name = 'Text'
Text_4.Parent = Example_3
Text_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Text_4.BorderSizePixel = 0
Text_4.Position = UDim2.new(0, 10, 0, 0)
Text_4.Size = UDim2.new(0, 240, 0, 20)
Text_4.Font = Enum.Font.SourceSans
Text_4.TextSize = 14
Text_4.Text = 'honk'
Text_4.TextColor3 = Color3.new(1, 1, 1)
Text_4.TextXAlignment = Enum.TextXAlignment.Left
Text_4.ZIndex = 10

table.insert(shade2, Text_4)
table.insert(text1, Text_4)

Delete_4.Name = 'Delete'
Delete_4.Parent = Text_4
Delete_4.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Delete_4.BorderSizePixel = 0
Delete_4.Position = UDim2.new(0, 200, 0, 0)
Delete_4.Size = UDim2.new(0, 40, 0, 20)
Delete_4.Font = Enum.Font.SourceSans
Delete_4.TextSize = 14
Delete_4.Text = 'Delete'
Delete_4.TextColor3 = Color3.new(0, 0, 0)
Delete_4.ZIndex = 10

table.insert(shade3, Delete_4)
table.insert(text2, Delete_4)

PluginsFrame.Name = 'PluginsFrame'
PluginsFrame.Parent = Settings
PluginsFrame.Active = true
PluginsFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
PluginsFrame.BorderSizePixel = 0
PluginsFrame.Position = UDim2.new(0, 0, 0, 175)
PluginsFrame.Size = UDim2.new(0, 250, 0, 175)
PluginsFrame.ZIndex = 10

table.insert(shade1, PluginsFrame)

Close_4.Name = 'Close'
Close_4.Parent = PluginsFrame
Close_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Close_4.BorderSizePixel = 0
Close_4.Position = UDim2.new(0, 205, 0, 150)
Close_4.Size = UDim2.new(0, 40, 0, 20)
Close_4.Font = Enum.Font.SourceSans
Close_4.TextSize = 14
Close_4.Text = 'Close'
Close_4.TextColor3 = Color3.new(1, 1, 1)
Close_4.ZIndex = 10

table.insert(shade2, Close_4)
table.insert(text1, Close_4)

Add_3.Name = 'Add'
Add_3.Parent = PluginsFrame
Add_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Add_3.BorderSizePixel = 0
Add_3.Position = UDim2.new(0, 5, 0, 150)
Add_3.Size = UDim2.new(0, 40, 0, 20)
Add_3.Font = Enum.Font.SourceSans
Add_3.TextSize = 14
Add_3.Text = 'Add'
Add_3.TextColor3 = Color3.new(1, 1, 1)
Add_3.ZIndex = 10

table.insert(shade2, Add_3)
table.insert(text1, Add_3)

Holder_5.Name = 'Holder'
Holder_5.Parent = PluginsFrame
Holder_5.BackgroundTransparency = 1
Holder_5.BorderSizePixel = 0
Holder_5.Position = UDim2.new(0, 0, 0, 0)
Holder_5.Selectable = false
Holder_5.Size = UDim2.new(0, 250, 0, 145)
Holder_5.ScrollBarImageColor3 = Color3.fromRGB(78, 78, 79)
Holder_5.BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
Holder_5.CanvasSize = UDim2.new(0, 0, 0, 0)
Holder_5.MidImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
Holder_5.ScrollBarThickness = 0
Holder_5.TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
Holder_5.VerticalScrollBarInset = 'Always'
Holder_5.ZIndex = 10
Example_5.Name = 'Example'
Example_5.Parent = PluginsFrame
Example_5.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Example_5.BorderSizePixel = 0
Example_5.Size = UDim2.new(0, 10, 0, 20)
Example_5.Visible = false
Example_5.ZIndex = 10

table.insert(shade2, Example_5)

Text_6.Name = 'Text'
Text_6.Parent = Example_5
Text_6.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Text_6.BorderSizePixel = 0
Text_6.Position = UDim2.new(0, 10, 0, 0)
Text_6.Size = UDim2.new(0, 240, 0, 20)
Text_6.Font = Enum.Font.SourceSans
Text_6.TextSize = 14
Text_6.Text = 'F4 > Toggle Fly'
Text_6.TextColor3 = Color3.new(1, 1, 1)
Text_6.TextXAlignment = Enum.TextXAlignment.Left
Text_6.ZIndex = 10

table.insert(shade2, Text_6)
table.insert(text1, Text_6)

Delete_7.Name = 'Delete'
Delete_7.Parent = Text_6
Delete_7.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Delete_7.BorderSizePixel = 0
Delete_7.Position = UDim2.new(0, 200, 0, 0)
Delete_7.Size = UDim2.new(0, 40, 0, 20)
Delete_7.Font = Enum.Font.SourceSans
Delete_7.TextSize = 14
Delete_7.Text = 'Delete'
Delete_7.TextColor3 = Color3.new(0, 0, 0)
Delete_7.ZIndex = 10

table.insert(shade3, Delete_7)
table.insert(text2, Delete_7)

PluginEditor.Name = randomString()
PluginEditor.Parent = ScaledHolder
PluginEditor.BorderSizePixel = 0
PluginEditor.Active = true
PluginEditor.BackgroundTransparency = 1
PluginEditor.Position = UDim2.new(0.5, -180, 0, -500)
PluginEditor.Size = UDim2.new(0, 360, 0, 20)
PluginEditor.ZIndex = 10
background_3.Name = 'background'
background_3.Parent = PluginEditor
background_3.Active = true
background_3.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
background_3.BorderSizePixel = 0
background_3.Position = UDim2.new(0, 0, 0, 20)
background_3.Size = UDim2.new(0, 360, 0, 160)
background_3.ZIndex = 10

table.insert(shade1, background_3)

Dark_2.Name = 'Dark'
Dark_2.Parent = background_3
Dark_2.Active = true
Dark_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
Dark_2.BorderSizePixel = 0
Dark_2.Position = UDim2.new(0, 222, 0, 0)
Dark_2.Size = UDim2.new(0, 2, 0, 160)
Dark_2.ZIndex = 10

table.insert(shade2, Dark_2)

Img.Name = 'Img'
Img.Parent = background_3
Img.BackgroundTransparency = 1
Img.Position = UDim2.new(0, 242, 0, 3)
Img.Size = UDim2.new(0, 100, 0, 95)
Img.Image = getcustomasset('infiniteyield/assets/imgstudiopluginlogo.png')
Img.ZIndex = 10
AddPlugin.Name = 'AddPlugin'
AddPlugin.Parent = background_3
AddPlugin.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
AddPlugin.BorderSizePixel = 0
AddPlugin.Position = UDim2.new(0, 235, 0, 100)
AddPlugin.Size = UDim2.new(0, 115, 0, 50)
AddPlugin.Font = Enum.Font.SourceSans
AddPlugin.TextSize = 14
AddPlugin.Text = 'Add Plugin'
AddPlugin.TextColor3 = Color3.new(1, 1, 1)
AddPlugin.ZIndex = 10

table.insert(shade2, AddPlugin)
table.insert(text1, AddPlugin)

FileName.Name = 'FileName'
FileName.Parent = background_3
FileName.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
FileName.BorderSizePixel = 0
FileName.Position = UDim2.new(0.028, 0, 0.625, 0)
FileName.Size = UDim2.new(0, 200, 0, 50)
FileName.Font = Enum.Font.SourceSans
FileName.TextSize = 14
FileName.Text = 'Plugin File Name'
FileName.TextColor3 = Color3.new(1, 1, 1)
FileName.ZIndex = 10

table.insert(shade2, FileName)
table.insert(text1, FileName)

About.Name = 'About'
About.Parent = background_3
About.BackgroundTransparency = 1
About.BorderSizePixel = 0
About.Position = UDim2.new(0, 17, 0, 10)
About.Size = UDim2.new(0, 187, 0, 49)
About.Font = Enum.Font.SourceSans
About.TextSize = 14
About.Text = 
[[Plugins are .iy files and should be located in the 'workspace' folder of your exploit.]]
About.TextColor3 = Color3.fromRGB(255, 255, 255)
About.TextWrapped = true
About.TextYAlignment = Enum.TextYAlignment.Top
About.ZIndex = 10

table.insert(text1, About)

Directions_2.Name = 'Directions'
Directions_2.Parent = background_3
Directions_2.BackgroundTransparency = 1
Directions_2.BorderSizePixel = 0
Directions_2.Position = UDim2.new(0, 17, 0, 60)
Directions_2.Size = UDim2.new(0, 187, 0, 49)
Directions_2.Font = Enum.Font.SourceSans
Directions_2.TextSize = 14
Directions_2.Text = 'Type the name of the plugin file you want to add below.'
Directions_2.TextColor3 = Color3.fromRGB(255, 255, 255)
Directions_2.TextWrapped = true
Directions_2.TextYAlignment = Enum.TextYAlignment.Top
Directions_2.ZIndex = 10

table.insert(text1, Directions_2)

shadow_3.Name = 'shadow'
shadow_3.Parent = PluginEditor
shadow_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
shadow_3.BorderSizePixel = 0
shadow_3.Size = UDim2.new(0, 360, 0, 20)
shadow_3.ZIndex = 10

table.insert(shade2, shadow_3)

PopupText_3.Name = 'PopupText'
PopupText_3.Parent = shadow_3
PopupText_3.BackgroundTransparency = 1
PopupText_3.Size = UDim2.new(1, 0, 0.95, 0)
PopupText_3.ZIndex = 10
PopupText_3.Font = Enum.Font.SourceSans
PopupText_3.TextSize = 14
PopupText_3.Text = 'Add Plugins'
PopupText_3.TextColor3 = Color3.new(1, 1, 1)
PopupText_3.TextWrapped = true

table.insert(text1, PopupText_3)

Exit_3.Name = 'Exit'
Exit_3.Parent = shadow_3
Exit_3.BackgroundTransparency = 1
Exit_3.Position = UDim2.new(1, -20, 0, 0)
Exit_3.Size = UDim2.new(0, 20, 0, 20)
Exit_3.Text = ''
Exit_3.ZIndex = 10
ExitImage_3.Parent = Exit_3
ExitImage_3.BackgroundColor3 = Color3.new(1, 1, 1)
ExitImage_3.BackgroundTransparency = 1
ExitImage_3.Position = UDim2.new(0, 5, 0, 5)
ExitImage_3.Size = UDim2.new(0, 10, 0, 10)
ExitImage_3.Image = getcustomasset('infiniteyield/assets/close.png')
ExitImage_3.ZIndex = 10
AliasHint.Name = 'AliasHint'
AliasHint.Parent = AliasesFrame
AliasHint.BackgroundTransparency = 1
AliasHint.BorderSizePixel = 0
AliasHint.Position = UDim2.new(0, 25, 0, 40)
AliasHint.Size = UDim2.new(0, 200, 0, 50)
AliasHint.Font = Enum.Font.SourceSansItalic
AliasHint.TextSize = 16
AliasHint.Text = "Add aliases by using the 'addalias' command"
AliasHint.TextColor3 = Color3.new(1, 1, 1)
AliasHint.TextStrokeColor3 = Color3.new(1, 1, 1)
AliasHint.TextWrapped = true
AliasHint.ZIndex = 10

table.insert(text1, AliasHint)

PluginsHint.Name = 'PluginsHint'
PluginsHint.Parent = PluginsFrame
PluginsHint.BackgroundTransparency = 1
PluginsHint.BorderSizePixel = 0
PluginsHint.Position = UDim2.new(0, 25, 0, 40)
PluginsHint.Size = UDim2.new(0, 200, 0, 50)
PluginsHint.Font = Enum.Font.SourceSansItalic
PluginsHint.TextSize = 16
PluginsHint.Text = 'Download plugins from the IY Discord (discord.gg/78ZuWSq)'
PluginsHint.TextColor3 = Color3.new(1, 1, 1)
PluginsHint.TextStrokeColor3 = Color3.new(1, 1, 1)
PluginsHint.TextWrapped = true
PluginsHint.ZIndex = 10

table.insert(text1, PluginsHint)

PositionsHint.Name = 'PositionsHint'
PositionsHint.Parent = PositionsFrame
PositionsHint.BackgroundTransparency = 1
PositionsHint.BorderSizePixel = 0
PositionsHint.Position = UDim2.new(0, 25, 0, 40)
PositionsHint.Size = UDim2.new(0, 200, 0, 70)
PositionsHint.Font = Enum.Font.SourceSansItalic
PositionsHint.TextSize = 16
PositionsHint.Text = 
[[Use the 'swp' or 'setwaypoint' command to add a position using your character (NOTE: Part teleports will not save)]]
PositionsHint.TextColor3 = Color3.new(1, 1, 1)
PositionsHint.TextStrokeColor3 = Color3.new(1, 1, 1)
PositionsHint.TextWrapped = true
PositionsHint.ZIndex = 10

table.insert(text1, PositionsHint)

ToPartFrame.Name = randomString()
ToPartFrame.Parent = ScaledHolder
ToPartFrame.Active = true
ToPartFrame.BackgroundTransparency = 1
ToPartFrame.Position = UDim2.new(0.5, -180, 0, -500)
ToPartFrame.Size = UDim2.new(0, 360, 0, 20)
ToPartFrame.ZIndex = 10
background_4.Name = 'background'
background_4.Parent = ToPartFrame
background_4.Active = true
background_4.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
background_4.BorderSizePixel = 0
background_4.Position = UDim2.new(0, 0, 0, 20)
background_4.Size = UDim2.new(0, 360, 0, 117)
background_4.ZIndex = 10

table.insert(shade1, background_4)

ChoosePart.Name = 'ChoosePart'
ChoosePart.Parent = background_4
ChoosePart.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
ChoosePart.BorderSizePixel = 0
ChoosePart.Position = UDim2.new(0, 100, 0, 55)
ChoosePart.Size = UDim2.new(0, 75, 0, 30)
ChoosePart.Font = Enum.Font.SourceSans
ChoosePart.TextSize = 14
ChoosePart.Text = 'Select Part'
ChoosePart.TextColor3 = Color3.new(1, 1, 1)
ChoosePart.ZIndex = 10

table.insert(shade2, ChoosePart)
table.insert(text1, ChoosePart)

CopyPath.Name = 'CopyPath'
CopyPath.Parent = background_4
CopyPath.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
CopyPath.BorderSizePixel = 0
CopyPath.Position = UDim2.new(0, 185, 0, 55)
CopyPath.Size = UDim2.new(0, 75, 0, 30)
CopyPath.Font = Enum.Font.SourceSans
CopyPath.TextSize = 14
CopyPath.Text = 'Copy Path'
CopyPath.TextColor3 = Color3.new(1, 1, 1)
CopyPath.ZIndex = 10

table.insert(shade2, CopyPath)
table.insert(text1, CopyPath)

Directions_3.Name = 'Directions'
Directions_3.Parent = background_4
Directions_3.BackgroundTransparency = 1
Directions_3.BorderSizePixel = 0
Directions_3.Position = UDim2.new(0, 51, 0, 17)
Directions_3.Size = UDim2.new(0, 257, 0, 32)
Directions_3.Font = Enum.Font.SourceSans
Directions_3.TextSize = 14
Directions_3.Text = 
[[Click on a part and then click the "Select Part" button below to set it as a teleport location]]
Directions_3.TextColor3 = Color3.new(1, 1, 1)
Directions_3.TextWrapped = true
Directions_3.TextYAlignment = Enum.TextYAlignment.Top
Directions_3.ZIndex = 10

table.insert(text1, Directions_3)

Path.Name = 'Path'
Path.Parent = background_4
Path.BackgroundTransparency = 1
Path.BorderSizePixel = 0
Path.Position = UDim2.new(0, 0, 0, 94)
Path.Size = UDim2.new(0, 360, 0, 16)
Path.Font = Enum.Font.SourceSansItalic
Path.TextSize = 14
Path.Text = ''
Path.TextColor3 = Color3.new(1, 1, 1)
Path.TextScaled = true
Path.TextWrapped = true
Path.TextYAlignment = Enum.TextYAlignment.Top
Path.ZIndex = 10

table.insert(text1, Path)

shadow_4.Name = 'shadow'
shadow_4.Parent = ToPartFrame
shadow_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
shadow_4.BorderSizePixel = 0
shadow_4.Size = UDim2.new(0, 360, 0, 20)
shadow_4.ZIndex = 10

table.insert(shade2, shadow_4)

PopupText_5.Name = 'PopupText'
PopupText_5.Parent = shadow_4
PopupText_5.BackgroundTransparency = 1
PopupText_5.Size = UDim2.new(1, 0, 0.95, 0)
PopupText_5.ZIndex = 10
PopupText_5.Font = Enum.Font.SourceSans
PopupText_5.TextSize = 14
PopupText_5.Text = 'Teleport to Part'
PopupText_5.TextColor3 = Color3.new(1, 1, 1)
PopupText_5.TextWrapped = true

table.insert(text1, PopupText_5)

Exit_4.Name = 'Exit'
Exit_4.Parent = shadow_4
Exit_4.BackgroundTransparency = 1
Exit_4.Position = UDim2.new(1, -20, 0, 0)
Exit_4.Size = UDim2.new(0, 20, 0, 20)
Exit_4.Text = ''
Exit_4.ZIndex = 10
ExitImage_5.Parent = Exit_4
ExitImage_5.BackgroundColor3 = Color3.new(1, 1, 1)
ExitImage_5.BackgroundTransparency = 1
ExitImage_5.Position = UDim2.new(0, 5, 0, 5)
ExitImage_5.Size = UDim2.new(0, 10, 0, 10)
ExitImage_5.Image = getcustomasset('infiniteyield/assets/close.png')
ExitImage_5.ZIndex = 10
logs.Name = randomString()
logs.Parent = ScaledHolder
logs.Active = true
logs.BackgroundTransparency = 1
logs.Position = UDim2.new(0, 0, 1, 10)
logs.Size = UDim2.new(0, 338, 0, 20)
logs.ZIndex = 10
shadow.Name = 'shadow'
shadow.Parent = logs
shadow.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
shadow.BorderSizePixel = 0
shadow.Position = UDim2.new(0, 0, 0.00999999978, 0)
shadow.Size = UDim2.new(0, 338, 0, 20)
shadow.ZIndex = 10

table.insert(shade2, shadow)

Hide.Name = 'Hide'
Hide.Parent = shadow
Hide.BackgroundTransparency = 1
Hide.Position = UDim2.new(1, -40, 0, 0)
Hide.Size = UDim2.new(0, 20, 0, 20)
Hide.ZIndex = 10
Hide.Text = ''
ImageLabel.Parent = Hide
ImageLabel.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel.BackgroundTransparency = 1
ImageLabel.Position = UDim2.new(0, 3, 0, 3)
ImageLabel.Size = UDim2.new(0, 14, 0, 14)
ImageLabel.Image = getcustomasset('infiniteyield/assets/minimize.png')
ImageLabel.ZIndex = 10
PopupText.Name = 'PopupText'
PopupText.Parent = shadow
PopupText.BackgroundTransparency = 1
PopupText.Size = UDim2.new(1, 0, 0.949999988, 0)
PopupText.ZIndex = 10
PopupText.Font = Enum.Font.SourceSans
PopupText.FontSize = Enum.FontSize.Size14
PopupText.Text = 'Logs'
PopupText.TextColor3 = Color3.new(1, 1, 1)
PopupText.TextWrapped = true

table.insert(text1, PopupText)

Exit.Name = 'Exit'
Exit.Parent = shadow
Exit.BackgroundTransparency = 1
Exit.Position = UDim2.new(1, -20, 0, 0)
Exit.Size = UDim2.new(0, 20, 0, 20)
Exit.ZIndex = 10
Exit.Text = ''
ImageLabel_2.Parent = Exit
ImageLabel_2.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel_2.BackgroundTransparency = 1
ImageLabel_2.Position = UDim2.new(0, 5, 0, 5)
ImageLabel_2.Size = UDim2.new(0, 10, 0, 10)
ImageLabel_2.Image = getcustomasset('infiniteyield/assets/close.png')
ImageLabel_2.ZIndex = 10
background.Name = 'background'
background.Parent = logs
background.Active = true
background.BackgroundColor3 = Color3.new(0.141176, 0.141176, 0.145098)
background.BorderSizePixel = 0
background.ClipsDescendants = true
background.Position = UDim2.new(0, 0, 1, 0)
background.Size = UDim2.new(0, 338, 0, 245)
background.ZIndex = 10
chat.Name = 'chat'
chat.Parent = background
chat.Active = true
chat.BackgroundColor3 = Color3.new(0.141176, 0.141176, 0.145098)
chat.BorderSizePixel = 0
chat.ClipsDescendants = true
chat.Size = UDim2.new(0, 338, 0, 245)
chat.ZIndex = 10

table.insert(shade1, chat)

Clear.Name = 'Clear'
Clear.Parent = chat
Clear.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
Clear.BorderSizePixel = 0
Clear.Position = UDim2.new(0, 5, 0, 220)
Clear.Size = UDim2.new(0, 50, 0, 20)
Clear.ZIndex = 10
Clear.Font = Enum.Font.SourceSans
Clear.FontSize = Enum.FontSize.Size14
Clear.Text = 'Clear'
Clear.TextColor3 = Color3.new(1, 1, 1)

table.insert(shade2, Clear)
table.insert(text1, Clear)

SaveChatlogs.Name = 'SaveChatlogs'
SaveChatlogs.Parent = chat
SaveChatlogs.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
SaveChatlogs.BorderSizePixel = 0
SaveChatlogs.Position = UDim2.new(0, 258, 0, 220)
SaveChatlogs.Size = UDim2.new(0, 75, 0, 20)
SaveChatlogs.ZIndex = 10
SaveChatlogs.Font = Enum.Font.SourceSans
SaveChatlogs.FontSize = Enum.FontSize.Size14
SaveChatlogs.Text = 'Save To .txt'
SaveChatlogs.TextColor3 = Color3.new(1, 1, 1)

table.insert(shade2, SaveChatlogs)
table.insert(text1, SaveChatlogs)

Toggle.Name = 'Toggle'
Toggle.Parent = chat
Toggle.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
Toggle.BorderSizePixel = 0
Toggle.Position = UDim2.new(0, 60, 0, 220)
Toggle.Size = UDim2.new(0, 66, 0, 20)
Toggle.ZIndex = 10
Toggle.Font = Enum.Font.SourceSans
Toggle.FontSize = Enum.FontSize.Size14
Toggle.Text = 'Disabled'
Toggle.TextColor3 = Color3.new(1, 1, 1)

table.insert(shade2, Toggle)
table.insert(text1, Toggle)

scroll_2.Name = 'scroll'
scroll_2.Parent = chat
scroll_2.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
scroll_2.BorderSizePixel = 0
scroll_2.Position = UDim2.new(0, 5, 0, 25)
scroll_2.Size = UDim2.new(0, 328, 0, 190)
scroll_2.ZIndex = 10
scroll_2.BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
scroll_2.CanvasSize = UDim2.new(0, 0, 0, 10)
scroll_2.ScrollBarThickness = 8
scroll_2.TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'

table.insert(scroll, scroll_2)
table.insert(shade2, scroll_2)

join.Name = 'join'
join.Parent = background
join.Active = true
join.BackgroundColor3 = Color3.new(0.141176, 0.141176, 0.145098)
join.BorderSizePixel = 0
join.ClipsDescendants = true
join.Size = UDim2.new(0, 338, 0, 245)
join.Visible = false
join.ZIndex = 10

table.insert(shade1, join)

Toggle_2.Name = 'Toggle'
Toggle_2.Parent = join
Toggle_2.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
Toggle_2.BorderSizePixel = 0
Toggle_2.Position = UDim2.new(0, 60, 0, 220)
Toggle_2.Size = UDim2.new(0, 66, 0, 20)
Toggle_2.ZIndex = 10
Toggle_2.Font = Enum.Font.SourceSans
Toggle_2.FontSize = Enum.FontSize.Size14
Toggle_2.Text = 'Disabled'
Toggle_2.TextColor3 = Color3.new(1, 1, 1)

table.insert(shade2, Toggle_2)
table.insert(text1, Toggle_2)

Clear_2.Name = 'Clear'
Clear_2.Parent = join
Clear_2.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
Clear_2.BorderSizePixel = 0
Clear_2.Position = UDim2.new(0, 5, 0, 220)
Clear_2.Size = UDim2.new(0, 50, 0, 20)
Clear_2.ZIndex = 10
Clear_2.Font = Enum.Font.SourceSans
Clear_2.FontSize = Enum.FontSize.Size14
Clear_2.Text = 'Clear'
Clear_2.TextColor3 = Color3.new(1, 1, 1)

table.insert(shade2, Clear_2)
table.insert(text1, Clear_2)

scroll_3.Name = 'scroll'
scroll_3.Parent = join
scroll_3.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
scroll_3.BorderSizePixel = 0
scroll_3.Position = UDim2.new(0, 5, 0, 25)
scroll_3.Size = UDim2.new(0, 328, 0, 190)
scroll_3.ZIndex = 10
scroll_3.BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'
scroll_3.CanvasSize = UDim2.new(0, 0, 0, 10)
scroll_3.ScrollBarThickness = 8
scroll_3.TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png'

table.insert(scroll, scroll_3)
table.insert(shade2, scroll_3)

selectChat.Name = 'selectChat'
selectChat.Parent = background
selectChat.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
selectChat.BorderSizePixel = 0
selectChat.Position = UDim2.new(0, 5, 0, 5)
selectChat.Size = UDim2.new(0, 164, 0, 20)
selectChat.ZIndex = 10
selectChat.Font = Enum.Font.SourceSans
selectChat.FontSize = Enum.FontSize.Size14
selectChat.Text = 'Chat Logs'
selectChat.TextColor3 = Color3.new(1, 1, 1)

table.insert(shade2, selectChat)
table.insert(text1, selectChat)

selectJoin.Name = 'selectJoin'
selectJoin.Parent = background
selectJoin.BackgroundColor3 = Color3.new(0.305882, 0.305882, 0.309804)
selectJoin.BorderSizePixel = 0
selectJoin.Position = UDim2.new(0, 169, 0, 5)
selectJoin.Size = UDim2.new(0, 164, 0, 20)
selectJoin.ZIndex = 10
selectJoin.Font = Enum.Font.SourceSans
selectJoin.FontSize = Enum.FontSize.Size14
selectJoin.Text = 'Join Logs'
selectJoin.TextColor3 = Color3.new(1, 1, 1)

table.insert(shade3, selectJoin)
table.insert(text1, selectJoin)

create = function(data)
    local insts = {}

    for i, v in pairs(data)do
        insts[v[1] ] = Instance.new(v[2])
    end
    for _, v in pairs(data)do
        for prop, val in pairs(v[3])do
            if type(val) == 'table' then
                insts[v[1] ][prop] = insts[val[1] ]
            else
                insts[v[1] ][prop] = val
            end
        end
    end

    return insts[1]
end
ViewportTextBox = (function()
    local funcs = {}

    funcs.Update = function(self)
        local cursorPos = self.TextBox.CursorPosition
        local text = self.TextBox.Text

        if text == '' then
            self.TextBox.Position = UDim2.new(0, 2, 0, 0)

            return
        end
        if cursorPos == -1 then
            return
        end

        local cursorText = text.sub(text, 1, cursorPos - 1)
        local pos
        local leftEnd = -self.TextBox.Position.X.Offset
        local rightEnd = leftEnd + self.View.AbsoluteSize.X
        local totalTextSize = TextService.GetTextSize(TextService, text, self.TextBox.TextSize, self.TextBox.Font, Vector2.new(999999999, 100)).X
        local cursorTextSize = TextService.GetTextSize(TextService, cursorText, self.TextBox.TextSize, self.TextBox.Font, Vector2.new(999999999, 100)).X

        if cursorTextSize > rightEnd then
            pos = math.max(-2, cursorTextSize - self.View.AbsoluteSize.X + 2)
        elseif cursorTextSize < leftEnd then
            pos = math.max(-2, cursorTextSize - 2)
        elseif totalTextSize < rightEnd then
            pos = math.max(-2, totalTextSize - self.View.AbsoluteSize.X + 2)
        end
        if pos then
            self.TextBox.Position = UDim2.new(0, -pos, 0, 0)
            self.TextBox.Size = UDim2.new(1, pos, 1, 0)
        end
    end

    local mt = {}

    mt.__index = funcs

    local function convert(textbox)
        local obj = setmetatable({
            OffsetX = 0,
            TextBox = textbox,
        }, mt)
        local view = Instance.new('Frame')

        view.BackgroundTransparency = textbox.BackgroundTransparency
        view.BackgroundColor3 = textbox.BackgroundColor3
        view.BorderSizePixel = textbox.BorderSizePixel
        view.BorderColor3 = textbox.BorderColor3
        view.Position = textbox.Position
        view.Size = textbox.Size
        view.ClipsDescendants = true
        view.Name = textbox.Name
        view.ZIndex = 10
        textbox.BackgroundTransparency = 1
        textbox.Position = UDim2.new(0, 4, 0, 0)
        textbox.Size = UDim2.new(1, -8, 1, 0)
        textbox.TextXAlignment = Enum.TextXAlignment.Left
        textbox.Name = 'Input'

        table.insert(text1, textbox)
        table.insert(shade2, view)

        obj.View = view

        textbox.Changed:Connect(function(prop)
            if prop == 'Text' or prop == 'CursorPosition' or prop == 'AbsoluteSize' then
                obj.Update(obj)
            end
        end)
        obj.Update(obj)

        view.Parent = textbox.Parent
        textbox.Parent = view

        return obj
    end

    return {convert = convert}
end)()
ViewportTextBox.convert(Cmdbar).View.ZIndex = 10
ViewportTextBox.convert(Cmdbar_2).View.ZIndex = 10
ViewportTextBox.convert(Cmdbar_3).View.ZIndex = 10
writefileExploit = function()
    if writefile then
        return true
    end
end
readfileExploit = function()
    if readfile then
        return true
    end
end
isNumber = function(str)
    if tonumber(str) ~= nil or str == 'inf' then
        return true
    end
end
vtype = function(o, t)
    if o == nil then
        return false
    end
    if type(o) == 'userdata' then
        return typeof(o) == t
    end

    return type(o) == t
end
getRoot = function(char)
    local rootPart = char.FindFirstChild(char, 'HumanoidRootPart') or char.FindFirstChild(char, 'Torso') or char.FindFirstChild(char, 'UpperTorso')

    return rootPart
end
tools = function(plr)
    if plr.FindFirstChildOfClass(plr, 'Backpack'):FindFirstChildOfClass('Tool') or plr.Character:FindFirstChildOfClass('Tool') then
        return true
    end
end
r15 = function(plr)
    if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
        return true
    end
end
toClipboard = function(txt)
    if everyClipboard then
        everyClipboard(tostring(txt))
        notify('Clipboard', 'Copied to clipboard')
    else
        notify('Clipboard', "Your exploit doesn't have the ability to use the clipboard")
    end
end
chatMessage = function(str)
    str = tostring(str)

    if not isLegacyChat then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, 'All')
    end
end
getHierarchy = function(obj)
    local fullname
    local period

    if string.find(obj.Name, ' ') then
        fullname = '["' .. obj.Name .. '"]'
        period = false
    else
        fullname = obj.Name
        period = true
    end

    local getS = obj
    local parent = obj
    local service = ''

    if getS.Parent ~= game then
        repeat
            getS = getS.Parent
            service = getS.ClassName
        until getS.Parent == game
    end
    if parent.Parent ~= getS then
        repeat
            parent = parent.Parent

            if string.find(tostring(parent), ' ') then
                if period then
                    fullname = '["' .. parent.Name .. '"].' .. fullname
                else
                    fullname = '["' .. parent.Name .. '"]' .. fullname
                end

                period = false
            else
                if period then
                    fullname = parent.Name .. '.' .. fullname
                else
                    fullname = parent.Name .. '' .. fullname
                end

                period = true
            end
        until parent.Parent == getS
    elseif string.find(tostring(parent), ' ') then
        fullname = '["' .. parent.Name .. '"]'
        period = false
    end
    if period then
        return 'game:GetService("' .. service .. '").' .. fullname
    else
        return 'game:GetService("' .. service .. '")' .. fullname
    end
end
AllWaypoints = {}

local cooldown = false

writefileCooldown = function(name, data)
    task.spawn(function()
        if not cooldown then
            cooldown = true

            writefile(name, data, true)
        else
            repeat
                task.wait()
            until cooldown == false

            writefileCooldown(name, data)
        end

        task.wait(3)

        cooldown = false
    end)
end
dragGUI = function(gui)
    task.spawn(function()
        local dragging
        local dragInput
        local dragStart = Vector3.new(0, 0, 0)
        local startPos

        local function update(input)
            local delta = input.Position - dragStart
            local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)

            TweenService.Create(TweenService, gui, TweenInfo.new(0.2), {Position = Position}):Play()
        end

        gui.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = gui.Position

                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        gui.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                update(input)
            end
        end)
    end)
end

dragGUI(logs)
dragGUI(KeybindEditor)
dragGUI(PluginEditor)
dragGUI(ToPartFrame)

eventEditor = (function()
    local events = {}

    local function registerEvent(name, sets)
        events[name] = {
            commands = {},
            sets = sets or {},
        }
    end

    local onEdited

    local function fireEvent(name, ...)
        local args = {...}
        local event = events[name]

        if event then
            for i, cmd in pairs(event.commands)do
                local metCondition = true

                for idx, set in pairs(event.sets)do
                    local argVal = args[idx]
                    local cmdSet = cmd[2][idx]
                    local condType = set.Type

                    if condType == 'Player' then
                        if cmdSet == 0 then
                            metCondition = metCondition and (tostring(Players.LocalPlayer) == argVal)
                        elseif cmdSet ~= 1 then
                            metCondition = metCondition and table.find(getPlayer(cmdSet, Players.LocalPlayer), argVal)
                        end
                    elseif condType == 'String' then
                        if cmdSet ~= 0 then
                            metCondition = metCondition and string.find(argVal.lower(argVal), cmdSet.lower(cmdSet))
                        end
                    elseif condType == 'Number' then
                        if cmdSet ~= 0 then
                            metCondition = metCondition and tonumber(argVal) <= tonumber(cmdSet)
                        end
                    end
                    if not metCondition then
                        break
                    end
                end

                if metCondition then
                    pcall(function()
                        local cmdStr = cmd[1]

                        for count, arg in pairs(args)do
                            cmdStr = cmdStr.gsub(cmdStr, '%$' .. count, arg)
                        end

                        task.wait(cmd[3] or 0)
                        execCmd(cmdStr)
                    end)
                end
            end
        end
    end

    local main = create({
        {
            1,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14509804546833),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'EventEditor',
                Position = UDim2.new(0.5, -175, 0, -500),
                Size = UDim2.new(0, 350, 0, 20),
                ZIndex = 10,
            },
        },
        {
            2,
            'Frame',
            {
                BackgroundColor3 = currentShade2,
                BorderSizePixel = 0,
                Name = 'TopBar',
                Parent = {1},
                Size = UDim2.new(1, 0, 0, 20),
                ZIndex = 10,
            },
        },
        {
            3,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Title',
                Parent = {2},
                Position = UDim2.new(0, 0, 0, 0),
                Size = UDim2.new(1, 0, 0.95, 0),
                Text = 'Event Editor',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Center,
                ZIndex = 10,
            },
        },
        {
            4,
            'TextButton',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Close',
                Parent = {2},
                Position = UDim2.new(1, -20, 0, 0),
                Size = UDim2.new(0, 20, 0, 20),
                Text = '',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                ZIndex = 10,
            },
        },
        {
            5,
            'ImageLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Image = getcustomasset('infiniteyield/assets/close.png'),
                Parent = {4},
                Position = UDim2.new(0, 5, 0, 5),
                Size = UDim2.new(0, 10, 0, 10),
                ZIndex = 10,
            },
        },
        {
            6,
            'Frame',
            {
                BackgroundColor3 = currentShade1,
                BorderSizePixel = 0,
                Name = 'Content',
                Parent = {1},
                Position = UDim2.new(0, 0, 0, 20),
                Size = UDim2.new(1, 0, 0, 202),
                ZIndex = 10,
            },
        },
        {
            7,
            'ScrollingFrame',
            {
                BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14509804546833),
                BackgroundTransparency = 1,
                BorderColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                BorderSizePixel = 0,
                BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png',
                CanvasSize = UDim2.new(0, 0, 0, 100),
                Name = 'List',
                Parent = {6},
                Position = UDim2.new(0, 5, 0, 5),
                ScrollBarImageColor3 = Color3.new(0.30588236451149, 0.30588236451149, 0.3098039329052),
                ScrollBarThickness = 8,
                Size = UDim2.new(1, -10, 1, -10),
                TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png',
                ZIndex = 10,
            },
        },
        {
            8,
            'Frame',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Name = 'Holder',
                Parent = {7},
                Size = UDim2.new(1, 0, 1, 0),
                ZIndex = 10,
            },
        },
        {
            9,
            'UIListLayout',
            {
                Parent = {8},
                SortOrder = 2,
            },
        },
        {
            10,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14509804546833),
                BackgroundTransparency = 1,
                BorderColor3 = Color3.new(0.3137255012989, 0.3137255012989, 0.3137255012989),
                BorderSizePixel = 0,
                ClipsDescendants = true,
                Name = 'Settings',
                Parent = {6},
                Position = UDim2.new(1, 0, 0, 0),
                Size = UDim2.new(0, 150, 1, 0),
                ZIndex = 10,
            },
        },
        {
            11,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14509804546833),
                Name = 'Slider',
                Parent = {10},
                Position = UDim2.new(0, -150, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                ZIndex = 10,
            },
        },
        {
            12,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.23529413342476, 0.23529413342476, 0.23529413342476),
                BorderColor3 = Color3.new(0.3137255012989, 0.3137255012989, 0.3137255012989),
                BorderSizePixel = 0,
                Name = 'Line',
                Parent = {11},
                Size = UDim2.new(0, 1, 1, 0),
                ZIndex = 10,
            },
        },
        {
            13,
            'ScrollingFrame',
            {
                BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14509804546833),
                BackgroundTransparency = 1,
                BorderColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                BorderSizePixel = 0,
                BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png',
                CanvasSize = UDim2.new(0, 0, 0, 100),
                Name = 'List',
                Parent = {11},
                Position = UDim2.new(0, 0, 0, 25),
                ScrollBarImageColor3 = Color3.new(0.30588236451149, 0.30588236451149, 0.3098039329052),
                ScrollBarThickness = 8,
                Size = UDim2.new(1, 0, 1, -25),
                TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png',
                ZIndex = 10,
            },
        },
        {
            14,
            'Frame',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Name = 'Holder',
                Parent = {13},
                Size = UDim2.new(1, 0, 1, 0),
                ZIndex = 10,
            },
        },
        {
            15,
            'UIListLayout',
            {
                Parent = {14},
                SortOrder = 2,
            },
        },
        {
            16,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Title',
                Parent = {11},
                Size = UDim2.new(1, 0, 0, 20),
                Text = 'Event Settings',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                ZIndex = 10,
            },
        },
        {
            17,
            'TextButton',
            {
                BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14509804546833),
                BorderColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                Font = 3,
                Name = 'Close',
                BorderSizePixel = 0,
                Parent = {11},
                Position = UDim2.new(1, -20, 0, 0),
                Size = UDim2.new(0, 20, 0, 20),
                Text = '<',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 18,
                ZIndex = 10,
            },
        },
        {
            18,
            'Folder',
            {
                Name = 'Templates',
                Parent = {10},
            },
        },
        {
            19,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.19607844948769, 0.19607844948769, 0.19607844948769),
                BackgroundTransparency = 1,
                BorderColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                Name = 'Players',
                Parent = {18},
                Position = UDim2.new(0, 0, 0, 25),
                Size = UDim2.new(1, 0, 0, 86),
                Visible = false,
                ZIndex = 10,
            },
        },
        {
            20,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Title',
                Parent = {19},
                Size = UDim2.new(1, 0, 0, 20),
                Text = 'Choose Players',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                ZIndex = 10,
            },
        },
        {
            21,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Font = 3,
                Name = 'Any',
                Parent = {19},
                Position = UDim2.new(0, 5, 0, 42),
                Size = UDim2.new(1, -10, 0, 20),
                Text = 'Any Player',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            22,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.30588236451149, 0.30588236451149, 0.3098039329052),
                BorderSizePixel = 0,
                Name = 'Button',
                Parent = {21},
                Position = UDim2.new(1, -20, 0, 0),
                Size = UDim2.new(0, 20, 0, 20),
                ZIndex = 10,
            },
        },
        {
            23,
            'TextButton',
            {
                BackgroundColor3 = Color3.new(0.58823531866074, 0.58823531866074, 0.59215688705444),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Font = 3,
                Name = 'On',
                Parent = {22},
                Position = UDim2.new(0, 2, 0, 2),
                Size = UDim2.new(0, 16, 0, 16),
                Text = '',
                TextColor3 = Color3.new(0, 0, 0),
                TextSize = 14,
                ZIndex = 10,
            },
        },
        {
            24,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Font = 3,
                Name = 'Me',
                Parent = {19},
                Position = UDim2.new(0, 5, 0, 20),
                Size = UDim2.new(1, -10, 0, 20),
                Text = 'Me Only',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            25,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.30588236451149, 0.30588236451149, 0.3098039329052),
                BorderSizePixel = 0,
                Name = 'Button',
                Parent = {24},
                Position = UDim2.new(1, -20, 0, 0),
                Size = UDim2.new(0, 20, 0, 20),
                ZIndex = 10,
            },
        },
        {
            26,
            'TextButton',
            {
                BackgroundColor3 = Color3.new(0.58823531866074, 0.58823531866074, 0.59215688705444),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Font = 3,
                Name = 'On',
                Parent = {25},
                Position = UDim2.new(0, 2, 0, 2),
                Size = UDim2.new(0, 16, 0, 16),
                Text = '',
                TextColor3 = Color3.new(0, 0, 0),
                TextSize = 14,
                ZIndex = 10,
            },
        },
        {
            27,
            'TextBox',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BorderColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                BorderSizePixel = 0,
                ClearTextOnFocus = false,
                Font = 3,
                Name = 'Custom',
                Parent = {19},
                PlaceholderColor3 = Color3.new(0.47058826684952, 0.47058826684952, 0.47058826684952),
                PlaceholderText = 'Custom Player Set',
                Position = UDim2.new(0, 5, 0, 64),
                Size = UDim2.new(1, -35, 0, 20),
                Text = '',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            28,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.30588236451149, 0.30588236451149, 0.3098039329052),
                BorderSizePixel = 0,
                Name = 'CustomButton',
                Parent = {19},
                Position = UDim2.new(1, -25, 0, 64),
                Size = UDim2.new(0, 20, 0, 20),
                ZIndex = 10,
            },
        },
        {
            29,
            'TextButton',
            {
                BackgroundColor3 = Color3.new(0.58823531866074, 0.58823531866074, 0.59215688705444),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Font = 3,
                Name = 'On',
                Parent = {28},
                Position = UDim2.new(0, 2, 0, 2),
                Size = UDim2.new(0, 16, 0, 16),
                Text = '',
                TextColor3 = Color3.new(0, 0, 0),
                TextSize = 14,
                ZIndex = 10,
            },
        },
        {
            30,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.19607844948769, 0.19607844948769, 0.19607844948769),
                BackgroundTransparency = 1,
                BorderColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                Name = 'Strings',
                Parent = {18},
                Position = UDim2.new(0, 0, 0, 25),
                Size = UDim2.new(1, 0, 0, 64),
                Visible = false,
                ZIndex = 10,
            },
        },
        {
            31,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Title',
                Parent = {30},
                Size = UDim2.new(1, 0, 0, 20),
                Text = 'Choose String',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                ZIndex = 10,
            },
        },
        {
            32,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Font = 3,
                Name = 'Any',
                Parent = {30},
                Position = UDim2.new(0, 5, 0, 20),
                Size = UDim2.new(1, -10, 0, 20),
                Text = 'Any String',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            33,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.30588236451149, 0.30588236451149, 0.3098039329052),
                BorderSizePixel = 0,
                Name = 'Button',
                Parent = {32},
                Position = UDim2.new(1, -20, 0, 0),
                Size = UDim2.new(0, 20, 0, 20),
                ZIndex = 10,
            },
        },
        {
            34,
            'TextButton',
            {
                BackgroundColor3 = Color3.new(0.58823531866074, 0.58823531866074, 0.59215688705444),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Font = 3,
                Name = 'On',
                Parent = {33},
                Position = UDim2.new(0, 2, 0, 2),
                Size = UDim2.new(0, 16, 0, 16),
                Text = '',
                TextColor3 = Color3.new(0, 0, 0),
                TextSize = 14,
                ZIndex = 10,
            },
        },
        {
            54,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.19607844948769, 0.19607844948769, 0.19607844948769),
                BackgroundTransparency = 1,
                BorderColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                Name = 'Numbers',
                Parent = {18},
                Position = UDim2.new(0, 0, 0, 25),
                Size = UDim2.new(1, 0, 0, 64),
                Visible = false,
                ZIndex = 10,
            },
        },
        {
            55,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Title',
                Parent = {54},
                Size = UDim2.new(1, 0, 0, 20),
                Text = 'Choose String',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                ZIndex = 10,
            },
        },
        {
            56,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Font = 3,
                Name = 'Any',
                Parent = {54},
                Position = UDim2.new(0, 5, 0, 20),
                Size = UDim2.new(1, -10, 0, 20),
                Text = 'Any Number',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            57,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.30588236451149, 0.30588236451149, 0.3098039329052),
                BorderSizePixel = 0,
                Name = 'Button',
                Parent = {56},
                Position = UDim2.new(1, -20, 0, 0),
                Size = UDim2.new(0, 20, 0, 20),
                ZIndex = 10,
            },
        },
        {
            58,
            'TextButton',
            {
                BackgroundColor3 = Color3.new(0.58823531866074, 0.58823531866074, 0.59215688705444),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Font = 3,
                Name = 'On',
                Parent = {57},
                Position = UDim2.new(0, 2, 0, 2),
                Size = UDim2.new(0, 16, 0, 16),
                Text = '',
                TextColor3 = Color3.new(0, 0, 0),
                TextSize = 14,
                ZIndex = 10,
            },
        },
        {
            59,
            'TextBox',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BorderColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                BorderSizePixel = 0,
                ClearTextOnFocus = false,
                Font = 3,
                Name = 'Custom',
                Parent = {54},
                PlaceholderColor3 = Color3.new(0.47058826684952, 0.47058826684952, 0.47058826684952),
                PlaceholderText = 'Number',
                Position = UDim2.new(0, 5, 0, 42),
                Size = UDim2.new(1, -35, 0, 20),
                Text = '',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            60,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.30588236451149, 0.30588236451149, 0.3098039329052),
                BorderSizePixel = 0,
                Name = 'CustomButton',
                Parent = {54},
                Position = UDim2.new(1, -25, 0, 42),
                Size = UDim2.new(0, 20, 0, 20),
                ZIndex = 10,
            },
        },
        {
            61,
            'TextButton',
            {
                BackgroundColor3 = Color3.new(0.58823531866074, 0.58823531866074, 0.59215688705444),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Font = 3,
                Name = 'On',
                Parent = {60},
                Position = UDim2.new(0, 2, 0, 2),
                Size = UDim2.new(0, 16, 0, 16),
                Text = '',
                TextColor3 = Color3.new(0, 0, 0),
                TextSize = 14,
                ZIndex = 10,
            },
        },
        {
            35,
            'TextBox',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BorderColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                BorderSizePixel = 0,
                ClearTextOnFocus = false,
                Font = 3,
                Name = 'Custom',
                Parent = {30},
                PlaceholderColor3 = Color3.new(0.47058826684952, 0.47058826684952, 0.47058826684952),
                PlaceholderText = 'Match String',
                Position = UDim2.new(0, 5, 0, 42),
                Size = UDim2.new(1, -35, 0, 20),
                Text = '',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            36,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.30588236451149, 0.30588236451149, 0.3098039329052),
                BorderSizePixel = 0,
                Name = 'CustomButton',
                Parent = {30},
                Position = UDim2.new(1, -25, 0, 42),
                Size = UDim2.new(0, 20, 0, 20),
                ZIndex = 10,
            },
        },
        {
            37,
            'TextButton',
            {
                BackgroundColor3 = Color3.new(0.58823531866074, 0.58823531866074, 0.59215688705444),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Font = 3,
                Name = 'On',
                Parent = {36},
                Position = UDim2.new(0, 2, 0, 2),
                Size = UDim2.new(0, 16, 0, 16),
                Text = '',
                TextColor3 = Color3.new(0, 0, 0),
                TextSize = 14,
                ZIndex = 10,
            },
        },
        {
            38,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.19607844948769, 0.19607844948769, 0.19607844948769),
                BackgroundTransparency = 1,
                BorderColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                Name = 'DelayEditor',
                Parent = {18},
                Position = UDim2.new(0, 0, 0, 25),
                Size = UDim2.new(1, 0, 0, 24),
                Visible = false,
                ZIndex = 10,
            },
        },
        {
            39,
            'TextBox',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BorderColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                BorderSizePixel = 0,
                Font = 3,
                Name = 'Secs',
                Parent = {38},
                PlaceholderColor3 = Color3.new(0.47058826684952, 0.47058826684952, 0.47058826684952),
                Position = UDim2.new(0, 60, 0, 2),
                Size = UDim2.new(1, -65, 0, 20),
                Text = '',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            40,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Font = 3,
                Name = 'Label',
                Parent = {39},
                Position = UDim2.new(0, -55, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'Delay (s):',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            41,
            'Frame',
            {
                BackgroundColor3 = currentShade1,
                BorderSizePixel = 0,
                ClipsDescendants = true,
                Name = 'EventTemplate',
                Parent = {6},
                Size = UDim2.new(1, 0, 0, 20),
                Visible = false,
                ZIndex = 10,
            },
        },
        {
            42,
            'TextButton',
            {
                BackgroundColor3 = currentText1,
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Expand',
                Parent = {41},
                Size = UDim2.new(0, 20, 0, 20),
                Text = '>',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 18,
                ZIndex = 10,
            },
        },
        {
            43,
            'TextLabel',
            {
                BackgroundColor3 = currentText1,
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'EventName',
                Parent = {41},
                Position = UDim2.new(0, 25, 0, 0),
                Size = UDim2.new(1, -25, 0, 20),
                Text = 'OnSpawn',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            44,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.19607844948769, 0.19607844948769, 0.19607844948769),
                BorderSizePixel = 0,
                BackgroundTransparency = 1,
                ClipsDescendants = true,
                Name = 'Cmds',
                Parent = {41},
                Position = UDim2.new(0, 0, 0, 20),
                Size = UDim2.new(1, 0, 1, -20),
                ZIndex = 10,
            },
        },
        {
            45,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14509804546833),
                BorderColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                Name = 'Add',
                Parent = {44},
                Position = UDim2.new(0, 0, 1, -20),
                Size = UDim2.new(1, 0, 0, 20),
                ZIndex = 10,
            },
        },
        {
            46,
            'TextBox',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                ClearTextOnFocus = false,
                Font = 3,
                Parent = {45},
                PlaceholderColor3 = Color3.new(0.7843137383461, 0.7843137383461, 0.7843137383461),
                PlaceholderText = 'Add new command',
                Position = UDim2.new(0, 5, 0, 0),
                Size = UDim2.new(1, -10, 1, 0),
                Text = '',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            47,
            'Frame',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Name = 'Holder',
                Parent = {44},
                Size = UDim2.new(1, 0, 1, -20),
                ZIndex = 10,
            },
        },
        {
            48,
            'UIListLayout',
            {
                Parent = {47},
                SortOrder = 2,
            },
        },
        {
            49,
            'Frame',
            {
                currentShade1,
                BorderSizePixel = 0,
                ClipsDescendants = true,
                Name = 'CmdTemplate',
                Parent = {6},
                Size = UDim2.new(1, 0, 0, 20),
                Visible = false,
                ZIndex = 10,
            },
        },
        {
            50,
            'TextBox',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                ClearTextOnFocus = false,
                Font = 3,
                Parent = {49},
                PlaceholderColor3 = Color3.new(1, 1, 1),
                Position = UDim2.new(0, 5, 0, 0),
                Size = UDim2.new(1, -45, 0, 20),
                Text = 'a\\b\\c\\d',
                TextColor3 = currentText1,
                TextSize = 14,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            51,
            'TextButton',
            {
                BackgroundColor3 = currentShade1,
                BorderSizePixel = 0,
                Font = 3,
                Name = 'Delete',
                Parent = {49},
                Position = UDim2.new(1, -20, 0, 0),
                Size = UDim2.new(0, 20, 0, 20),
                Text = 'X',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 18,
                ZIndex = 10,
            },
        },
        {
            52,
            'TextButton',
            {
                BackgroundColor3 = currentShade1,
                BorderSizePixel = 0,
                Font = 3,
                Name = 'Settings',
                Parent = {49},
                Position = UDim2.new(1, -40, 0, 0),
                Size = UDim2.new(0, 20, 0, 20),
                Text = '',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 18,
                ZIndex = 10,
            },
        },
        {
            53,
            'ImageLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Image = getcustomasset('infiniteyield/assets/settings.png'),
                Parent = {52},
                Position = UDim2.new(0, 2, 0, 2),
                Size = UDim2.new(0, 16, 0, 16),
                ZIndex = 10,
            },
        },
    })

    main.Name = randomString()

    local mainFrame = main.WaitForChild(main, 'Content')
    local eventList = mainFrame.WaitForChild(mainFrame, 'List')
    local eventListHolder = eventList.WaitForChild(eventList, 'Holder')
    local cmdTemplate = mainFrame.WaitForChild(mainFrame, 'CmdTemplate')
    local eventTemplate = mainFrame.WaitForChild(mainFrame, 'EventTemplate')
    local settingsFrame = mainFrame.WaitForChild(mainFrame, 'Settings'):WaitForChild('Slider')
    local settingsTemplates = mainFrame.Settings:WaitForChild('Templates')
    local settingsList = settingsFrame.WaitForChild(settingsFrame, 'List'):WaitForChild('Holder')

    table.insert(shade2, main.TopBar)
    table.insert(shade1, mainFrame)
    table.insert(shade2, eventTemplate)
    table.insert(text1, eventTemplate.EventName)
    table.insert(shade1, eventTemplate.Cmds.Add)
    table.insert(shade1, cmdTemplate)
    table.insert(text1, cmdTemplate.TextBox)
    table.insert(shade2, cmdTemplate.Delete)
    table.insert(shade2, cmdTemplate.Settings)
    table.insert(scroll, mainFrame.List)
    table.insert(shade1, settingsFrame)
    table.insert(shade2, settingsFrame.Line)
    table.insert(shade2, settingsFrame.Close)
    table.insert(scroll, settingsFrame.List)
    table.insert(shade2, settingsTemplates.DelayEditor.Secs)
    table.insert(text1, settingsTemplates.DelayEditor.Secs)
    table.insert(text1, settingsTemplates.DelayEditor.Secs.Label)
    table.insert(text1, settingsTemplates.Players.Title)
    table.insert(shade3, settingsTemplates.Players.CustomButton)
    table.insert(shade2, settingsTemplates.Players.Custom)
    table.insert(text1, settingsTemplates.Players.Custom)
    table.insert(shade3, settingsTemplates.Players.Any.Button)
    table.insert(shade3, settingsTemplates.Players.Me.Button)
    table.insert(text1, settingsTemplates.Players.Any)
    table.insert(text1, settingsTemplates.Players.Me)
    table.insert(text1, settingsTemplates.Strings.Title)
    table.insert(text1, settingsTemplates.Strings.Any)
    table.insert(shade3, settingsTemplates.Strings.Any.Button)
    table.insert(shade3, settingsTemplates.Strings.CustomButton)
    table.insert(text1, settingsTemplates.Strings.Custom)
    table.insert(shade2, settingsTemplates.Strings.Custom)
    table.insert(text1, settingsTemplates.Players.Me)
    table.insert(text1, settingsTemplates.Numbers.Title)
    table.insert(text1, settingsTemplates.Numbers.Any)
    table.insert(shade3, settingsTemplates.Numbers.Any.Button)
    table.insert(shade3, settingsTemplates.Numbers.CustomButton)
    table.insert(text1, settingsTemplates.Numbers.Custom)
    table.insert(shade2, settingsTemplates.Numbers.Custom)

    local tweenInf = TweenInfo.new(0.25, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
    local currentlyEditingCmd

    settingsFrame.WaitForChild(settingsFrame, 'Close').MouseButton1Click:Connect(function(
    )
        settingsFrame.TweenPosition(settingsFrame, UDim2.new(0, -150, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.25, true)
    end)

    local function resizeList()
        local size = 0

        for i, v in pairs(eventListHolder.GetChildren(eventListHolder))do
            if v.Name == 'EventTemplate' then
                size = size + 20

                if v.Expand.Rotation == 90 then
                    size = size + 20 * (1 + (#events[v.EventName:GetAttribute('RawName')].commands or 0))
                end
            end
        end

        TweenService.Create(TweenService, eventList, tweenInf, {
            CanvasSize = UDim2.new(0, 0, 0, size),
        }):Play()

        if size > eventList.AbsoluteSize.Y then
            eventListHolder.Size = UDim2.new(1, -8, 1, 0)
        else
            eventListHolder.Size = UDim2.new(1, 0, 1, 0)
        end
    end
    local function resizeSettingsList()
        local size = 0

        for i, v in pairs(settingsList.GetChildren(settingsList))do
            if v.IsA(v, 'Frame') then
                size = size + v.AbsoluteSize.Y
            end
        end

        settingsList.Parent.CanvasSize = UDim2.new(0, 0, 0, size)

        if size > settingsList.Parent.AbsoluteSize.Y then
            settingsList.Size = UDim2.new(1, -8, 1, 0)
        else
            settingsList.Size = UDim2.new(1, 0, 1, 0)
        end
    end
    local function setupCheckbox(button, callback)
        local enabled = button.On.BackgroundTransparency == 0

        local function update()
            button.On.BackgroundTransparency = (enabled and 0 or 1)
        end

        button.On.MouseButton1Click:Connect(function()
            enabled = not enabled

            update()

            if callback then
                callback(enabled)
            end
        end)

        return {
            Toggle = function(nocall)
                enabled = not enabled

                update()

                if not nocall and callback then
                    callback(enabled)
                end
            end,
            Enable = function(nocall)
                if enabled then
                    return
                end

                enabled = true

                update()

                if not nocall and callback then
                    callback(enabled)
                end
            end,
            Disable = function(nocall)
                if not enabled then
                    return
                end

                enabled = false

                update()

                if not nocall and callback then
                    callback(enabled)
                end
            end,
            IsEnabled = function()
                return enabled
            end,
        }
    end
    local function openSettingsEditor(event, cmd)
        currentlyEditingCmd = cmd

        for i, v in pairs(settingsList.GetChildren(settingsList))do
            if v.IsA(v, 'Frame') then
                v.Destroy(v)
            end
        end

        local delayEditor = settingsTemplates.DelayEditor:Clone()

        delayEditor.Secs.FocusLost:Connect(function()
            cmd[3] = tonumber(delayEditor.Secs.Text) or 0
            delayEditor.Secs.Text = cmd[3]

            if onEdited then
                onEdited()
            end
        end)

        delayEditor.Secs.Text = cmd[3]
        delayEditor.Visible = true

        table.insert(shade2, delayEditor.Secs)
        table.insert(text1, delayEditor.Secs)
        table.insert(text1, delayEditor.Secs.Label)

        delayEditor.Parent = settingsList

        for i, v in pairs(event.sets)do
            if v.Type == 'Player' then
                local template = settingsTemplates.Players:Clone()

                template.Title.Text = v.Name or 'Player'

                local me, any, custom

                me = setupCheckbox(template.Me.Button, function(on)
                    if not on then
                        return
                    end

                    any.Disable()
                    custom.Disable()

                    cmd[2][i] = 0

                    if onEdited then
                        onEdited()
                    end
                end)
                any = setupCheckbox(template.Any.Button, function(on)
                    if not on then
                        return
                    end

                    me.Disable()
                    custom.Disable()

                    cmd[2][i] = 1

                    if onEdited then
                        onEdited()
                    end
                end)

                local customTextBox = template.Custom

                custom = setupCheckbox(template.CustomButton, function(on)
                    if not on then
                        return
                    end

                    me.Disable()
                    any.Disable()

                    cmd[2][i] = customTextBox.Text

                    if onEdited then
                        onEdited()
                    end
                end)

                ViewportTextBox.convert(customTextBox)
                customTextBox.FocusLost:Connect(function()
                    if custom.IsEnabled(custom) then
                        cmd[2][i] = customTextBox.Text

                        if onEdited then
                            onEdited()
                        end
                    end
                end)

                local cVal = cmd[2][i]

                if cVal == 0 then
                    me.Enable(me)
                elseif cVal == 1 then
                    any.Enable(any)
                else
                    custom.Enable(custom)

                    customTextBox.Text = cVal
                end

                template.Visible = true

                table.insert(text1, template.Title)
                table.insert(shade3, template.CustomButton)
                table.insert(shade3, template.Any.Button)
                table.insert(shade3, template.Me.Button)
                table.insert(text1, template.Any)
                table.insert(text1, template.Me)

                template.Parent = settingsList
            elseif v.Type == 'String' then
                local template = settingsTemplates.Strings:Clone()

                template.Title.Text = v.Name or 'String'

                local any, custom

                any = setupCheckbox(template.Any.Button, function(on)
                    if not on then
                        return
                    end

                    custom.Disable()

                    cmd[2][i] = 0

                    if onEdited then
                        onEdited()
                    end
                end)

                local customTextBox = template.Custom

                custom = setupCheckbox(template.CustomButton, function(on)
                    if not on then
                        return
                    end

                    any.Disable()

                    cmd[2][i] = customTextBox.Text

                    if onEdited then
                        onEdited()
                    end
                end)

                ViewportTextBox.convert(customTextBox)
                customTextBox.FocusLost:Connect(function()
                    if custom.IsEnabled(custom) then
                        cmd[2][i] = customTextBox.Text

                        if onEdited then
                            onEdited()
                        end
                    end
                end)

                local cVal = cmd[2][i]

                if cVal == 0 then
                    any.Enable(any)
                else
                    custom.Enable(custom)

                    customTextBox.Text = cVal
                end

                template.Visible = true

                table.insert(text1, template.Title)
                table.insert(text1, template.Any)
                table.insert(shade3, template.Any.Button)
                table.insert(shade3, template.CustomButton)

                template.Parent = settingsList
            elseif v.Type == 'Number' then
                local template = settingsTemplates.Numbers:Clone()

                template.Title.Text = v.Name or 'Number'

                local any, custom

                any = setupCheckbox(template.Any.Button, function(on)
                    if not on then
                        return
                    end

                    custom.Disable()

                    cmd[2][i] = 0

                    if onEdited then
                        onEdited()
                    end
                end)

                local customTextBox = template.Custom

                custom = setupCheckbox(template.CustomButton, function(on)
                    if not on then
                        return
                    end

                    any.Disable()

                    cmd[2][i] = customTextBox.Text

                    if onEdited then
                        onEdited()
                    end
                end)

                ViewportTextBox.convert(customTextBox)
                customTextBox.FocusLost:Connect(function()
                    cmd[2][i] = tonumber(customTextBox.Text) or 0
                    customTextBox.Text = cmd[2][i]

                    if custom.IsEnabled(custom) then
                        if onEdited then
                            onEdited()
                        end
                    end
                end)

                local cVal = cmd[2][i]

                if cVal == 0 then
                    any.Enable(any)
                else
                    custom.Enable(custom)

                    customTextBox.Text = cVal
                end

                template.Visible = true

                table.insert(text1, template.Title)
                table.insert(text1, template.Any)
                table.insert(shade3, template.Any.Button)
                table.insert(shade3, template.CustomButton)

                template.Parent = settingsList
            end
        end

        resizeSettingsList()
        settingsFrame.TweenPosition(settingsFrame, UDim2.new(0, 0, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.25, true)
    end
    local function defaultSettings(ev)
        local res = {}

        for i, v in pairs(ev.sets)do
            if v.Type == 'Player' then
                res[#res + 1] = v.Default or 0
            elseif v.Type == 'String' then
                res[#res + 1] = v.Default or 0
            elseif v.Type == 'Number' then
                res[#res + 1] = v.Default or 0
            end
        end

        return res
    end
    local function refreshList()
        for i, v in pairs(eventListHolder.GetChildren(eventListHolder))do
            if v.IsA(v, 'Frame') then
                v.Destroy(v)
            end
        end
        for name, event in pairs(events)do
            local eventF = eventTemplate.Clone(eventTemplate)

            eventF.EventName.Text = name
            eventF.Visible = true

            eventF.EventName:SetAttribute('RawName', name)
            table.insert(shade2, eventF)
            table.insert(text1, eventF.EventName)
            table.insert(shade1, eventF.Cmds.Add)

            local expanded = false

            eventF.Expand.MouseButton1Down:Connect(function()
                expanded = not expanded

                eventF.TweenSize(eventF, UDim2.new(1, 0, 0, 20 + (expanded and 20 * #eventF.Cmds.Holder:GetChildren() or 0)), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.25, true)

                eventF.Expand.Rotation = expanded and 90 or 0

                resizeList()
            end)

            local function refreshCommands()
                for i, v in pairs(eventF.Cmds.Holder:GetChildren())do
                    if v.Name == 'CmdTemplate' then
                        v.Destroy(v)
                    end
                end

                eventF.EventName.Text = name .. (#event.commands > 0 and ' (' .. #event.commands .. ')' or '')

                for i, cmd in pairs(event.commands)do
                    local cmdF = cmdTemplate.Clone(cmdTemplate)
                    local cmdTextBox = cmdF.TextBox

                    ViewportTextBox.convert(cmdTextBox)

                    cmdTextBox.Text = cmd[1]
                    cmdF.Visible = true

                    table.insert(shade1, cmdF)
                    table.insert(shade2, cmdF.Delete)
                    table.insert(shade2, cmdF.Settings)
                    cmdTextBox.FocusLost:Connect(function()
                        event.commands[i] = {
                            cmdTextBox.Text,
                            cmd[2],
                            cmd[3],
                        }

                        if onEdited then
                            onEdited()
                        end
                    end)
                    cmdF.Settings.MouseButton1Click:Connect(function()
                        openSettingsEditor(event, cmd)
                    end)
                    cmdF.Delete.MouseButton1Click:Connect(function()
                        table.remove(event.commands, i)
                        refreshCommands()
                        resizeList()

                        if currentlyEditingCmd == cmd then
                            settingsFrame.TweenPosition(settingsFrame, UDim2.new(0, 
-150, 0, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.25, true)
                        end
                        if onEdited then
                            onEdited()
                        end
                    end)

                    cmdF.Parent = eventF.Cmds.Holder
                end

                eventF.TweenSize(eventF, UDim2.new(1, 0, 0, 20 + (expanded and 20 * #eventF.Cmds.Holder:GetChildren() or 0)), Enum.EasingDirection.Out, Enum.EasingStyle.Quart, 0.25, true)
            end

            local newBox = eventF.Cmds.Add.TextBox

            ViewportTextBox.convert(newBox)
            newBox.FocusLost:Connect(function(enter)
                if enter then
                    event.commands[#event.commands + 1] = {
                        newBox.Text,
                        defaultSettings(event),
                        0,
                    }
                    newBox.Text = ''

                    refreshCommands()
                    resizeList()

                    if onEdited then
                        onEdited()
                    end
                end
            end)

            eventF.Parent = eventListHolder

            refreshCommands()
        end

        resizeList()
    end
    local function saveData()
        local result = {}

        for i, v in pairs(events)do
            result[i] = v.commands
        end

        return HttpService.JSONEncode(HttpService, result)
    end
    local function loadData(str)
        local data = HttpService.JSONDecode(HttpService, str)

        for i, v in pairs(data)do
            if events[i] then
                events[i].commands = v
            end
        end
    end
    local function addCmd(event, data)
        table.insert(events[event].commands, data)
    end
    local function setOnEdited(f)
        if type(f) == 'function' then
            onEdited = f
        end
    end

    main.TopBar.Close.MouseButton1Click:Connect(function()
        main.TweenPosition(main, UDim2.new(0.5, -175, 0, -500), 'InOut', 'Quart', 0.5, true, nil)
    end)
    dragGUI(main)

    main.Parent = ScaledHolder

    return {
        RegisterEvent = registerEvent,
        FireEvent = fireEvent,
        Refresh = refreshList,
        SaveData = saveData,
        LoadData = loadData,
        AddCmd = addCmd,
        Frame = main,
        SetOnEdited = setOnEdited,
    }
end)()
reference = (function()
    local main = create({
        {
            1,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14509804546833),
                BackgroundTransparency = 1,
                BorderColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                BorderSizePixel = 0,
                Name = 'Main',
                Position = UDim2.new(0.5, -250, 0, -500),
                Size = UDim2.new(0, 500, 0, 20),
                ZIndex = 10,
            },
        },
        {
            2,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BorderSizePixel = 0,
                Name = 'TopBar',
                Parent = {1},
                Size = UDim2.new(1, 0, 0, 20),
                ZIndex = 10,
            },
        },
        {
            3,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Title',
                Parent = {2},
                Size = UDim2.new(1, 0, 0.94999998807907, 0),
                Text = 'Reference',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                ZIndex = 10,
            },
        },
        {
            4,
            'TextButton',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Close',
                Parent = {2},
                Position = UDim2.new(1, -20, 0, 0),
                Size = UDim2.new(0, 20, 0, 20),
                Text = '',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                ZIndex = 10,
            },
        },
        {
            5,
            'ImageLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Image = getcustomasset('infiniteyield/assets/close.png'),
                Parent = {4},
                Position = UDim2.new(0, 5, 0, 5),
                Size = UDim2.new(0, 10, 0, 10),
                ZIndex = 10,
            },
        },
        {
            6,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14509804546833),
                BorderSizePixel = 0,
                Name = 'Content',
                Parent = {1},
                Position = UDim2.new(0, 0, 0, 20),
                Size = UDim2.new(1, 0, 0, 300),
                ZIndex = 10,
            },
        },
        {
            7,
            'ScrollingFrame',
            {
                BackgroundColor3 = Color3.new(0.14117647707462, 0.14117647707462, 0.14509804546833),
                BackgroundTransparency = 1,
                BorderColor3 = Color3.new(0.15686275064945, 0.15686275064945, 0.15686275064945),
                BorderSizePixel = 0,
                BottomImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png',
                CanvasSize = UDim2.new(0, 0, 0, 1313),
                Name = 'List',
                Parent = {6},
                ScrollBarImageColor3 = Color3.new(0.30588236451149, 0.30588236451149, 0.3098039329052),
                ScrollBarThickness = 8,
                Size = UDim2.new(1, 0, 1, 0),
                TopImage = 'rbxasset://textures/ui/Scroll/scroll-middle.png',
                VerticalScrollBarInset = 2,
                ZIndex = 10,
            },
        },
        {
            8,
            'UIListLayout',
            {
                Parent = {7},
                SortOrder = 2,
            },
        },
        {
            9,
            'Frame',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Name = 'Section',
                Parent = {7},
                Size = UDim2.new(1, 0, 0, 429),
                ZIndex = 10,
            },
        },
        {
            10,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Header',
                Parent = {9},
                Position = UDim2.new(0, 8, 0, 5),
                Size = UDim2.new(1, -8, 0, 20),
                Text = 'Special Player Cases',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 20,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            11,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Text',
                Parent = {9},
                Position = UDim2.new(0, 8, 0, 25),
                Size = UDim2.new(1, -8, 0, 20),
                Text = 
[[These keywords can be used to quickly select groups of players in commands:]],
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            12,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BorderSizePixel = 0,
                Name = 'Line',
                Parent = {9},
                Position = UDim2.new(0, 10, 1, -1),
                Size = UDim2.new(1, -20, 0, 1),
                ZIndex = 10,
            },
        },
        {
            13,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Cases',
                Parent = {9},
                Position = UDim2.new(0, 8, 0, 55),
                Size = UDim2.new(1, -16, 0, 342),
                ZIndex = 10,
            },
        },
        {
            14,
            'UIListLayout',
            {
                Parent = {13},
                SortOrder = 2,
            },
        },
        {
            15,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                LayoutOrder = -4,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            16,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {15},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'all',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            17,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {15},
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- includes everyone',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            18,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                LayoutOrder = -3,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            19,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {18},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'others',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            20,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {18},
                Position = UDim2.new(0, 37, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- includes everyone except you',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            21,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                LayoutOrder = -2,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            22,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {21},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'me',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            23,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {21},
                Position = UDim2.new(0, 19, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- includes your player only',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            24,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            25,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {24},
                Size = UDim2.new(1, 0, 1, 0),
                Text = '#[number]',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            26,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {24},
                Position = UDim2.new(0, 59, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- gets a specified amount of random players',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            27,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            28,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {27},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'random',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            29,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {27},
                Position = UDim2.new(0, 44, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- affects a random player',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            30,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            31,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {30},
                Size = UDim2.new(1, 0, 1, 0),
                Text = '%[team name]',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            32,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {30},
                Position = UDim2.new(0, 78, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- includes everyone on a given team',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            33,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            34,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {33},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'allies / team',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            35,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {33},
                Position = UDim2.new(0, 63, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- players who are on your team',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            36,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            37,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {36},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'enemies / nonteam',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            38,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {36},
                Position = UDim2.new(0, 101, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- players who are not on your team',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            39,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            40,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {39},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'friends',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            41,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {39},
                Position = UDim2.new(0, 40, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- anyone who is friends with you',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            42,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            43,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {42},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'nonfriends',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            44,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {42},
                Position = UDim2.new(0, 61, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- anyone who is not friends with you',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            45,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            46,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {45},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'guests',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            47,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {45},
                Position = UDim2.new(0, 36, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- guest players (obsolete)',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            48,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            49,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {48},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'bacons',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            50,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {48},
                Position = UDim2.new(0, 40, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- anyone with the "bacon" or pal hair',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            51,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            52,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {51},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'age[number]',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            53,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {51},
                Position = UDim2.new(0, 71, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- includes anyone below or at the given age',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            54,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            55,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {54},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'rad[number]',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            56,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {54},
                Position = UDim2.new(0, 70, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- includes anyone within the given radius',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            57,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            58,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {57},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'nearest',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            59,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {57},
                Position = UDim2.new(0, 43, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- gets the closest player to you',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            60,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            61,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {60},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'farthest',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            62,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {60},
                Position = UDim2.new(0, 46, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- gets the farthest player from you',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            63,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            64,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {63},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'group[ID]',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            65,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {63},
                Position = UDim2.new(0, 55, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- gets players who are in a certain group',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            66,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            67,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {66},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'alive',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            68,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {66},
                Position = UDim2.new(0, 27, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- gets players who are alive',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            69,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            70,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {69},
                Size = UDim2.new(1, 0, 1, 0),
                Text = 'dead',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            71,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {69},
                Position = UDim2.new(0, 29, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = '- gets players who are dead',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            72,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                LayoutOrder = -1,
                Name = 'Case',
                Parent = {13},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, 0, 0, 18),
                ZIndex = 10,
            },
        },
        {
            73,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'CaseName',
                Parent = {72},
                Size = UDim2.new(1, 0, 1, 0),
                Text = '@username',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            74,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'CaseDesc',
                Parent = {72},
                Position = UDim2.new(0, 66, 0, 0),
                Size = UDim2.new(1, 0, 1, 0),
                Text = 
[[- searches for players by username only (ignores displaynames)]],
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            75,
            'Frame',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Name = 'Section',
                Parent = {7},
                Size = UDim2.new(1, 0, 0, 180),
                ZIndex = 10,
            },
        },
        {
            76,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Header',
                Parent = {75},
                Position = UDim2.new(0, 8, 0, 5),
                Size = UDim2.new(1, -8, 0, 20),
                Text = 'Various Operators',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 20,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            77,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BorderSizePixel = 0,
                Name = 'Line',
                Parent = {75},
                Position = UDim2.new(0, 10, 1, -1),
                Size = UDim2.new(1, -20, 0, 1),
                ZIndex = 10,
            },
        },
        {
            78,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Text',
                Parent = {75},
                Position = UDim2.new(0, 8, 0, 30),
                Size = UDim2.new(1, -8, 0, 16),
                Text = 'Use commas to separate multiple expressions:',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                TextYAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            79,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Text',
                Parent = {75},
                Position = UDim2.new(0, 8, 0, 75),
                Size = UDim2.new(1, -8, 0, 16),
                Text = 
[[Use - to exclude, and + to include players in your expression:]],
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                TextYAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            80,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Text',
                Parent = {75},
                Position = UDim2.new(0, 8, 0, 91),
                Size = UDim2.new(1, -8, 0, 16),
                Text = 
[[;locate %blue-friends (gets players in blue team who aren't your friends)]],
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                TextYAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            81,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Text',
                Parent = {75},
                Position = UDim2.new(0, 8, 0, 46),
                Size = UDim2.new(1, -8, 0, 16),
                Text = ';locate noob,noob2,bob',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                TextYAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            82,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Text',
                Parent = {75},
                Position = UDim2.new(0, 8, 0, 120),
                Size = UDim2.new(1, -8, 0, 16),
                Text = 
[[Put ! before a command to run it with the last arguments it was ran with:]],
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                TextYAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            83,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Text',
                Parent = {75},
                Position = UDim2.new(0, 8, 0, 136),
                Size = UDim2.new(1, -8, 0, 32),
                Text = 
[[After running ;offset 0 100 0,  you can run !offset anytime to repeat that command with the same arguments that were used to run it last time]],
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                TextYAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            84,
            'Frame',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Name = 'Section',
                Parent = {7},
                Size = UDim2.new(1, 0, 0, 154),
                ZIndex = 10,
            },
        },
        {
            85,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Header',
                Parent = {84},
                Position = UDim2.new(0, 8, 0, 5),
                Size = UDim2.new(1, -8, 0, 20),
                Text = 'Command Looping',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 20,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            86,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Text',
                Parent = {84},
                Position = UDim2.new(0, 8, 0, 30),
                Size = UDim2.new(1, -8, 0, 20),
                Text = 
[=[Form: [How many times it loops]^[delay (optional)]^[command]]=],
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 15,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            87,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BorderSizePixel = 0,
                Name = 'Line',
                Parent = {84},
                Position = UDim2.new(0, 10, 1, -1),
                Size = UDim2.new(1, -20, 0, 1),
                ZIndex = 10,
            },
        },
        {
            88,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Text',
                Parent = {84},
                Position = UDim2.new(0, 8, 0, 50),
                Size = UDim2.new(1, -8, 0, 20),
                Text = "Use the 'breakloops' command to stop all running loops.",
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 15,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            89,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Text',
                Parent = {84},
                Position = UDim2.new(0, 8, 0, 80),
                Size = UDim2.new(1, -8, 0, 16),
                Text = 'Examples:',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                TextYAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            90,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Text',
                Parent = {84},
                Position = UDim2.new(0, 8, 0, 98),
                Size = UDim2.new(1, -8, 0, 42),
                Text = ';5^btools - gives you 5 sets of btools\r\n;10^3^drophats - drops your hats every 3 seconds 10 times\r\n;inf^0.1^animspeed 100 - infinitely loops your animation speed to 100',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                TextYAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            91,
            'Frame',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Name = 'Section',
                Parent = {7},
                Size = UDim2.new(1, 0, 0, 120),
                ZIndex = 10,
            },
        },
        {
            92,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Header',
                Parent = {91},
                Position = UDim2.new(0, 8, 0, 5),
                Size = UDim2.new(1, -8, 0, 20),
                Text = 'Execute Multiple Commands at Once',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 20,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            93,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Text',
                Parent = {91},
                Position = UDim2.new(0, 8, 0, 30),
                Size = UDim2.new(1, -8, 0, 20),
                Text = 'You can execute multiple commands at once using "\\"',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            94,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BorderSizePixel = 0,
                Name = 'Line',
                Parent = {91},
                Position = UDim2.new(0, 10, 1, -1),
                Size = UDim2.new(1, -20, 0, 1),
                ZIndex = 10,
            },
        },
        {
            95,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Text',
                Parent = {91},
                Position = UDim2.new(0, 8, 0, 60),
                Size = UDim2.new(1, -8, 0, 16),
                Text = 'Examples:',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                TextYAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            96,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Text',
                Parent = {91},
                Position = UDim2.new(0, 8, 0, 78),
                Size = UDim2.new(1, -8, 0, 32),
                Text = ';drophats\\respawn - drops your hats and respawns you\r\n;enable inventory\\enable playerlist\\refresh - enables those coregui items and refreshes you',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                TextYAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            97,
            'Frame',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Name = 'Section',
                Parent = {7},
                Size = UDim2.new(1, 0, 0, 75),
                ZIndex = 10,
            },
        },
        {
            98,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Header',
                Parent = {97},
                Position = UDim2.new(0, 8, 0, 5),
                Size = UDim2.new(1, -8, 0, 20),
                Text = 'Browse Command History',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 20,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            99,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Text',
                Parent = {97},
                Position = UDim2.new(0, 8, 0, 30),
                Size = UDim2.new(1, -8, 0, 32),
                Text = 
[[While focused on the command bar, you can use the up and down arrow keys to browse recently used commands]],
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            100,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BorderSizePixel = 0,
                Name = 'Line',
                Parent = {97},
                Position = UDim2.new(0, 10, 1, -1),
                Size = UDim2.new(1, -20, 0, 1),
                ZIndex = 10,
            },
        },
        {
            101,
            'Frame',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Name = 'Section',
                Parent = {7},
                Size = UDim2.new(1, 0, 0, 75),
                ZIndex = 10,
            },
        },
        {
            102,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Header',
                Parent = {101},
                Position = UDim2.new(0, 8, 0, 5),
                Size = UDim2.new(1, -8, 0, 20),
                Text = 'Autocomplete in the Command Bar',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 20,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            103,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Text',
                Parent = {101},
                Position = UDim2.new(0, 8, 0, 30),
                Size = UDim2.new(1, -8, 0, 32),
                Text = 
[[While focused on the command bar, you can use the tab key to insert the top suggested command into the command bar.]],
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            104,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BorderSizePixel = 0,
                Name = 'Line',
                Parent = {101},
                Position = UDim2.new(0, 10, 1, -1),
                Size = UDim2.new(1, -20, 0, 1),
                ZIndex = 10,
            },
        },
        {
            105,
            'Frame',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Name = 'Section',
                Parent = {7},
                Size = UDim2.new(1, 0, 0, 175),
                ZIndex = 10,
            },
        },
        {
            106,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Header',
                Parent = {105},
                Position = UDim2.new(0, 8, 0, 5),
                Size = UDim2.new(1, -8, 0, 20),
                Text = 'Using Event Binds',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 20,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            107,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Text',
                Parent = {105},
                Position = UDim2.new(0, 8, 0, 30),
                Size = UDim2.new(1, -8, 0, 32),
                Text = 
[[Use event binds to set up commands that get executed when certain events happen. You can edit the conditions for an event command to run (such as which player triggers it).]],
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            108,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BorderSizePixel = 0,
                Name = 'Line',
                Parent = {105},
                Position = UDim2.new(0, 10, 1, -1),
                Size = UDim2.new(1, -20, 0, 1),
                ZIndex = 10,
            },
        },
        {
            109,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Text',
                Parent = {105},
                Position = UDim2.new(0, 8, 0, 70),
                Size = UDim2.new(1, -8, 0, 48),
                Text = 
[[Some events may send arguments; you can use them in your event command by using $ followed by the argument number ($1, $2, etc). You can find out the order and types of these arguments by looking at the settings of the event command.]],
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            110,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Text',
                Parent = {105},
                Position = UDim2.new(0, 8, 0, 130),
                Size = UDim2.new(1, -8, 0, 16),
                Text = 'Example:',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                TextYAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            111,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Text',
                Parent = {105},
                Position = UDim2.new(0, 8, 0, 148),
                Size = UDim2.new(1, -8, 0, 16),
                Text = 
[[Setting up 'goto $1' on the OnChatted event will teleport you to any player that chats.]],
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                TextYAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            112,
            'Frame',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Name = 'Section',
                Parent = {7},
                Size = UDim2.new(1, 0, 0, 105),
                ZIndex = 10,
            },
        },
        {
            113,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 4,
                Name = 'Header',
                Parent = {112},
                Position = UDim2.new(0, 8, 0, 5),
                Size = UDim2.new(1, -8, 0, 20),
                Text = 'Get Further Help',
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 20,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            114,
            'TextLabel',
            {
                BackgroundColor3 = Color3.new(1, 1, 1),
                BackgroundTransparency = 1,
                Font = 3,
                Name = 'Text',
                Parent = {112},
                Position = UDim2.new(0, 8, 0, 30),
                Size = UDim2.new(1, -8, 0, 32),
                Text = 
[[You can join the Discord server to get support with IY,  and read up on more documentation such as the Plugin API.]],
                TextColor3 = Color3.new(1, 1, 1),
                TextSize = 14,
                TextWrapped = true,
                TextXAlignment = 0,
                ZIndex = 10,
            },
        },
        {
            115,
            'Frame',
            {
                BackgroundColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                BorderSizePixel = 0,
                Name = 'Line',
                Parent = {112},
                Position = UDim2.new(0, 10, 1, -1),
                Size = UDim2.new(1, -20, 0, 1),
                Visible = false,
                ZIndex = 10,
            },
        },
        {
            116,
            'TextButton',
            {
                BackgroundColor3 = Color3.new(0.48627451062202, 0.61960786581039, 0.85098040103912),
                BorderColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                Font = 4,
                Name = 'InviteButton',
                Parent = {112},
                Position = UDim2.new(0, 5, 0, 75),
                Size = UDim2.new(1, -10, 0, 25),
                Text = 'Copy Discord Invite Link (https://discord.gg/78ZuWSq)',
                TextColor3 = Color3.new(0.1803921610117, 0.1803921610117, 0.1843137294054),
                TextSize = 16,
                ZIndex = 10,
            },
        },
    })

    for i, v in pairs(main.Content.List:GetDescendants())do
        if v.IsA(v, 'TextLabel') then
            table.insert(text1, v)
        end
    end

    table.insert(scroll, main.Content.List)
    table.insert(shade1, main.Content)
    table.insert(shade2, main.TopBar)

    main.Name = randomString()

    main.TopBar.Close.MouseButton1Click:Connect(function()
        main.TweenPosition(main, UDim2.new(0.5, -250, 0, -500), 'InOut', 'Quart', 0.5, true, nil)
    end)

    local inviteButton = main.FindFirstChild(main, 'InviteButton', true)
    local lastPress

    inviteButton.MouseButton1Click:Connect(function()
        if everyClipboard then
            toClipboard('https://discord.gg/78ZuWSq')

            inviteButton.Text = 'Copied'
        else
            inviteButton.Text = 'No Clipboard Function, type out the link'
        end

        local pressTime = tick()

        lastPress = pressTime

        task.wait(2)

        if lastPress ~= pressTime then
            return
        end

        inviteButton.Text = 'Copy Discord Invite Link (https://discord.gg/78ZuWSq)'
    end)
    dragGUI(main)

    main.Parent = ScaledHolder

    ReferenceButton.MouseButton1Click:Connect(function()
        main.TweenPosition(main, UDim2.new(0.5, -250, 0.5, -150), 'InOut', 'Quart', 0.5, true, nil)
    end)
end)()
currentShade1 = Color3.fromRGB(36, 36, 37)
currentShade2 = Color3.fromRGB(46, 46, 47)
currentShade3 = Color3.fromRGB(78, 78, 79)
currentText1 = Color3.new(1, 1, 1)
currentText2 = Color3.new(0, 0, 0)
currentScroll = Color3.fromRGB(78, 78, 79)
defaultGuiScale = IsOnMobile and 0.9 or 1
defaultsettings = {
    prefix = ';',
    StayOpen = false,
    guiScale = defaultGuiScale,
    espTransparency = 0.3,
    keepIY = true,
    logsEnabled = false,
    jLogsEnabled = false,
    aliases = {},
    binds = {},
    WayPoints = {},
    PluginsTable = {},
    currentShade1 = {
        currentShade1.R,
        currentShade1.G,
        currentShade1.B,
    },
    currentShade2 = {
        currentShade2.R,
        currentShade2.G,
        currentShade2.B,
    },
    currentShade3 = {
        currentShade3.R,
        currentShade3.G,
        currentShade3.B,
    },
    currentText1 = {
        currentText1.R,
        currentText1.G,
        currentText1.B,
    },
    currentText2 = {
        currentText2.R,
        currentText2.G,
        currentText2.B,
    },
    currentScroll = {
        currentScroll.R,
        currentScroll.G,
        currentScroll.B,
    },
    eventBinds = eventEditor.SaveData(),
}
defaults = HttpService.JSONEncode(HttpService, defaultsettings)
nosaves = false
useFactorySettings = function()
    prefix = ';'
    StayOpen = false
    guiScale = defaultGuiScale
    KeepInfYield = true
    espTransparency = 0.3
    logsEnabled = false
    jLogsEnabled = false
    logsWebhook = nil
    aliases = {}
    binds = {}
    WayPoints = {}
    PluginsTable = {}
end
createPopup = function(text)
    local FileError = Instance.new('Frame')
    local background = Instance.new('Frame')
    local Directions = Instance.new('TextLabel')
    local shadow = Instance.new('Frame')
    local PopupText = Instance.new('TextLabel')
    local Exit = Instance.new('TextButton')
    local ExitImage = Instance.new('ImageLabel')

    FileError.Name = randomString()
    FileError.Parent = ScaledHolder
    FileError.Active = true
    FileError.BackgroundTransparency = 1
    FileError.Position = UDim2.new(0.5, -180, 0, 290)
    FileError.Size = UDim2.new(0, 360, 0, 20)
    FileError.ZIndex = 10
    background.Name = 'background'
    background.Parent = FileError
    background.Active = true
    background.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
    background.BorderSizePixel = 0
    background.Position = UDim2.new(0, 0, 0, 20)
    background.Size = UDim2.new(0, 360, 0, 205)
    background.ZIndex = 10
    Directions.Name = 'Directions'
    Directions.Parent = background
    Directions.BackgroundTransparency = 1
    Directions.BorderSizePixel = 0
    Directions.Position = UDim2.new(0, 10, 0, 10)
    Directions.Size = UDim2.new(0, 340, 0, 185)
    Directions.Font = Enum.Font.SourceSans
    Directions.TextSize = 14
    Directions.Text = text
    Directions.TextColor3 = Color3.new(1, 1, 1)
    Directions.TextWrapped = true
    Directions.TextXAlignment = Enum.TextXAlignment.Left
    Directions.TextYAlignment = Enum.TextYAlignment.Top
    Directions.ZIndex = 10
    shadow.Name = 'shadow'
    shadow.Parent = FileError
    shadow.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
    shadow.BorderSizePixel = 0
    shadow.Size = UDim2.new(0, 360, 0, 20)
    shadow.ZIndex = 10
    PopupText.Name = 'PopupText'
    PopupText.Parent = shadow
    PopupText.BackgroundTransparency = 1
    PopupText.Size = UDim2.new(1, 0, 0.95, 0)
    PopupText.ZIndex = 10
    PopupText.Font = Enum.Font.SourceSans
    PopupText.TextSize = 14
    PopupText.Text = 'File Error'
    PopupText.TextColor3 = Color3.new(1, 1, 1)
    PopupText.TextWrapped = true
    Exit.Name = 'Exit'
    Exit.Parent = shadow
    Exit.BackgroundTransparency = 1
    Exit.Position = UDim2.new(1, -20, 0, 0)
    Exit.Size = UDim2.new(0, 20, 0, 20)
    Exit.Text = ''
    Exit.ZIndex = 10
    ExitImage.Parent = Exit
    ExitImage.BackgroundColor3 = Color3.new(1, 1, 1)
    ExitImage.BackgroundTransparency = 1
    ExitImage.Position = UDim2.new(0, 5, 0, 5)
    ExitImage.Size = UDim2.new(0, 10, 0, 10)
    ExitImage.Image = getcustomasset('infiniteyield/assets/close.png')
    ExitImage.ZIndex = 10

    Exit.MouseButton1Click:Connect(function()
        FileError.Destroy(FileError)
    end)
end

local loadedEventData
local jsonAttempts = 0

saves = function()
    if writefileExploit() and readfileExploit() and jsonAttempts < 10 then
        local readSuccess, out = readfile('IY_FE.iy', true)

        if readSuccess then
            if out ~= nil and tostring(out):gsub('%s', '') ~= '' then
                local success, response = pcall(function()
                    local json = HttpService.JSONDecode(HttpService, out)

                    if vtype(json.prefix, 'string') then
                        prefix = json.prefix
                    else
                        prefix = ';'
                    end
                    if vtype(json.StayOpen, 'boolean') then
                        StayOpen = json.StayOpen
                    else
                        StayOpen = false
                    end
                    if vtype(json.guiScale, 'number') then
                        guiScale = json.guiScale
                    else
                        guiScale = defaultGuiScale
                    end
                    if vtype(json.keepIY, 'boolean') then
                        KeepInfYield = json.keepIY
                    else
                        KeepInfYield = true
                    end
                    if vtype(json.espTransparency, 'number') then
                        espTransparency = json.espTransparency
                    else
                        espTransparency = 0.3
                    end
                    if vtype(json.logsEnabled, 'boolean') then
                        logsEnabled = json.logsEnabled
                    else
                        logsEnabled = false
                    end
                    if vtype(json.jLogsEnabled, 'boolean') then
                        jLogsEnabled = json.jLogsEnabled
                    else
                        jLogsEnabled = false
                    end
                    if vtype(json.logsWebhook, 'string') then
                        logsWebhook = json.logsWebhook
                    else
                        logsWebhook = nil
                    end
                    if vtype(json.aliases, 'table') then
                        aliases = json.aliases
                    else
                        aliases = {}
                    end
                    if vtype(json.binds, 'table') then
                        binds = json.binds
                    else
                        binds = {}
                    end
                    if vtype(json.spawnCmds, 'table') then
                        spawnCmds = json.spawnCmds
                    end
                    if vtype(json.WayPoints, 'table') then
                        AllWaypoints = json.WayPoints
                    else
                        WayPoints = {}
                        AllWaypoints = {}
                    end
                    if vtype(json.PluginsTable, 'table') then
                        PluginsTable = json.PluginsTable
                    else
                        PluginsTable = {}
                    end
                    if vtype(json.currentShade1, 'table') then
                        currentShade1 = Color3.new(json.currentShade1[1], json.currentShade1[2], json.currentShade1[3])
                    end
                    if vtype(json.currentShade2, 'table') then
                        currentShade2 = Color3.new(json.currentShade2[1], json.currentShade2[2], json.currentShade2[3])
                    end
                    if vtype(json.currentShade3, 'table') then
                        currentShade3 = Color3.new(json.currentShade3[1], json.currentShade3[2], json.currentShade3[3])
                    end
                    if vtype(json.currentText1, 'table') then
                        currentText1 = Color3.new(json.currentText1[1], json.currentText1[2], json.currentText1[3])
                    end
                    if vtype(json.currentText2, 'table') then
                        currentText2 = Color3.new(json.currentText2[1], json.currentText2[2], json.currentText2[3])
                    end
                    if vtype(json.currentScroll, 'table') then
                        currentScroll = Color3.new(json.currentScroll[1], json.currentScroll[2], json.currentScroll[3])
                    end
                    if vtype(json.eventBinds, 'string') then
                        loadedEventData = json.eventBinds
                    end
                end)

                if not success then
                    jsonAttempts = jsonAttempts + 1

                    warn('Save Json Error:', response)
                    warn('Overwriting Save File')
                    writefile('IY_FE.iy', defaults, true)
                    task.wait()
                    saves()
                end
            else
                writefile('IY_FE.iy', defaults, true)
                task.wait()

                local dReadSuccess, dOut = readfile('IY_FE.iy', true)

                if dReadSuccess and dOut ~= nil and tostring(dOut):gsub('%s', '') ~= '' then
                    saves()
                else
                    nosaves = true

                    useFactorySettings()
                    createPopup("There was a problem writing a save file to your PC.\r\n\r\nPlease contact the developer/support team for your exploit and tell them writefile/readfile is not working.\r\n\r\nYour settings, keybinds, waypoints, and aliases will not save if you continue.\r\n\r\nThings to try:\r\n> Make sure a 'workspace' folder is located in the same folder as your exploit\r\n> If your exploit is inside of a zip/rar file, extract it.\r\n> Rejoin the game and try again or restart your PC and try again.")
                end
            end
        else
            writefile('IY_FE.iy', defaults, true)
            task.wait()

            local dReadSuccess, dOut = readfile('IY_FE.iy', true)

            if dReadSuccess and dOut ~= nil and tostring(dOut):gsub('%s', '') ~= '' then
                saves()
            else
                nosaves = true

                useFactorySettings()
                createPopup("There was a problem writing a save file to your PC.\r\n\r\nPlease contact the developer/support team for your exploit and tell them writefile/readfile is not working.\r\n\r\nYour settings, keybinds, waypoints, and aliases will not save if you continue.\r\n\r\nThings to try:\r\n> Make sure a 'workspace' folder is located in the same folder as your exploit\r\n> If your exploit is inside of a zip/rar file, extract it.\r\n> Rejoin the game and try again or restart your PC and try again.")
            end
        end
    else
        if jsonAttempts >= 10 then
            nosaves = true

            useFactorySettings()
            createPopup("Sorry, we have attempted to parse your save file, but it is unreadable!\r\n\r\nInfinite Yield is now using factory settings until your exploit's file system works.\r\n\r\nYour save file has not been deleted.")
        else
            nosaves = true

            useFactorySettings()
        end
    end
end

saves()

updatesaves = function()
    if nosaves == false and writefileExploit() then
        local update = {
            prefix = prefix,
            StayOpen = StayOpen,
            guiScale = guiScale,
            keepIY = KeepInfYield,
            espTransparency = espTransparency,
            logsEnabled = logsEnabled,
            jLogsEnabled = jLogsEnabled,
            logsWebhook = logsWebhook,
            aliases = aliases,
            binds = binds or {},
            WayPoints = AllWaypoints,
            PluginsTable = PluginsTable,
            currentShade1 = {
                currentShade1.R,
                currentShade1.G,
                currentShade1.B,
            },
            currentShade2 = {
                currentShade2.R,
                currentShade2.G,
                currentShade2.B,
            },
            currentShade3 = {
                currentShade3.R,
                currentShade3.G,
                currentShade3.B,
            },
            currentText1 = {
                currentText1.R,
                currentText1.G,
                currentText1.B,
            },
            currentText2 = {
                currentText2.R,
                currentText2.G,
                currentText2.B,
            },
            currentScroll = {
                currentScroll.R,
                currentScroll.G,
                currentScroll.B,
            },
            eventBinds = eventEditor.SaveData(),
        }

        writefileCooldown('IY_FE.iy', HttpService.JSONEncode(HttpService, update))
    end
end

eventEditor.SetOnEdited(updatesaves)

pWayPoints = {}
WayPoints = {}

if #AllWaypoints > 0 then
    for i = 1, #AllWaypoints do
        if not AllWaypoints[i].GAME or AllWaypoints[i].GAME == PlaceId then
            WayPoints[#WayPoints + 1] = {
                NAME = AllWaypoints[i].NAME,
                COORD = {
                    AllWaypoints[i].COORD[1],
                    AllWaypoints[i].COORD[2],
                    AllWaypoints[i].COORD[3],
                },
                GAME = AllWaypoints[i].GAME,
            }
        end
    end
end
if type(binds) ~= 'table' then
    binds = {}
end
if type(PluginsTable) == 'table' then
    for i = #PluginsTable, 1, -1 do
        if string.sub(PluginsTable[i], -3) ~= '.iy' then
            table.remove(PluginsTable, i)
        end
    end
end

Time = function()
    local HOUR = math.floor((tick() % 86400) / 3600)
    local MINUTE = math.floor((tick() % 3600) / 60)
    local SECOND = math.floor(tick() % 60)
    local AP = HOUR > 11 and 'PM' or 'AM'

    HOUR = (HOUR % 12 == 0 and 12 or HOUR % 12)
    HOUR = HOUR < 10 and '0' .. HOUR or HOUR
    MINUTE = MINUTE < 10 and '0' .. MINUTE or MINUTE
    SECOND = SECOND < 10 and '0' .. SECOND or SECOND

    return HOUR .. ':' .. MINUTE .. ':' .. SECOND .. ' ' .. AP
end
PrefixBox.Text = prefix

local SettingsOpen = false
local isHidden = false

if StayOpen == false then
    On.BackgroundTransparency = 1
else
    On.BackgroundTransparency = 0
end
if logsEnabled then
    Toggle.Text = 'Enabled'
else
    Toggle.Text = 'Disabled'
end
if jLogsEnabled then
    Toggle_2.Text = 'Enabled'
else
    Toggle_2.Text = 'Disabled'
end

maximizeHolder = function()
    if StayOpen == false then
        Holder.TweenPosition(Holder, UDim2.new(1, Holder.Position.X.Offset, 1, -220), 'InOut', 'Quart', 0.2, true, nil)
    end
end
minimizeNum = -20
minimizeHolder = function()
    if StayOpen == false then
        Holder.TweenPosition(Holder, UDim2.new(1, Holder.Position.X.Offset, 1, minimizeNum), 'InOut', 'Quart', 0.5, true, nil)
    end
end
cmdbarHolder = function()
    if StayOpen == false then
        Holder.TweenPosition(Holder, UDim2.new(1, Holder.Position.X.Offset, 1, -45), 'InOut', 'Quart', 0.5, true, nil)
    end
end
pinNotification = nil

local notifyCount = 0

notify = function(text, text2, length)
    task.spawn(function()
        local LnotifyCount = notifyCount + 1
        local notificationPinned = false

        notifyCount = notifyCount + 1

        if pinNotification then
            pinNotification.Disconnect(pinNotification)
        end

        pinNotification = PinButton.MouseButton1Click:Connect(function()
            task.spawn(function()
                pinNotification.Disconnect(pinNotification)

                notificationPinned = true
                Title_2.BackgroundTransparency = 1

                task.wait(0.5)

                Title_2.BackgroundTransparency = 0
            end)
        end)

        Notification.TweenPosition(Notification, UDim2.new(1, Notification.Position.X.Offset, 1, 0), 'InOut', 'Quart', 0.5, true, nil)
        task.wait(0.6)

        local closepressed = false

        if text2 then
            Title_2.Text = text
            Text_2.Text = text2
        else
            Title_2.Text = 'Notification'
            Text_2.Text = text
        end

        Notification.TweenPosition(Notification, UDim2.new(1, Notification.Position.X.Offset, 1, 
-100), 'InOut', 'Quart', 0.5, true, nil)
        CloseButton.MouseButton1Click:Connect(function()
            Notification.TweenPosition(Notification, UDim2.new(1, Notification.Position.X.Offset, 1, 0), 'InOut', 'Quart', 0.5, true, nil)

            closepressed = true

            pinNotification.Disconnect(pinNotification)
        end)

        if length and isNumber(length) then
            task.wait(length)
        else
            task.wait(10)
        end
        if LnotifyCount == notifyCount then
            if closepressed == false and notificationPinned == false then
                pinNotification.Disconnect(pinNotification)
                Notification.TweenPosition(Notification, UDim2.new(1, Notification.Position.X.Offset, 1, 0), 'InOut', 'Quart', 0.5, true, nil)
            end

            notifyCount = 0
        end
    end)
end

local lastMessage
local lastLabel
local dupeCount = 1

CreateLabel = function(Name, Text)
    if lastMessage == Name .. Text then
        dupeCount = dupeCount + 1
        lastLabel.Text = Time() .. ' - [' .. Name .. ']: ' .. Text .. ' (x' .. dupeCount .. ')'
    else
        if dupeCount > 1 then
            dupeCount = 1
        end
        if #scroll_2.GetChildren(scroll_2) >= 2546 then
            scroll_2.ClearAllChildren(scroll_2)
        end

        local alls = 0

        for i, v in pairs(scroll_2.GetChildren(scroll_2))do
            if v then
                alls = v.Size.Y.Offset + alls
            end
            if not v then
                alls = 0
            end
        end

        local tl = Instance.new('TextLabel')

        lastMessage = Name .. Text
        lastLabel = tl
        tl.Name = Name
        tl.Parent = scroll_2
        tl.ZIndex = 10
        tl.RichText = true
        tl.Text = Time() .. ' - [' .. Name .. ']: ' .. Text
        tl.Text = tl.ContentText
        tl.Size = UDim2.new(0, 322, 0, 84)
        tl.BackgroundTransparency = 1
        tl.BorderSizePixel = 0
        tl.Font = 'SourceSans'
        tl.Position = UDim2.new(-1, 0, 0, alls)
        tl.TextTransparency = 1
        tl.TextScaled = false
        tl.TextSize = 14
        tl.TextWrapped = true
        tl.TextXAlignment = 'Left'
        tl.TextYAlignment = 'Top'
        tl.TextColor3 = currentText1
        tl.Size = UDim2.new(0, 322, 0, tl.TextBounds.Y)

        table.insert(text1, tl)

        scroll_2.CanvasSize = UDim2.new(0, 0, 0, alls + tl.TextBounds.Y)
        scroll_2.CanvasPosition = Vector2.new(0, scroll_2.CanvasPosition.Y + tl.TextBounds.Y)

        tl.TweenPosition(tl, UDim2.new(0, 3, 0, alls), 'In', 'Quint', 0.5)
        TweenService.Create(TweenService, tl, TweenInfo.new(1.25, Enum.EasingStyle.Linear), {TextTransparency = 0}):Play()
    end
end
CreateJoinLabel = function(plr, ID)
    if #scroll_3.GetChildren(scroll_3) >= 2546 then
        scroll_3.ClearAllChildren(scroll_3)
    end

    local infoFrame = Instance.new('Frame')
    local info1 = Instance.new('TextLabel')
    local info2 = Instance.new('TextLabel')
    local ImageLabel_3 = Instance.new('ImageLabel')

    infoFrame.Name = randomString()
    infoFrame.Parent = scroll_3
    infoFrame.BackgroundColor3 = Color3.new(1, 1, 1)
    infoFrame.BackgroundTransparency = 1
    infoFrame.BorderColor3 = Color3.new(0.105882, 0.164706, 0.207843)
    infoFrame.Size = UDim2.new(1, 0, 0, 50)
    info1.Name = randomString()
    info1.Parent = infoFrame
    info1.BackgroundTransparency = 1
    info1.BorderSizePixel = 0
    info1.Position = UDim2.new(0, 45, 0, 0)
    info1.Size = UDim2.new(0, 135, 1, 0)
    info1.ZIndex = 10
    info1.Font = Enum.Font.SourceSans
    info1.FontSize = Enum.FontSize.Size14
    info1.Text = 'Username: ' .. plr.Name .. '\nJoined Server: ' .. Time()
    info1.TextColor3 = Color3.new(1, 1, 1)
    info1.TextWrapped = true
    info1.TextXAlignment = Enum.TextXAlignment.Left
    info2.Name = randomString()
    info2.Parent = infoFrame
    info2.BackgroundTransparency = 1
    info2.BorderSizePixel = 0
    info2.Position = UDim2.new(0, 185, 0, 0)
    info2.Size = UDim2.new(0, 140, 1, -5)
    info2.ZIndex = 10
    info2.Font = Enum.Font.SourceSans
    info2.FontSize = Enum.FontSize.Size14
    info2.Text = 'User ID: ' .. ID .. '\nAccount Age: ' .. plr.AccountAge .. '\nJoined Roblox: Loading...'
    info2.TextColor3 = Color3.new(1, 1, 1)
    info2.TextWrapped = true
    info2.TextXAlignment = Enum.TextXAlignment.Left
    info2.TextYAlignment = Enum.TextYAlignment.Center
    ImageLabel_3.Parent = infoFrame
    ImageLabel_3.BackgroundTransparency = 1
    ImageLabel_3.BorderSizePixel = 0
    ImageLabel_3.Size = UDim2.new(0, 45, 1, 0)
    ImageLabel_3.Image = Players.GetUserThumbnailAsync(Players, ID, Enum.ThumbnailType.AvatarThumbnail, Enum.ThumbnailSize.Size420x420)
    scroll_3.CanvasSize = UDim2.new(0, 0, 0, listlayout.AbsoluteContentSize.Y)
    scroll_3.CanvasPosition = Vector2.new(0, scroll_2.CanvasPosition.Y + infoFrame.AbsoluteSize.Y)

    task.wait()

    local user = game.HttpGet(game, 'https://users.roblox.com/v1/users/' .. ID)
    local json = HttpService.JSONDecode(HttpService, user)
    local date = json.created:sub(1, 10)
    local splitDates = string.split(date, '-')

    info2.Text = string.gsub(info2.Text, 'Loading...', splitDates[2] .. '/' .. splitDates[3] .. '/' .. splitDates[1])
end

IYMouse.KeyDown:Connect(function(Key)
    if (Key == prefix) then
        RunService.RenderStepped:Wait()
        Cmdbar.CaptureFocus(Cmdbar)
        maximizeHolder()
    end
end)

local lastMinimizeReq = 0

Holder.MouseEnter:Connect(function()
    lastMinimizeReq = 0

    maximizeHolder()
end)
Holder.MouseLeave:Connect(function()
    if not Cmdbar.IsFocused(Cmdbar) then
        local reqTime = tick()

        lastMinimizeReq = reqTime

        task.wait(1)

        if lastMinimizeReq ~= reqTime then
            return
        end
        if not Cmdbar.IsFocused(Cmdbar) then
            minimizeHolder()
        end
    end
end)

updateColors = function(color, ctype)
    if ctype == shade1 then
        for i, v in pairs(shade1)do
            v.BackgroundColor3 = color
        end

        currentShade1 = color
    elseif ctype == shade2 then
        for i, v in pairs(shade2)do
            v.BackgroundColor3 = color
        end

        currentShade2 = color
    elseif ctype == shade3 then
        for i, v in pairs(shade3)do
            v.BackgroundColor3 = color
        end

        currentShade3 = color
    elseif ctype == text1 then
        for i, v in pairs(text1)do
            v.TextColor3 = color

            if v.IsA(v, 'TextBox') then
                v.PlaceholderColor3 = color
            end
        end

        currentText1 = color
    elseif ctype == text2 then
        for i, v in pairs(text2)do
            v.TextColor3 = color
        end

        currentText2 = color
    elseif ctype == scroll then
        for i, v in pairs(scroll)do
            v.ScrollBarImageColor3 = color
        end

        currentScroll = color
    end
end

local colorpickerOpen = false

ColorsButton.MouseButton1Click:Connect(function()
    cache_currentShade1 = currentShade1
    cache_currentShade2 = currentShade2
    cache_currentShade3 = currentShade3
    cache_currentText1 = currentText1
    cache_currentText2 = currentText2
    cache_currentScroll = currentScroll

    if not colorpickerOpen then
        colorpickerOpen = true
        picker = game.GetObjects(game, 'rbxassetid://4908465318')[1]
        picker.Name = randomString()
        picker.Parent = ScaledHolder

        local ColorPicker

        do
            ColorPicker = {}
            ColorPicker.new = function()
                local newMt = setmetatable({}, {})
                local pickerGui = picker.ColorPicker
                local pickerTopBar = pickerGui.TopBar
                local pickerExit = pickerTopBar.Exit
                local pickerFrame = pickerGui.Content
                local colorSpace = pickerFrame.ColorSpaceFrame.ColorSpace
                local colorStrip = pickerFrame.ColorStrip
                local previewFrame = pickerFrame.Preview
                local basicColorsFrame = pickerFrame.BasicColors
                local customColorsFrame = pickerFrame.CustomColors
                local defaultButton = pickerFrame.Default
                local cancelButton = pickerFrame.Cancel
                local shade1Button = pickerFrame.Shade1
                local shade2Button = pickerFrame.Shade2
                local shade3Button = pickerFrame.Shade3
                local text1Button = pickerFrame.Text1
                local text2Button = pickerFrame.Text2
                local scrollButton = pickerFrame.Scroll
                local colorScope = colorSpace.Scope
                local colorArrow = pickerFrame.ArrowFrame.Arrow
                local hueInput = pickerFrame.Hue.Input
                local satInput = pickerFrame.Sat.Input
                local valInput = pickerFrame.Val.Input
                local redInput = pickerFrame.Red.Input
                local greenInput = pickerFrame.Green.Input
                local blueInput = pickerFrame.Blue.Input
                local mouse = IYMouse
                local hue, sat, val = 0, 0, 1
                local red, green, blue = 1, 1, 1
                local chosenColor = Color3.new(0, 0, 0)
                local basicColors = {
                    Color3.new(0, 0, 0),
                    Color3.new(0.66666668653488, 0, 0),
                    Color3.new(0, 0.33333334326744, 0),
                    Color3.new(0.66666668653488, 0.33333334326744, 0),
                    Color3.new(0, 0.66666668653488, 0),
                    Color3.new(0.66666668653488, 0.66666668653488, 0),
                    Color3.new(0, 1, 0),
                    Color3.new(0.66666668653488, 1, 0),
                    Color3.new(0, 0, 0.49803924560547),
                    Color3.new(0.66666668653488, 0, 0.49803924560547),
                    Color3.new(0, 0.33333334326744, 0.49803924560547),
                    Color3.new(0.66666668653488, 0.33333334326744, 0.49803924560547),
                    Color3.new(0, 0.66666668653488, 0.49803924560547),
                    Color3.new(0.66666668653488, 0.66666668653488, 0.49803924560547),
                    Color3.new(0, 1, 0.49803924560547),
                    Color3.new(0.66666668653488, 1, 0.49803924560547),
                    Color3.new(0, 0, 1),
                    Color3.new(0.66666668653488, 0, 1),
                    Color3.new(0, 0.33333334326744, 1),
                    Color3.new(0.66666668653488, 0.33333334326744, 1),
                    Color3.new(0, 0.66666668653488, 1),
                    Color3.new(0.66666668653488, 0.66666668653488, 1),
                    Color3.new(0, 1, 1),
                    Color3.new(0.66666668653488, 1, 1),
                    Color3.new(0.33333334326744, 0, 0),
                    Color3.new(1, 0, 0),
                    Color3.new(0.33333334326744, 0.33333334326744, 0),
                    Color3.new(1, 0.33333334326744, 0),
                    Color3.new(0.33333334326744, 0.66666668653488, 0),
                    Color3.new(1, 0.66666668653488, 0),
                    Color3.new(0.33333334326744, 1, 0),
                    Color3.new(1, 1, 0),
                    Color3.new(0.33333334326744, 0, 0.49803924560547),
                    Color3.new(1, 0, 0.49803924560547),
                    Color3.new(0.33333334326744, 0.33333334326744, 0.49803924560547),
                    Color3.new(1, 0.33333334326744, 0.49803924560547),
                    Color3.new(0.33333334326744, 0.66666668653488, 0.49803924560547),
                    Color3.new(1, 0.66666668653488, 0.49803924560547),
                    Color3.new(0.33333334326744, 1, 0.49803924560547),
                    Color3.new(1, 1, 0.49803924560547),
                    Color3.new(0.33333334326744, 0, 1),
                    Color3.new(1, 0, 1),
                    Color3.new(0.33333334326744, 0.33333334326744, 1),
                    Color3.new(1, 0.33333334326744, 1),
                    Color3.new(0.33333334326744, 0.66666668653488, 1),
                    Color3.new(1, 0.66666668653488, 1),
                    Color3.new(0.33333334326744, 1, 1),
                    Color3.new(1, 1, 1),
                }
                local customColors = {}

                dragGUI(picker)

                local function updateColor(noupdate)
                    local relativeX, relativeY, relativeStripY = 219 - hue * 219, 199 - sat * 199, 199 - val * 199
                    local hsvColor = Color3.fromHSV(hue, sat, val)

                    if noupdate == 2 or not noupdate then
                        hueInput.Text = tostring(math.ceil(359 * hue))
                        satInput.Text = tostring(math.ceil(255 * sat))
                        valInput.Text = tostring(math.floor(255 * val))
                    end
                    if noupdate == 1 or not noupdate then
                        redInput.Text = tostring(math.floor(255 * red))
                        greenInput.Text = tostring(math.floor(255 * green))
                        blueInput.Text = tostring(math.floor(255 * blue))
                    end

                    chosenColor = Color3.new(red, green, blue)
                    colorScope.Position = UDim2.new(0, relativeX - 9, 0, relativeY - 9)
                    colorStrip.ImageColor3 = Color3.fromHSV(hue, sat, 1)
                    colorArrow.Position = UDim2.new(0, -2, 0, relativeStripY - 4)
                    previewFrame.BackgroundColor3 = chosenColor
                    newMt.Color = chosenColor

                    if newMt.Changed then
                        newMt.Changed(newMt, chosenColor)
                    end
                end
                local function colorSpaceInput()
                    local relativeX = mouse.X - colorSpace.AbsolutePosition.X
                    local relativeY = mouse.Y - colorSpace.AbsolutePosition.Y

                    if relativeX < 0 then
                        relativeX = 0
                    elseif relativeX > 219 then
                        relativeX = 219
                    end
                    if relativeY < 0 then
                        relativeY = 0
                    elseif relativeY > 199 then
                        relativeY = 199
                    end

                    hue = (219 - relativeX) / 219
                    sat = (199 - relativeY) / 199

                    local hsvColor = Color3.fromHSV(hue, sat, val)

                    red, green, blue = hsvColor.r, hsvColor.g, hsvColor.b

                    updateColor()
                end
                local function colorStripInput()
                    local relativeY = mouse.Y - colorStrip.AbsolutePosition.Y

                    if relativeY < 0 then
                        relativeY = 0
                    elseif relativeY > 199 then
                        relativeY = 199
                    end

                    val = (199 - relativeY) / 199

                    local hsvColor = Color3.fromHSV(hue, sat, val)

                    red, green, blue = hsvColor.r, hsvColor.g, hsvColor.b

                    updateColor()
                end
                local function hookButtons(frame, func)
                    frame.ArrowFrame.Up.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement then
                            frame.ArrowFrame.Up.BackgroundTransparency = 0.5
                        elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
                            local releaseEvent, runEvent
                            local startTime = tick()
                            local pressing = true
                            local startNum = tonumber(frame.Text)

                            if not startNum then
                                return
                            end

                            releaseEvent = UserInputService.InputEnded:Connect(function(
                                input
                            )
                                if input.UserInputType ~= Enum.UserInputType.MouseButton1 then
                                    return
                                end

                                releaseEvent.Disconnect(releaseEvent)

                                pressing = false
                            end)
                            startNum = startNum + 1

                            func(startNum)

                            while pressing do
                                if tick() - startTime > 0.3 then
                                    startNum = startNum + 1

                                    func(startNum)
                                end

                                task.wait(0.1)
                            end
                        end
                    end)
                    frame.ArrowFrame.Up.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement then
                            frame.ArrowFrame.Up.BackgroundTransparency = 1
                        end
                    end)
                    frame.ArrowFrame.Down.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement then
                            frame.ArrowFrame.Down.BackgroundTransparency = 0.5
                        elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
                            local releaseEvent, runEvent
                            local startTime = tick()
                            local pressing = true
                            local startNum = tonumber(frame.Text)

                            if not startNum then
                                return
                            end

                            releaseEvent = UserInputService.InputEnded:Connect(function(
                                input
                            )
                                if input.UserInputType ~= Enum.UserInputType.MouseButton1 then
                                    return
                                end

                                releaseEvent.Disconnect(releaseEvent)

                                pressing = false
                            end)
                            startNum = startNum - 1

                            func(startNum)

                            while pressing do
                                if tick() - startTime > 0.3 then
                                    startNum = startNum - 1

                                    func(startNum)
                                end

                                task.wait(0.1)
                            end
                        end
                    end)
                    frame.ArrowFrame.Down.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement then
                            frame.ArrowFrame.Down.BackgroundTransparency = 1
                        end
                    end)
                end

                colorSpace.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        local releaseEvent, mouseEvent

                        releaseEvent = UserInputService.InputEnded:Connect(function(
                            input
                        )
                            if input.UserInputType ~= Enum.UserInputType.MouseButton1 then
                                return
                            end

                            releaseEvent.Disconnect(releaseEvent)
                            mouseEvent.Disconnect(mouseEvent)
                        end)
                        mouseEvent = UserInputService.InputChanged:Connect(function(
                            input
                        )
                            if input.UserInputType == Enum.UserInputType.MouseMovement then
                                colorSpaceInput()
                            end
                        end)

                        colorSpaceInput()
                    end
                end)
                colorStrip.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        local releaseEvent, mouseEvent

                        releaseEvent = UserInputService.InputEnded:Connect(function(
                            input
                        )
                            if input.UserInputType ~= Enum.UserInputType.MouseButton1 then
                                return
                            end

                            releaseEvent.Disconnect(releaseEvent)
                            mouseEvent.Disconnect(mouseEvent)
                        end)
                        mouseEvent = UserInputService.InputChanged:Connect(function(
                            input
                        )
                            if input.UserInputType == Enum.UserInputType.MouseMovement then
                                colorStripInput()
                            end
                        end)

                        colorStripInput()
                    end
                end)

                local function updateHue(str)
                    local num = tonumber(str)

                    if num then
                        hue = math.clamp(math.floor(num), 0, 359) / 359

                        local hsvColor = Color3.fromHSV(hue, sat, val)

                        red, green, blue = hsvColor.r, hsvColor.g, hsvColor.b
                        hueInput.Text = tostring(hue * 359)

                        updateColor(1)
                    end
                end

                hueInput.FocusLost:Connect(function()
                    updateHue(hueInput.Text)
                end)
                hookButtons(hueInput, updateHue)

                local function updateSat(str)
                    local num = tonumber(str)

                    if num then
                        sat = math.clamp(math.floor(num), 0, 255) / 255

                        local hsvColor = Color3.fromHSV(hue, sat, val)

                        red, green, blue = hsvColor.r, hsvColor.g, hsvColor.b
                        satInput.Text = tostring(sat * 255)

                        updateColor(1)
                    end
                end

                satInput.FocusLost:Connect(function()
                    updateSat(satInput.Text)
                end)
                hookButtons(satInput, updateSat)

                local function updateVal(str)
                    local num = tonumber(str)

                    if num then
                        val = math.clamp(math.floor(num), 0, 255) / 255

                        local hsvColor = Color3.fromHSV(hue, sat, val)

                        red, green, blue = hsvColor.r, hsvColor.g, hsvColor.b
                        valInput.Text = tostring(val * 255)

                        updateColor(1)
                    end
                end

                valInput.FocusLost:Connect(function()
                    updateVal(valInput.Text)
                end)
                hookButtons(valInput, updateVal)

                local function updateRed(str)
                    local num = tonumber(str)

                    if num then
                        red = math.clamp(math.floor(num), 0, 255) / 255

                        local newColor = Color3.new(red, green, blue)

                        hue, sat, val = Color3.toHSV(newColor)
                        redInput.Text = tostring(red * 255)

                        updateColor(2)
                    end
                end

                redInput.FocusLost:Connect(function()
                    updateRed(redInput.Text)
                end)
                hookButtons(redInput, updateRed)

                local function updateGreen(str)
                    local num = tonumber(str)

                    if num then
                        green = math.clamp(math.floor(num), 0, 255) / 255

                        local newColor = Color3.new(red, green, blue)

                        hue, sat, val = Color3.toHSV(newColor)
                        greenInput.Text = tostring(green * 255)

                        updateColor(2)
                    end
                end

                greenInput.FocusLost:Connect(function()
                    updateGreen(greenInput.Text)
                end)
                hookButtons(greenInput, updateGreen)

                local function updateBlue(str)
                    local num = tonumber(str)

                    if num then
                        blue = math.clamp(math.floor(num), 0, 255) / 255

                        local newColor = Color3.new(red, green, blue)

                        hue, sat, val = Color3.toHSV(newColor)
                        blueInput.Text = tostring(blue * 255)

                        updateColor(2)
                    end
                end

                blueInput.FocusLost:Connect(function()
                    updateBlue(blueInput.Text)
                end)
                hookButtons(blueInput, updateBlue)

                local colorChoice = Instance.new('TextButton')

                colorChoice.Name = 'Choice'
                colorChoice.Size = UDim2.new(0, 25, 0, 18)
                colorChoice.BorderColor3 = Color3.new(0.3764705882352941, 0.3764705882352941, 0.3764705882352941)
                colorChoice.Text = ''
                colorChoice.AutoButtonColor = false
                colorChoice.ZIndex = 10

                local row = 0
                local column = 0

                for i, v in pairs(basicColors)do
                    local newColor = colorChoice.Clone(colorChoice)

                    newColor.BackgroundColor3 = v
                    newColor.Position = UDim2.new(0, 1 + 30 * column, 0, 21 + 23 * row)

                    newColor.MouseButton1Click:Connect(function()
                        red, green, blue = v.r, v.g, v.b

                        local newColor = Color3.new(red, green, blue)

                        hue, sat, val = Color3.toHSV(newColor)

                        updateColor()
                    end)

                    newColor.Parent = basicColorsFrame
                    column = column + 1

                    if column == 6 then
                        row = row + 1
                        column = 0
                    end
                end

                row = 0
                column = 0

                for i = 1, 12 do
                    local color = customColors[i] or Color3.new(0, 0, 0)
                    local newColor = colorChoice.Clone(colorChoice)

                    newColor.BackgroundColor3 = color
                    newColor.Position = UDim2.new(0, 1 + 30 * column, 0, 20 + 23 * row)

                    newColor.MouseButton1Click:Connect(function()
                        local curColor = customColors[i] or Color3.new(0, 0, 0)

                        red, green, blue = curColor.r, curColor.g, curColor.b
                        hue, sat, val = Color3.toHSV(curColor)

                        updateColor()
                    end)
                    newColor.MouseButton2Click:Connect(function()
                        customColors[i] = chosenColor
                        newColor.BackgroundColor3 = chosenColor
                    end)

                    newColor.Parent = customColorsFrame
                    column = column + 1

                    if column == 6 then
                        row = row + 1
                        column = 0
                    end
                end

                shade1Button.MouseButton1Click:Connect(function()
                    if newMt.Confirm then
                        newMt.Confirm(newMt, chosenColor, shade1)
                    end
                end)
                shade1Button.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        shade1Button.BackgroundTransparency = 0.4
                    end
                end)
                shade1Button.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        shade1Button.BackgroundTransparency = 0
                    end
                end)
                shade2Button.MouseButton1Click:Connect(function()
                    if newMt.Confirm then
                        newMt.Confirm(newMt, chosenColor, shade2)
                    end
                end)
                shade2Button.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        shade2Button.BackgroundTransparency = 0.4
                    end
                end)
                shade2Button.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        shade2Button.BackgroundTransparency = 0
                    end
                end)
                shade3Button.MouseButton1Click:Connect(function()
                    if newMt.Confirm then
                        newMt.Confirm(newMt, chosenColor, shade3)
                    end
                end)
                shade3Button.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        shade3Button.BackgroundTransparency = 0.4
                    end
                end)
                shade3Button.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        shade3Button.BackgroundTransparency = 0
                    end
                end)
                text1Button.MouseButton1Click:Connect(function()
                    if newMt.Confirm then
                        newMt.Confirm(newMt, chosenColor, text1)
                    end
                end)
                text1Button.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        text1Button.BackgroundTransparency = 0.4
                    end
                end)
                text1Button.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        text1Button.BackgroundTransparency = 0
                    end
                end)
                text2Button.MouseButton1Click:Connect(function()
                    if newMt.Confirm then
                        newMt.Confirm(newMt, chosenColor, text2)
                    end
                end)
                text2Button.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        text2Button.BackgroundTransparency = 0.4
                    end
                end)
                text2Button.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        text2Button.BackgroundTransparency = 0
                    end
                end)
                scrollButton.MouseButton1Click:Connect(function()
                    if newMt.Confirm then
                        newMt.Confirm(newMt, chosenColor, scroll)
                    end
                end)
                scrollButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        scrollButton.BackgroundTransparency = 0.4
                    end
                end)
                scrollButton.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        scrollButton.BackgroundTransparency = 0
                    end
                end)
                cancelButton.MouseButton1Click:Connect(function()
                    if newMt.Cancel then
                        newMt.Cancel(newMt)
                    end
                end)
                cancelButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        cancelButton.BackgroundTransparency = 0.4
                    end
                end)
                cancelButton.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        cancelButton.BackgroundTransparency = 0
                    end
                end)
                defaultButton.MouseButton1Click:Connect(function()
                    if newMt.Default then
                        newMt.Default(newMt)
                    end
                end)
                defaultButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        defaultButton.BackgroundTransparency = 0.4
                    end
                end)
                defaultButton.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        defaultButton.BackgroundTransparency = 0
                    end
                end)
                pickerExit.MouseButton1Click:Connect(function()
                    picker.TweenPosition(picker, UDim2.new(0.5, -219, 0, -500), 'InOut', 'Quart', 0.5, true, nil)
                end)
                updateColor()

                newMt.SetColor = function(self, color)
                    red, green, blue = color.r, color.g, color.b
                    hue, sat, val = Color3.toHSV(color)

                    updateColor()
                end

                return newMt
            end
        end

        picker.TweenPosition(picker, UDim2.new(0.5, -219, 0, 100), 'InOut', 'Quart', 0.5, true, nil)

        local Npicker = ColorPicker.new()

        Npicker.Confirm = function(self, color, ctype)
            updateColors(color, ctype)
            task.wait()
            updatesaves()
        end
        Npicker.Cancel = function(self)
            updateColors(cache_currentShade1, shade1)
            updateColors(cache_currentShade2, shade2)
            updateColors(cache_currentShade3, shade3)
            updateColors(cache_currentText1, text1)
            updateColors(cache_currentText2, text2)
            updateColors(cache_currentScroll, scroll)
            task.wait()
            updatesaves()
        end
        Npicker.Default = function(self)
            updateColors(Color3.fromRGB(36, 36, 37), shade1)
            updateColors(Color3.fromRGB(46, 46, 47), shade2)
            updateColors(Color3.fromRGB(78, 78, 79), shade3)
            updateColors(Color3.new(1, 1, 1), text1)
            updateColors(Color3.new(0, 0, 0), text2)
            updateColors(Color3.fromRGB(78, 78, 79), scroll)
            task.wait()
            updatesaves()
        end
    else
        picker.TweenPosition(picker, UDim2.new(0.5, -219, 0, 100), 'InOut', 'Quart', 0.5, true, nil)
    end
end)
SettingsButton.MouseButton1Click:Connect(function()
    if SettingsOpen == false then
        SettingsOpen = true

        Settings.TweenPosition(Settings, UDim2.new(0, 0, 0, 45), 'InOut', 'Quart', 0.5, true, nil)

        CMDsF.Visible = false
    else
        SettingsOpen = false
        CMDsF.Visible = true

        Settings.TweenPosition(Settings, UDim2.new(0, 0, 0, 220), 'InOut', 'Quart', 0.5, true, nil)
    end
end)
On.MouseButton1Click:Connect(function()
    if isHidden == false then
        if StayOpen == false then
            StayOpen = true
            On.BackgroundTransparency = 0
        else
            StayOpen = false
            On.BackgroundTransparency = 1
        end

        updatesaves()
    end
end)
Clear.MouseButton1Down:Connect(function()
    for _, child in pairs(scroll_2.GetChildren(scroll_2))do
        child.Destroy(child)
    end

    scroll_2.CanvasSize = UDim2.new(0, 0, 0, 10)
end)
Clear_2.MouseButton1Down:Connect(function()
    for _, child in pairs(scroll_3.GetChildren(scroll_3))do
        child.Destroy(child)
    end

    scroll_3.CanvasSize = UDim2.new(0, 0, 0, 10)
end)
Toggle.MouseButton1Down:Connect(function()
    if logsEnabled then
        logsEnabled = false
        Toggle.Text = 'Disabled'

        updatesaves()
    else
        logsEnabled = true
        Toggle.Text = 'Enabled'

        updatesaves()
    end
end)
Toggle_2.MouseButton1Down:Connect(function()
    if jLogsEnabled then
        jLogsEnabled = false
        Toggle_2.Text = 'Disabled'

        updatesaves()
    else
        jLogsEnabled = true
        Toggle_2.Text = 'Enabled'

        updatesaves()
    end
end)
selectChat.MouseButton1Down:Connect(function()
    join.Visible = false
    chat.Visible = true

    table.remove(shade3, table.find(shade3, selectChat))
    table.remove(shade2, table.find(shade2, selectJoin))
    table.insert(shade2, selectChat)
    table.insert(shade3, selectJoin)

    selectJoin.BackgroundColor3 = currentShade3
    selectChat.BackgroundColor3 = currentShade2
end)
selectJoin.MouseButton1Down:Connect(function()
    chat.Visible = false
    join.Visible = true

    table.remove(shade3, table.find(shade3, selectJoin))
    table.remove(shade2, table.find(shade2, selectChat))
    table.insert(shade2, selectJoin)
    table.insert(shade3, selectChat)

    selectChat.BackgroundColor3 = currentShade3
    selectJoin.BackgroundColor3 = currentShade2
end)

if not writefileExploit() then
    notify('Saves', 
[[Your exploit does not support read/write file. Your settings will not save.]])
end

avatarcache = {}
sendChatWebhook = function(player, message)
    if httprequest and vtype(logsWebhook, 'string') then
        local id = player.UserId
        local avatar = avatarcache[id]

        if not avatar then
            local d = HttpService.JSONDecode(HttpService, httprequest({
                Url = 
[[https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds=]] .. id .. '&size=420x420&format=Png&isCircular=false',
                Method = 'GET',
            }).Body).data

            avatar = d and d[1].state == 'Completed' and d[1].imageUrl or 'https://files.catbox.moe/i968v2.jpg'
            avatarcache[id] = avatar
        end

        local log = HttpService.JSONEncode(HttpService, {
            content = message,
            avatar_url = avatar,
            username = formatUsername(player),
            allowed_mentions = {parse = {}},
        })

        httprequest({
            Url = logsWebhook,
            Method = 'POST',
            Headers = {
                ['Content-Type'] = 'application/json',
            },
            Body = log,
        })
    end
end
ChatLog = function(player)
    player.Chatted:Connect(function(message)
        if logsEnabled == true then
            CreateLabel(player.Name, message)
            sendChatWebhook(player, message)
        end
    end)
end
JoinLog = function(plr)
    if jLogsEnabled == true then
        CreateJoinLabel(plr, plr.UserId)
    end
end
CleanFileName = function(name)
    return tostring(name):gsub('[*\\?:<>|]+', ''):sub(1, 175)
end

SaveChatlogs.MouseButton1Down:Connect(function()
    if writefileExploit() then
        if #scroll_2.GetChildren(scroll_2) > 0 then
            notify('Loading', 'Hold on a sec')

            local placeName = CleanFileName(MarketplaceService.GetProductInfo(MarketplaceService, PlaceId).Name)
            local writelogs = '-- Infinite Yield Chat logs for "' .. placeName .. '"\n'

            for _, child in pairs(scroll_2.GetChildren(scroll_2))do
                writelogs = writelogs .. '\n' .. child.Text
            end

            local writelogsFile = tostring(writelogs)
            local fileext = 0

            local function nameFile()
                local file

                pcall(function()
                    file = readfile(placeName .. ' Chat Logs (' .. fileext .. ').txt')
                end)

                if file then
                    fileext = fileext + 1

                    nameFile()
                else
                    writefileCooldown(placeName .. ' Chat Logs (' .. fileext .. ').txt', writelogsFile)
                end
            end

            nameFile()
            notify('Chat Logs', 
[[Saved chat logs to the workspace folder within your exploit folder.]])
        end
    else
        notify('Chat Logs', 
[[Your exploit does not support write file. You cannot save chat logs.]])
    end
end)

if isLegacyChat then
    for _, plr in pairs(Players.GetPlayers(Players))do
        ChatLog(plr)
    end
end

Players.PlayerRemoving:Connect(function(player)
    if ESPenabled or CHMSenabled or COREGUI.FindFirstChild(COREGUI, player.Name .. '_LC') then
        for i, v in pairs(COREGUI.GetChildren(COREGUI))do
            if v.Name == player.Name .. '_ESP' or v.Name == player.Name .. '_LC' or v.Name == player.Name .. '_CHMS' then
                v.Destroy(v)
            end
        end
    end
    if viewing ~= nil and player == viewing then
        workspace.CurrentCamera.CameraSubject = Players.LocalPlayer.Character
        viewing = nil

        if viewDied then
            viewDied.Disconnect(viewDied)
            viewChanged.Disconnect(viewChanged)
        end

        notify('Spectate', 'View turned off (player left)')
    end

    eventEditor.FireEvent('OnLeave', player.Name)
end)
Exit.MouseButton1Down:Connect(function()
    logs.TweenPosition(logs, UDim2.new(0, 0, 1, 10), 'InOut', 'Quart', 0.3, true, nil)
end)
Hide.MouseButton1Down:Connect(function()
    if logs.Position ~= UDim2.new(0, 0, 1, -20) then
        logs.TweenPosition(logs, UDim2.new(0, 0, 1, -20), 'InOut', 'Quart', 0.3, true, nil)
    else
        logs.TweenPosition(logs, UDim2.new(0, 0, 1, -265), 'InOut', 'Quart', 0.3, true, nil)
    end
end)
EventBind.MouseButton1Click:Connect(function()
    eventEditor.Frame:TweenPosition(UDim2.new(0.5, -175, 0.5, -101), 'InOut', 'Quart', 0.5, true, nil)
end)
Keybinds.MouseButton1Click:Connect(function()
    KeybindsFrame.TweenPosition(KeybindsFrame, UDim2.new(0, 0, 0, 0), 'InOut', 'Quart', 0.5, true, nil)
    task.wait(0.5)

    SettingsHolder.Visible = false
end)
Close.MouseButton1Click:Connect(function()
    SettingsHolder.Visible = true

    KeybindsFrame.TweenPosition(KeybindsFrame, UDim2.new(0, 0, 0, 175), 'InOut', 'Quart', 0.5, true, nil)
end)
Keybinds.MouseButton1Click:Connect(function()
    KeybindsFrame.TweenPosition(KeybindsFrame, UDim2.new(0, 0, 0, 0), 'InOut', 'Quart', 0.5, true, nil)
    task.wait(0.5)

    SettingsHolder.Visible = false
end)
Add.MouseButton1Click:Connect(function()
    KeybindEditor.TweenPosition(KeybindEditor, UDim2.new(0.5, -180, 0, 260), 'InOut', 'Quart', 0.5, true, nil)
end)
Delete.MouseButton1Click:Connect(function()
    binds = {}

    refreshbinds()
    updatesaves()
    notify('Keybinds Updated', 'Removed all keybinds')
end)
Close_2.MouseButton1Click:Connect(function()
    SettingsHolder.Visible = true

    AliasesFrame.TweenPosition(AliasesFrame, UDim2.new(0, 0, 0, 175), 'InOut', 'Quart', 0.5, true, nil)
end)
Aliases.MouseButton1Click:Connect(function()
    AliasesFrame.TweenPosition(AliasesFrame, UDim2.new(0, 0, 0, 0), 'InOut', 'Quart', 0.5, true, nil)
    task.wait(0.5)

    SettingsHolder.Visible = false
end)
Close_3.MouseButton1Click:Connect(function()
    SettingsHolder.Visible = true

    PositionsFrame.TweenPosition(PositionsFrame, UDim2.new(0, 0, 0, 175), 'InOut', 'Quart', 0.5, true, nil)
end)
Positions.MouseButton1Click:Connect(function()
    PositionsFrame.TweenPosition(PositionsFrame, UDim2.new(0, 0, 0, 0), 'InOut', 'Quart', 0.5, true, nil)
    task.wait(0.5)

    SettingsHolder.Visible = false
end)

local selectionBox = Instance.new('SelectionBox')

selectionBox.Name = randomString()
selectionBox.Color3 = Color3.new(255, 255, 255)
selectionBox.Adornee = nil
selectionBox.Parent = PARENT

local selected = Instance.new('SelectionBox')

selected.Name = randomString()
selected.Color3 = Color3.new(0, 166, 0)
selected.Adornee = nil
selected.Parent = PARENT

local ActivateHighlight
local ClickSelect

selectPart = function()
    ToPartFrame.TweenPosition(ToPartFrame, UDim2.new(0.5, -180, 0, 335), 'InOut', 'Quart', 0.5, true, nil)

    local function HighlightPart()
        if selected.Adornee ~= IYMouse.Target then
            selectionBox.Adornee = IYMouse.Target
        else
            selectionBox.Adornee = nil
        end
    end

    ActivateHighlight = IYMouse.Move:Connect(HighlightPart)

    local function SelectPart()
        if IYMouse.Target ~= nil then
            selected.Adornee = IYMouse.Target
            Path.Text = getHierarchy(IYMouse.Target)
        end
    end

    ClickSelect = IYMouse.Button1Down:Connect(SelectPart)
end

Part.MouseButton1Click:Connect(function()
    selectPart()
end)
Exit_4.MouseButton1Click:Connect(function()
    ToPartFrame.TweenPosition(ToPartFrame, UDim2.new(0.5, -180, 0, -500), 'InOut', 'Quart', 0.5, true, nil)

    if ActivateHighlight then
        ActivateHighlight.Disconnect(ActivateHighlight)
    end
    if ClickSelect then
        ClickSelect.Disconnect(ClickSelect)
    end

    selectionBox.Adornee = nil
    selected.Adornee = nil
    Path.Text = ''
end)
CopyPath.MouseButton1Click:Connect(function()
    if Path.Text ~= '' then
        toClipboard(Path.Text)
    else
        notify('Copy Path', 'Select a part to copy its path')
    end
end)
ChoosePart.MouseButton1Click:Connect(function()
    if Path.Text ~= '' then
        local tpNameExt = ''

        local function handleWpNames()
            local FoundDupe = false

            for i, v in pairs(pWayPoints)do
                if v.NAME:lower() == selected.Adornee.Name:lower() .. tpNameExt then
                    FoundDupe = true
                end
            end

            if not FoundDupe then
                notify('Modified Waypoints', 'Created waypoint: ' .. selected.Adornee.Name .. tpNameExt)

                pWayPoints[#pWayPoints + 1] = {
                    NAME = selected.Adornee.Name .. tpNameExt,
                    COORD = {
                        selected.Adornee,
                    },
                }
            else
                if isNumber(tpNameExt) then
                    tpNameExt = tpNameExt + 1
                else
                    tpNameExt = 1
                end

                handleWpNames()
            end
        end

        handleWpNames()
        refreshwaypoints()
    else
        notify('Part Selection', 'Select a part first')
    end
end)

cmds = {}
customAlias = {}

Delete_3.MouseButton1Click:Connect(function()
    customAlias = {}
    aliases = {}

    notify('Aliases Modified', 'Removed all aliases')
    updatesaves()
    refreshaliases()
end)
PrefixBox.GetPropertyChangedSignal(PrefixBox, 'Text'):Connect(function()
    prefix = PrefixBox.Text
    Cmdbar.PlaceholderText = 'Command Bar (' .. prefix .. ')'

    updatesaves()
end)

CamViewport = function()
    if workspace.CurrentCamera then
        return workspace.CurrentCamera.ViewportSize.X
    end
end
UpdateToViewport = function()
    if Holder.Position.X.Offset < -CamViewport() then
        Holder.TweenPosition(Holder, UDim2.new(1, -CamViewport(), Holder.Position.Y.Scale, Holder.Position.Y.Offset), 'InOut', 'Quart', 0.04, true, nil)
        Notification.TweenPosition(Notification, UDim2.new(1, -CamViewport() + 250, Notification.Position.Y.Scale, Notification.Position.Y.Offset), 'InOut', 'Quart', 0.04, true, nil)
    end
end
CameraChanged = workspace.CurrentCamera:GetPropertyChangedSignal('ViewportSize'):Connect(UpdateToViewport)
updateCamera = function(child, parent)
    if parent ~= workspace then
        CamMoved.Disconnect(CamMoved)
        CameraChanged.Disconnect(CameraChanged)

        repeat
            task.wait()
        until workspace.CurrentCamera

        CameraChanged = workspace.CurrentCamera:GetPropertyChangedSignal('ViewportSize'):Connect(UpdateToViewport)
        CamMoved = workspace.CurrentCamera.AncestryChanged:Connect(updateCamera)
    end
end
CamMoved = workspace.CurrentCamera.AncestryChanged:Connect(updateCamera)
dragMain = function(dragpoint, gui)
    task.spawn(function()
        local dragging
        local dragInput
        local dragStart = Vector3.new(0, 0, 0)
        local startPos

        local function update(input)
            local pos = -250
            local delta = input.Position - dragStart

            if startPos.X.Offset + delta.X <= -500 then
                local Position = UDim2.new(1, -250, Notification.Position.Y.Scale, Notification.Position.Y.Offset)

                TweenService.Create(TweenService, Notification, TweenInfo.new(0.2), {Position = Position}):Play()

                pos = 250
            else
                local Position = UDim2.new(1, -500, Notification.Position.Y.Scale, Notification.Position.Y.Offset)

                TweenService.Create(TweenService, Notification, TweenInfo.new(0.2), {Position = Position}):Play()

                pos = -250
            end
            if startPos.X.Offset + delta.X <= -250 and -CamViewport() <= startPos.X.Offset + delta.X then
                local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, gui.Position.Y.Scale, gui.Position.Y.Offset)

                TweenService.Create(TweenService, gui, TweenInfo.new(0.2), {Position = Position}):Play()

                local Position2 = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X + pos, Notification.Position.Y.Scale, Notification.Position.Y.Offset)

                TweenService.Create(TweenService, Notification, TweenInfo.new(0.2), {Position = Position2}):Play()
            elseif startPos.X.Offset + delta.X > -500 then
                local Position = UDim2.new(1, -250, gui.Position.Y.Scale, gui.Position.Y.Offset)

                TweenService.Create(TweenService, gui, TweenInfo.new(0.2), {Position = Position}):Play()
            elseif -CamViewport() > startPos.X.Offset + delta.X then
                gui.TweenPosition(gui, UDim2.new(1, -CamViewport(), gui.Position.Y.Scale, gui.Position.Y.Offset), 'InOut', 'Quart', 0.04, true, nil)

                local Position = UDim2.new(1, -CamViewport(), gui.Position.Y.Scale, gui.Position.Y.Offset)

                TweenService.Create(TweenService, gui, TweenInfo.new(0.2), {Position = Position}):Play()

                local Position2 = UDim2.new(1, -CamViewport() + 250, Notification.Position.Y.Scale, Notification.Position.Y.Offset)

                TweenService.Create(TweenService, Notification, TweenInfo.new(0.2), {Position = Position2}):Play()
            end
        end

        dragpoint.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = gui.Position

                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        dragpoint.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                update(input)
            end
        end)
    end)
end

dragMain(Title, Holder)

Match = function(name, str)
    str = str.gsub(str, '%W', '%%%1')

    return name.lower(name):find(str.lower(str)) and true
end

local canvasPos = Vector2.new(0, 0)
local topCommand

IndexContents = function(str, bool, cmdbar, Ianim)
    CMDsF.CanvasPosition = Vector2.new(0, 0)

    local SizeY = 0
    local indexnum = 0
    local frame = CMDsF

    topCommand = nil

    local chunks = {}

    if str.sub(str, #str, #str) == '\\' then
        str = ''
    end

    for w in string.gmatch(str, '[^\\]+')do
        table.insert(chunks, w)
    end

    if #chunks > 0 then
        str = chunks[#chunks]
    end
    if str.sub(str, 1, 1) == '!' then
        str = str.sub(str, 2)
    end

    for i, v in next, frame.GetChildren(frame)do
        if v.IsA(v, 'TextButton') then
            if bool then
                if Match(v.Text, str) then
                    indexnum = indexnum + 1
                    v.Visible = true

                    if topCommand == nil then
                        topCommand = v.Text
                    end
                else
                    v.Visible = false
                end
            else
                v.Visible = true

                if topCommand == nil then
                    topCommand = v.Text
                end
            end
        end
    end

    frame.CanvasSize = UDim2.new(0, 0, 0, cmdListLayout.AbsoluteContentSize.Y)

    if not Ianim then
        if indexnum == 0 or string.find(str, ' ') then
            if not cmdbar then
                minimizeHolder()
            elseif cmdbar then
                cmdbarHolder()
            end
        else
            maximizeHolder()
        end
    else
        minimizeHolder()
    end
end

task.spawn(function()
    if not isLegacyChat then
        return
    end

    local chatbox
    local success, result = pcall(function()
        chatbox = PlayerGui.WaitForChild(PlayerGui, 'Chat').Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar
    end)

    if success then
        local function chatboxFocused()
            canvasPos = CMDsF.CanvasPosition
        end

        local chatboxFocusedC = chatbox.Focused:Connect(chatboxFocused)

        local function Index()
            if chatbox.Text:lower():sub(1, 1) == prefix then
                if SettingsOpen == true then
                    task.wait(0.2)

                    CMDsF.Visible = true

                    Settings.TweenPosition(Settings, UDim2.new(0, 0, 0, 220), 'InOut', 'Quart', 0.2, true, nil)
                end

                IndexContents(PlayerGui.Chat.Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar.Text:lower():sub(2), true)
            else
                minimizeHolder()

                if SettingsOpen == true then
                    task.wait(0.2)
                    Settings.TweenPosition(Settings, UDim2.new(0, 0, 0, 45), 'InOut', 'Quart', 0.2, true, nil)

                    CMDsF.Visible = false
                end
            end
        end

        local chatboxFunc = chatbox.GetPropertyChangedSignal(chatbox, 'Text'):Connect(Index)

        local function chatboxFocusLost(enterpressed)
            if not enterpressed or chatbox.Text:lower():sub(1, 1) ~= prefix then
                IndexContents('', true)
            end

            CMDsF.CanvasPosition = canvasPos

            minimizeHolder()
        end

        local chatboxFocusLostC = chatbox.FocusLost:Connect(chatboxFocusLost)

        PlayerGui.WaitForChild(PlayerGui, 'Chat').Frame.ChatBarParentFrame.ChildAdded:Connect(function(
            newbar
        )
            task.wait()

            if newbar.FindFirstChild(newbar, 'BoxFrame') then
                chatbox = PlayerGui.WaitForChild(PlayerGui, 'Chat').Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar

                if chatboxFocusedC then
                    chatboxFocusedC.Disconnect(chatboxFocusedC)
                end

                chatboxFocusedC = chatbox.Focused:Connect(chatboxFocused)

                if chatboxFunc then
                    chatboxFunc.Disconnect(chatboxFunc)
                end

                chatboxFunc = chatbox.GetPropertyChangedSignal(chatbox, 'Text'):Connect(Index)

                if chatboxFocusLostC then
                    chatboxFocusLostC.Disconnect(chatboxFocusLostC)
                end

                chatboxFocusLostC = chatbox.FocusLost:Connect(chatboxFocusLost)
            end
        end)
    end
end)

autoComplete = function(str, curText)
    local endingChar = {
        '[',
        '/',
        '(',
        ' ',
    }
    local stop = 0

    for i = 1, #str do
        local c = str.sub(str, i, i)

        if table.find(endingChar, c) then
            stop = i

            break
        end
    end

    curText = curText or Cmdbar.Text

    local subPos = 0
    local pos = 1
    local findRes = string.find(curText, '\\', pos)

    while findRes do
        subPos = findRes
        pos = findRes + 1
        findRes = string.find(curText, '\\', pos)
    end

    if curText.sub(curText, subPos + 1, subPos + 1) == '!' then
        subPos = subPos + 1
    end

    Cmdbar.Text = curText.sub(curText, 1, subPos) .. str.sub(str, 1, stop - 1) .. ' '

    RunService.RenderStepped:Wait()

    Cmdbar.Text = Cmdbar.Text:gsub('\t', '')
    Cmdbar.CursorPosition = #Cmdbar.Text + 1
end
CMDs = {}
CMDs[#CMDs + 1] = {
    NAME = 'discord / support / help',
    DESC = 'Invite to the Infinite Yield support server.',
}
CMDs[#CMDs + 1] = {
    NAME = 'guiscale [number]',
    DESC = 
[[Changes the size of the gui. [number] accepts both decimals and whole numbers. Min is 0.4 and Max is 2]],
}
CMDs[#CMDs + 1] = {
    NAME = 'console',
    DESC = 'Loads Roblox console',
}
CMDs[#CMDs + 1] = {
    NAME = 'oldconsole',
    DESC = 'Loads old Roblox console',
}
CMDs[#CMDs + 1] = {
    NAME = 'explorer / dex',
    DESC = 'Opens DEX by Moon',
}
CMDs[#CMDs + 1] = {
    NAME = 'olddex / odex',
    DESC = 'Opens Old DEX by Moon',
}
CMDs[#CMDs + 1] = {
    NAME = 'remotespy / rspy',
    DESC = 'Opens Simple Spy V3',
}
CMDs[#CMDs + 1] = {
    NAME = 'audiologger / alogger',
    DESC = 'Opens Edges audio logger',
}
CMDs[#CMDs + 1] = {
    NAME = 'serverinfo / info',
    DESC = 'Gives you info about the server',
}
CMDs[#CMDs + 1] = {
    NAME = 'jobid',
    DESC = 'Copies the games JobId to your clipboard',
}
CMDs[#CMDs + 1] = {
    NAME = 'notifyjobid',
    DESC = 'Notifies you the games JobId',
}
CMDs[#CMDs + 1] = {
    NAME = 'rejoin / rj',
    DESC = 'Makes you rejoin the game',
}
CMDs[#CMDs + 1] = {
    NAME = 'autorejoin / autorj',
    DESC = [[Automatically rejoins the server if you get kicked/disconnected]],
}
CMDs[#CMDs + 1] = {
    NAME = 'serverhop / shop',
    DESC = 'Teleports you to a different server',
}
CMDs[#CMDs + 1] = {
    NAME = 'gameteleport / gametp [place ID]',
    DESC = 'Joins a game by ID',
}
CMDs[#CMDs + 1] = {
    NAME = 'antiidle / antiafk',
    DESC = 'Prevents the game from kicking you for being idle/afk',
}
CMDs[#CMDs + 1] = {
    NAME = 'datalimit [num]',
    DESC = 'Set outgoing KBPS limit',
}
CMDs[#CMDs + 1] = {
    NAME = 'replicationlag / backtrack [num]',
    DESC = 'Set IncomingReplicationLag',
}
CMDs[#CMDs + 1] = {
    NAME = 'creatorid / creator',
    DESC = 'Notifies you the creators ID',
}
CMDs[#CMDs + 1] = {
    NAME = 'copycreatorid / copycreator',
    DESC = 'Copies the creators ID to your clipboard',
}
CMDs[#CMDs + 1] = {
    NAME = 'setcreatorid / setcreator',
    DESC = 'Sets your userid to the creators ID',
}
CMDs[#CMDs + 1] = {
    NAME = 'noprompts',
    DESC = 'Prevents the game from showing you purchase/premium prompts',
}
CMDs[#CMDs + 1] = {
    NAME = 'showprompts',
    DESC = 'Allows the game to show purchase/premium prompts again',
}
CMDs[#CMDs + 1] = {
    NAME = 'enable [inventory/playerlist/chat/reset/emotes/all]',
    DESC = 'Toggles visibility of coregui items',
}
CMDs[#CMDs + 1] = {
    NAME = 'disable [inventory/playerlist/chat/reset/emotes/all]',
    DESC = 'Toggles visibility of coregui items',
}
CMDs[#CMDs + 1] = {
    NAME = 'showguis',
    DESC = 'Shows any invisible GUIs',
}
CMDs[#CMDs + 1] = {
    NAME = 'unshowguis',
    DESC = 'Undoes showguis',
}
CMDs[#CMDs + 1] = {
    NAME = 'hideguis',
    DESC = 'Hides any GUIs in PlayerGui',
}
CMDs[#CMDs + 1] = {
    NAME = 'unhideguis',
    DESC = 'Undoes hideguis',
}
CMDs[#CMDs + 1] = {
    NAME = 'guidelete',
    DESC = 'Enables backspace to delete GUI',
}
CMDs[#CMDs + 1] = {
    NAME = 'unguidelete / noguidelete',
    DESC = 'Disables guidelete',
}
CMDs[#CMDs + 1] = {
    NAME = 'hideiy',
    DESC = 'Hides the main IY GUI',
}
CMDs[#CMDs + 1] = {
    NAME = 'showiy / unhideiy',
    DESC = 'Shows IY again',
}
CMDs[#CMDs + 1] = {
    NAME = 'keepiy',
    DESC = 'Auto execute IY when you teleport through servers',
}
CMDs[#CMDs + 1] = {
    NAME = 'unkeepiy',
    DESC = 'Disable keepiy',
}
CMDs[#CMDs + 1] = {
    NAME = 'togglekeepiy',
    DESC = 'Toggles keepiy',
}
CMDs[#CMDs + 1] = {
    NAME = 'savegame / saveplace',
    DESC = 'Uses saveinstance to save the game',
}
CMDs[#CMDs + 1] = {
    NAME = 'clearerror',
    DESC = 'Clears the annoying box and blur when a game kicks you',
}
CMDs[#CMDs + 1] = {
    NAME = 'clientantikick / antikick (CLIENT)',
    DESC = 'Prevents localscripts from kicking you',
}
CMDs[#CMDs + 1] = {
    NAME = 'clientantiteleport / antiteleport (CLIENT)',
    DESC = 'Prevents localscripts from teleporting you',
}
CMDs[#CMDs + 1] = {
    NAME = 'allowrejoin / allowrj [true/false] (CLIENT)',
    DESC = 'Changes if antiteleport allows you to rejoin or not',
}
CMDs[#CMDs + 1] = {
    NAME = 'cancelteleport / canceltp',
    DESC = 'Cancels teleports in progress',
}
CMDs[#CMDs + 1] = {
    NAME = 'volume / vol [0-10]',
    DESC = 'Adjusts your game volume on a scale of 0 to 10',
}
CMDs[#CMDs + 1] = {
    NAME = 'antilag / boostfps / lowgraphics',
    DESC = 'Lowers game quality to boost FPS',
}
CMDs[#CMDs + 1] = {
    NAME = 'record / rec',
    DESC = 'Starts Roblox recorder',
}
CMDs[#CMDs + 1] = {
    NAME = 'screenshot / scrnshot',
    DESC = 'Takes a screenshot',
}
CMDs[#CMDs + 1] = {
    NAME = 'togglefullscreen / togglefs',
    DESC = 'Toggles fullscreen',
}
CMDs[#CMDs + 1] = {
    NAME = 'notify [text]',
    DESC = 'Sends you a notification with the provided text',
}
CMDs[#CMDs + 1] = {
    NAME = 'lastcommand / lastcmd',
    DESC = 'Executes the previous command used',
}
CMDs[#CMDs + 1] = {
    NAME = 'exit',
    DESC = 'Kills roblox process',
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'noclip',
    DESC = 'Go through objects',
}
CMDs[#CMDs + 1] = {
    NAME = 'unnoclip / clip',
    DESC = 'Disables noclip',
}
CMDs[#CMDs + 1] = {
    NAME = 'fly [speed]',
    DESC = 'Makes you fly',
}
CMDs[#CMDs + 1] = {
    NAME = 'unfly',
    DESC = 'Disables fly',
}
CMDs[#CMDs + 1] = {
    NAME = 'flyspeed [num]',
    DESC = 'Set fly speed (default is 20)',
}
CMDs[#CMDs + 1] = {
    NAME = 'vehiclefly / vfly [speed]',
    DESC = 'Makes you fly in a vehicle',
}
CMDs[#CMDs + 1] = {
    NAME = 'unvehiclefly / unvfly',
    DESC = 'Disables vehicle fly',
}
CMDs[#CMDs + 1] = {
    NAME = 'vehicleflyspeed  / vflyspeed [num]',
    DESC = 'Set vehicle fly speed',
}
CMDs[#CMDs + 1] = {
    NAME = 'cframefly / cfly [speed]',
    DESC = 'Makes you fly, bypassing some anti cheats (works on mobile)',
}
CMDs[#CMDs + 1] = {
    NAME = 'uncframefly / uncfly',
    DESC = 'Disables cfly',
}
CMDs[#CMDs + 1] = {
    NAME = 'cframeflyspeed  / cflyspeed [num]',
    DESC = 'Sets cfly speed',
}
CMDs[#CMDs + 1] = {
    NAME = 'qefly [true / false]',
    DESC = 'Enables or disables the Q and E hotkeys for fly',
}
CMDs[#CMDs + 1] = {
    NAME = 'vehiclenoclip / vnoclip',
    DESC = 'Turns off vehicle collision',
}
CMDs[#CMDs + 1] = {
    NAME = 'vehicleclip / vclip / unvnoclip',
    DESC = 'Enables vehicle collision',
}
CMDs[#CMDs + 1] = {
    NAME = 'float /  platform',
    DESC = 'Spawns a platform beneath you causing you to float',
}
CMDs[#CMDs + 1] = {
    NAME = 'unfloat / noplatform',
    DESC = 'Removes the platform',
}
CMDs[#CMDs + 1] = {
    NAME = 'swim',
    DESC = 'Allows you to swim in the air',
}
CMDs[#CMDs + 1] = {
    NAME = 'unswim / noswim',
    DESC = 'Stops you from swimming everywhere',
}
CMDs[#CMDs + 1] = {
    NAME = 'toggleswim',
    DESC = 'Toggles swimming',
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'setwaypoint / swp [name]',
    DESC = 'Sets a waypoint at your position',
}
CMDs[#CMDs + 1] = {
    NAME = 'waypointpos / wpp [name] [X Y Z]',
    DESC = 'Sets a waypoint with specified coordinates',
}
CMDs[#CMDs + 1] = {
    NAME = 'waypoints',
    DESC = 'Shows a list of currently active waypoints',
}
CMDs[#CMDs + 1] = {
    NAME = 'showwaypoints / showwp',
    DESC = 'Shows all currently set waypoints',
}
CMDs[#CMDs + 1] = {
    NAME = 'hidewaypoints / hidewp',
    DESC = 'Hides shown waypoints',
}
CMDs[#CMDs + 1] = {
    NAME = 'waypoint / wp [name]',
    DESC = 'Teleports player to a waypoint',
}
CMDs[#CMDs + 1] = {
    NAME = 'tweenwaypoint / twp [name]',
    DESC = 'Tweens player to a waypoint',
}
CMDs[#CMDs + 1] = {
    NAME = 'walktowaypoint / wtwp [name]',
    DESC = 'Walks player to a waypoint',
}
CMDs[#CMDs + 1] = {
    NAME = 'deletewaypoint / dwp [name]',
    DESC = 'Deletes a waypoint',
}
CMDs[#CMDs + 1] = {
    NAME = 'clearwaypoints / cwp',
    DESC = 'Clears all waypoints',
}
CMDs[#CMDs + 1] = {
    NAME = 'cleargamewaypoints / cgamewp',
    DESC = 'Clears all waypoints for the game you are in',
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'goto [player]',
    DESC = 'Go to a player',
}
CMDs[#CMDs + 1] = {
    NAME = 'tweengoto / tgoto [player]',
    DESC = 'Tween to a player (bypasses some anti cheats)',
}
CMDs[#CMDs + 1] = {
    NAME = 'tweenspeed / tspeed [num]',
    DESC = 'Sets how fast all tween commands go (default is 1)',
}
CMDs[#CMDs + 1] = {
    NAME = 'vehiclegoto / vgoto [player]',
    DESC = 'Go to a player while in a vehicle',
}
CMDs[#CMDs + 1] = {
    NAME = 'loopgoto [player] [distance] [delay]',
    DESC = 'Loop teleport to a player',
}
CMDs[#CMDs + 1] = {
    NAME = 'unloopgoto',
    DESC = 'Stops teleporting you to a player',
}
CMDs[#CMDs + 1] = {
    NAME = 'pulsetp / ptp [player] [seconds]',
    DESC = 'Teleports you to a player for a specified amount of time',
}
CMDs[#CMDs + 1] = {
    NAME = 'clientbring / cbring [player] (CLIENT)',
    DESC = 'Bring a player',
}
CMDs[#CMDs + 1] = {
    NAME = 'loopbring [player] [distance] [delay] (CLIENT)',
    DESC = 'Loop brings a player to you (useful for killing)',
}
CMDs[#CMDs + 1] = {
    NAME = 'unloopbring [player]',
    DESC = 'Undoes loopbring',
}
CMDs[#CMDs + 1] = {
    NAME = 'freeze / fr [player] (CLIENT)',
    DESC = 'Freezes a player',
}
CMDs[#CMDs + 1] = {
    NAME = 'freezeanims',
    DESC = 
[[Freezes your animations / pauses your animations - Does not work on default animations]],
}
CMDs[#CMDs + 1] = {
    NAME = 'unfreezeanims',
    DESC = 'Unfreezes your animations / plays your animations',
}
CMDs[#CMDs + 1] = {
    NAME = 'thaw / unfr [player] (CLIENT)',
    DESC = 'Unfreezes a player',
}
CMDs[#CMDs + 1] = {
    NAME = 'tpposition / tppos [X Y Z]',
    DESC = 'Teleports you to certain coordinates',
}
CMDs[#CMDs + 1] = {
    NAME = 'tweentpposition / ttppos [X Y Z]',
    DESC = 'Tween to coordinates (bypasses some anti cheats)',
}
CMDs[#CMDs + 1] = {
    NAME = 'offset [X Y Z]',
    DESC = 'Offsets you by certain coordinates',
}
CMDs[#CMDs + 1] = {
    NAME = 'tweenoffset / toffset [X Y Z]',
    DESC = 'Tween offset (bypasses some anti cheats)',
}
CMDs[#CMDs + 1] = {
    NAME = 'notifyposition / notifypos [player]',
    DESC = 'Notifies you the coordinates of a character',
}
CMDs[#CMDs + 1] = {
    NAME = 'copyposition / copypos [player]',
    DESC = 'Copies the coordinates of a character to your clipboard',
}
CMDs[#CMDs + 1] = {
    NAME = 'walktoposition / walktopos [X Y Z]',
    DESC = 'Makes you walk to a coordinate',
}
CMDs[#CMDs + 1] = {
    NAME = 'spawnpoint / spawn [delay]',
    DESC = 'Sets a position where you will spawn',
}
CMDs[#CMDs + 1] = {
    NAME = 'nospawnpoint / nospawn',
    DESC = 'Removes your custom spawn point',
}
CMDs[#CMDs + 1] = {
    NAME = 'flashback / diedtp',
    DESC = 'Teleports you to where you last died',
}
CMDs[#CMDs + 1] = {
    NAME = 'walltp',
    DESC = 'Teleports you above/over any wall you run into',
}
CMDs[#CMDs + 1] = {
    NAME = 'nowalltp / unwalltp',
    DESC = 'Disables walltp',
}
CMDs[#CMDs + 1] = {
    NAME = 'teleporttool / tptool',
    DESC = 'Gives you a teleport tool',
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'logs',
    DESC = 'Opens the logs GUI',
}
CMDs[#CMDs + 1] = {
    NAME = 'chatlogs / clogs',
    DESC = 'Log what people say or whisper',
}
CMDs[#CMDs + 1] = {
    NAME = 'joinlogs / jlogs',
    DESC = 'Log when people join',
}
CMDs[#CMDs + 1] = {
    NAME = 'chatlogswebhook / logswebhook [url]',
    DESC = 
[[Set a discord webhook for chatlogs to go to (provide no url to disable this)]],
}
CMDs[#CMDs + 1] = {
    NAME = 'antichatlogs / antichatlogger',
    DESC = 
[[Prevents Roblox from banning you for your silly chat messages (game needs the legacy chat)]],
}
CMDs[#CMDs + 1] = {
    NAME = 'chat / say [text]',
    DESC = 'Makes you chat a string (possible mute bypass)',
}
CMDs[#CMDs + 1] = {
    NAME = 'spam [text]',
    DESC = 'Makes you spam the chat',
}
CMDs[#CMDs + 1] = {
    NAME = 'unspam',
    DESC = 'Turns off spam',
}
CMDs[#CMDs + 1] = {
    NAME = 'whisper / pm [player] [text]',
    DESC = [[Makes you whisper a string to someone (possible mute bypass)]],
}
CMDs[#CMDs + 1] = {
    NAME = 'pmspam [player] [text]',
    DESC = 'Makes you spam a players whispers',
}
CMDs[#CMDs + 1] = {
    NAME = 'unpmspam [player]',
    DESC = 'Turns off pm spam',
}
CMDs[#CMDs + 1] = {
    NAME = 'spamspeed [num]',
    DESC = 'How quickly you spam (default is 1)',
}
CMDs[#CMDs + 1] = {
    NAME = 'bubblechat (CLIENT)',
    DESC = 'Enables bubble chat for your client',
}
CMDs[#CMDs + 1] = {
    NAME = 'unbubblechat / nobubblechat',
    DESC = 'Disables the bubblechat command',
}
CMDs[#CMDs + 1] = {
    NAME = 'chatwindow',
    DESC = 'Enables the chat window for your client',
}
CMDs[#CMDs + 1] = {
    NAME = 'unchatwindow / nochatwindow',
    DESC = 'Disables the chat window for your client',
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'esp',
    DESC = 'View all players and their status',
}
CMDs[#CMDs + 1] = {
    NAME = 'espteam',
    DESC = 'ESP but teammates are green and bad guys are red',
}
CMDs[#CMDs + 1] = {
    NAME = 'noesp / unesp / unespteam',
    DESC = 'Removes ESP',
}
CMDs[#CMDs + 1] = {
    NAME = 'esptransparency [number]',
    DESC = 'Changes the transparency of ESP related commands',
}
CMDs[#CMDs + 1] = {
    NAME = 'partesp [part name]',
    DESC = 'Highlights a part',
}
CMDs[#CMDs + 1] = {
    NAME = 'unpartesp / nopartesp [part name]',
    DESC = 'removes partesp',
}
CMDs[#CMDs + 1] = {
    NAME = 'chams',
    DESC = 'ESP but without text in the way',
}
CMDs[#CMDs + 1] = {
    NAME = 'nochams / unchams',
    DESC = 'Removes chams',
}
CMDs[#CMDs + 1] = {
    NAME = 'locate [player]',
    DESC = 'View a single player and their status',
}
CMDs[#CMDs + 1] = {
    NAME = 'unlocate / nolocate [player]',
    DESC = 'Removes locate',
}
CMDs[#CMDs + 1] = {
    NAME = 'xray',
    DESC = 'Makes all parts in workspace transparent',
}
CMDs[#CMDs + 1] = {
    NAME = 'unxray / noxray',
    DESC = 'Restores transparency to all parts in workspace',
}
CMDs[#CMDs + 1] = {
    NAME = 'loopxray',
    DESC = 'Makes all parts in workspace transparent but looped',
}
CMDs[#CMDs + 1] = {
    NAME = 'unloopxray',
    DESC = 'Unloops xray',
}
CMDs[#CMDs + 1] = {
    NAME = 'togglexray',
    DESC = 'Toggles xray',
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'spectate / view [player]',
    DESC = 'View a player',
}
CMDs[#CMDs + 1] = {
    NAME = 'viewpart / viewp [part name]',
    DESC = 'View a part',
}
CMDs[#CMDs + 1] = {
    NAME = 'unspectate / unview',
    DESC = 'Stops viewing player',
}
CMDs[#CMDs + 1] = {
    NAME = 'freecam / fc',
    DESC = 'Allows you to freely move camera around the game',
}
CMDs[#CMDs + 1] = {
    NAME = 'freecampos / fcpos [X Y Z]',
    DESC = 'Moves / opens freecam in a certain position',
}
CMDs[#CMDs + 1] = {
    NAME = 'freecamwaypoint / fcwp [name]',
    DESC = 'Moves / opens freecam to a waypoint',
}
CMDs[#CMDs + 1] = {
    NAME = 'freecamgoto / fcgoto / fctp [player]',
    DESC = 'Moves / opens freecam to a player',
}
CMDs[#CMDs + 1] = {
    NAME = 'unfreecam / unfc',
    DESC = 'Disables freecam',
}
CMDs[#CMDs + 1] = {
    NAME = 'freecamspeed / fcspeed [num]',
    DESC = 'Adjusts freecam speed (default is 1)',
}
CMDs[#CMDs + 1] = {
    NAME = 'notifyfreecamposition / notifyfcpos',
    DESC = 'Noitifies you your freecam coordinates',
}
CMDs[#CMDs + 1] = {
    NAME = 'copyfreecamposition / copyfcpos',
    DESC = 'Copies your freecam coordinates to your clipboard',
}
CMDs[#CMDs + 1] = {
    NAME = 'gotocamera / gotocam',
    DESC = 'Teleports you to the location of your camera',
}
CMDs[#CMDs + 1] = {
    NAME = 'tweengotocam / tgotocam',
    DESC = 'Tweens you to the location of your camera',
}
CMDs[#CMDs + 1] = {
    NAME = 'firstp',
    DESC = 'Forces camera to go into first person',
}
CMDs[#CMDs + 1] = {
    NAME = 'thirdp',
    DESC = 'Allows camera to go into third person',
}
CMDs[#CMDs + 1] = {
    NAME = 'noclipcam / nccam',
    DESC = 'Allows camera to go through objects like walls',
}
CMDs[#CMDs + 1] = {
    NAME = 'maxzoom [num]',
    DESC = 'Maximum camera zoom',
}
CMDs[#CMDs + 1] = {
    NAME = 'minzoom [num]',
    DESC = 'Minimum camera zoom',
}
CMDs[#CMDs + 1] = {
    NAME = 'camdistance [num]',
    DESC = 'Changes camera distance from your player',
}
CMDs[#CMDs + 1] = {
    NAME = 'fov [num]',
    DESC = 'Adjusts field of view (default is 70)',
}
CMDs[#CMDs + 1] = {
    NAME = 'fixcam / restorecam',
    DESC = 'Fixes camera',
}
CMDs[#CMDs + 1] = {
    NAME = 'enableshiftlock / enablesl',
    DESC = 'Enables the shift lock option',
}
CMDs[#CMDs + 1] = {
    NAME = 'lookat [player]',
    DESC = 'Moves your camera view to a player',
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'btools (CLIENT)',
    DESC = 'Gives you building tools (DOES NOT REPLICATE)',
}
CMDs[#CMDs + 1] = {
    NAME = 'f3x (CLIENT)',
    DESC = 'Gives you F3X building tools (DOES NOT REPLICATE)',
}
CMDs[#CMDs + 1] = {
    NAME = 'partname / partpath',
    DESC = 'Allows you to click a part to see its path & name',
}
CMDs[#CMDs + 1] = {
    NAME = 'delete [instance name] (CLIENT)',
    DESC = 
[[Removes any part with a certain name from the workspace (DOES NOT REPLICATE)]],
}
CMDs[#CMDs + 1] = {
    NAME = 'deleteclass / dc [class name] (CLIENT)',
    DESC = 
[[Removes any part with a certain classname from the workspace (DOES NOT REPLICATE)]],
}
CMDs[#CMDs + 1] = {
    NAME = 'lockworkspace / lockws',
    DESC = 'Locks the whole workspace',
}
CMDs[#CMDs + 1] = {
    NAME = 'unlockworkspace / unlockws',
    DESC = 'Unlocks the whole workspace',
}
CMDs[#CMDs + 1] = {
    NAME = 'invisibleparts / invisparts (CLIENT)',
    DESC = 'Shows invisible parts',
}
CMDs[#CMDs + 1] = {
    NAME = 'uninvisibleparts / uninvisparts (CLIENT)',
    DESC = 'Makes parts affected by invisparts return to normal',
}
CMDs[#CMDs + 1] = {
    NAME = 'deleteinvisparts / dip (CLIENT)',
    DESC = 'Deletes invisible parts',
}
CMDs[#CMDs + 1] = {
    NAME = 'gotopart [part name]',
    DESC = 'Moves your character to a part or multiple parts',
}
CMDs[#CMDs + 1] = {
    NAME = 'tweengotopart / tgotopart [part name]',
    DESC = 'Tweens your character to a part or multiple parts',
}
CMDs[#CMDs + 1] = {
    NAME = 'gotopartclass / gpc [class name]',
    DESC = 
[[Moves your character to a part or multiple parts based on classname]],
}
CMDs[#CMDs + 1] = {
    NAME = 'tweengotopartclass / tgpc [class name]',
    DESC = 
[[Tweens your character to a part or multiple parts based on classname]],
}
CMDs[#CMDs + 1] = {
    NAME = 'gotomodel [part name]',
    DESC = 'Moves your character to a model or multiple models',
}
CMDs[#CMDs + 1] = {
    NAME = 'tweengotomodel / tgotomodel [part name]',
    DESC = 'Tweens your character to a model or multiple models',
}
CMDs[#CMDs + 1] = {
    NAME = 'gotopartdelay / gotomodeldelay [num]',
    DESC = [[Adjusts how quickly you teleport to each part (default is 0.1)]],
}
CMDs[#CMDs + 1] = {
    NAME = 'bringpart [part name] (CLIENT)',
    DESC = 'Moves a part or multiple parts to your character',
}
CMDs[#CMDs + 1] = {
    NAME = 'bringpartclass / bpc [class name] (CLIENT)',
    DESC = 
[[Moves a part or multiple parts to your character based on classname]],
}
CMDs[#CMDs + 1] = {
    NAME = 'noclickdetectorlimits / nocdlimits',
    DESC = 'Sets all click detectors MaxActivationDistance to math.huge',
}
CMDs[#CMDs + 1] = {
    NAME = 'fireclickdetectors / firecd [name]',
    DESC = [[Uses all click detectors in a game or uses the optional name]],
}
CMDs[#CMDs + 1] = {
    NAME = 'firetouchinterests / touchinterests [name]',
    DESC = 'Uses all touchinterests in a game or uses the optional name',
}
CMDs[#CMDs + 1] = {
    NAME = 'noproximitypromptlimits / nopplimits',
    DESC = [[Sets all proximity prompts MaxActivationDistance to math.huge]],
}
CMDs[#CMDs + 1] = {
    NAME = 'fireproximityprompts / firepp [name]',
    DESC = [[Uses all proximity prompts in a game or uses the optional name]],
}
CMDs[#CMDs + 1] = {
    NAME = 'instantproximityprompts / instantpp',
    DESC = 'Disable the cooldown for proximity prompts',
}
CMDs[#CMDs + 1] = {
    NAME = 'uninstantproximityprompts / uninstantpp',
    DESC = 'Undo the cooldown removal',
}
CMDs[#CMDs + 1] = {
    NAME = 'tpunanchored / tpua [player]',
    DESC = 'Teleports unanchored parts to a player',
}
CMDs[#CMDs + 1] = {
    NAME = 'animsunanchored / freezeua',
    DESC = 'Freezes unanchored parts',
}
CMDs[#CMDs + 1] = {
    NAME = 'thawunanchored / thawua / unfreezeua',
    DESC = 'Thaws unanchored parts',
}
CMDs[#CMDs + 1] = {
    NAME = 'removeterrain / rterrain / noterrain',
    DESC = 'Removes all terrain',
}
CMDs[#CMDs + 1] = {
    NAME = 'clearnilinstances / nonilinstances / cni',
    DESC = 'Removes nil instances',
}
CMDs[#CMDs + 1] = {
    NAME = 'destroyheight / dh [num]',
    DESC = 'Sets FallenPartsDestroyHeight',
}
CMDs[#CMDs + 1] = {
    NAME = 'fakeout',
    DESC = 
[[Tp to the void and then back (useful to kill people attached to you)]],
}
CMDs[#CMDs + 1] = {
    NAME = 'antivoid',
    DESC = [[Prevents you from falling into the void by launching you upwards]],
}
CMDs[#CMDs + 1] = {
    NAME = 'unantivoid / noantivoid',
    DESC = 'Disables antivoid',
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'fullbright / fb (CLIENT)',
    DESC = 'Makes the map brighter / more visible',
}
CMDs[#CMDs + 1] = {
    NAME = 'loopfullbright / loopfb (CLIENT)',
    DESC = 'Makes the map brighter / more visible but looped',
}
CMDs[#CMDs + 1] = {
    NAME = 'unloopfullbright / unloopfb',
    DESC = 'Unloops fullbright',
}
CMDs[#CMDs + 1] = {
    NAME = 'ambient [num] [num] [num] (CLIENT)',
    DESC = 'Changes ambient',
}
CMDs[#CMDs + 1] = {
    NAME = 'day (CLIENT)',
    DESC = 'Changes the time to day for the client',
}
CMDs[#CMDs + 1] = {
    NAME = 'night (CLIENT)',
    DESC = 'Changes the time to night for the client',
}
CMDs[#CMDs + 1] = {
    NAME = 'nofog (CLIENT)',
    DESC = 'Removes fog',
}
CMDs[#CMDs + 1] = {
    NAME = 'brightness [num] (CLIENT)',
    DESC = 'Changes the brightness lighting property',
}
CMDs[#CMDs + 1] = {
    NAME = 'globalshadows / gshadows (CLIENT)',
    DESC = 'Enables global shadows',
}
CMDs[#CMDs + 1] = {
    NAME = 'noglobalshadows / nogshadows (CLIENT)',
    DESC = 'Disables global shadows',
}
CMDs[#CMDs + 1] = {
    NAME = 'restorelighting / rlighting',
    DESC = 'Restores Lighting properties',
}
CMDs[#CMDs + 1] = {
    NAME = 'light [radius] [brightness] (CLIENT)',
    DESC = 'Gives your player dynamic light',
}
CMDs[#CMDs + 1] = {
    NAME = 'nolight / unlight',
    DESC = 'Removes dynamic light from your player',
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'inspect / examine [player]',
    DESC = 'Opens InspectMenu for a certain player',
}
CMDs[#CMDs + 1] = {
    NAME = 'age [player]',
    DESC = 'Tells you the age of a player',
}
CMDs[#CMDs + 1] = {
    NAME = 'chatage [player]',
    DESC = 'Chats the age of a player',
}
CMDs[#CMDs + 1] = {
    NAME = 'joindate / jd [player]',
    DESC = 'Tells you the date the player joined Roblox',
}
CMDs[#CMDs + 1] = {
    NAME = 'chatjoindate / cjd [player]',
    DESC = 'Chats the date the player joined Roblox',
}
CMDs[#CMDs + 1] = {
    NAME = 'copyname / copyuser [player]',
    DESC = 'Copies a players full username to your clipboard',
}
CMDs[#CMDs + 1] = {
    NAME = 'userid / id [player]',
    DESC = 'Notifies a players user ID',
}
CMDs[#CMDs + 1] = {
    NAME = 'copyplaceid / placeid',
    DESC = 'Copies the current place id to your clipboard',
}
CMDs[#CMDs + 1] = {
    NAME = 'copygameid / gameid',
    DESC = 'Copies the current game id to your clipboard',
}
CMDs[#CMDs + 1] = {
    NAME = 'copyuserid / copyid [player]',
    DESC = 'Copies a players user ID to your clipboard',
}
CMDs[#CMDs + 1] = {
    NAME = 'appearanceid / aid [player]',
    DESC = 'Notifies a players appearance ID',
}
CMDs[#CMDs + 1] = {
    NAME = 'copyappearanceid / caid [player]',
    DESC = 'Copies a players appearance ID to your clipboard',
}
CMDs[#CMDs + 1] = {
    NAME = 'bang [player] [speed]',
    DESC = 'owo',
}
CMDs[#CMDs + 1] = {
    NAME = 'unbang',
    DESC = 'uwu',
}
CMDs[#CMDs + 1] = {
    NAME = 'carpet [player]',
    DESC = 'Be someones carpet',
}
CMDs[#CMDs + 1] = {
    NAME = 'uncarpet',
    DESC = 'Undoes carpet',
}
CMDs[#CMDs + 1] = {
    NAME = 'friend [player]',
    DESC = 'Sends a friend request to certain players',
}
CMDs[#CMDs + 1] = {
    NAME = 'unfriend [player]',
    DESC = 'Unfriends certain players',
}
CMDs[#CMDs + 1] = {
    NAME = 'headsit [player]',
    DESC = 'Sit on a players head',
}
CMDs[#CMDs + 1] = {
    NAME = 'walkto / follow [player]',
    DESC = 'Follow a player',
}
CMDs[#CMDs + 1] = {
    NAME = 'pathfindwalkto / pathfindfollow [player]',
    DESC = 'Follow a player using pathfinding',
}
CMDs[#CMDs + 1] = {
    NAME = 'pathfindwalktowaypoint / pathfindwalktowp [waypoint]',
    DESC = 'Walk to a waypoint using pathfinding',
}
CMDs[#CMDs + 1] = {
    NAME = 'unwalkto / unfollow',
    DESC = 'Stops following a player',
}
CMDs[#CMDs + 1] = {
    NAME = 'orbit [player] [speed] [distance]',
    DESC = 
[[Makes your character orbit around a player with an optional speed and an optional distance]],
}
CMDs[#CMDs + 1] = {
    NAME = 'unorbit',
    DESC = 'Disables orbit',
}
CMDs[#CMDs + 1] = {
    NAME = 'stareat / stare [player]',
    DESC = 'Stare / look at a player',
}
CMDs[#CMDs + 1] = {
    NAME = 'unstareat / unstare [player]',
    DESC = 'Disables stareat',
}
CMDs[#CMDs + 1] = {
    NAME = 'rolewatch [group id] [role name]',
    DESC = 'Notify if someone from a watched group joins the server',
}
CMDs[#CMDs + 1] = {
    NAME = 'rolewatchstop / unrolewatch',
    DESC = 'Disable Rolewatch',
}
CMDs[#CMDs + 1] = {
    NAME = 'rolewatchleave',
    DESC = 
[[Toggle if you should leave the game if someone from a watched group joins the server]],
}
CMDs[#CMDs + 1] = {
    NAME = 'staffwatch',
    DESC = 'Notify if a staff member of the game joins the server',
}
CMDs[#CMDs + 1] = {
    NAME = 'unstaffwatch',
    DESC = 'Disable Staffwatch',
}
CMDs[#CMDs + 1] = {
    NAME = 'handlekill / hkill [player] [radius] (TOOL)',
    DESC = 'Kills a player using tool damage (YOU NEED A TOOL)',
}
CMDs[#CMDs + 1] = {
    NAME = 'fling',
    DESC = 'Flings anyone you touch',
}
CMDs[#CMDs + 1] = {
    NAME = 'unfling',
    DESC = 'Disables the fling command',
}
CMDs[#CMDs + 1] = {
    NAME = 'flyfling [speed]',
    DESC = 'Basically the invisfling command but not invisible',
}
CMDs[#CMDs + 1] = {
    NAME = 'unflyfling',
    DESC = 'Disables the flyfling command',
}
CMDs[#CMDs + 1] = {
    NAME = 'walkfling',
    DESC = 'Basically fling but no spinning',
}
CMDs[#CMDs + 1] = {
    NAME = 'unwalkfling / nowalkfling',
    DESC = 'Disables walkfling',
}
CMDs[#CMDs + 1] = {
    NAME = 'invisfling',
    DESC = 
[[Enables invisible fling (the invis part is patched, try using the god command before using this)]],
}
CMDs[#CMDs + 1] = {
    NAME = 'antifling',
    DESC = 'Disables player collisions to prevent you from being flung',
}
CMDs[#CMDs + 1] = {
    NAME = 'unantifling',
    DESC = 'Disables antifling',
}
CMDs[#CMDs + 1] = {
    NAME = 'loopoof',
    DESC = 'Loops everyones character sounds (everyone can hear)',
}
CMDs[#CMDs + 1] = {
    NAME = 'unloopoof',
    DESC = 'Stops the oof chaos',
}
CMDs[#CMDs + 1] = {
    NAME = 'muteboombox [player]',
    DESC = 'Mutes someones boombox',
}
CMDs[#CMDs + 1] = {
    NAME = 'unmuteboombox [player]',
    DESC = 'Unmutes someones boombox',
}
CMDs[#CMDs + 1] = {
    NAME = 'hitbox [player] [size] [transparency]',
    DESC = [[Expands the hitbox for players HumanoidRootPart (default is 1)]],
}
CMDs[#CMDs + 1] = {
    NAME = 'headsize [player] [size]',
    DESC = 'Expands the head size for players Head (default is 1)',
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'reset',
    DESC = 'Resets your character normally',
}
CMDs[#CMDs + 1] = {
    NAME = 'respawn',
    DESC = 'Respawns you',
}
CMDs[#CMDs + 1] = {
    NAME = 'refresh / re',
    DESC = 'Respawns and brings you back to the same position',
}
CMDs[#CMDs + 1] = {
    NAME = 'god',
    DESC = 'Makes your character difficult to kill in most games',
}
CMDs[#CMDs + 1] = {
    NAME = 'permadeath',
    DESC = 'Makes you unable to respawn after death',
}
CMDs[#CMDs + 1] = {
    NAME = 'invisible / invis',
    DESC = 'Makes you invisible to other players',
}
CMDs[#CMDs + 1] = {
    NAME = 'visible / vis',
    DESC = 'Makes you visible to other players',
}
CMDs[#CMDs + 1] = {
    NAME = 'toolinvisible / toolinvis / tinvis',
    DESC = 'Makes you invisible to other players and able to use tools',
}
CMDs[#CMDs + 1] = {
    NAME = 'speed / ws / walkspeed [num]',
    DESC = 'Change your walkspeed (default is 16)',
}
CMDs[#CMDs + 1] = {
    NAME = 'spoofspeed / spoofws [num]',
    DESC = 'Spoofs your WalkSpeed on the Client',
}
CMDs[#CMDs + 1] = {
    NAME = 'loopspeed / loopws [num]',
    DESC = 'Loops your walkspeed',
}
CMDs[#CMDs + 1] = {
    NAME = 'unloopspeed / unloopws',
    DESC = 'Turns off loopspeed',
}
CMDs[#CMDs + 1] = {
    NAME = 'hipheight / hheight [num]',
    DESC = 'Adjusts hip height',
}
CMDs[#CMDs + 1] = {
    NAME = 'jumppower / jpower / jp [num]',
    DESC = 'Change a players jump height (default is 50)',
}
CMDs[#CMDs + 1] = {
    NAME = 'spoofjumppower / spoofjp [num]',
    DESC = 'Spoofs your JumpPower on the Client',
}
CMDs[#CMDs + 1] = {
    NAME = 'loopjumppower / loopjp [num]',
    DESC = 'Loops your jump height',
}
CMDs[#CMDs + 1] = {
    NAME = 'unloopjumppower / unloopjp',
    DESC = 'Turns off loopjumppower',
}
CMDs[#CMDs + 1] = {
    NAME = 'maxslopeangle / msa [num]',
    DESC = 'Adjusts MaxSlopeAngle',
}
CMDs[#CMDs + 1] = {
    NAME = 'gravity / grav [num] (CLIENT)',
    DESC = 'Change your gravity',
}
CMDs[#CMDs + 1] = {
    NAME = 'sit',
    DESC = 'Makes your character sit',
}
CMDs[#CMDs + 1] = {
    NAME = 'lay / laydown',
    DESC = 'Makes your character lay down',
}
CMDs[#CMDs + 1] = {
    NAME = 'sitwalk',
    DESC = 'Makes your character sit while still being able to walk',
}
CMDs[#CMDs + 1] = {
    NAME = 'nosit',
    DESC = 'Prevents your character from sitting',
}
CMDs[#CMDs + 1] = {
    NAME = 'unnosit',
    DESC = 'Disables nosit',
}
CMDs[#CMDs + 1] = {
    NAME = 'jump',
    DESC = 'Makes your character jump',
}
CMDs[#CMDs + 1] = {
    NAME = 'infinitejump / infjump',
    DESC = 'Allows you to jump before hitting the ground',
}
CMDs[#CMDs + 1] = {
    NAME = 'uninfinitejump / uninfjump',
    DESC = 'Disables infjump',
}
CMDs[#CMDs + 1] = {
    NAME = 'flyjump',
    DESC = 'Allows you to hold space to fly up',
}
CMDs[#CMDs + 1] = {
    NAME = 'unflyjump',
    DESC = 'Disables flyjump',
}
CMDs[#CMDs + 1] = {
    NAME = 'autojump / ajump',
    DESC = 'Automatically jumps when you run into an object',
}
CMDs[#CMDs + 1] = {
    NAME = 'unautojump / unajump',
    DESC = 'Disables autojump',
}
CMDs[#CMDs + 1] = {
    NAME = 'edgejump / ejump',
    DESC = 'Automatically jumps when you get to the edge of an object',
}
CMDs[#CMDs + 1] = {
    NAME = 'unedgejump / unejump',
    DESC = 'Disables edgejump',
}
CMDs[#CMDs + 1] = {
    NAME = 'platformstand / stun',
    DESC = 'Enables PlatformStand',
}
CMDs[#CMDs + 1] = {
    NAME = 'unplatformstand / unstun',
    DESC = 'Disables PlatformStand',
}
CMDs[#CMDs + 1] = {
    NAME = 'norotate / noautorotate',
    DESC = 'Disables AutoRotate',
}
CMDs[#CMDs + 1] = {
    NAME = 'unnorotate / autorotate',
    DESC = 'Enables AutoRotate',
}
CMDs[#CMDs + 1] = {
    NAME = 'enablestate [StateType]',
    DESC = 'Enables a humanoid state type',
}
CMDs[#CMDs + 1] = {
    NAME = 'disablestate [StateType]',
    DESC = 'Disables a humanoid state type',
}
CMDs[#CMDs + 1] = {
    NAME = 'team [team name] (CLIENT)',
    DESC = 'Changes your team. Sometimes fools localscripts.',
}
CMDs[#CMDs + 1] = {
    NAME = 'nobillboardgui / nobgui / noname',
    DESC = 
[[Removes billboard and surface GUIs from your players (i.e. name GUIs at cafes)]],
}
CMDs[#CMDs + 1] = {
    NAME = 'loopnobgui / loopnoname',
    DESC = 
[[Loop removes billboard and surface GUIs from your players (i.e. name GUIs at cafes)]],
}
CMDs[#CMDs + 1] = {
    NAME = 'unloopnobgui / unloopnoname',
    DESC = 'Disables loopnobgui',
}
CMDs[#CMDs + 1] = {
    NAME = 'noarms',
    DESC = 'Removes your arms',
}
CMDs[#CMDs + 1] = {
    NAME = 'nolegs',
    DESC = 'Removes your legs',
}
CMDs[#CMDs + 1] = {
    NAME = 'nolimbs',
    DESC = 'Removes your limbs',
}
CMDs[#CMDs + 1] = {
    NAME = 'naked (CLIENT)',
    DESC = 'Removes your clothing',
}
CMDs[#CMDs + 1] = {
    NAME = 'noface / removeface',
    DESC = 'Removes your face',
}
CMDs[#CMDs + 1] = {
    NAME = 'blockhead',
    DESC = 'Turns your head into a block',
}
CMDs[#CMDs + 1] = {
    NAME = 'blockhats',
    DESC = 'Turns your hats into blocks',
}
CMDs[#CMDs + 1] = {
    NAME = 'blocktool',
    DESC = 'Turns the currently selected tool into a block',
}
CMDs[#CMDs + 1] = {
    NAME = 'creeper',
    DESC = 'Makes you look like a creeper',
}
CMDs[#CMDs + 1] = {
    NAME = 'drophats',
    DESC = 'Drops your hats',
}
CMDs[#CMDs + 1] = {
    NAME = 'nohats / deletehats / rhats',
    DESC = 'Deletes your hats',
}
CMDs[#CMDs + 1] = {
    NAME = 'hatspin / spinhats',
    DESC = 'Spins your characters accessories',
}
CMDs[#CMDs + 1] = {
    NAME = 'unhatspin / unspinhats',
    DESC = 'Undoes spinhats',
}
CMDs[#CMDs + 1] = {
    NAME = 'clearhats / cleanhats',
    DESC = 'Clears hats in the workspace',
}
CMDs[#CMDs + 1] = {
    NAME = 'chardelete / cd [instance name]',
    DESC = 'Removes any part with a certain name from your character',
}
CMDs[#CMDs + 1] = {
    NAME = 'chardeleteclass / cdc [class name]',
    DESC = [[Removes any part with a certain classname from your character]],
}
CMDs[#CMDs + 1] = {
    NAME = 'deletevelocity / dv / removeforces',
    DESC = 'Removes any velocity / force instances in your character',
}
CMDs[#CMDs + 1] = {
    NAME = 'weaken [num]',
    DESC = 'Makes your character less dense',
}
CMDs[#CMDs + 1] = {
    NAME = 'unweaken',
    DESC = 'Sets your characters CustomPhysicalProperties to default',
}
CMDs[#CMDs + 1] = {
    NAME = 'strengthen [num]',
    DESC = 'Makes your character more dense (CustomPhysicalProperties)',
}
CMDs[#CMDs + 1] = {
    NAME = 'unstrengthen',
    DESC = 'Sets your characters CustomPhysicalProperties to default',
}
CMDs[#CMDs + 1] = {
    NAME = 'breakvelocity',
    DESC = 'Sets your characters velocity to 0',
}
CMDs[#CMDs + 1] = {
    NAME = 'spin [speed]',
    DESC = 'Spins your character',
}
CMDs[#CMDs + 1] = {
    NAME = 'unspin',
    DESC = 'Disables spin',
}
CMDs[#CMDs + 1] = {
    NAME = 'split',
    DESC = 'Splits your character in half',
}
CMDs[#CMDs + 1] = {
    NAME = 'nilchar',
    DESC = 'Sets your characters parent to nil',
}
CMDs[#CMDs + 1] = {
    NAME = 'unnilchar / nonilchar',
    DESC = 'Sets your characters parent to workspace',
}
CMDs[#CMDs + 1] = {
    NAME = 'noroot / removeroot / rroot',
    DESC = 'Removes your characters HumanoidRootPart',
}
CMDs[#CMDs + 1] = {
    NAME = 'replaceroot',
    DESC = 'Replaces your characters HumanoidRootPart',
}
CMDs[#CMDs + 1] = {
    NAME = 'clearcharappearance / clearchar / clrchar',
    DESC = 
[[Removes all accessory, shirt, pants, charactermesh, and bodycolors]],
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'animation / anim [ID] [speed]',
    DESC = 
[[Makes your character perform an animation (must be an animation on the marketplace or by roblox/stickmasterluke to replicate)]],
}
CMDs[#CMDs + 1] = {
    NAME = 'emote / em [ID] [speed]',
    DESC = 
[[Makes your character perform an emote (must be on the marketplace or by roblox/stickmasterluke to replicate)]],
}
CMDs[#CMDs + 1] = {
    NAME = 'dance',
    DESC = 'Makes you  d a n c e',
}
CMDs[#CMDs + 1] = {
    NAME = 'undance',
    DESC = 'Stops dance animations',
}
CMDs[#CMDs + 1] = {
    NAME = 'spasm',
    DESC = 'Makes you  c r a z y',
}
CMDs[#CMDs + 1] = {
    NAME = 'unspasm',
    DESC = 'Stops spasm',
}
CMDs[#CMDs + 1] = {
    NAME = 'headthrow',
    DESC = 'Simply makes you throw your head',
}
CMDs[#CMDs + 1] = {
    NAME = 'noanim',
    DESC = 'Disables your animations',
}
CMDs[#CMDs + 1] = {
    NAME = 'reanim',
    DESC = 'Restores your animations',
}
CMDs[#CMDs + 1] = {
    NAME = 'animspeed [num]',
    DESC = 'Changes the speed of your current animation',
}
CMDs[#CMDs + 1] = {
    NAME = 'copyanimation / copyanim / copyemote [player]',
    DESC = 'Copies someone elses animation',
}
CMDs[#CMDs + 1] = {
    NAME = 'copyanimationid / copyanimid / copyemoteid [player]',
    DESC = 'Copies your animation id or someone elses to your clipboard',
}
CMDs[#CMDs + 1] = {
    NAME = 'loopanimation / loopanim',
    DESC = 'Loops your current animation',
}
CMDs[#CMDs + 1] = {
    NAME = 'stopanimations / stopanims',
    DESC = 'Stops running animations',
}
CMDs[#CMDs + 1] = {
    NAME = 'refreshanimations / refreshanims',
    DESC = 'Refreshes animations',
}
CMDs[#CMDs + 1] = {
    NAME = 'allowcustomanim / allowcustomanimations',
    DESC = 'Lets you use custom animation packs instead',
}
CMDs[#CMDs + 1] = {
    NAME = 'unallowcustomanim / unallowcustomanimations',
    DESC = "Doesn't let you use custom animation packs instead",
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'autoclick [click delay] [release delay]',
    DESC = 'Automatically clicks your mouse with a set delay',
}
CMDs[#CMDs + 1] = {
    NAME = 'unautoclick / noautoclick',
    DESC = 'Turns off autoclick',
}
CMDs[#CMDs + 1] = {
    NAME = 'autokeypress [key] [down delay] [up delay]',
    DESC = 'Automatically presses a key with a set delay',
}
CMDs[#CMDs + 1] = {
    NAME = 'unautokeypress',
    DESC = 'Stops autokeypress',
}
CMDs[#CMDs + 1] = {
    NAME = 'hovername',
    DESC = [[Shows a players username when your mouse is hovered over them]],
}
CMDs[#CMDs + 1] = {
    NAME = 'unhovername / nohovername',
    DESC = 'Turns off hovername',
}
CMDs[#CMDs + 1] = {
    NAME = 'mousesensitivity / ms [0-10]',
    DESC = 
[[Sets your mouse sensitivity (affects first person and right click drag) (default is 1)]],
}
CMDs[#CMDs + 1] = {
    NAME = 'clickdelete',
    DESC = 'Go to Settings > Keybinds > Add for click delete',
}
CMDs[#CMDs + 1] = {
    NAME = 'clickteleport',
    DESC = 'Go to Settings > Keybinds > Add for click teleport',
}
CMDs[#CMDs + 1] = {
    NAME = 'mouseteleport / mousetp',
    DESC = 
[[Teleports your character to your mouse. This is recommended as a keybind]],
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'tools',
    DESC = 'Copies tools from ReplicatedStorage and Lighting',
}
CMDs[#CMDs + 1] = {
    NAME = 'notools / removetools / deletetools',
    DESC = 'Removes tools from character and backpack',
}
CMDs[#CMDs + 1] = {
    NAME = 'deleteselectedtool / dst',
    DESC = 'Removes any currently selected tools',
}
CMDs[#CMDs + 1] = {
    NAME = 'grabtools',
    DESC = 'Automatically get tools that are dropped',
}
CMDs[#CMDs + 1] = {
    NAME = 'ungrabtools / nograbtools',
    DESC = 'Disables grabtools',
}
CMDs[#CMDs + 1] = {
    NAME = 'copytools [player] (CLIENT)',
    DESC = 'Copies a players tools',
}
CMDs[#CMDs + 1] = {
    NAME = 'dupetools / clonetools [num]',
    DESC = 'Duplicates your inventory tools a set amount of times',
}
CMDs[#CMDs + 1] = {
    NAME = 'droptools',
    DESC = 'Drops your tools',
}
CMDs[#CMDs + 1] = {
    NAME = 'droppabletools',
    DESC = 'Makes your tools droppable',
}
CMDs[#CMDs + 1] = {
    NAME = 'equiptools',
    DESC = 'Equips every tool in your inventory at once',
}
CMDs[#CMDs + 1] = {
    NAME = 'unequiptools',
    DESC = 'Unequips every tool you are currently holding at once',
}
CMDs[#CMDs + 1] = {
    NAME = 'removespecifictool [name]',
    DESC = 'Automatically remove a specific tool from your inventory',
}
CMDs[#CMDs + 1] = {
    NAME = 'unremovespecifictool [name]',
    DESC = 'Stops removing a specific tool from your inventory',
}
CMDs[#CMDs + 1] = {
    NAME = 'clearremovespecifictool',
    DESC = 'Stop removing all specific tools from your inventory',
}
CMDs[#CMDs + 1] = {
    NAME = 'reach [num]',
    DESC = 'Increases the hitbox of your held tool',
}
CMDs[#CMDs + 1] = {
    NAME = 'boxreach [num]',
    DESC = 'Increases the hitbox of your held tool in a box shape',
}
CMDs[#CMDs + 1] = {
    NAME = 'unreach / noreach',
    DESC = 'Turns off reach',
}
CMDs[#CMDs + 1] = {
    NAME = 'grippos [X Y Z]',
    DESC = 'Changes your current tools grip position',
}
CMDs[#CMDs + 1] = {
    NAME = 'usetools [amount] [delay]',
    DESC = 'Activates all tools in your backpack at the same time',
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'addalias [cmd] [alias]',
    DESC = 'Adds an alias to a command',
}
CMDs[#CMDs + 1] = {
    NAME = 'removealias [alias]',
    DESC = 'Removes a custom alias',
}
CMDs[#CMDs + 1] = {
    NAME = 'clraliases',
    DESC = 'Removes all custom aliases',
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'addplugin / plugin [name]',
    DESC = 'Add a plugin via command',
}
CMDs[#CMDs + 1] = {
    NAME = 'removeplugin / deleteplugin [name]',
    DESC = 'Remove a plugin via command',
}
CMDs[#CMDs + 1] = {
    NAME = 'reloadplugin [name]',
    DESC = 'Reloads a plugin',
}
CMDs[#CMDs + 1] = {
    NAME = 'addallplugins / loadallplugins',
    DESC = 'Adds all available plugins from the workspace folder',
}
CMDs[#CMDs + 1] = {
    NAME = '',
    DESC = '',
}
CMDs[#CMDs + 1] = {
    NAME = 'breakloops / break (cmd loops)',
    DESC = 'Stops any cmd loops (;100^1^cmd)',
}
CMDs[#CMDs + 1] = {
    NAME = 'removecmd / deletecmd',
    DESC = 'Removes a command until the admin is reloaded',
}
CMDs[#CMDs + 1] = {
    NAME = 'tpwalk / teleportwalk [num]',
    DESC = 'Teleports you to your move direction',
}
CMDs[#CMDs + 1] = {
    NAME = 'untpwalk / unteleportwalk',
    DESC = 'Undoes tpwalk / teleportwalk',
}
CMDs[#CMDs + 1] = {
    NAME = 'notifyping / ping',
    DESC = 'Notify yourself your ping',
}
CMDs[#CMDs + 1] = {
    NAME = 'trip',
    DESC = 'Makes your character fall over',
}
CMDs[#CMDs + 1] = {
    NAME = 'norender',
    DESC = 
[[Disable 3d Rendering to decrease the amount of CPU the client uses]],
}
CMDs[#CMDs + 1] = {
    NAME = 'render',
    DESC = 'Enable 3d Rendering',
}
CMDs[#CMDs + 1] = {
    NAME = 'use2022materials / 2022materials',
    DESC = 'Enables 2022 material textures',
}
CMDs[#CMDs + 1] = {
    NAME = 'unuse2022materials / un2022materials',
    DESC = 'Disables 2022 material textures',
}
CMDs[#CMDs + 1] = {
    NAME = 'promptr6',
    DESC = 'Prompts the game to switch your rig type to R6',
}
CMDs[#CMDs + 1] = {
    NAME = 'promptr15',
    DESC = 'Prompts the game to switch your rig type to R15',
}
CMDs[#CMDs + 1] = {
    NAME = 'wallwalk / walkonwalls',
    DESC = 'Walk on walls',
}
CMDs[#CMDs + 1] = {
    NAME = 'removeads / adblock',
    DESC = 'Automatically removes ad billboards',
}
CMDs[#CMDs + 1] = {
    NAME = 'scare / spook [player]',
    DESC = 'Teleports in front of a player for half a second',
}
CMDs[#CMDs + 1] = {
    NAME = 'alignmentkeys',
    DESC = [[Enables the left and right alignment keys (comma and period)]],
}
CMDs[#CMDs + 1] = {
    NAME = 'unalignmentkeys / noalignmentkeys',
    DESC = 'Disables the alignment keys',
}
CMDs[#CMDs + 1] = {
    NAME = 'ctrllock',
    DESC = 'Binds Shiftlock to LeftControl',
}
CMDs[#CMDs + 1] = {
    NAME = 'unctrllock',
    DESC = 'Re-binds Shiftlock to LeftShift',
}
CMDs[#CMDs + 1] = {
    NAME = 'listento [player]',
    DESC = [[Listens to the area around a player. Can also eavesdrop with vc]],
}
CMDs[#CMDs + 1] = {
    NAME = 'unlistento',
    DESC = 'Disables listento',
}
CMDs[#CMDs + 1] = {
    NAME = 'jerk',
    DESC = 'Makes you jork it',
}
CMDs[#CMDs + 1] = {
    NAME = 'unsuspendchat',
    DESC = 'Unsuspends you from text chat',
}
CMDs[#CMDs + 1] = {
    NAME = 'unsuspendvc',
    DESC = 'Unsuspends you from voice chat',
}
CMDs[#CMDs + 1] = {
    NAME = 'muteallvcs',
    DESC = 'Mutes voice chat for all players',
}
CMDs[#CMDs + 1] = {
    NAME = 'unmuteallvcs',
    DESC = 'Unmutes voice chat for all players',
}
CMDs[#CMDs + 1] = {
    NAME = 'mutevc [player]',
    DESC = 'Mutes the voice chat of a player',
}
CMDs[#CMDs + 1] = {
    NAME = 'unmutevc [player]',
    DESC = 'Unmutes the voice chat of a player',
}

for i = 1, #CMDs do
    local newcmd = Example.Clone(Example)

    newcmd.Parent = CMDsF
    newcmd.Visible = false
    newcmd.Text = CMDs[i].NAME
    newcmd.Name = 'CMD'

    table.insert(text1, newcmd)

    if CMDs[i].DESC ~= '' then
        newcmd.SetAttribute(newcmd, 'Title', CMDs[i].NAME)
        newcmd.SetAttribute(newcmd, 'Desc', CMDs[i].DESC)
        newcmd.MouseButton1Down:Connect(function()
            if not IsOnMobile and newcmd.Visible and newcmd.TextTransparency == 0 then
                local currentText = Cmdbar.Text

                Cmdbar.CaptureFocus(Cmdbar)
                autoComplete(newcmd.Text, currentText)
                maximizeHolder()
            end
        end)
    end
end

IndexContents('', true)

checkTT = function()
    local t
    local guisAtPosition = COREGUI.GetGuiObjectsAtPosition(COREGUI, IYMouse.X, IYMouse.Y)

    for _, gui in pairs(guisAtPosition)do
        if gui.Parent == CMDsF then
            t = gui
        end
    end

    if t ~= nil and t.GetAttribute(t, 'Title') ~= nil then
        local x = IYMouse.X
        local y = IYMouse.Y
        local xP
        local yP

        if IYMouse.X > 200 then
            xP = x - 201
        else
            xP = x + 21
        end
        if IYMouse.Y > (IYMouse.ViewSizeY - 96) then
            yP = y - 97
        else
            yP = y
        end

        Tooltip.Position = UDim2.new(0, xP, 0, yP)
        Description.Text = t.GetAttribute(t, 'Desc')

        if t.GetAttribute(t, 'Title') ~= nil then
            Title_3.Text = t.GetAttribute(t, 'Title')
        else
            Title_3.Text = ''
        end

        Tooltip.Visible = true
    else
        Tooltip.Visible = false
    end
end
FindInTable = function(tbl, val)
    if tbl == nil then
        return false
    end

    for _, v in pairs(tbl)do
        if v == val then
            return true
        end
    end

    return false
end
GetInTable = function(Table, Name)
    for i = 1, #Table do
        if Table[i] == Name then
            return i
        end
    end

    return false
end
permadeath = function(plr)
    if replicatesignal then
        replicatesignal(plr.ConnectDiedSignalBackend)
        task.wait(Players.RespawnTime - 0.1)
    end
end
respawn = function(plr)
    if invisRunning then
        TurnVisible()
    end

    local rcdEnabled, wasHidden = false, false

    if gethidden then
        rcdEnabled, wasHidden = gethidden(workspace, 'RejectCharacterDeletions') ~= Enum.RejectCharacterDeletions.Disabled
    end
    if rcdEnabled and replicatesignal then
        replicatesignal(plr.ConnectDiedSignalBackend)
        task.wait(Players.RespawnTime - 0.1)
        replicatesignal(plr.Kill)
    elseif rcdEnabled and not replicatesignal then
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing replicatesignal)]])
    else
        local char = plr.Character
        local hum = char.FindFirstChildWhichIsA(char, 'Humanoid')

        if hum then
            hum.ChangeState(hum, Enum.HumanoidStateType.Dead)
        end

        char.ClearAllChildren(char)

        local newChar = Instance.new('Model')

        newChar.Parent = workspace
        plr.Character = newChar

        task.wait()

        plr.Character = char

        newChar.Destroy(newChar)
    end
end

local refreshCmd = false

refresh = function(plr)
    refreshCmd = true

    local root = plr.Character:WaitForChild('HumanoidRootPart')
    local pos = root.CFrame
    local pos1 = workspace.CurrentCamera.CFrame

    respawn(plr)
    task.spawn(function()
        plr.CharacterAdded:Wait():WaitForChild('HumanoidRootPart').CFrame, workspace.CurrentCamera.CFrame = pos, task.wait() and pos1
        refreshCmd = false
    end)
end

local lastDeath

onDied = function()
    task.spawn(function()
        if pcall(function()
            Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid')
        end) and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
            Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').Died:Connect(function(
            )
                if getRoot(Players.LocalPlayer.Character) then
                    lastDeath = getRoot(Players.LocalPlayer.Character).CFrame
                end
            end)
        else
            task.wait(2)
            onDied()
        end
    end)
end
Clip = true
spDelay = 0.1

Players.LocalPlayer.CharacterAdded:Connect(function()
    NOFLY()

    Floating = false

    if not Clip then
        execCmd('clip')
    end

    repeat
        task.wait()
    until getRoot(Players.LocalPlayer.Character)

    pcall(function()
        if spawnpoint and not refreshCmd and spawnpos ~= nil then
            task.wait(spDelay)

            getRoot(Players.LocalPlayer.Character).CFrame = spawnpos
        end
    end)
    onDied()
end)
onDied()

getstring = function(begin)
    local start = begin - 1
    local AA = ''

    for i, v in pairs(cargs)do
        if i > start then
            if AA ~= '' then
                AA = AA .. ' ' .. v
            else
                AA = AA .. v
            end
        end
    end

    return AA
end
findCmd = function(cmd_name)
    for i, v in pairs(cmds)do
        if v.NAME:lower() == cmd_name.lower(cmd_name) or FindInTable(v.ALIAS, cmd_name.lower(cmd_name)) then
            return v
        end
    end

    return customAlias[cmd_name.lower(cmd_name)]
end
splitString = function(str, delim)
    local broken = {}

    if delim == nil then
        delim = ','
    end

    for w in string.gmatch(str, '[^' .. delim .. ']+')do
        table.insert(broken, w)
    end

    return broken
end
cmdHistory = {}

local lastCmds = {}
local historyCount = 0
local split = ' '
local lastBreakTime = 0

execCmd = function(cmdStr, speaker, store)
    cmdStr = cmdStr.gsub(cmdStr, '%s+$', '')

    task.spawn(function()
        local rawCmdStr = cmdStr

        cmdStr = string.gsub(cmdStr, '\\\\', '%%BackSlash%%')

        local commandsToRun = splitString(cmdStr, '\\')

        for i, v in pairs(commandsToRun)do
            v = string.gsub(v, '%%BackSlash%%', '\\')

            local x, y, num = v.find(v, '^(%d+)%^')
            local cmdDelay = 0
            local infTimes = false

            if num then
                v = v.sub(v, y + 1)

                local x, y, del = v.find(v, '^([%d%.]+)%^')

                if del then
                    v = v.sub(v, y + 1)
                    cmdDelay = tonumber(del) or 0
                end
            else
                local x, y = v.find(v, '^inf%^')

                if x then
                    infTimes = true
                    v = v.sub(v, y + 1)

                    local x, y, del = v.find(v, '^([%d%.]+)%^')

                    if del then
                        v = v.sub(v, y + 1)
                        del = tonumber(del) or 1
                        cmdDelay = (del > 0 and del or 1)
                    else
                        cmdDelay = 1
                    end
                end
            end

            num = tonumber(num or 1)

            if v.sub(v, 1, 1) == '!' then
                local chunks = splitString(v.sub(v, 2), split)

                if chunks[1] and lastCmds[chunks[1] ] then
                    v = lastCmds[chunks[1] ]
                end
            end

            local args = splitString(v, split)
            local cmdName = args[1]
            local cmd = findCmd(cmdName)

            if cmd then
                table.remove(args, 1)

                cargs = args

                if not speaker then
                    speaker = Players.LocalPlayer
                end
                if store then
                    if speaker == Players.LocalPlayer then
                        if cmdHistory[1] ~= rawCmdStr and rawCmdStr.sub(rawCmdStr, 1, 11) ~= 'lastcommand' and rawCmdStr.sub(rawCmdStr, 1, 7) ~= 'lastcmd' then
                            table.insert(cmdHistory, 1, rawCmdStr)
                        end
                    end
                    if #cmdHistory > 30 then
                        table.remove(cmdHistory)
                    end

                    lastCmds[cmdName] = v
                end

                local cmdStartTime = tick()

                if infTimes then
                    while lastBreakTime < cmdStartTime do
                        local success, err = pcall(cmd.FUNC, args, speaker)

                        if not success and getgenv().IY_DEBUG then
                            warn('Command Error:', cmdName, err)
                        end

                        task.wait(cmdDelay)
                    end
                else
                    for rep = 1, num do
                        if lastBreakTime > cmdStartTime then
                            break
                        end

                        local success, err = pcall(function()
                            cmd.FUNC(args, speaker)
                        end)

                        if not success and getgenv().IY_DEBUG then
                            warn('Command Error:', cmdName, err)
                        end
                        if cmdDelay ~= 0 then
                            task.wait(cmdDelay)
                        end
                    end
                end
            end
        end
    end)
end
addcmd = function(name, alias, func, plgn)
    cmds[#cmds + 1] = {
        NAME = name,
        ALIAS = alias or {},
        FUNC = func,
        PLUGIN = plgn,
    }
end
removecmd = function(cmd)
    if cmd ~= ' ' then
        for i = #cmds, 1, -1 do
            if cmds[i].NAME == cmd or FindInTable(cmds[i].ALIAS, cmd) then
                table.remove(cmds, i)

                for a, c in pairs(CMDsF.GetChildren(CMDsF))do
                    if string.find(c.Text, '^' .. cmd .. '$') or string.find(c.Text, '^' .. cmd .. ' ') or string.find(c.Text, ' ' .. cmd .. '$') or string.find(c.Text, ' ' .. cmd .. ' ') then
                        c.TextTransparency = 0.7

                        c.MouseButton1Click:Connect(function()
                            notify(c.Text, 'Command has been disabled by you or a plugin')
                        end)
                    end
                end
            end
        end
    end
end
overridecmd = function(name, func)
    local cmd = findCmd(name)

    if cmd and cmd.FUNC then
        cmd.FUNC = func
    end
end
addbind = function(cmd, key, iskeyup, toggle)
    if toggle then
        binds[#binds + 1] = {
            COMMAND = cmd,
            KEY = key,
            ISKEYUP = iskeyup,
            TOGGLE = toggle,
        }
    else
        binds[#binds + 1] = {
            COMMAND = cmd,
            KEY = key,
            ISKEYUP = iskeyup,
        }
    end
end
addcmdtext = function(text, name, desc)
    local newcmd = Example.Clone(Example)
    local tooltipText = tostring(text)
    local tooltipDesc = tostring(desc)

    newcmd.Parent = CMDsF
    newcmd.Visible = false
    newcmd.Text = text
    newcmd.Name = 'PLUGIN_' .. name

    table.insert(text1, newcmd)

    if desc and desc ~= '' then
        newcmd.SetAttribute(newcmd, 'Title', tooltipText)
        newcmd.SetAttribute(newcmd, 'Desc', tooltipDesc)
        newcmd.MouseButton1Down:Connect(function()
            if newcmd.Visible and newcmd.TextTransparency == 0 then
                Cmdbar.CaptureFocus(Cmdbar)
                autoComplete(newcmd.Text)
                maximizeHolder()
            end
        end)
    end
end

local WorldToScreen = function(Object)
    local ObjectVector = workspace.CurrentCamera:WorldToScreenPoint(Object.Position)

    return Vector2.new(ObjectVector.X, ObjectVector.Y)
end
local MousePositionToVector2 = function()
    return Vector2.new(IYMouse.X, IYMouse.Y)
end
local GetClosestPlayerFromCursor = function()
    local found
    local ClosestDistance = math.huge

    for i, v in pairs(Players.GetPlayers(Players))do
        if v ~= Players.LocalPlayer and v.Character and v.Character:FindFirstChildOfClass('Humanoid') then
            for k, x in pairs(v.Character:GetChildren())do
                if string.find(x.Name, 'Torso') then
                    local Distance = (WorldToScreen(x) - MousePositionToVector2()).Magnitude

                    if Distance < ClosestDistance then
                        ClosestDistance = Distance
                        found = v
                    end
                end
            end
        end
    end

    return found
end

SpecialPlayerCases = {
    all = function(speaker)
        return Players.GetPlayers(Players)
    end,
    others = function(speaker)
        local plrs = {}

        for i, v in pairs(Players.GetPlayers(Players))do
            if v ~= speaker then
                table.insert(plrs, v)
            end
        end

        return plrs
    end,
    me = function(speaker)
        return {speaker}
    end,
    ['#(%d+)'] = function(speaker, args, currentList)
        local returns = {}
        local randAmount = tonumber(args[1])
        local players = {
            unpack(currentList),
        }

        for i = 1, randAmount do
            if #players == 0 then
                break
            end

            local randIndex = math.random(1, #players)

            table.insert(returns, players[randIndex])
            table.remove(players, randIndex)
        end

        return returns
    end,
    random = function(speaker, args, currentList)
        local players = Players.GetPlayers(Players)
        local localplayer = Players.LocalPlayer

        table.remove(players, table.find(players, localplayer))

        return {
            players[math.random(1, #players)],
        }
    end,
    ['%%(.+)'] = function(speaker, args)
        local returns = {}
        local team = args[1]

        for _, plr in pairs(Players.GetPlayers(Players))do
            if plr.Team and string.sub(string.lower(plr.Team.Name), 1, #team) == string.lower(team) then
                table.insert(returns, plr)
            end
        end

        return returns
    end,
    allies = function(speaker)
        local returns = {}
        local team = speaker.Team

        for _, plr in pairs(Players.GetPlayers(Players))do
            if plr.Team == team then
                table.insert(returns, plr)
            end
        end

        return returns
    end,
    enemies = function(speaker)
        local returns = {}
        local team = speaker.Team

        for _, plr in pairs(Players.GetPlayers(Players))do
            if plr.Team ~= team then
                table.insert(returns, plr)
            end
        end

        return returns
    end,
    team = function(speaker)
        local returns = {}
        local team = speaker.Team

        for _, plr in pairs(Players.GetPlayers(Players))do
            if plr.Team == team then
                table.insert(returns, plr)
            end
        end

        return returns
    end,
    nonteam = function(speaker)
        local returns = {}
        local team = speaker.Team

        for _, plr in pairs(Players.GetPlayers(Players))do
            if plr.Team ~= team then
                table.insert(returns, plr)
            end
        end

        return returns
    end,
    friends = function(speaker, args)
        local returns = {}

        for _, plr in pairs(Players.GetPlayers(Players))do
            if plr.IsFriendsWith(plr, speaker.UserId) and plr ~= speaker then
                table.insert(returns, plr)
            end
        end

        return returns
    end,
    nonfriends = function(speaker, args)
        local returns = {}

        for _, plr in pairs(Players.GetPlayers(Players))do
            if not plr.IsFriendsWith(plr, speaker.UserId) and plr ~= speaker then
                table.insert(returns, plr)
            end
        end

        return returns
    end,
    guests = function(speaker, args)
        local returns = {}

        for _, plr in pairs(Players.GetPlayers(Players))do
            if plr.Guest then
                table.insert(returns, plr)
            end
        end

        return returns
    end,
    bacons = function(speaker, args)
        local returns = {}

        for _, plr in pairs(Players.GetPlayers(Players))do
            if plr.Character:FindFirstChild('Pal Hair') or plr.Character:FindFirstChild('Kate Hair') then
                table.insert(returns, plr)
            end
        end

        return returns
    end,
    ['age(%d+)'] = function(speaker, args)
        local returns = {}
        local age = tonumber(args[1])

        if not age == nil then
            return
        end

        for _, plr in pairs(Players.GetPlayers(Players))do
            if plr.AccountAge <= age then
                table.insert(returns, plr)
            end
        end

        return returns
    end,
    nearest = function(speaker, args, currentList)
        local speakerChar = speaker.Character

        if not speakerChar or not getRoot(speakerChar) then
            return
        end

        local lowest = math.huge
        local NearestPlayer

        for _, plr in pairs(currentList)do
            if plr ~= speaker and plr.Character then
                local distance = plr.DistanceFromCharacter(plr, getRoot(speakerChar).Position)

                if distance < lowest then
                    lowest = distance
                    NearestPlayer = {plr}
                end
            end
        end

        return NearestPlayer
    end,
    farthest = function(speaker, args, currentList)
        local speakerChar = speaker.Character

        if not speakerChar or not getRoot(speakerChar) then
            return
        end

        local highest = 0
        local Farthest

        for _, plr in pairs(currentList)do
            if plr ~= speaker and plr.Character then
                local distance = plr.DistanceFromCharacter(plr, getRoot(speakerChar).Position)

                if distance > highest then
                    highest = distance
                    Farthest = {plr}
                end
            end
        end

        return Farthest
    end,
    ['group(%d+)'] = function(speaker, args)
        local returns = {}
        local groupID = tonumber(args[1])

        for _, plr in pairs(Players.GetPlayers(Players))do
            if plr.IsInGroup(plr, groupID) then
                table.insert(returns, plr)
            end
        end

        return returns
    end,
    alive = function(speaker, args)
        local returns = {}

        for _, plr in pairs(Players.GetPlayers(Players))do
            if plr.Character and plr.Character:FindFirstChildOfClass('Humanoid') and plr.Character:FindFirstChildOfClass('Humanoid').Health > 0 then
                table.insert(returns, plr)
            end
        end

        return returns
    end,
    dead = function(speaker, args)
        local returns = {}

        for _, plr in pairs(Players.GetPlayers(Players))do
            if (not plr.Character or not plr.Character:FindFirstChildOfClass('Humanoid')) or plr.Character:FindFirstChildOfClass('Humanoid').Health <= 0 then
                table.insert(returns, plr)
            end
        end

        return returns
    end,
    ['rad(%d+)'] = function(speaker, args)
        local returns = {}
        local radius = tonumber(args[1])
        local speakerChar = speaker.Character

        if not speakerChar or not getRoot(speakerChar) then
            return
        end

        for _, plr in pairs(Players.GetPlayers(Players))do
            if plr.Character and getRoot(plr.Character) then
                local magnitude = (getRoot(plr.Character).Position - getRoot(speakerChar).Position).magnitude

                if magnitude <= radius then
                    table.insert(returns, plr)
                end
            end
        end

        return returns
    end,
    cursor = function(speaker)
        local plrs = {}
        local v = GetClosestPlayerFromCursor()

        if v ~= nil then
            table.insert(plrs, v)
        end

        return plrs
    end,
    npcs = function(speaker, args)
        local returns = {}

        for _, v in pairs(workspace.GetDescendants(workspace))do
            if v.IsA(v, 'Model') and getRoot(v) and v.FindFirstChildWhichIsA(v, 'Humanoid') and Players.GetPlayerFromCharacter(Players, v) == nil then
                local clone = Instance.new('Player')

                clone.Name = v.Name .. ' - ' .. v.FindFirstChildWhichIsA(v, 'Humanoid').DisplayName
                clone.Character = v

                table.insert(returns, clone)
            end
        end

        return returns
    end,
}
toTokens = function(str)
    local tokens = {}

    for op, name in string.gmatch(str, '([+-])([^+-]+)')do
        table.insert(tokens, {
            Operator = op,
            Name = name,
        })
    end

    return tokens
end
onlyIncludeInTable = function(tab, matches)
    local matchTable = {}
    local resultTable = {}

    for i, v in pairs(matches)do
        matchTable[v.Name] = true
    end
    for i, v in pairs(tab)do
        if matchTable[v.Name] then
            table.insert(resultTable, v)
        end
    end

    return resultTable
end
removeTableMatches = function(tab, matches)
    local matchTable = {}
    local resultTable = {}

    for i, v in pairs(matches)do
        matchTable[v.Name] = true
    end
    for i, v in pairs(tab)do
        if not matchTable[v.Name] then
            table.insert(resultTable, v)
        end
    end

    return resultTable
end
getPlayersByName = function(Name)
    local Name, Len, Found = string.lower(Name), #Name, {}

    for _, v in pairs(Players.GetPlayers(Players))do
        if Name.sub(Name, 0, 1) == '@' then
            if string.sub(string.lower(v.Name), 1, Len - 1) == Name.sub(Name, 2) then
                table.insert(Found, v)
            end
        else
            if string.sub(string.lower(v.Name), 1, Len) == Name or string.sub(string.lower(v.DisplayName), 1, Len) == Name then
                table.insert(Found, v)
            end
        end
    end

    return Found
end
getPlayer = function(list, speaker)
    if list == nil then
        return {
            speaker.Name,
        }
    end

    local nameList = splitString(list, ',')
    local foundList = {}

    for _, name in pairs(nameList)do
        if string.sub(name, 1, 1) ~= '+' and string.sub(name, 1, 1) ~= '-' then
            name = '+' .. name
        end

        local tokens = toTokens(name)
        local initialPlayers = Players.GetPlayers(Players)

        for i, v in pairs(tokens)do
            if v.Operator == '+' then
                local tokenContent = v.Name
                local foundCase = false

                for regex, case in pairs(SpecialPlayerCases)do
                    local matches = {
                        string.match(tokenContent, '^' .. regex .. '$'),
                    }

                    if #matches > 0 then
                        foundCase = true
                        initialPlayers = onlyIncludeInTable(initialPlayers, case(speaker, matches, initialPlayers))
                    end
                end

                if not foundCase then
                    initialPlayers = onlyIncludeInTable(initialPlayers, getPlayersByName(tokenContent))
                end
            else
                local tokenContent = v.Name
                local foundCase = false

                for regex, case in pairs(SpecialPlayerCases)do
                    local matches = {
                        string.match(tokenContent, '^' .. regex .. '$'),
                    }

                    if #matches > 0 then
                        foundCase = true
                        initialPlayers = removeTableMatches(initialPlayers, case(speaker, matches, initialPlayers))
                    end
                end

                if not foundCase then
                    initialPlayers = removeTableMatches(initialPlayers, getPlayersByName(tokenContent))
                end
            end
        end
        for i, v in pairs(initialPlayers)do
            table.insert(foundList, v)
        end
    end

    local foundNames = {}

    for i, v in pairs(foundList)do
        table.insert(foundNames, v.Name)
    end

    return foundNames
end
formatUsername = function(player)
    if player.DisplayName ~= player.Name then
        return string.format('%s (%s)', player.Name, player.DisplayName)
    end

    return player.Name
end
getprfx = function(strn)
    if strn.sub(strn, 1, string.len(prefix)) == prefix then
        return {
            'cmd',
            string.len(prefix) + 1,
        }
    end

    return
end
do_exec = function(str, plr)
    str = str.gsub(str, '/e ', '')

    local t = getprfx(str)

    if not t then
        return
    end

    str = str.sub(str, t[2])

    if t[1] == 'cmd' then
        execCmd(str, plr, true)
        IndexContents('', true, false, true)

        CMDsF.CanvasPosition = canvasPos
    end
end
lastTextBoxString, lastTextBoxCon, lastEnteredString = nil, nil, nil

UserInputService.TextBoxFocused:Connect(function(obj)
    if lastTextBoxCon then
        lastTextBoxCon.Disconnect(lastTextBoxCon)
    end
    if obj == Cmdbar then
        lastTextBoxString = nil

        return
    end

    lastTextBoxString = obj.Text
    lastTextBoxCon = obj.GetPropertyChangedSignal(obj, 'Text'):Connect(function()
        if not (UserInputService.IsKeyDown(UserInputService, Enum.KeyCode.Return) or UserInputService.IsKeyDown(UserInputService, Enum.KeyCode.KeypadEnter)) then
            lastTextBoxString = obj.Text
        end
    end)
end)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then
        if Cmdbar and Cmdbar.IsFocused(Cmdbar) then
            if input.KeyCode == Enum.KeyCode.Up then
                historyCount = historyCount + 1

                if historyCount > #cmdHistory then
                    historyCount = #cmdHistory
                end

                Cmdbar.Text = cmdHistory[historyCount] or ''
                Cmdbar.CursorPosition = 1020
            elseif input.KeyCode == Enum.KeyCode.Down then
                historyCount = historyCount - 1

                if historyCount < 0 then
                    historyCount = 0
                end

                Cmdbar.Text = cmdHistory[historyCount] or ''
                Cmdbar.CursorPosition = 1020
            end
        elseif input.KeyCode == Enum.KeyCode.Return or input.KeyCode == Enum.KeyCode.KeypadEnter then
            lastEnteredString = lastTextBoxString
        end
    end
end)
Players.LocalPlayer.Chatted:Connect(function()
    task.wait()

    if lastEnteredString then
        local message = lastEnteredString

        lastEnteredString = nil

        do_exec(message, Players.LocalPlayer)
    end
end)

Cmdbar.PlaceholderText = 'Command Bar (' .. prefix .. ')'

Cmdbar.GetPropertyChangedSignal(Cmdbar, 'Text'):Connect(function()
    if Cmdbar.IsFocused(Cmdbar) then
        IndexContents(Cmdbar.Text, true, true)
    end
end)

local tabComplete

tabAllowed = true

Cmdbar.FocusLost:Connect(function(enterpressed)
    if enterpressed then
        local cmdbarText = Cmdbar.Text:gsub('^' .. prefix, '')

        execCmd(cmdbarText, Players.LocalPlayer, true)
    end
    if tabComplete then
        tabComplete.Disconnect(tabComplete)
    end

    task.wait()

    if not Cmdbar.IsFocused(Cmdbar) then
        Cmdbar.Text = ''

        IndexContents('', true, false, true)

        if SettingsOpen == true then
            task.wait(0.2)
            Settings.TweenPosition(Settings, UDim2.new(0, 0, 0, 45), 'InOut', 'Quart', 0.2, true, nil)

            CMDsF.Visible = false
        end
    end

    CMDsF.CanvasPosition = canvasPos
end)
Cmdbar.Focused:Connect(function()
    historyCount = 0
    canvasPos = CMDsF.CanvasPosition

    if SettingsOpen == true then
        task.wait(0.2)

        CMDsF.Visible = true

        Settings.TweenPosition(Settings, UDim2.new(0, 0, 0, 220), 'InOut', 'Quart', 0.2, true, nil)
    end

    tabComplete = UserInputService.InputBegan:Connect(function(
        input,
        gameProcessed
    )
        if Cmdbar.IsFocused(Cmdbar) then
            if tabAllowed == true and input.KeyCode == Enum.KeyCode.Tab and topCommand ~= nil then
                autoComplete(topCommand)
            end
        else
            tabComplete.Disconnect(tabComplete)
        end
    end)
end)

ESPenabled = false
CHMSenabled = false
round = function(num, numDecimalPlaces)
    local mult = 10 ^ (numDecimalPlaces or 0)

    return math.floor(num * mult + 0.5) / mult
end
ESP = function(plr, logic)
    task.spawn(function()
        for i, v in pairs(COREGUI.GetChildren(COREGUI))do
            if v.Name == plr.Name .. '_ESP' then
                v.Destroy(v)
            end
        end

        task.wait()

        if plr.Character and plr.Name ~= Players.LocalPlayer.Name and not COREGUI.FindFirstChild(COREGUI, plr.Name .. '_ESP') then
            local ESPholder = Instance.new('Folder')

            ESPholder.Name = plr.Name .. '_ESP'
            ESPholder.Parent = COREGUI

            repeat
                task.wait(1)
            until plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass('Humanoid')

            for b, n in pairs(plr.Character:GetChildren())do
                if (n.IsA(n, 'BasePart')) then
                    local a = Instance.new('BoxHandleAdornment')

                    a.Name = plr.Name
                    a.Parent = ESPholder
                    a.Adornee = n
                    a.AlwaysOnTop = true
                    a.ZIndex = 10
                    a.Size = n.Size
                    a.Transparency = espTransparency

                    if logic == true then
                        a.Color = BrickColor.new(plr.TeamColor == Players.LocalPlayer.TeamColor and 'Bright green' or 'Bright red')
                    else
                        a.Color = plr.TeamColor
                    end
                end
            end

            if plr.Character and plr.Character:FindFirstChild('Head') then
                local BillboardGui = Instance.new('BillboardGui')
                local TextLabel = Instance.new('TextLabel')

                BillboardGui.Adornee = plr.Character.Head
                BillboardGui.Name = plr.Name
                BillboardGui.Parent = ESPholder
                BillboardGui.Size = UDim2.new(0, 100, 0, 150)
                BillboardGui.StudsOffset = Vector3.new(0, 1, 0)
                BillboardGui.AlwaysOnTop = true
                TextLabel.Parent = BillboardGui
                TextLabel.BackgroundTransparency = 1
                TextLabel.Position = UDim2.new(0, 0, 0, -50)
                TextLabel.Size = UDim2.new(0, 100, 0, 100)
                TextLabel.Font = Enum.Font.SourceSansSemibold
                TextLabel.TextSize = 20
                TextLabel.TextColor3 = Color3.new(1, 1, 1)
                TextLabel.TextStrokeTransparency = 0
                TextLabel.TextYAlignment = Enum.TextYAlignment.Bottom
                TextLabel.Text = 'Name: ' .. plr.Name
                TextLabel.ZIndex = 10

                local espLoopFunc
                local teamChange
                local addedFunc

                addedFunc = plr.CharacterAdded:Connect(function()
                    if ESPenabled then
                        espLoopFunc.Disconnect(espLoopFunc)
                        teamChange.Disconnect(teamChange)
                        ESPholder.Destroy(ESPholder)

                        repeat
                            task.wait(1)
                        until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass('Humanoid')

                        ESP(plr, logic)
                        addedFunc.Disconnect(addedFunc)
                    else
                        teamChange.Disconnect(teamChange)
                        addedFunc.Disconnect(addedFunc)
                    end
                end)
                teamChange = plr.GetPropertyChangedSignal(plr, 'TeamColor'):Connect(function(
                )
                    if ESPenabled then
                        espLoopFunc.Disconnect(espLoopFunc)
                        addedFunc.Disconnect(addedFunc)
                        ESPholder.Destroy(ESPholder)

                        repeat
                            task.wait(1)
                        until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass('Humanoid')

                        ESP(plr, logic)
                        teamChange.Disconnect(teamChange)
                    else
                        teamChange.Disconnect(teamChange)
                    end
                end)

                local function espLoop()
                    if COREGUI.FindFirstChild(COREGUI, plr.Name .. '_ESP') then
                        if plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass('Humanoid') and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                            local pos = math.floor((getRoot(Players.LocalPlayer.Character).Position - getRoot(plr.Character).Position).magnitude)

                            TextLabel.Text = 'Name: ' .. plr.Name .. ' | Health: ' .. round(plr.Character:FindFirstChildOfClass('Humanoid').Health, 1) .. ' | Studs: ' .. pos
                        end
                    else
                        teamChange.Disconnect(teamChange)
                        addedFunc.Disconnect(addedFunc)
                        espLoopFunc.Disconnect(espLoopFunc)
                    end
                end

                espLoopFunc = RunService.RenderStepped:Connect(espLoop)
            end
        end
    end)
end
CHMS = function(plr)
    task.spawn(function()
        for i, v in pairs(COREGUI.GetChildren(COREGUI))do
            if v.Name == plr.Name .. '_CHMS' then
                v.Destroy(v)
            end
        end

        task.wait()

        if plr.Character and plr.Name ~= Players.LocalPlayer.Name and not COREGUI.FindFirstChild(COREGUI, plr.Name .. '_CHMS') then
            local ESPholder = Instance.new('Folder')

            ESPholder.Name = plr.Name .. '_CHMS'
            ESPholder.Parent = COREGUI

            repeat
                task.wait(1)
            until plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass('Humanoid')

            for b, n in pairs(plr.Character:GetChildren())do
                if (n.IsA(n, 'BasePart')) then
                    local a = Instance.new('BoxHandleAdornment')

                    a.Name = plr.Name
                    a.Parent = ESPholder
                    a.Adornee = n
                    a.AlwaysOnTop = true
                    a.ZIndex = 10
                    a.Size = n.Size
                    a.Transparency = espTransparency
                    a.Color = plr.TeamColor
                end
            end

            local addedFunc
            local teamChange
            local CHMSremoved

            addedFunc = plr.CharacterAdded:Connect(function()
                if CHMSenabled then
                    ESPholder.Destroy(ESPholder)
                    teamChange.Disconnect(teamChange)

                    repeat
                        task.wait(1)
                    until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass('Humanoid')

                    CHMS(plr)
                    addedFunc.Disconnect(addedFunc)
                else
                    teamChange.Disconnect(teamChange)
                    addedFunc.Disconnect(addedFunc)
                end
            end)
            teamChange = plr.GetPropertyChangedSignal(plr, 'TeamColor'):Connect(function(
            )
                if CHMSenabled then
                    ESPholder.Destroy(ESPholder)
                    addedFunc.Disconnect(addedFunc)

                    repeat
                        task.wait(1)
                    until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass('Humanoid')

                    CHMS(plr)
                    teamChange.Disconnect(teamChange)
                else
                    teamChange.Disconnect(teamChange)
                end
            end)
            CHMSremoved = ESPholder.AncestryChanged:Connect(function()
                teamChange.Disconnect(teamChange)
                addedFunc.Disconnect(addedFunc)
                CHMSremoved.Disconnect(CHMSremoved)
            end)
        end
    end)
end
Locate = function(plr)
    task.spawn(function()
        for i, v in pairs(COREGUI.GetChildren(COREGUI))do
            if v.Name == plr.Name .. '_LC' then
                v.Destroy(v)
            end
        end

        task.wait()

        if plr.Character and plr.Name ~= Players.LocalPlayer.Name and not COREGUI.FindFirstChild(COREGUI, plr.Name .. '_LC') then
            local ESPholder = Instance.new('Folder')

            ESPholder.Name = plr.Name .. '_LC'
            ESPholder.Parent = COREGUI

            repeat
                task.wait(1)
            until plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass('Humanoid')

            for b, n in pairs(plr.Character:GetChildren())do
                if (n.IsA(n, 'BasePart')) then
                    local a = Instance.new('BoxHandleAdornment')

                    a.Name = plr.Name
                    a.Parent = ESPholder
                    a.Adornee = n
                    a.AlwaysOnTop = true
                    a.ZIndex = 10
                    a.Size = n.Size
                    a.Transparency = espTransparency
                    a.Color = plr.TeamColor
                end
            end

            if plr.Character and plr.Character:FindFirstChild('Head') then
                local BillboardGui = Instance.new('BillboardGui')
                local TextLabel = Instance.new('TextLabel')

                BillboardGui.Adornee = plr.Character.Head
                BillboardGui.Name = plr.Name
                BillboardGui.Parent = ESPholder
                BillboardGui.Size = UDim2.new(0, 100, 0, 150)
                BillboardGui.StudsOffset = Vector3.new(0, 1, 0)
                BillboardGui.AlwaysOnTop = true
                TextLabel.Parent = BillboardGui
                TextLabel.BackgroundTransparency = 1
                TextLabel.Position = UDim2.new(0, 0, 0, -50)
                TextLabel.Size = UDim2.new(0, 100, 0, 100)
                TextLabel.Font = Enum.Font.SourceSansSemibold
                TextLabel.TextSize = 20
                TextLabel.TextColor3 = Color3.new(1, 1, 1)
                TextLabel.TextStrokeTransparency = 0
                TextLabel.TextYAlignment = Enum.TextYAlignment.Bottom
                TextLabel.Text = 'Name: ' .. plr.Name
                TextLabel.ZIndex = 10

                local lcLoopFunc
                local addedFunc
                local teamChange

                addedFunc = plr.CharacterAdded:Connect(function()
                    if ESPholder ~= nil and ESPholder.Parent ~= nil then
                        lcLoopFunc.Disconnect(lcLoopFunc)
                        teamChange.Disconnect(teamChange)
                        ESPholder.Destroy(ESPholder)

                        repeat
                            task.wait(1)
                        until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass('Humanoid')

                        Locate(plr)
                        addedFunc.Disconnect(addedFunc)
                    else
                        teamChange.Disconnect(teamChange)
                        addedFunc.Disconnect(addedFunc)
                    end
                end)
                teamChange = plr.GetPropertyChangedSignal(plr, 'TeamColor'):Connect(function(
                )
                    if ESPholder ~= nil and ESPholder.Parent ~= nil then
                        lcLoopFunc.Disconnect(lcLoopFunc)
                        addedFunc.Disconnect(addedFunc)
                        ESPholder.Destroy(ESPholder)

                        repeat
                            task.wait(1)
                        until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass('Humanoid')

                        Locate(plr)
                        teamChange.Disconnect(teamChange)
                    else
                        teamChange.Disconnect(teamChange)
                    end
                end)

                local function lcLoop()
                    if COREGUI.FindFirstChild(COREGUI, plr.Name .. '_LC') then
                        if plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass('Humanoid') and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                            local pos = math.floor((getRoot(Players.LocalPlayer.Character).Position - getRoot(plr.Character).Position).magnitude)

                            TextLabel.Text = 'Name: ' .. plr.Name .. ' | Health: ' .. round(plr.Character:FindFirstChildOfClass('Humanoid').Health, 1) .. ' | Studs: ' .. pos
                        end
                    else
                        teamChange.Disconnect(teamChange)
                        addedFunc.Disconnect(addedFunc)
                        lcLoopFunc.Disconnect(lcLoopFunc)
                    end
                end

                lcLoopFunc = RunService.RenderStepped:Connect(lcLoop)
            end
        end
    end)
end

local bindsGUI = KeybindEditor
local awaitingInput = false
local keySelected = false

refreshbinds = function()
    if Holder_2 then
        Holder_2.ClearAllChildren(Holder_2)

        Holder_2.CanvasSize = UDim2.new(0, 0, 0, 10)

        for i = 1, #binds do
            local YSize = 25
            local Position = ((i * YSize) - YSize)
            local newbind = Example_2.Clone(Example_2)

            newbind.Parent = Holder_2
            newbind.Visible = true
            newbind.Position = UDim2.new(0, 0, 0, Position + 5)

            table.insert(shade2, newbind)
            table.insert(shade2, newbind.Text)
            table.insert(text1, newbind.Text)
            table.insert(shade3, newbind.Text.Delete)
            table.insert(text2, newbind.Text.Delete)

            local input = tostring(binds[i].KEY)
            local key

            if input == 'RightClick' or input == 'LeftClick' then
                key = input
            else
                key = input.sub(input, 14)
            end
            if binds[i].TOGGLE then
                newbind.Text.Text = key .. ' > ' .. binds[i].COMMAND .. ' / ' .. binds[i].TOGGLE
            else
                newbind.Text.Text = key .. ' > ' .. binds[i].COMMAND .. '  ' .. (binds[i].ISKEYUP and '(keyup)' or '(keydown)')
            end

            Holder_2.CanvasSize = UDim2.new(0, 0, 0, Position + 30)

            newbind.Text.Delete.MouseButton1Click:Connect(function()
                unkeybind(binds[i].COMMAND, binds[i].KEY)
            end)
        end
    end
end

refreshbinds()

toggleOn = {}
unkeybind = function(cmd, key)
    for i = #binds, 1, -1 do
        if binds[i].COMMAND == cmd and binds[i].KEY == key then
            toggleOn[binds[i] ] = nil

            table.remove(binds, i)
        end
    end

    refreshbinds()
    updatesaves()

    if key == 'RightClick' or key == 'LeftClick' then
        notify('Keybinds Updated', 'Unbinded ' .. key .. ' from ' .. cmd)
    else
        notify('Keybinds Updated', 'Unbinded ' .. key.sub(key, 14) .. ' from ' .. cmd)
    end
end

PositionsFrame.Delete.MouseButton1Click:Connect(function()
    execCmd('cpos')
end)

refreshwaypoints = function()
    if #WayPoints > 0 or #pWayPoints > 0 then
        PositionsHint.Destroy(PositionsHint)
    end
    if Holder_4 then
        Holder_4.ClearAllChildren(Holder_4)

        Holder_4.CanvasSize = UDim2.new(0, 0, 0, 10)

        local YSize = 25
        local num = 1

        for i = 1, #WayPoints do
            local Position = ((num * YSize) - YSize)
            local newpoint = Example_4.Clone(Example_4)

            newpoint.Parent = Holder_4
            newpoint.Visible = true
            newpoint.Position = UDim2.new(0, 0, 0, Position + 5)
            newpoint.Text.Text = WayPoints[i].NAME

            table.insert(shade2, newpoint)
            table.insert(shade2, newpoint.Text)
            table.insert(text1, newpoint.Text)
            table.insert(shade3, newpoint.Text.Delete)
            table.insert(text2, newpoint.Text.Delete)
            table.insert(shade3, newpoint.Text.TP)
            table.insert(text2, newpoint.Text.TP)

            Holder_4.CanvasSize = UDim2.new(0, 0, 0, Position + 30)

            newpoint.Text.Delete.MouseButton1Click:Connect(function()
                execCmd('dpos ' .. WayPoints[i].NAME)
            end)
            newpoint.Text.TP.MouseButton1Click:Connect(function()
                execCmd('loadpos ' .. WayPoints[i].NAME)
            end)

            num = num + 1
        end
        for i = 1, #pWayPoints do
            local Position = ((num * YSize) - YSize)
            local newpoint = Example_4.Clone(Example_4)

            newpoint.Parent = Holder_4
            newpoint.Visible = true
            newpoint.Position = UDim2.new(0, 0, 0, Position + 5)
            newpoint.Text.Text = pWayPoints[i].NAME

            table.insert(shade2, newpoint)
            table.insert(shade2, newpoint.Text)
            table.insert(text1, newpoint.Text)
            table.insert(shade3, newpoint.Text.Delete)
            table.insert(text2, newpoint.Text.Delete)
            table.insert(shade3, newpoint.Text.TP)
            table.insert(text2, newpoint.Text.TP)

            Holder_4.CanvasSize = UDim2.new(0, 0, 0, Position + 30)

            newpoint.Text.Delete.MouseButton1Click:Connect(function()
                execCmd('dpos ' .. pWayPoints[i].NAME)
            end)
            newpoint.Text.TP.MouseButton1Click:Connect(function()
                execCmd('loadpos ' .. pWayPoints[i].NAME)
            end)

            num = num + 1
        end
    end
end

refreshwaypoints()

refreshaliases = function()
    if #aliases > 0 then
        AliasHint.Destroy(AliasHint)
    end
    if Holder_3 then
        Holder_3.ClearAllChildren(Holder_3)

        Holder_3.CanvasSize = UDim2.new(0, 0, 0, 10)

        for i = 1, #aliases do
            local YSize = 25
            local Position = ((i * YSize) - YSize)
            local newalias = Example_3.Clone(Example_3)

            newalias.Parent = Holder_3
            newalias.Visible = true
            newalias.Position = UDim2.new(0, 0, 0, Position + 5)
            newalias.Text.Text = aliases[i].CMD .. ' > ' .. aliases[i].ALIAS

            table.insert(shade2, newalias)
            table.insert(shade2, newalias.Text)
            table.insert(text1, newalias.Text)
            table.insert(shade3, newalias.Text.Delete)
            table.insert(text2, newalias.Text.Delete)

            Holder_3.CanvasSize = UDim2.new(0, 0, 0, Position + 30)

            newalias.Text.Delete.MouseButton1Click:Connect(function()
                execCmd('removealias ' .. aliases[i].ALIAS)
            end)
        end
    end
end

local bindChosenKeyUp = false

BindTo.MouseButton1Click:Connect(function()
    awaitingInput = true
    BindTo.Text = 'Press something'
end)
BindTriggerSelect.MouseButton1Click:Connect(function()
    bindChosenKeyUp = not bindChosenKeyUp
    BindTriggerSelect.Text = bindChosenKeyUp and 'KeyUp' or 'KeyDown'
end)

newToggle = false
Cmdbar_3.Parent.Visible = false

On_2.MouseButton1Click:Connect(function()
    if newToggle == false then
        newToggle = true
        On_2.BackgroundTransparency = 0
        Cmdbar_3.Parent.Visible = true
        BindTriggerSelect.Visible = false
    else
        newToggle = false
        On_2.BackgroundTransparency = 1
        Cmdbar_3.Parent.Visible = false
        BindTriggerSelect.Visible = true
    end
end)
Add_2.MouseButton1Click:Connect(function()
    if keySelected then
        if string.find(Cmdbar_2.Text, '\\\\') or string.find(Cmdbar_3.Text, '\\\\') then
            notify('Keybind Error', 
[[Only use one backslash to keybind multiple commands into one keybind or command]])
        else
            if newToggle and Cmdbar_3.Text ~= '' and Cmdbar_2.text ~= '' then
                addbind(Cmdbar_2.Text, keyPressed, false, Cmdbar_3.Text)
            elseif not newToggle and Cmdbar_2.text ~= '' then
                addbind(Cmdbar_2.Text, keyPressed, bindChosenKeyUp)
            else
                return
            end

            refreshbinds()
            updatesaves()

            if keyPressed == 'RightClick' or keyPressed == 'LeftClick' then
                notify('Keybinds Updated', 'Binded ' .. keyPressed .. ' to ' .. Cmdbar_2.Text .. (newToggle and ' / ' .. Cmdbar_3.Text or ''))
            else
                notify('Keybinds Updated', 'Binded ' .. keyPressed.sub(keyPressed, 14) .. ' to ' .. Cmdbar_2.Text .. (newToggle and ' / ' .. Cmdbar_3.Text or ''))
            end
        end
    end
end)
Exit_2.MouseButton1Click:Connect(function()
    Cmdbar_2.Text = 'Command'
    Cmdbar_3.Text = 'Command 2'
    BindTo.Text = 'Click to bind'
    bindChosenKeyUp = false
    BindTriggerSelect.Text = 'KeyDown'
    keySelected = false

    KeybindEditor.TweenPosition(KeybindEditor, UDim2.new(0.5, -180, 0, -500), 'InOut', 'Quart', 0.5, true, nil)
end)

onInputBegan = function(input, gameProcessed)
    if awaitingInput then
        if input.UserInputType == Enum.UserInputType.Keyboard then
            keyPressed = tostring(input.KeyCode)
            BindTo.Text = keyPressed.sub(keyPressed, 14)
        elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
            keyPressed = 'LeftClick'
            BindTo.Text = 'LeftClick'
        elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
            keyPressed = 'RightClick'
            BindTo.Text = 'RightClick'
        end

        awaitingInput = false
        keySelected = true
    end
    if not gameProcessed and #binds > 0 then
        for i, v in pairs(binds)do
            if not v.ISKEYUP then
                if (input.UserInputType == Enum.UserInputType.Keyboard and v.KEY:lower() == tostring(input.KeyCode):lower()) or (input.UserInputType == Enum.UserInputType.MouseButton1 and v.KEY:lower() == 'leftclick') or (input.UserInputType == Enum.UserInputType.MouseButton2 and v.KEY:lower() == 'rightclick') then
                    if v.TOGGLE then
                        local isOn = toggleOn[v] == true

                        toggleOn[v] = not isOn

                        if isOn then
                            execCmd(v.TOGGLE, Players.LocalPlayer)
                        else
                            execCmd(v.COMMAND, Players.LocalPlayer)
                        end
                    else
                        execCmd(v.COMMAND, Players.LocalPlayer)
                    end
                end
            end
        end
    end
end
onInputEnded = function(input, gameProcessed)
    if not gameProcessed and #binds > 0 then
        for i, v in pairs(binds)do
            if v.ISKEYUP then
                if (input.UserInputType == Enum.UserInputType.Keyboard and v.KEY:lower() == tostring(input.KeyCode):lower()) or (input.UserInputType == Enum.UserInputType.MouseButton1 and v.KEY:lower() == 'leftclick') or (input.UserInputType == Enum.UserInputType.MouseButton2 and v.KEY:lower() == 'rightclick') then
                    execCmd(v.COMMAND, Players.LocalPlayer)
                end
            end
        end
    end
end

UserInputService.InputBegan:Connect(onInputBegan)
UserInputService.InputEnded:Connect(onInputEnded)
ClickTP.Select.MouseButton1Click:Connect(function()
    if keySelected then
        addbind('clicktp', keyPressed, bindChosenKeyUp)
        refreshbinds()
        updatesaves()

        if keyPressed == 'RightClick' or keyPressed == 'LeftClick' then
            notify('Keybinds Updated', 'Binded ' .. keyPressed .. ' to click tp')
        else
            notify('Keybinds Updated', 'Binded ' .. keyPressed.sub(keyPressed, 14) .. ' to click tp')
        end
    end
end)
ClickDelete.Select.MouseButton1Click:Connect(function()
    if keySelected then
        addbind('clickdel', keyPressed, bindChosenKeyUp)
        refreshbinds()
        updatesaves()

        if keyPressed == 'RightClick' or keyPressed == 'LeftClick' then
            notify('Keybinds Updated', 'Binded ' .. keyPressed .. ' to click delete')
        else
            notify('Keybinds Updated', 'Binded ' .. keyPressed.sub(keyPressed, 14) .. ' to click delete')
        end
    end
end)

local function clicktpFunc()
    pcall(function()
        local character = Players.LocalPlayer.Character
        local humanoid = character.FindFirstChildOfClass(character, 'Humanoid')

        if humanoid and humanoid.SeatPart then
            humanoid.Sit = false

            task.wait(0.1)
        end

        local hipHeight = humanoid and humanoid.HipHeight > 0 and (humanoid.HipHeight + 1)
        local rootPart = getRoot(character)
        local rootPartPosition = rootPart.Position
        local hitPosition = IYMouse.Hit.Position
        local newCFrame = CFrame.new(hitPosition, Vector3.new(rootPartPosition.X, hitPosition.Y, rootPartPosition.Z)) * CFrame.Angles(0, math.pi, 0)

        rootPart.CFrame = newCFrame + Vector3.new(0, hipHeight or 4, 0)
    end)
end

IYMouse.Button1Down:Connect(function()
    for i, v in pairs(binds)do
        if v.COMMAND == 'clicktp' then
            local input = v.KEY

            if input == 'RightClick' and UserInputService.IsMouseButtonPressed(UserInputService, Enum.UserInputType.MouseButton2) and Players.LocalPlayer.Character then
                clicktpFunc()
            elseif input == 'LeftClick' and UserInputService.IsMouseButtonPressed(UserInputService, Enum.UserInputType.MouseButton1) and Players.LocalPlayer.Character then
                clicktpFunc()
            elseif UserInputService.IsKeyDown(UserInputService, Enum.KeyCode[input.sub(input, 14)]) and Players.LocalPlayer.Character then
                clicktpFunc()
            end
        elseif v.COMMAND == 'clickdel' then
            local input = v.KEY

            if input == 'RightClick' and UserInputService.IsMouseButtonPressed(UserInputService, Enum.UserInputType.MouseButton2) then
                pcall(function()
                    IYMouse.Target:Destroy()
                end)
            elseif input == 'LeftClick' and UserInputService.IsMouseButtonPressed(UserInputService, Enum.UserInputType.MouseButton1) then
                pcall(function()
                    IYMouse.Target:Destroy()
                end)
            elseif UserInputService.IsKeyDown(UserInputService, Enum.KeyCode[input.sub(input, 14)]) then
                pcall(function()
                    IYMouse.Target:Destroy()
                end)
            end
        end
    end
end)

PluginsGUI = PluginEditor.background
addPlugin = function(name)
    if name.lower(name) == 'plugin file name' or name.lower(name) == 'iy_fe.iy' or name == 'iy_fe' then
        notify('Plugin Error', 'Please enter a valid plugin')
    else
        local file
        local fileName

        if name.sub(name, -3) == '.iy' then
            pcall(function()
                file = readfile(name)
            end)

            fileName = name
        else
            pcall(function()
                file = readfile(name .. '.iy')
            end)

            fileName = name .. '.iy'
        end
        if file then
            if not FindInTable(PluginsTable, fileName) then
                table.insert(PluginsTable, fileName)
                LoadPlugin(fileName)
                refreshplugins()
                pcall(eventEditor.Refresh)
            else
                notify('Plugin Error', 'This plugin is already added')
            end
        else
            notify('Plugin Error', 'Cannot locate file "' .. fileName .. '". Is the file in the correct folder?')
        end
    end
end
deletePlugin = function(name)
    local pName = name .. '.iy'

    if name.sub(name, -3) == '.iy' then
        pName = name
    end

    for i = #cmds, 1, -1 do
        if cmds[i].PLUGIN == pName then
            table.remove(cmds, i)
        end
    end

    for i, v in pairs(CMDsF.GetChildren(CMDsF))do
        if v.Name == 'PLUGIN_' .. pName then
            v.Destroy(v)
        end
    end
    for i, v in pairs(PluginsTable)do
        if v == pName then
            table.remove(PluginsTable, i)
            notify('Removed Plugin', pName .. ' was removed')
        end
    end

    IndexContents('', true)
    refreshplugins()
end
refreshplugins = function(dontSave)
    if #PluginsTable > 0 then
        PluginsHint.Destroy(PluginsHint)
    end
    if Holder_5 then
        Holder_5.ClearAllChildren(Holder_5)

        Holder_5.CanvasSize = UDim2.new(0, 0, 0, 10)

        for i, v in pairs(PluginsTable)do
            local pName = v
            local YSize = 25
            local Position = ((i * YSize) - YSize)
            local newplugin = Example_5.Clone(Example_5)

            newplugin.Parent = Holder_5
            newplugin.Visible = true
            newplugin.Position = UDim2.new(0, 0, 0, Position + 5)
            newplugin.Text.Text = pName

            table.insert(shade2, newplugin)
            table.insert(shade2, newplugin.Text)
            table.insert(text1, newplugin.Text)
            table.insert(shade3, newplugin.Text.Delete)
            table.insert(text2, newplugin.Text.Delete)

            Holder_5.CanvasSize = UDim2.new(0, 0, 0, Position + 30)

            newplugin.Text.Delete.MouseButton1Click:Connect(function()
                deletePlugin(pName)
            end)
        end

        if not dontSave then
            updatesaves()
        end
    end
end

local PluginCache

LoadPlugin = function(val, startup)
    local plugin

    CatchedPluginLoad = function()
        plugin = loadfile(val)()
    end
    handlePluginError = function(plerror)
        notify('Plugin Error', 'An error occurred with the plugin, "' .. val .. '" and it could not be loaded')

        if FindInTable(PluginsTable, val) then
            for i, v in pairs(PluginsTable)do
                if v == val then
                    table.remove(PluginsTable, i)
                end
            end
        end

        updatesaves()
        print('Original Error: ' .. tostring(plerror))
        print('Plugin Error, stack traceback: ' .. tostring(debug.traceback()))

        plugin = nil

        return false
    end

    xpcall(CatchedPluginLoad, handlePluginError)

    if plugin ~= nil then
        if not startup then
            notify('Loaded Plugin', 'Name: ' .. plugin.PluginName .. '\n' .. 'Description: ' .. plugin.PluginDescription)
        end

        addcmdtext('', val)
        addcmdtext(string.upper('--' .. plugin.PluginName), val, plugin.PluginDescription)

        if plugin.Commands then
            for i, v in pairs(plugin.Commands)do
                local cmdExt = ''
                local cmdName = i

                local function handleNames()
                    cmdName = i

                    if findCmd(cmdName .. cmdExt) then
                        if isNumber(cmdExt) then
                            cmdExt = cmdExt + 1
                        else
                            cmdExt = 1
                        end

                        handleNames()
                    else
                        cmdName = cmdName .. cmdExt
                    end
                end

                handleNames()
                addcmd(cmdName, v.Aliases, v.Function, val)

                if v.ListName then
                    local newName = v.ListName
                    local cmdNames = {
                        i,
                        unpack(v.Aliases),
                    }

                    for i, v in pairs(cmdNames)do
                        newName = newName.gsub(newName, v, v .. cmdExt)
                    end

                    addcmdtext(newName, val, v.Description)
                else
                    addcmdtext(cmdName, val, v.Description)
                end
            end
        end

        IndexContents('', true)
    elseif plugin == nil then
        plugin = nil
    end
end
FindPlugins = function()
    if PluginsTable ~= nil and type(PluginsTable) == 'table' then
        for i, v in pairs(PluginsTable)do
            LoadPlugin(v, true)
        end

        refreshplugins(true)
    end
end

AddPlugin.MouseButton1Click:Connect(function()
    addPlugin(PluginsGUI.FileName.Text)
end)
Exit_3.MouseButton1Click:Connect(function()
    PluginEditor.TweenPosition(PluginEditor, UDim2.new(0.5, -180, 0, -500), 'InOut', 'Quart', 0.5, true, nil)

    FileName.Text = 'Plugin File Name'
end)
Add_3.MouseButton1Click:Connect(function()
    PluginEditor.TweenPosition(PluginEditor, UDim2.new(0.5, -180, 0, 310), 'InOut', 'Quart', 0.5, true, nil)
end)
Plugins.MouseButton1Click:Connect(function()
    if writefileExploit() then
        PluginsFrame.TweenPosition(PluginsFrame, UDim2.new(0, 0, 0, 0), 'InOut', 'Quart', 0.5, true, nil)
        task.wait(0.5)

        SettingsHolder.Visible = false
    else
        notify('Incompatible Exploit', 
[[Your exploit is unable to use plugins (missing read/writefile)]])
    end
end)
Close_4.MouseButton1Click:Connect(function()
    SettingsHolder.Visible = true

    PluginsFrame.TweenPosition(PluginsFrame, UDim2.new(0, 0, 0, 175), 'InOut', 'Quart', 0.5, true, nil)
end)

local TeleportCheck = false

Players.LocalPlayer.OnTeleport:Connect(function(State)
    if KeepInfYield and (not TeleportCheck) and queueteleport then
        TeleportCheck = true

        queueteleport(
[[loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()]])
    end
end)
addcmd('addalias', {}, function(args, speaker)
    if #args < 2 then
        return
    end

    local cmd = string.lower(args[1])
    local alias = string.lower(args[2])

    for i, v in pairs(cmds)do
        if v.NAME:lower() == cmd or FindInTable(v.ALIAS, cmd) then
            customAlias[alias] = v
            aliases[#aliases + 1] = {
                CMD = cmd,
                ALIAS = alias,
            }

            notify('Aliases Modified', 'Added ' .. alias .. ' as an alias to ' .. cmd)
            updatesaves()
            refreshaliases()

            break
        end
    end
end)
addcmd('removealias', {}, function(args, speaker)
    if #args < 1 then
        return
    end

    local alias = string.lower(args[1])

    if customAlias[alias] then
        local cmd = customAlias[alias].NAME

        customAlias[alias] = nil

        for i = #aliases, 1, -1 do
            if aliases[i].ALIAS == tostring(alias) then
                table.remove(aliases, i)
            end
        end

        notify('Aliases Modified', 'Removed the alias ' .. alias .. ' from ' .. cmd)
        updatesaves()
        refreshaliases()
    end
end)
addcmd('clraliases', {}, function(args, speaker)
    customAlias = {}
    aliases = {}

    notify('Aliases Modified', 'Removed all aliases')
    updatesaves()
    refreshaliases()
end)
addcmd('discord', {
    'support',
    'help',
}, function(args, speaker)
    if everyClipboard then
        toClipboard('https://discord.com/invite/dYHag43eeU')
        notify('Discord Invite', 'Copied to clipboard!\ndiscord.gg/dYHag43eeU')
    else
        notify('Discord Invite', 'discord.gg/dYHag43eeU')
    end
    if httprequest then
        httprequest({
            Url = 'http://127.0.0.1:6463/rpc?v=1',
            Method = 'POST',
            Headers = {
                ['Content-Type'] = 'application/json',
                Origin = 'https://discord.com',
            },
            Body = HttpService.JSONEncode(HttpService, {
                cmd = 'INVITE_BROWSER',
                nonce = HttpService.GenerateGUID(HttpService, false),
                args = {
                    code = 'dYHag43eeU',
                },
            }),
        })
    end
end)
addcmd('keepiy', {}, function(args, speaker)
    if queueteleport then
        KeepInfYield = true

        updatesaves()
    else
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing queue_on_teleport)]])
    end
end)
addcmd('unkeepiy', {}, function(args, speaker)
    if queueteleport then
        KeepInfYield = false

        updatesaves()
    else
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing queue_on_teleport)]])
    end
end)
addcmd('togglekeepiy', {}, function(args, speaker)
    if queueteleport then
        KeepInfYield = not KeepInfYield

        updatesaves()
    else
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing queue_on_teleport)]])
    end
end)

local canOpenServerinfo = true

addcmd('serverinfo', {
    'info',
    'sinfo',
}, function(args, speaker)
    if not canOpenServerinfo then
        return
    end

    canOpenServerinfo = false

    task.spawn(function()
        local FRAME = Instance.new('Frame')
        local shadow = Instance.new('Frame')
        local PopupText = Instance.new('TextLabel')
        local Exit = Instance.new('TextButton')
        local ExitImage = Instance.new('ImageLabel')
        local background = Instance.new('Frame')
        local TextLabel = Instance.new('TextLabel')
        local TextLabel2 = Instance.new('TextLabel')
        local TextLabel3 = Instance.new('TextLabel')
        local Time = Instance.new('TextLabel')
        local appearance = Instance.new('TextLabel')
        local maxplayers = Instance.new('TextLabel')
        local name = Instance.new('TextLabel')
        local placeid = Instance.new('TextLabel')
        local playerid = Instance.new('TextLabel')
        local players = Instance.new('TextLabel')
        local CopyApp = Instance.new('TextButton')
        local CopyPlrID = Instance.new('TextButton')
        local CopyPlcID = Instance.new('TextButton')
        local CopyPlcName = Instance.new('TextButton')

        FRAME.Name = randomString()
        FRAME.Parent = ScaledHolder
        FRAME.Active = true
        FRAME.BackgroundTransparency = 1
        FRAME.Position = UDim2.new(0.5, -130, 0, -500)
        FRAME.Size = UDim2.new(0, 250, 0, 20)
        FRAME.ZIndex = 10

        dragGUI(FRAME)

        shadow.Name = 'shadow'
        shadow.Parent = FRAME
        shadow.BackgroundColor3 = currentShade2
        shadow.BorderSizePixel = 0
        shadow.Size = UDim2.new(0, 250, 0, 20)
        shadow.ZIndex = 10

        table.insert(shade2, shadow)

        PopupText.Name = 'PopupText'
        PopupText.Parent = shadow
        PopupText.BackgroundTransparency = 1
        PopupText.Size = UDim2.new(1, 0, 0.95, 0)
        PopupText.ZIndex = 10
        PopupText.Font = Enum.Font.SourceSans
        PopupText.TextSize = 14
        PopupText.Text = 'Server'
        PopupText.TextColor3 = currentText1
        PopupText.TextWrapped = true

        table.insert(text1, PopupText)

        Exit.Name = 'Exit'
        Exit.Parent = shadow
        Exit.BackgroundTransparency = 1
        Exit.Position = UDim2.new(1, -20, 0, 0)
        Exit.Size = UDim2.new(0, 20, 0, 20)
        Exit.Text = ''
        Exit.ZIndex = 10
        ExitImage.Parent = Exit
        ExitImage.BackgroundColor3 = Color3.new(1, 1, 1)
        ExitImage.BackgroundTransparency = 1
        ExitImage.Position = UDim2.new(0, 5, 0, 5)
        ExitImage.Size = UDim2.new(0, 10, 0, 10)
        ExitImage.Image = getcustomasset('infiniteyield/assets/close.png')
        ExitImage.ZIndex = 10
        background.Name = 'background'
        background.Parent = FRAME
        background.Active = true
        background.BackgroundColor3 = currentShade1
        background.BorderSizePixel = 0
        background.Position = UDim2.new(0, 0, 1, 0)
        background.Size = UDim2.new(0, 250, 0, 250)
        background.ZIndex = 10

        table.insert(shade1, background)

        TextLabel.Name = 'Text Label'
        TextLabel.Parent = background
        TextLabel.BackgroundTransparency = 1
        TextLabel.BorderSizePixel = 0
        TextLabel.Position = UDim2.new(0, 5, 0, 80)
        TextLabel.Size = UDim2.new(0, 100, 0, 20)
        TextLabel.ZIndex = 10
        TextLabel.Font = Enum.Font.SourceSansLight
        TextLabel.TextSize = 20
        TextLabel.Text = 'Run Time:'
        TextLabel.TextColor3 = currentText1
        TextLabel.TextXAlignment = Enum.TextXAlignment.Left

        table.insert(text1, TextLabel)

        TextLabel2.Name = 'Text Label2'
        TextLabel2.Parent = background
        TextLabel2.BackgroundTransparency = 1
        TextLabel2.BorderSizePixel = 0
        TextLabel2.Position = UDim2.new(0, 5, 0, 130)
        TextLabel2.Size = UDim2.new(0, 100, 0, 20)
        TextLabel2.ZIndex = 10
        TextLabel2.Font = Enum.Font.SourceSansLight
        TextLabel2.TextSize = 20
        TextLabel2.Text = 'Statistics:'
        TextLabel2.TextColor3 = currentText1
        TextLabel2.TextXAlignment = Enum.TextXAlignment.Left

        table.insert(text1, TextLabel2)

        TextLabel3.Name = 'Text Label3'
        TextLabel3.Parent = background
        TextLabel3.BackgroundTransparency = 1
        TextLabel3.BorderSizePixel = 0
        TextLabel3.Position = UDim2.new(0, 5, 0, 10)
        TextLabel3.Size = UDim2.new(0, 100, 0, 20)
        TextLabel3.ZIndex = 10
        TextLabel3.Font = Enum.Font.SourceSansLight
        TextLabel3.TextSize = 20
        TextLabel3.Text = 'Local Player:'
        TextLabel3.TextColor3 = currentText1
        TextLabel3.TextXAlignment = Enum.TextXAlignment.Left

        table.insert(text1, TextLabel3)

        Time.Name = 'Time'
        Time.Parent = background
        Time.BackgroundTransparency = 1
        Time.BorderSizePixel = 0
        Time.Position = UDim2.new(0, 5, 0, 105)
        Time.Size = UDim2.new(0, 100, 0, 20)
        Time.ZIndex = 10
        Time.Font = Enum.Font.SourceSans
        Time.FontSize = Enum.FontSize.Size14
        Time.Text = 'LOADING'
        Time.TextColor3 = currentText1
        Time.TextXAlignment = Enum.TextXAlignment.Left

        table.insert(text1, Time)

        appearance.Name = 'appearance'
        appearance.Parent = background
        appearance.BackgroundTransparency = 1
        appearance.BorderSizePixel = 0
        appearance.Position = UDim2.new(0, 5, 0, 55)
        appearance.Size = UDim2.new(0, 100, 0, 20)
        appearance.ZIndex = 10
        appearance.Font = Enum.Font.SourceSans
        appearance.FontSize = Enum.FontSize.Size14
        appearance.Text = 'Appearance: LOADING'
        appearance.TextColor3 = currentText1
        appearance.TextXAlignment = Enum.TextXAlignment.Left

        table.insert(text1, appearance)

        maxplayers.Name = 'maxplayers'
        maxplayers.Parent = background
        maxplayers.BackgroundTransparency = 1
        maxplayers.BorderSizePixel = 0
        maxplayers.Position = UDim2.new(0, 5, 0, 175)
        maxplayers.Size = UDim2.new(0, 100, 0, 20)
        maxplayers.ZIndex = 10
        maxplayers.Font = Enum.Font.SourceSans
        maxplayers.FontSize = Enum.FontSize.Size14
        maxplayers.Text = 'LOADING'
        maxplayers.TextColor3 = currentText1
        maxplayers.TextXAlignment = Enum.TextXAlignment.Left

        table.insert(text1, maxplayers)

        name.Name = 'name'
        name.Parent = background
        name.BackgroundTransparency = 1
        name.BorderSizePixel = 0
        name.Position = UDim2.new(0, 5, 0, 215)
        name.Size = UDim2.new(0, 240, 0, 30)
        name.ZIndex = 10
        name.Font = Enum.Font.SourceSans
        name.FontSize = Enum.FontSize.Size14
        name.Text = 'Place Name: LOADING'
        name.TextColor3 = currentText1
        name.TextWrapped = true
        name.TextXAlignment = Enum.TextXAlignment.Left
        name.TextYAlignment = Enum.TextYAlignment.Top

        table.insert(text1, name)

        placeid.Name = 'placeid'
        placeid.Parent = background
        placeid.BackgroundTransparency = 1
        placeid.BorderSizePixel = 0
        placeid.Position = UDim2.new(0, 5, 0, 195)
        placeid.Size = UDim2.new(0, 100, 0, 20)
        placeid.ZIndex = 10
        placeid.Font = Enum.Font.SourceSans
        placeid.FontSize = Enum.FontSize.Size14
        placeid.Text = 'Place ID: LOADING'
        placeid.TextColor3 = currentText1
        placeid.TextXAlignment = Enum.TextXAlignment.Left

        table.insert(text1, placeid)

        playerid.Name = 'playerid'
        playerid.Parent = background
        playerid.BackgroundTransparency = 1
        playerid.BorderSizePixel = 0
        playerid.Position = UDim2.new(0, 5, 0, 35)
        playerid.Size = UDim2.new(0, 100, 0, 20)
        playerid.ZIndex = 10
        playerid.Font = Enum.Font.SourceSans
        playerid.FontSize = Enum.FontSize.Size14
        playerid.Text = 'Player ID: LOADING'
        playerid.TextColor3 = currentText1
        playerid.TextXAlignment = Enum.TextXAlignment.Left

        table.insert(text1, playerid)

        players.Name = 'players'
        players.Parent = background
        players.BackgroundTransparency = 1
        players.BorderSizePixel = 0
        players.Position = UDim2.new(0, 5, 0, 155)
        players.Size = UDim2.new(0, 100, 0, 20)
        players.ZIndex = 10
        players.Font = Enum.Font.SourceSans
        players.FontSize = Enum.FontSize.Size14
        players.Text = 'LOADING'
        players.TextColor3 = currentText1
        players.TextXAlignment = Enum.TextXAlignment.Left

        table.insert(text1, players)

        CopyApp.Name = 'CopyApp'
        CopyApp.Parent = background
        CopyApp.BackgroundColor3 = currentShade2
        CopyApp.BorderSizePixel = 0
        CopyApp.Position = UDim2.new(0, 210, 0, 55)
        CopyApp.Size = UDim2.new(0, 35, 0, 20)
        CopyApp.Font = Enum.Font.SourceSans
        CopyApp.TextSize = 14
        CopyApp.Text = 'Copy'
        CopyApp.TextColor3 = currentText1
        CopyApp.ZIndex = 10

        table.insert(shade2, CopyApp)
        table.insert(text1, CopyApp)

        CopyPlrID.Name = 'CopyPlrID'
        CopyPlrID.Parent = background
        CopyPlrID.BackgroundColor3 = currentShade2
        CopyPlrID.BorderSizePixel = 0
        CopyPlrID.Position = UDim2.new(0, 210, 0, 35)
        CopyPlrID.Size = UDim2.new(0, 35, 0, 20)
        CopyPlrID.Font = Enum.Font.SourceSans
        CopyPlrID.TextSize = 14
        CopyPlrID.Text = 'Copy'
        CopyPlrID.TextColor3 = currentText1
        CopyPlrID.ZIndex = 10

        table.insert(shade2, CopyPlrID)
        table.insert(text1, CopyPlrID)

        CopyPlcID.Name = 'CopyPlcID'
        CopyPlcID.Parent = background
        CopyPlcID.BackgroundColor3 = currentShade2
        CopyPlcID.BorderSizePixel = 0
        CopyPlcID.Position = UDim2.new(0, 210, 0, 195)
        CopyPlcID.Size = UDim2.new(0, 35, 0, 20)
        CopyPlcID.Font = Enum.Font.SourceSans
        CopyPlcID.TextSize = 14
        CopyPlcID.Text = 'Copy'
        CopyPlcID.TextColor3 = currentText1
        CopyPlcID.ZIndex = 10

        table.insert(shade2, CopyPlcID)
        table.insert(text1, CopyPlcID)

        CopyPlcName.Name = 'CopyPlcName'
        CopyPlcName.Parent = background
        CopyPlcName.BackgroundColor3 = currentShade2
        CopyPlcName.BorderSizePixel = 0
        CopyPlcName.Position = UDim2.new(0, 210, 0, 215)
        CopyPlcName.Size = UDim2.new(0, 35, 0, 20)
        CopyPlcName.Font = Enum.Font.SourceSans
        CopyPlcName.TextSize = 14
        CopyPlcName.Text = 'Copy'
        CopyPlcName.TextColor3 = currentText1
        CopyPlcName.ZIndex = 10

        table.insert(shade2, CopyPlcName)
        table.insert(text1, CopyPlcName)

        local SINFOGUI = background

        FRAME.TweenPosition(FRAME, UDim2.new(0.5, -130, 0, 100), 'InOut', 'Quart', 0.5, true, nil)
        task.wait(0.5)
        Exit.MouseButton1Click:Connect(function()
            FRAME.TweenPosition(FRAME, UDim2.new(0.5, -130, 0, -500), 'InOut', 'Quart', 0.5, true, nil)
            task.wait(0.6)
            FRAME.Destroy(FRAME)

            canOpenServerinfo = true
        end)

        local Asset = MarketplaceService.GetProductInfo(MarketplaceService, PlaceId)

        SINFOGUI.name.Text = 'Place Name: ' .. Asset.Name
        SINFOGUI.playerid.Text = 'Player ID: ' .. speaker.UserId
        SINFOGUI.maxplayers.Text = Players.MaxPlayers .. ' Players Max'
        SINFOGUI.placeid.Text = 'Place ID: ' .. PlaceId

        CopyApp.MouseButton1Click:Connect(function()
            toClipboard(speaker.CharacterAppearanceId)
        end)
        CopyPlrID.MouseButton1Click:Connect(function()
            toClipboard(speaker.UserId)
        end)
        CopyPlcID.MouseButton1Click:Connect(function()
            toClipboard(PlaceId)
        end)
        CopyPlcName.MouseButton1Click:Connect(function()
            toClipboard(Asset.Name)
        end)

        repeat
            players = Players.GetPlayers(Players)
            SINFOGUI.players.Text = #players .. ' Player(s)'
            SINFOGUI.appearance.Text = 'Appearance: ' .. speaker.CharacterAppearanceId

            local seconds = math.floor(workspace.DistributedGameTime)
            local minutes = math.floor(workspace.DistributedGameTime / 60)
            local hours = math.floor(workspace.DistributedGameTime / 60 / 60)
            local seconds = seconds - (minutes * 60)
            local minutes = minutes - (hours * 60)

            if hours < 1 then
                if minutes < 1 then
                    SINFOGUI.Time.Text = seconds .. ' Second(s)'
                else
                    SINFOGUI.Time.Text = minutes .. ' Minute(s), ' .. seconds .. ' Second(s)'
                end
            else
                SINFOGUI.Time.Text = hours .. ' Hour(s), ' .. minutes .. ' Minute(s), ' .. seconds .. ' Second(s)'
            end

            task.wait(1)
        until SINFOGUI.Parent == nil
    end)
end)
addcmd('jobid', {}, function(args, speaker)
    toClipboard('roblox://placeId=' .. PlaceId .. '&gameInstanceId=' .. JobId)
end)
addcmd('notifyjobid', {}, function(args, speaker)
    notify('JobId / PlaceId', JobId .. ' / ' .. PlaceId)
end)
addcmd('breakloops', {
    'break',
}, function(args, speaker)
    lastBreakTime = tick()
end)
addcmd('gametp', {
    'gameteleport',
}, function(args, speaker)
    TeleportService.Teleport(TeleportService, args[1])
end)
addcmd('rejoin', {
    'rj',
}, function(args, speaker)
    if #Players.GetPlayers(Players) <= 1 then
        Players.LocalPlayer:Kick('\nRejoining...')
        task.wait()
        TeleportService.Teleport(TeleportService, PlaceId, Players.LocalPlayer)
    else
        TeleportService.TeleportToPlaceInstance(TeleportService, PlaceId, JobId, Players.LocalPlayer)
    end
end)
addcmd('autorejoin', {
    'autorj',
}, function(args, speaker)
    GuiService.ErrorMessageChanged:Connect(function()
        execCmd('rejoin')
    end)
    notify('Auto Rejoin', 'Auto rejoin enabled')
end)
addcmd('serverhop', {
    'shop',
}, function(args, speaker)
    local servers = {}
    local req = game.HttpGet(game, 'https://games.roblox.com/v1/games/' .. PlaceId .. 
[[/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true]])
    local body = HttpService.JSONDecode(HttpService, req)

    if body and body.data then
        for i, v in next, body.data do
            if type(v) == 'table' and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
                table.insert(servers, 1, v.id)
            end
        end
    end
    if #servers > 0 then
        TeleportService.TeleportToPlaceInstance(TeleportService, PlaceId, servers[math.random(1, #servers)], Players.LocalPlayer)
    else
        return notify('Serverhop', "Couldn't find a server.")
    end
end)
addcmd('exit', {}, function(args, speaker)
    game.Shutdown(game)
end)

local Noclipping

addcmd('noclip', {}, function(args, speaker)
    Clip = false

    task.wait(0.1)

    local function NoclipLoop()
        if Clip == false and speaker.Character ~= nil then
            for _, child in pairs(speaker.Character:GetDescendants())do
                if child.IsA(child, 'BasePart') and child.CanCollide == true and child.Name ~= floatName then
                    child.CanCollide = false
                end
            end
        end
    end

    Noclipping = RunService.Stepped:Connect(NoclipLoop)

    if args[1] and args[1] == 'nonotify' then
        return
    end

    notify('Noclip', 'Noclip Enabled')
end)
addcmd('clip', {
    'unnoclip',
}, function(args, speaker)
    if Noclipping then
        Noclipping.Disconnect(Noclipping)
    end

    Clip = true

    if args[1] and args[1] == 'nonotify' then
        return
    end

    notify('Noclip', 'Noclip Disabled')
end)
addcmd('togglenoclip', {}, function(args, speaker)
    if Clip then
        execCmd('noclip')
    else
        execCmd('clip')
    end
end)

FLYING = false
QEfly = true
iyflyspeed = 1
vehicleflyspeed = 1
sFLY = function(vfly)
    local plr = Players.LocalPlayer
    local char = plr.Character or plr.CharacterAdded:Wait()
    local humanoid = char.FindFirstChildOfClass(char, 'Humanoid')

    if not humanoid then
        repeat
            task.wait()
        until char.FindFirstChildOfClass(char, 'Humanoid')

        humanoid = char.FindFirstChildOfClass(char, 'Humanoid')
    end
    if flyKeyDown or flyKeyUp then
        flyKeyDown.Disconnect(flyKeyDown)
        flyKeyUp.Disconnect(flyKeyUp)
    end

    local T = getRoot(char)
    local CONTROL = {
        F = 0,
        B = 0,
        L = 0,
        R = 0,
        Q = 0,
        E = 0,
    }
    local lCONTROL = {
        F = 0,
        B = 0,
        L = 0,
        R = 0,
        Q = 0,
        E = 0,
    }
    local SPEED = 0

    local function FLY()
        FLYING = true

        local BG = Instance.new('BodyGyro')
        local BV = Instance.new('BodyVelocity')

        BG.P = 6561
        BG.Parent = T
        BV.Parent = T
        BG.MaxTorque = Vector3.new(387420489, 387420489, 387420489)
        BG.CFrame = T.CFrame
        BV.Velocity = Vector3.new(0, 0, 0)
        BV.MaxForce = Vector3.new(387420489, 387420489, 387420489)

        task.spawn(function()
            repeat
                task.wait()

                local camera = workspace.CurrentCamera

                if not vfly and humanoid then
                    humanoid.PlatformStand = true
                end
                if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
                    SPEED = 50
                elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
                    SPEED = 0
                end
                if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
                    BV.Velocity = ((camera.CFrame.LookVector * (CONTROL.F + CONTROL.B)) + ((camera.CFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - camera.CFrame.p)) * SPEED
                    lCONTROL = {
                        F = CONTROL.F,
                        B = CONTROL.B,
                        L = CONTROL.L,
                        R = CONTROL.R,
                    }
                elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
                    BV.Velocity = ((camera.CFrame.LookVector * (lCONTROL.F + lCONTROL.B)) + ((camera.CFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - camera.CFrame.p)) * SPEED
                else
                    BV.Velocity = Vector3.new(0, 0, 0)
                end

                BG.CFrame = camera.CFrame
            until not FLYING

            CONTROL = {
                F = 0,
                B = 0,
                L = 0,
                R = 0,
                Q = 0,
                E = 0,
            }
            lCONTROL = {
                F = 0,
                B = 0,
                L = 0,
                R = 0,
                Q = 0,
                E = 0,
            }
            SPEED = 0

            BG.Destroy(BG)
            BV.Destroy(BV)

            if humanoid then
                humanoid.PlatformStand = false
            end
        end)
    end

    flyKeyDown = UserInputService.InputBegan:Connect(function(input, processed)
        if input.KeyCode == Enum.KeyCode.W then
            CONTROL.F = (vfly and vehicleflyspeed or iyflyspeed)
        elseif input.KeyCode == Enum.KeyCode.S then
            CONTROL.B = -(vfly and vehicleflyspeed or iyflyspeed)
        elseif input.KeyCode == Enum.KeyCode.A then
            CONTROL.L = -(vfly and vehicleflyspeed or iyflyspeed)
        elseif input.KeyCode == Enum.KeyCode.D then
            CONTROL.R = (vfly and vehicleflyspeed or iyflyspeed)
        elseif input.KeyCode == Enum.KeyCode.E and QEfly then
            CONTROL.Q = (vfly and vehicleflyspeed or iyflyspeed) * 2
        elseif input.KeyCode == Enum.KeyCode.Q and QEfly then
            CONTROL.E = -(vfly and vehicleflyspeed or iyflyspeed) * 2
        end

        pcall(function()
            camera.CameraType = Enum.CameraType.Track
        end)
    end)
    flyKeyUp = UserInputService.InputEnded:Connect(function(input, processed)
        if input.KeyCode == Enum.KeyCode.W then
            CONTROL.F = 0
        elseif input.KeyCode == Enum.KeyCode.S then
            CONTROL.B = 0
        elseif input.KeyCode == Enum.KeyCode.A then
            CONTROL.L = 0
        elseif input.KeyCode == Enum.KeyCode.D then
            CONTROL.R = 0
        elseif input.KeyCode == Enum.KeyCode.E then
            CONTROL.Q = 0
        elseif input.KeyCode == Enum.KeyCode.Q then
            CONTROL.E = 0
        end
    end)

    FLY()
end
NOFLY = function()
    FLYING = false

    if flyKeyDown or flyKeyUp then
        flyKeyDown.Disconnect(flyKeyDown)
        flyKeyUp.Disconnect(flyKeyUp)
    end
    if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
        Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
    end

    pcall(function()
        workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
    end)
end

local velocityHandlerName = randomString()
local gyroHandlerName = randomString()
local mfly1
local mfly2
local unmobilefly = function(speaker)
    pcall(function()
        FLYING = false

        local root = getRoot(speaker.Character)

        root.FindFirstChild(root, velocityHandlerName):Destroy()
        root.FindFirstChild(root, gyroHandlerName):Destroy()

        speaker.Character:FindFirstChildWhichIsA('Humanoid').PlatformStand = false

        mfly1.Disconnect(mfly1)
        mfly2.Disconnect(mfly2)
    end)
end
local mobilefly = function(speaker, vfly)
    unmobilefly(speaker)

    FLYING = true

    local root = getRoot(speaker.Character)
    local camera = workspace.CurrentCamera
    local v3none = Vector3.new()
    local v3zero = Vector3.new(0, 0, 0)
    local v3inf = Vector3.new(387420489, 387420489, 387420489)
    local controlModule = require(speaker.PlayerScripts:WaitForChild('PlayerModule'):WaitForChild('ControlModule'))
    local bv = Instance.new('BodyVelocity')

    bv.Name = velocityHandlerName
    bv.Parent = root
    bv.MaxForce = v3zero
    bv.Velocity = v3zero

    local bg = Instance.new('BodyGyro')

    bg.Name = gyroHandlerName
    bg.Parent = root
    bg.MaxTorque = v3inf
    bg.P = 1000
    bg.D = 50
    mfly1 = speaker.CharacterAdded:Connect(function()
        local bv = Instance.new('BodyVelocity')

        bv.Name = velocityHandlerName
        bv.Parent = root
        bv.MaxForce = v3zero
        bv.Velocity = v3zero

        local bg = Instance.new('BodyGyro')

        bg.Name = gyroHandlerName
        bg.Parent = root
        bg.MaxTorque = v3inf
        bg.P = 1000
        bg.D = 50
    end)
    mfly2 = RunService.RenderStepped:Connect(function()
        root = getRoot(speaker.Character)
        camera = workspace.CurrentCamera

        if speaker.Character:FindFirstChildWhichIsA('Humanoid') and root and root.FindFirstChild(root, velocityHandlerName) and root.FindFirstChild(root, gyroHandlerName) then
            local humanoid = speaker.Character:FindFirstChildWhichIsA('Humanoid')
            local VelocityHandler = root.FindFirstChild(root, velocityHandlerName)
            local GyroHandler = root.FindFirstChild(root, gyroHandlerName)

            VelocityHandler.MaxForce = v3inf
            GyroHandler.MaxTorque = v3inf

            if not vfly then
                humanoid.PlatformStand = true
            end

            GyroHandler.CFrame = camera.CoordinateFrame
            VelocityHandler.Velocity = v3none

            local direction = controlModule.GetMoveVector(controlModule)

            if direction.X > 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
            end
            if direction.X < 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
            end
            if direction.Z > 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
            end
            if direction.Z < 0 then
                VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
            end
        end
    end)
end

addcmd('fly', {}, function(args, speaker)
    if not IsOnMobile then
        NOFLY()
        task.wait()
        sFLY()
    else
        mobilefly(speaker)
    end
    if args[1] and isNumber(args[1]) then
        iyflyspeed = args[1]
    end
end)
addcmd('flyspeed', {
    'flysp',
}, function(args, speaker)
    local speed = args[1] or 1

    if isNumber(speed) then
        iyflyspeed = speed
    end
end)
addcmd('unfly', {
    'nofly',
    'novfly',
    'unvehiclefly',
    'novehiclefly',
    'unvfly',
}, function(args, speaker)
    if not IsOnMobile then
        NOFLY()
    else
        unmobilefly(speaker)
    end
end)
addcmd('vfly', {
    'vehiclefly',
}, function(args, speaker)
    if not IsOnMobile then
        NOFLY()
        task.wait()
        sFLY(true)
    else
        mobilefly(speaker, true)
    end
    if args[1] and isNumber(args[1]) then
        vehicleflyspeed = args[1]
    end
end)
addcmd('togglevfly', {}, function(args, speaker)
    if FLYING then
        if not IsOnMobile then
            NOFLY()
        else
            unmobilefly(speaker)
        end
    else
        if not IsOnMobile then
            sFLY(true)
        else
            mobilefly(speaker, true)
        end
    end
end)
addcmd('vflyspeed', {
    'vflysp',
    'vehicleflyspeed',
    'vehicleflysp',
}, function(args, speaker)
    local speed = args[1] or 1

    if isNumber(speed) then
        vehicleflyspeed = speed
    end
end)
addcmd('qefly', {
    'flyqe',
}, function(args, speaker)
    if args[1] == 'false' then
        QEfly = false
    else
        QEfly = true
    end
end)
addcmd('togglefly', {}, function(args, speaker)
    if FLYING then
        if not IsOnMobile then
            NOFLY()
        else
            unmobilefly(speaker)
        end
    else
        if not IsOnMobile then
            sFLY()
        else
            mobilefly(speaker)
        end
    end
end)

CFspeed = 50

addcmd('cframefly', {
    'cfly',
}, function(args, speaker)
    if args[1] and isNumber(args[1]) then
        CFspeed = args[1]
    end

    speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true

    local Head = speaker.Character:WaitForChild('Head')

    Head.Anchored = true

    if CFloop then
        CFloop.Disconnect(CFloop)
    end

    CFloop = RunService.Heartbeat:Connect(function(deltaTime)
        local moveDirection = speaker.Character:FindFirstChildOfClass('Humanoid').MoveDirection * (CFspeed * deltaTime)
        local headCFrame = Head.CFrame
        local camera = workspace.CurrentCamera
        local cameraCFrame = camera.CFrame
        local cameraOffset = headCFrame.ToObjectSpace(headCFrame, cameraCFrame).Position

        cameraCFrame = cameraCFrame * CFrame.new(-cameraOffset.X, -cameraOffset.Y, 
-cameraOffset.Z + 1)

        local cameraPosition = cameraCFrame.Position
        local headPosition = headCFrame.Position
        local objectSpaceVelocity = CFrame.new(cameraPosition, Vector3.new(headPosition.X, cameraPosition.Y, headPosition.Z)):VectorToObjectSpace(moveDirection)

        Head.CFrame = CFrame.new(headPosition) * (cameraCFrame - cameraPosition) * CFrame.new(objectSpaceVelocity)
    end)
end)
addcmd('uncframefly', {
    'uncfly',
}, function(args, speaker)
    if CFloop then
        CFloop.Disconnect(CFloop)

        speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false

        local Head = speaker.Character:WaitForChild('Head')

        Head.Anchored = false
    end
end)
addcmd('cframeflyspeed', {
    'cflyspeed',
}, function(args, speaker)
    if isNumber(args[1]) then
        CFspeed = args[1]
    end
end)

Floating = false
floatName = randomString()

addcmd('float', {
    'platform',
}, function(args, speaker)
    Floating = true

    local pchar = speaker.Character

    if pchar and not pchar.FindFirstChild(pchar, floatName) then
        task.spawn(function()
            local Float = Instance.new('Part')

            Float.Name = floatName
            Float.Parent = pchar
            Float.Transparency = 1
            Float.Size = Vector3.new(2, 0.2, 1.5)
            Float.Anchored = true

            local FloatValue = -3.1

            Float.CFrame = getRoot(pchar).CFrame * CFrame.new(0, FloatValue, 0)

            notify('Float', 'Float Enabled (Q = down & E = up)')

            qUp = IYMouse.KeyUp:Connect(function(KEY)
                if KEY == 'q' then
                    FloatValue = FloatValue + 0.5
                end
            end)
            eUp = IYMouse.KeyUp:Connect(function(KEY)
                if KEY == 'e' then
                    FloatValue = FloatValue - 1.5
                end
            end)
            qDown = IYMouse.KeyDown:Connect(function(KEY)
                if KEY == 'q' then
                    FloatValue = FloatValue - 0.5
                end
            end)
            eDown = IYMouse.KeyDown:Connect(function(KEY)
                if KEY == 'e' then
                    FloatValue = FloatValue + 1.5
                end
            end)
            floatDied = speaker.Character:FindFirstChildOfClass('Humanoid').Died:Connect(function(
            )
                FloatingFunc.Disconnect(FloatingFunc)
                Float.Destroy(Float)
                qUp.Disconnect(qUp)
                eUp.Disconnect(eUp)
                qDown.Disconnect(qDown)
                eDown.Disconnect(eDown)
                floatDied.Disconnect(floatDied)
            end)

            local function FloatPadLoop()
                if pchar.FindFirstChild(pchar, floatName) and getRoot(pchar) then
                    Float.CFrame = getRoot(pchar).CFrame * CFrame.new(0, FloatValue, 0)
                else
                    FloatingFunc.Disconnect(FloatingFunc)
                    Float.Destroy(Float)
                    qUp.Disconnect(qUp)
                    eUp.Disconnect(eUp)
                    qDown.Disconnect(qDown)
                    eDown.Disconnect(eDown)
                    floatDied.Disconnect(floatDied)
                end
            end

            FloatingFunc = RunService.Heartbeat:Connect(FloatPadLoop)
        end)
    end
end)
addcmd('unfloat', {
    'nofloat',
    'unplatform',
    'noplatform',
}, function(args, speaker)
    Floating = false

    local pchar = speaker.Character

    notify('Float', 'Float Disabled')

    if pchar.FindFirstChild(pchar, floatName) then
        pchar.FindFirstChild(pchar, floatName):Destroy()
    end
    if floatDied then
        FloatingFunc.Disconnect(FloatingFunc)
        qUp.Disconnect(qUp)
        eUp.Disconnect(eUp)
        qDown.Disconnect(qDown)
        eDown.Disconnect(eDown)
        floatDied.Disconnect(floatDied)
    end
end)
addcmd('togglefloat', {}, function(args, speaker)
    if Floating then
        execCmd('unfloat')
    else
        execCmd('float')
    end
end)

swimming = false

local oldgrav = workspace.Gravity
local swimbeat

addcmd('swim', {}, function(args, speaker)
    if not swimming and speaker and speaker.Character and speaker.Character:FindFirstChildWhichIsA('Humanoid') then
        oldgrav = workspace.Gravity
        workspace.Gravity = 0

        local swimDied = function()
            workspace.Gravity = oldgrav
            swimming = false
        end
        local Humanoid = speaker.Character:FindFirstChildWhichIsA('Humanoid')

        gravReset = Humanoid.Died:Connect(swimDied)

        local enums = Enum.HumanoidStateType:GetEnumItems()

        table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))

        for i, v in pairs(enums)do
            Humanoid.SetStateEnabled(Humanoid, v, false)
        end

        Humanoid.ChangeState(Humanoid, Enum.HumanoidStateType.Swimming)

        swimbeat = RunService.Heartbeat:Connect(function()
            pcall(function()
                speaker.Character.HumanoidRootPart.Velocity = ((Humanoid.MoveDirection ~= Vector3.new() or UserInputService.IsKeyDown(UserInputService, Enum.KeyCode.Space)) and speaker.Character.HumanoidRootPart.Velocity or Vector3.new())
            end)
        end)
        swimming = true
    end
end)
addcmd('unswim', {
    'noswim',
}, function(args, speaker)
    if speaker and speaker.Character and speaker.Character:FindFirstChildWhichIsA('Humanoid') then
        workspace.Gravity = oldgrav
        swimming = false

        if gravReset then
            gravReset.Disconnect(gravReset)
        end
        if swimbeat ~= nil then
            swimbeat.Disconnect(swimbeat)

            swimbeat = nil
        end

        local Humanoid = speaker.Character:FindFirstChildWhichIsA('Humanoid')
        local enums = Enum.HumanoidStateType:GetEnumItems()

        table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))

        for i, v in pairs(enums)do
            Humanoid.SetStateEnabled(Humanoid, v, true)
        end
    end
end)
addcmd('toggleswim', {}, function(args, speaker)
    if swimming then
        execCmd('unswim')
    else
        execCmd('swim')
    end
end)
addcmd('setwaypoint', {
    'swp',
    'setwp',
    'spos',
    'saveposition',
    'savepos',
}, function(args, speaker)
    local WPName = tostring(getstring(1))

    if getRoot(speaker.Character) then
        notify('Modified Waypoints', 'Created waypoint: ' .. getstring(1))

        local torso = getRoot(speaker.Character)

        WayPoints[#WayPoints + 1] = {
            NAME = WPName,
            COORD = {
                math.floor(torso.Position.X),
                math.floor(torso.Position.Y),
                math.floor(torso.Position.Z),
            },
            GAME = PlaceId,
        }

        if AllWaypoints ~= nil then
            AllWaypoints[#AllWaypoints + 1] = {
                NAME = WPName,
                COORD = {
                    math.floor(torso.Position.X),
                    math.floor(torso.Position.Y),
                    math.floor(torso.Position.Z),
                },
                GAME = PlaceId,
            }
        end
    end

    refreshwaypoints()
    updatesaves()
end)
addcmd('waypointpos', {
    'wpp',
    'setwaypointposition',
    'setpos',
    'setwaypoint',
    'setwaypointpos',
}, function(args, speaker)
    local WPName = tostring(getstring(1))

    if getRoot(speaker.Character) then
        notify('Modified Waypoints', 'Created waypoint: ' .. getstring(1))

        WayPoints[#WayPoints + 1] = {
            NAME = WPName,
            COORD = {
                args[2],
                args[3],
                args[4],
            },
            GAME = PlaceId,
        }

        if AllWaypoints ~= nil then
            AllWaypoints[#AllWaypoints + 1] = {
                NAME = WPName,
                COORD = {
                    args[2],
                    args[3],
                    args[4],
                },
                GAME = PlaceId,
            }
        end
    end

    refreshwaypoints()
    updatesaves()
end)
addcmd('waypoints', {
    'positions',
}, function(args, speaker)
    if SettingsOpen == false then
        SettingsOpen = true

        Settings.TweenPosition(Settings, UDim2.new(0, 0, 0, 45), 'InOut', 'Quart', 0.5, true, nil)

        CMDsF.Visible = false
    end

    KeybindsFrame.TweenPosition(KeybindsFrame, UDim2.new(0, 0, 0, 175), 'InOut', 'Quart', 0.5, true, nil)
    AliasesFrame.TweenPosition(AliasesFrame, UDim2.new(0, 0, 0, 175), 'InOut', 'Quart', 0.5, true, nil)
    PluginsFrame.TweenPosition(PluginsFrame, UDim2.new(0, 0, 0, 175), 'InOut', 'Quart', 0.5, true, nil)
    PositionsFrame.TweenPosition(PositionsFrame, UDim2.new(0, 0, 0, 0), 'InOut', 'Quart', 0.5, true, nil)
    task.wait(0.5)

    SettingsHolder.Visible = false

    maximizeHolder()
end)

waypointParts = {}

addcmd('showwaypoints', {
    'showwp',
    'showwps',
}, function(args, speaker)
    execCmd('hidewaypoints')
    task.wait()

    for i, _ in pairs(WayPoints)do
        local x = WayPoints[i].COORD[1]
        local y = WayPoints[i].COORD[2]
        local z = WayPoints[i].COORD[3]
        local part = Instance.new('Part')

        part.Size = Vector3.new(5, 5, 5)
        part.CFrame = CFrame.new(x, y, z)
        part.Parent = workspace
        part.Anchored = true
        part.CanCollide = false

        table.insert(waypointParts, part)

        local view = Instance.new('BoxHandleAdornment')

        view.Adornee = part
        view.AlwaysOnTop = true
        view.ZIndex = 10
        view.Size = part.Size
        view.Parent = part
    end
    for i, v in pairs(pWayPoints)do
        local view = Instance.new('BoxHandleAdornment')

        view.Adornee = pWayPoints[i].COORD[1]
        view.AlwaysOnTop = true
        view.ZIndex = 10
        view.Size = pWayPoints[i].COORD[1].Size
        view.Parent = pWayPoints[i].COORD[1]

        table.insert(waypointParts, view)
    end
end)
addcmd('hidewaypoints', {
    'hidewp',
    'hidewps',
}, function(args, speaker)
    for i, v in pairs(waypointParts)do
        v.Destroy(v)
    end

    waypointParts = {}
end)
addcmd('waypoint', {
    'wp',
    'lpos',
    'loadposition',
    'loadpos',
}, function(args, speaker)
    local WPName = tostring(getstring(1))

    if speaker.Character then
        for i, _ in pairs(WayPoints)do
            if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
                local x = WayPoints[i].COORD[1]
                local y = WayPoints[i].COORD[2]
                local z = WayPoints[i].COORD[3]

                getRoot(speaker.Character).CFrame = CFrame.new(x, y, z)
            end
        end
        for i, _ in pairs(pWayPoints)do
            if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
                getRoot(speaker.Character).CFrame = CFrame.new(pWayPoints[i].COORD[1].Position)
            end
        end
    end
end)

tweenSpeed = 1

addcmd('tweenspeed', {
    'tspeed',
}, function(args, speaker)
    local newSpeed = args[1] or 1

    if tonumber(newSpeed) then
        tweenSpeed = tonumber(newSpeed)
    end
end)
addcmd('tweenwaypoint', {
    'twp',
}, function(args, speaker)
    local WPName = tostring(getstring(1))

    if speaker.Character then
        for i, _ in pairs(WayPoints)do
            local x = WayPoints[i].COORD[1]
            local y = WayPoints[i].COORD[2]
            local z = WayPoints[i].COORD[3]

            if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
                TweenService.Create(TweenService, getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {
                    CFrame = CFrame.new(x, y, z),
                }):Play()
            end
        end
        for i, _ in pairs(pWayPoints)do
            if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
                TweenService.Create(TweenService, getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {
                    CFrame = CFrame.new(pWayPoints[i].COORD[1].Position),
                }):Play()
            end
        end
    end
end)
addcmd('walktowaypoint', {
    'wtwp',
}, function(args, speaker)
    local WPName = tostring(getstring(1))

    if speaker.Character then
        for i, _ in pairs(WayPoints)do
            local x = WayPoints[i].COORD[1]
            local y = WayPoints[i].COORD[2]
            local z = WayPoints[i].COORD[3]

            if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
                if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
                    speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

                    task.wait(0.1)
                end

                speaker.Character:FindFirstChildOfClass('Humanoid').WalkToPoint = Vector3.new(x, y, z)
            end
        end
        for i, _ in pairs(pWayPoints)do
            if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
                if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
                    speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

                    task.wait(0.1)
                end

                speaker.Character:FindFirstChildOfClass('Humanoid').WalkToPoint = Vector3.new(pWayPoints[i].COORD[1].Position)
            end
        end
    end
end)
addcmd('deletewaypoint', {
    'dwp',
    'dpos',
    'deleteposition',
    'deletepos',
}, function(args, speaker)
    for i, v in pairs(WayPoints)do
        if v.NAME:lower() == tostring(getstring(1)):lower() then
            notify('Modified Waypoints', 'Deleted waypoint: ' .. v.NAME)
            table.remove(WayPoints, i)
        end
    end

    if AllWaypoints ~= nil and #AllWaypoints > 0 then
        for i, v in pairs(AllWaypoints)do
            if v.NAME:lower() == tostring(getstring(1)):lower() then
                if not v.GAME or v.GAME == PlaceId then
                    table.remove(AllWaypoints, i)
                end
            end
        end
    end

    for i, v in pairs(pWayPoints)do
        if v.NAME:lower() == tostring(getstring(1)):lower() then
            notify('Modified Waypoints', 'Deleted waypoint: ' .. v.NAME)
            table.remove(pWayPoints, i)
        end
    end

    refreshwaypoints()
    updatesaves()
end)
addcmd('clearwaypoints', {
    'cwp',
    'clearpositions',
    'cpos',
    'clearpos',
}, function(args, speaker)
    WayPoints = {}
    pWayPoints = {}

    refreshwaypoints()
    updatesaves()

    AllWaypoints = {}

    notify('Modified Waypoints', 'Removed all waypoints')
end)
addcmd('cleargamewaypoints', {
    'cgamewp',
}, function(args, speaker)
    for i, v in pairs(WayPoints)do
        if v.GAME == PlaceId then
            table.remove(WayPoints, i)
        end
    end

    if AllWaypoints ~= nil and #AllWaypoints > 0 then
        for i, v in pairs(AllWaypoints)do
            if v.GAME == PlaceId then
                table.remove(AllWaypoints, i)
            end
        end
    end

    for i, v in pairs(pWayPoints)do
        if v.GAME == PlaceId then
            table.remove(pWayPoints, i)
        end
    end

    refreshwaypoints()
    updatesaves()
    notify('Modified Waypoints', 'Deleted game waypoints')
end)

local coreGuiTypeNames = {
    inventory = Enum.CoreGuiType.Backpack,
    leaderboard = Enum.CoreGuiType.PlayerList,
    emotes = Enum.CoreGuiType.EmotesMenu,
}

for _, enumItem in ipairs(Enum.CoreGuiType:GetEnumItems())do
    coreGuiTypeNames[enumItem.Name:lower()] = enumItem
end

addcmd('enable', {}, function(args, speaker)
    local input = args[1] and args[1]:lower()

    if input then
        if input == 'reset' then
            StarterGui.SetCore(StarterGui, 'ResetButtonCallback', true)
        else
            local coreGuiType = coreGuiTypeNames[input]

            if coreGuiType then
                StarterGui.SetCoreGuiEnabled(StarterGui, coreGuiType, true)
            end
        end
    end
end)
addcmd('disable', {}, function(args, speaker)
    local input = args[1] and args[1]:lower()

    if input then
        if input == 'reset' then
            StarterGui.SetCore(StarterGui, 'ResetButtonCallback', false)
        else
            local coreGuiType = coreGuiTypeNames[input]

            if coreGuiType then
                StarterGui.SetCoreGuiEnabled(StarterGui, coreGuiType, false)
            end
        end
    end
end)

local invisGUIS = {}

addcmd('showguis', {}, function(args, speaker)
    for i, v in pairs(PlayerGui.GetDescendants(PlayerGui))do
        if (v.IsA(v, 'Frame') or v.IsA(v, 'ImageLabel') or v.IsA(v, 'ScrollingFrame')) and not v.Visible then
            v.Visible = true

            if not FindInTable(invisGUIS, v) then
                table.insert(invisGUIS, v)
            end
        end
    end
end)
addcmd('unshowguis', {}, function(args, speaker)
    for i, v in pairs(invisGUIS)do
        v.Visible = false
    end

    invisGUIS = {}
end)

local hiddenGUIS = {}

addcmd('hideguis', {}, function(args, speaker)
    for i, v in pairs(PlayerGui.GetDescendants(PlayerGui))do
        if (v.IsA(v, 'Frame') or v.IsA(v, 'ImageLabel') or v.IsA(v, 'ScrollingFrame')) and v.Visible then
            v.Visible = false

            if not FindInTable(hiddenGUIS, v) then
                table.insert(hiddenGUIS, v)
            end
        end
    end
end)
addcmd('unhideguis', {}, function(args, speaker)
    for i, v in pairs(hiddenGUIS)do
        v.Visible = true
    end

    hiddenGUIS = {}
end)

deleteGuisAtPos = function()
    pcall(function()
        local guisAtPosition = PlayerGui.GetGuiObjectsAtPosition(PlayerGui, IYMouse.X, IYMouse.Y)

        for _, gui in pairs(guisAtPosition)do
            if gui.Visible == true then
                gui.Destroy(gui)
            end
        end
    end)
end

local deleteGuiInput

addcmd('guidelete', {}, function(args, speaker)
    deleteGuiInput = UserInputService.InputBegan:Connect(function(
        input,
        gameProcessedEvent
    )
        if not gameProcessedEvent then
            if input.KeyCode == Enum.KeyCode.Backspace then
                deleteGuisAtPos()
            end
        end
    end)

    notify('GUI Delete Enabled', 'Hover over a GUI and press backspace to delete it')
end)
addcmd('unguidelete', {
    'noguidelete',
}, function(args, speaker)
    if deleteGuiInput then
        deleteGuiInput.Disconnect(deleteGuiInput)
    end

    notify('GUI Delete Disabled', 'GUI backspace delete has been disabled')
end)

local wasStayOpen = StayOpen

addcmd('hideiy', {}, function(args, speaker)
    isHidden = true
    wasStayOpen = StayOpen

    if StayOpen == true then
        StayOpen = false
        On.BackgroundTransparency = 1
    end

    minimizeNum = 0

    minimizeHolder()

    if not (args[1] and tostring(args[1]) == 'nonotify') then
        notify('IY Hidden', 'You can press the prefix key to access the command bar')
    end
end)
addcmd('showiy', {
    'unhideiy',
}, function(args, speaker)
    isHidden = false
    minimizeNum = -20

    if wasStayOpen then
        maximizeHolder()

        StayOpen = true
        On.BackgroundTransparency = 0
    else
        minimizeHolder()
    end
end)
addcmd('rec', {
    'record',
}, function(args, speaker)
    return COREGUI.ToggleRecording(COREGUI)
end)
addcmd('screenshot', {
    'scrnshot',
}, function(args, speaker)
    return COREGUI.TakeScreenshot(COREGUI)
end)
addcmd('togglefs', {
    'togglefullscreen',
}, function(args, speaker)
    return GuiService.ToggleFullscreen(GuiService)
end)
addcmd('inspect', {
    'examine',
}, function(args, speaker)
    for _, v in ipairs(getPlayer(args[1], speaker))do
        GuiService.CloseInspectMenu(GuiService)
        GuiService.InspectPlayerFromUserId(GuiService, Players[v].UserId)
    end
end)
addcmd('savegame', {
    'saveplace',
}, function(args, speaker)
    if saveinstance then
        notify('Loading', 'Downloading game. This will take a while')
        saveinstance()
        notify('Game Saved', 
[[Saved place to the workspace folder within your exploit folder.]])
    else
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing saveinstance)]])
    end
end)
addcmd('clearerror', {
    'clearerrors',
}, function(args, speaker)
    GuiService.ClearError(GuiService)
end)
addcmd('clientantikick', {
    'antikick',
}, function(args, speaker)
    if not hookmetamethod then
        return notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing hookmetamethod)]])
    end

    local LocalPlayer = Players.LocalPlayer
    local oldhmmi
    local oldhmmnc
    local oldKickFunction

    if hookfunction then
        oldKickFunction = hookfunction(LocalPlayer.Kick, function() end)
    end

    oldhmmi = hookmetamethod(game, '__index', function(self, method)
        if self == LocalPlayer and method.lower(method) == 'kick' then
            return error("Expected ':' not '.' calling member function Kick", 2)
        end

        return oldhmmi(self, method)
    end)
    oldhmmnc = hookmetamethod(game, '__namecall', function(self, ...)
        if self == LocalPlayer and getnamecallmethod():lower() == 'kick' then
            return
        end

        return oldhmmnc(self, ...)
    end)

    notify('Client Antikick', 
[[Client anti kick is now active (only effective on localscript kick)]])
end)

allow_rj = true

addcmd('clientantiteleport', {
    'antiteleport',
}, function(args, speaker)
    if not hookmetamethod then
        return notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing hookmetamethod)]])
    end

    local TeleportService = TeleportService
    local oldhmmi
    local oldhmmnc

    oldhmmi = hookmetamethod(game, '__index', function(self, method)
        if self == TeleportService then
            if method.lower(method) == 'teleport' then
                return error("Expected ':' not '.' calling member function Kick", 2)
            elseif method == 'TeleportToPlaceInstance' then
                return error(
[[Expected ':' not '.' calling member function TeleportToPlaceInstance]], 2)
            end
        end

        return oldhmmi(self, method)
    end)
    oldhmmnc = hookmetamethod(game, '__namecall', function(self, ...)
        if self == TeleportService and getnamecallmethod():lower() == 'teleport' or getnamecallmethod() == 'TeleportToPlaceInstance' then
            return
        end

        return oldhmmnc(self, ...)
    end)

    notify('Client AntiTP', 
[[Client anti teleport is now active (only effective on localscript teleport)]])
end)
addcmd('allowrejoin', {
    'allowrj',
}, function(args, speaker)
    if args[1] and args[1] == 'false' then
        allow_rj = false

        notify('Client AntiTP', 'Allow rejoin set to false')
    else
        allow_rj = true

        notify('Client AntiTP', 'Allow rejoin set to true')
    end
end)
addcmd('cancelteleport', {
    'canceltp',
}, function(args, speaker)
    TeleportService.TeleportCancel(TeleportService)
end)
addcmd('volume', {
    'vol',
}, function(args, speaker)
    UserSettings():GetService('UserGameSettings').MasterVolume = args[1] / 10
end)
addcmd('antilag', {
    'boostfps',
    'lowgraphics',
}, function(args, speaker)
    local Terrain = workspace.FindFirstChildWhichIsA(workspace, 'Terrain')

    Terrain.WaterWaveSize = 0
    Terrain.WaterWaveSpeed = 0
    Terrain.WaterReflectance = 0
    Terrain.WaterTransparency = 1
    Lighting.GlobalShadows = false
    Lighting.FogEnd = 387420489
    Lighting.FogStart = 387420489
    settings().Rendering.QualityLevel = 1

    for _, v in pairs(game.GetDescendants(game))do
        if v.IsA(v, 'BasePart') then
            v.CastShadow = false
            v.Material = 'Plastic'
            v.Reflectance = 0
            v.BackSurface = 'SmoothNoOutlines'
            v.BottomSurface = 'SmoothNoOutlines'
            v.FrontSurface = 'SmoothNoOutlines'
            v.LeftSurface = 'SmoothNoOutlines'
            v.RightSurface = 'SmoothNoOutlines'
            v.TopSurface = 'SmoothNoOutlines'
        elseif v.IsA(v, 'Decal') then
            v.Transparency = 1
            v.Texture = ''
        elseif v.IsA(v, 'ParticleEmitter') or v.IsA(v, 'Trail') then
            v.Lifetime = NumberRange.new(0)
        end
    end
    for _, v in pairs(Lighting.GetDescendants(Lighting))do
        if v.IsA(v, 'PostEffect') then
            v.Enabled = false
        end
    end

    workspace.DescendantAdded:Connect(function(child)
        task.spawn(function()
            if child.IsA(child, 'ForceField') or child.IsA(child, 'Sparkles') or child.IsA(child, 'Smoke') or child.IsA(child, 'Fire') or child.IsA(child, 'Beam') then
                RunService.Heartbeat:Wait()
                child.Destroy(child)
            elseif child.IsA(child, 'BasePart') then
                child.CastShadow = false
            end
        end)
    end)
end)
addcmd('setfpscap', {
    'fpscap',
    'maxfps',
}, function(args, speaker)
    if fpscaploop then
        task.cancel(fpscaploop)

        fpscaploop = nil
    end

    local fpsCap = 60
    local num = tonumber(args[1]) or 1

    if num == 'none' then
        return
    elseif num > 0 then
        fpsCap = num
    else
        return notify('Invalid argument', "Please provide a number above 0 or 'none'.")
    end
    if setfpscap and type(setfpscap) == 'function' then
        setfpscap(fpsCap)
    else
        fpscaploop = task.spawn(function()
            local timer = os.clock()

            while true do
                if os.clock() >= timer + 1 / fpsCap then
                    timer = os.clock()

                    task.wait()
                end
            end
        end)
    end
end)
addcmd('notify', {}, function(args, speaker)
    notify(getstring(1))
end)
addcmd('lastcommand', {
    'lastcmd',
}, function(args, speaker)
    if cmdHistory[1]:sub(1, 11) ~= 'lastcommand' and cmdHistory[1]:sub(1, 7) ~= 'lastcmd' then
        execCmd(cmdHistory[1])
    end
end)
addcmd('esp', {}, function(args, speaker)
    if not CHMSenabled then
        ESPenabled = true

        for i, v in pairs(Players.GetPlayers(Players))do
            if v.Name ~= speaker.Name then
                ESP(v)
            end
        end
    else
        notify('ESP', 'Disable chams (nochams) before using esp')
    end
end)
addcmd('espteam', {}, function(args, speaker)
    if not CHMSenabled then
        ESPenabled = true

        for i, v in pairs(Players.GetPlayers(Players))do
            if v.Name ~= speaker.Name then
                ESP(v, true)
            end
        end
    else
        notify('ESP', 'Disable chams (nochams) before using esp')
    end
end)
addcmd('noesp', {
    'unesp',
    'unespteam',
}, function(args, speaker)
    ESPenabled = false

    for i, c in pairs(COREGUI.GetChildren(COREGUI))do
        if string.sub(c.Name, -4) == '_ESP' then
            c.Destroy(c)
        end
    end
end)
addcmd('esptransparency', {}, function(args, speaker)
    espTransparency = (args[1] and isNumber(args[1]) and args[1]) or 0.3

    updatesaves()
end)

local espParts = {}
local partEspTrigger

partAdded = function(part)
    if #espParts > 0 then
        if FindInTable(espParts, part.Name:lower()) then
            local a = Instance.new('BoxHandleAdornment')

            a.Name = part.Name:lower() .. '_PESP'
            a.Parent = part
            a.Adornee = part
            a.AlwaysOnTop = true
            a.ZIndex = 0
            a.Size = part.Size
            a.Transparency = espTransparency
            a.Color = BrickColor.new('Lime green')
        end
    else
        partEspTrigger.Disconnect(partEspTrigger)

        partEspTrigger = nil
    end
end

addcmd('partesp', {}, function(args, speaker)
    local partEspName = getstring(1):lower()

    if not FindInTable(espParts, partEspName) then
        table.insert(espParts, partEspName)

        for i, v in pairs(workspace.GetDescendants(workspace))do
            if v.IsA(v, 'BasePart') and v.Name:lower() == partEspName then
                local a = Instance.new('BoxHandleAdornment')

                a.Name = partEspName .. '_PESP'
                a.Parent = v
                a.Adornee = v
                a.AlwaysOnTop = true
                a.ZIndex = 0
                a.Size = v.Size
                a.Transparency = espTransparency
                a.Color = BrickColor.new('Lime green')
            end
        end
    end
    if partEspTrigger == nil then
        partEspTrigger = workspace.DescendantAdded:Connect(partAdded)
    end
end)
addcmd('unpartesp', {
    'nopartesp',
}, function(args, speaker)
    if args[1] then
        local partEspName = getstring(1):lower()

        if FindInTable(espParts, partEspName) then
            table.remove(espParts, GetInTable(espParts, partEspName))
        end

        for i, v in pairs(workspace.GetDescendants(workspace))do
            if v.IsA(v, 'BoxHandleAdornment') and v.Name == partEspName .. '_PESP' then
                v.Destroy(v)
            end
        end
    else
        partEspTrigger.Disconnect(partEspTrigger)

        partEspTrigger = nil
        espParts = {}

        for i, v in pairs(workspace.GetDescendants(workspace))do
            if v.IsA(v, 'BoxHandleAdornment') and v.Name:sub(-5) == '_PESP' then
                v.Destroy(v)
            end
        end
    end
end)
addcmd('chams', {}, function(args, speaker)
    if not ESPenabled then
        CHMSenabled = true

        for i, v in pairs(Players.GetPlayers(Players))do
            if v.Name ~= speaker.Name then
                CHMS(v)
            end
        end
    else
        notify('Chams', 'Disable ESP (noesp) before using chams')
    end
end)
addcmd('nochams', {
    'unchams',
}, function(args, speaker)
    CHMSenabled = false

    for i, v in pairs(Players.GetPlayers(Players))do
        local chmsplr = v

        for i, c in pairs(COREGUI.GetChildren(COREGUI))do
            if c.Name == chmsplr.Name .. '_CHMS' then
                c.Destroy(c)
            end
        end
    end
end)
addcmd('locate', {}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        Locate(Players[v])
    end
end)
addcmd('nolocate', {
    'unlocate',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    if args[1] then
        for i, v in pairs(players)do
            for i, c in pairs(COREGUI.GetChildren(COREGUI))do
                if c.Name == Players[v].Name .. '_LC' then
                    c.Destroy(c)
                end
            end
        end
    else
        for i, c in pairs(COREGUI.GetChildren(COREGUI))do
            if string.sub(c.Name, -3) == '_LC' then
                c.Destroy(c)
            end
        end
    end
end)

viewing = nil

addcmd('view', {
    'spectate',
}, function(args, speaker)
    StopFreecam()

    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        if viewDied then
            viewDied.Disconnect(viewDied)
            viewChanged.Disconnect(viewChanged)
        end

        viewing = Players[v]
        workspace.CurrentCamera.CameraSubject = viewing.Character

        notify('Spectate', 'Viewing ' .. Players[v].Name)

        local function viewDiedFunc()
            repeat
                task.wait()
            until Players[v].Character ~= nil and getRoot(Players[v].Character)

            workspace.CurrentCamera.CameraSubject = viewing.Character
        end

        viewDied = Players[v].CharacterAdded:Connect(viewDiedFunc)

        local function viewChangedFunc()
            workspace.CurrentCamera.CameraSubject = viewing.Character
        end

        viewChanged = workspace.CurrentCamera:GetPropertyChangedSignal('CameraSubject'):Connect(viewChangedFunc)
    end
end)
addcmd('viewpart', {
    'viewp',
}, function(args, speaker)
    StopFreecam()

    if args[1] then
        for i, v in pairs(workspace.GetDescendants(workspace))do
            if v.Name:lower() == getstring(1):lower() and v.IsA(v, 'BasePart') then
                task.wait(0.1)

                workspace.CurrentCamera.CameraSubject = v
            end
        end
    end
end)
addcmd('unview', {
    'unspectate',
}, function(args, speaker)
    StopFreecam()

    if viewing ~= nil then
        viewing = nil

        notify('Spectate', 'View turned off')
    end
    if viewDied then
        viewDied.Disconnect(viewDied)
        viewChanged.Disconnect(viewChanged)
    end

    workspace.CurrentCamera.CameraSubject = speaker.Character
end)

fcRunning = false

local Camera = workspace.CurrentCamera

workspace.GetPropertyChangedSignal(workspace, 'CurrentCamera'):Connect(function()
    local newCamera = workspace.CurrentCamera

    if newCamera then
        Camera = newCamera
    end
end)

local INPUT_PRIORITY = Enum.ContextActionPriority.High.Value

Spring = {}

do
    Spring.__index = Spring
    Spring.new = function(freq, pos)
        local self = setmetatable({}, Spring)

        self.f = freq
        self.p = pos
        self.v = pos * 0

        return self
    end
    Spring.Update = function(self, dt, goal)
        local f = self.f * 2 * math.pi
        local p0 = self.p
        local v0 = self.v
        local offset = goal - p0
        local decay = math.exp(-f * dt)
        local p1 = goal + (v0 * dt - offset * (f * dt + 1)) * decay
        local v1 = (f * dt * (offset * f - v0) + v0) * decay

        self.p = p1
        self.v = v1

        return p1
    end
    Spring.Reset = function(self, pos)
        self.p = pos
        self.v = pos * 0
    end
end

local cameraPos = Vector3.new()
local cameraRot = Vector2.new()
local velSpring = Spring.new(5, Vector3.new())
local panSpring = Spring.new(5, Vector2.new())

Input = {}

do
    keyboard = {
        W = 0,
        A = 0,
        S = 0,
        D = 0,
        E = 0,
        Q = 0,
        Up = 0,
        Down = 0,
        LeftShift = 0,
    }
    mouse = {
        Delta = Vector2.new(),
    }
    NAV_KEYBOARD_SPEED = Vector3.new(1, 1, 1)
    PAN_MOUSE_SPEED = Vector2.new(1, 1) * (math.pi / 64)
    NAV_ADJ_SPEED = 0.75
    NAV_SHIFT_MUL = 0.25
    navSpeed = 1
    Input.Vel = function(dt)
        navSpeed = math.clamp(navSpeed + dt * (keyboard.Up - keyboard.Down) * NAV_ADJ_SPEED, 0.01, 4)

        local kKeyboard = Vector3.new(keyboard.D - keyboard.A, keyboard.E - keyboard.Q, keyboard.S - keyboard.W) * NAV_KEYBOARD_SPEED
        local shift = UserInputService.IsKeyDown(UserInputService, Enum.KeyCode.LeftShift)

        return (kKeyboard) * (navSpeed * (shift and NAV_SHIFT_MUL or 1))
    end
    Input.Pan = function(dt)
        local kMouse = mouse.Delta * PAN_MOUSE_SPEED

        mouse.Delta = Vector2.new()

        return kMouse
    end

    do
        Keypress = function(action, state, input)
            keyboard[input.KeyCode.Name] = state == Enum.UserInputState.Begin and 1 or 0

            return Enum.ContextActionResult.Sink
        end
        MousePan = function(action, state, input)
            local delta = input.Delta

            mouse.Delta = Vector2.new(-delta.y, -delta.x)

            return Enum.ContextActionResult.Sink
        end
        Zero = function(t)
            for k, v in pairs(t)do
                t[k] = v * 0
            end
        end
        Input.StartCapture = function()
            ContextActionService.BindActionAtPriority(ContextActionService, 'FreecamKeyboard', Keypress, false, INPUT_PRIORITY, Enum.KeyCode.W, Enum.KeyCode.A, Enum.KeyCode.S, Enum.KeyCode.D, Enum.KeyCode.E, Enum.KeyCode.Q, Enum.KeyCode.Up, Enum.KeyCode.Down)
            ContextActionService.BindActionAtPriority(ContextActionService, 'FreecamMousePan', MousePan, false, INPUT_PRIORITY, Enum.UserInputType.MouseMovement)
        end
        Input.StopCapture = function()
            navSpeed = 1

            Zero(keyboard)
            Zero(mouse)
            ContextActionService.UnbindAction(ContextActionService, 'FreecamKeyboard')
            ContextActionService.UnbindAction(ContextActionService, 'FreecamMousePan')
        end
    end
end

GetFocusDistance = function(cameraFrame)
    local znear = 0.1
    local viewport = Camera.ViewportSize
    local projy = 2 * math.tan(cameraFov / 2)
    local projx = viewport.x / viewport.y * projy
    local fx = cameraFrame.rightVector
    local fy = cameraFrame.upVector
    local fz = cameraFrame.lookVector
    local minVect = Vector3.new()
    local minDist = 512

    for x = 0, 1, 0.5 do
        for y = 0, 1, 0.5 do
            local cx = (x - 0.5) * projx
            local cy = (y - 0.5) * projy
            local offset = fx * cx - fy * cy + fz
            local origin = cameraFrame.p + offset * znear
            local _, hit = workspace.FindPartOnRay(workspace, Ray.new(origin, offset.unit * minDist))
            local dist = (hit - origin).magnitude

            if minDist > dist then
                minDist = dist
                minVect = offset.unit
            end
        end
    end

    return fz.Dot(fz, minVect) * minDist
end

local function StepFreecam(dt)
    local vel = velSpring.Update(velSpring, dt, Input.Vel(dt))
    local pan = panSpring.Update(panSpring, dt, Input.Pan(dt))
    local zoomFactor = math.sqrt(math.tan(math.rad(35)) / math.tan(math.rad(cameraFov / 2)))

    cameraRot = cameraRot + pan * Vector2.new(0.75, 1) * 8 * (dt / zoomFactor)
    cameraRot = Vector2.new(math.clamp(cameraRot.x, -math.rad(90), math.rad(90)), cameraRot.y % (2 * math.pi))

    local cameraCFrame = CFrame.new(cameraPos) * CFrame.fromOrientation(cameraRot.x, cameraRot.y, 0) * CFrame.new(vel * Vector3.new(1, 1, 1) * 64 * dt)

    cameraPos = cameraCFrame.p
    Camera.CFrame = cameraCFrame
    Camera.Focus = cameraCFrame * CFrame.new(0, 0, -GetFocusDistance(cameraCFrame))
    Camera.FieldOfView = cameraFov
end

local PlayerState = {}

do
    mouseBehavior = ''
    mouseIconEnabled = ''
    cameraType = ''
    cameraFocus = ''
    cameraCFrame = ''
    cameraFieldOfView = ''
    PlayerState.Push = function()
        cameraFieldOfView = Camera.FieldOfView
        Camera.FieldOfView = 70
        cameraType = Camera.CameraType
        Camera.CameraType = Enum.CameraType.Custom
        cameraCFrame = Camera.CFrame
        cameraFocus = Camera.Focus
        mouseIconEnabled = UserInputService.MouseIconEnabled
        UserInputService.MouseIconEnabled = true
        mouseBehavior = UserInputService.MouseBehavior
        UserInputService.MouseBehavior = Enum.MouseBehavior.Default
    end
    PlayerState.Pop = function()
        Camera.FieldOfView = 70
        Camera.CameraType = cameraType
        cameraType = nil
        Camera.CFrame = cameraCFrame
        cameraCFrame = nil
        Camera.Focus = cameraFocus
        cameraFocus = nil
        UserInputService.MouseIconEnabled = mouseIconEnabled
        mouseIconEnabled = nil
        UserInputService.MouseBehavior = mouseBehavior
        mouseBehavior = nil
    end
end

StartFreecam = function(pos)
    if fcRunning then
        StopFreecam()
    end

    local cameraCFrame = Camera.CFrame

    if pos then
        cameraCFrame = pos
    end

    cameraRot = Vector2.new()
    cameraPos = cameraCFrame.p
    cameraFov = Camera.FieldOfView

    velSpring.Reset(velSpring, Vector3.new())
    panSpring.Reset(panSpring, Vector2.new())
    PlayerState.Push()
    RunService.BindToRenderStep(RunService, 'Freecam', Enum.RenderPriority.Camera.Value, StepFreecam)
    Input.StartCapture()

    fcRunning = true
end
StopFreecam = function()
    if not fcRunning then
        return
    end

    Input.StopCapture()
    RunService.UnbindFromRenderStep(RunService, 'Freecam')
    PlayerState.Pop()

    workspace.Camera.FieldOfView = 70
    fcRunning = false
end

addcmd('freecam', {
    'fc',
}, function(args, speaker)
    StartFreecam()
end)
addcmd('freecampos', {
    'fcpos',
    'fcp',
    'freecamposition',
    'fcposition',
}, function(args, speaker)
    if not args[1] then
        return
    end

    local freecamPos = CFrame.new(args[1], args[2], args[3])

    StartFreecam(freecamPos)
end)
addcmd('freecamwaypoint', {
    'fcwp',
}, function(args, speaker)
    local WPName = tostring(getstring(1))

    if speaker.Character then
        for i, _ in pairs(WayPoints)do
            local x = WayPoints[i].COORD[1]
            local y = WayPoints[i].COORD[2]
            local z = WayPoints[i].COORD[3]

            if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
                StartFreecam(CFrame.new(x, y, z))
            end
        end
        for i, _ in pairs(pWayPoints)do
            if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
                StartFreecam(CFrame.new(pWayPoints[i].COORD[1].Position))
            end
        end
    end
end)
addcmd('freecamgoto', {
    'fcgoto',
    'freecamtp',
    'fctp',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        StartFreecam(getRoot(Players[v].Character).CFrame)
    end
end)
addcmd('unfreecam', {
    'nofreecam',
    'unfc',
    'nofc',
}, function(args, speaker)
    StopFreecam()
end)
addcmd('freecamspeed', {
    'fcspeed',
}, function(args, speaker)
    local FCspeed = args[1] or 1

    if isNumber(FCspeed) then
        NAV_KEYBOARD_SPEED = Vector3.new(FCspeed, FCspeed, FCspeed)
    end
end)
addcmd('notifyfreecamposition', {
    'notifyfcpos',
}, function(args, speaker)
    if fcRunning then
        local X, Y, Z = workspace.CurrentCamera.CFrame.Position.X, workspace.CurrentCamera.CFrame.Position.Y, workspace.CurrentCamera.CFrame.Position.Z
        local Format, Round = string.format, math.round

        notify('Current Position', Format('%s, %s, %s', Round(X), Round(Y), Round(Z)))
    end
end)
addcmd('copyfreecamposition', {
    'copyfcpos',
}, function(args, speaker)
    if fcRunning then
        local X, Y, Z = workspace.CurrentCamera.CFrame.Position.X, workspace.CurrentCamera.CFrame.Position.Y, workspace.CurrentCamera.CFrame.Position.Z
        local Format, Round = string.format, math.round

        toClipboard(Format('%s, %s, %s', Round(X), Round(Y), Round(Z)))
    end
end)
addcmd('gotocamera', {
    'gotocam',
    'tocam',
}, function(args, speaker)
    getRoot(speaker.Character).CFrame = workspace.Camera.CFrame
end)
addcmd('tweengotocamera', {
    'tweengotocam',
    'tgotocam',
    'ttocam',
}, function(args, speaker)
    TweenService.Create(TweenService, getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {
        CFrame = workspace.Camera.CFrame,
    }):Play()
end)
addcmd('fov', {}, function(args, speaker)
    local fov = args[1] or 70

    if isNumber(fov) then
        workspace.CurrentCamera.FieldOfView = fov
    end
end)

local preMaxZoom = Players.LocalPlayer.CameraMaxZoomDistance
local preMinZoom = Players.LocalPlayer.CameraMinZoomDistance

addcmd('lookat', {}, function(args, speaker)
    if speaker.CameraMaxZoomDistance ~= 0.5 then
        preMaxZoom = speaker.CameraMaxZoomDistance
        preMinZoom = speaker.CameraMinZoomDistance
    end

    speaker.CameraMaxZoomDistance = 0.5
    speaker.CameraMinZoomDistance = 0.5

    task.wait()

    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        local target = Players[v].Character

        if target and target.FindFirstChild(target, 'Head') then
            workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.p, target.Head.CFrame.p)

            task.wait(0.1)
        end
    end

    speaker.CameraMaxZoomDistance = preMaxZoom
    speaker.CameraMinZoomDistance = preMinZoom
end)
addcmd('fixcam', {
    'restorecam',
}, function(args, speaker)
    StopFreecam()
    execCmd('unview')
    workspace.CurrentCamera:remove()
    task.wait(0.1)

    repeat
        task.wait()
    until speaker.Character ~= nil

    workspace.CurrentCamera.CameraSubject = speaker.Character:FindFirstChildWhichIsA('Humanoid')
    workspace.CurrentCamera.CameraType = 'Custom'
    speaker.CameraMinZoomDistance = 0.5
    speaker.CameraMaxZoomDistance = 400
    speaker.CameraMode = 'Classic'
    speaker.Character.Head.Anchored = false
end)
addcmd('enableshiftlock', {
    'enablesl',
    'shiftlock',
}, function(args, speaker)
    local function enableShiftlock()
        speaker.DevEnableMouseLock = true
    end

    speaker.GetPropertyChangedSignal(speaker, 'DevEnableMouseLock'):Connect(enableShiftlock)
    enableShiftlock()
    notify('Shiftlock', 'Shift lock should now be available')
end)
addcmd('firstp', {}, function(args, speaker)
    speaker.CameraMode = 'LockFirstPerson'
end)
addcmd('thirdp', {}, function(args, speaker)
    speaker.CameraMode = 'Classic'
end)
addcmd('noclipcam', {
    'nccam',
}, function(args, speaker)
    local sc = (debug and debug.setconstant) or setconstant
    local gc = (debug and debug.getconstants) or getconstants

    if not sc or not getgc or not gc then
        return notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing setconstant or getconstants or getgc)]])
    end

    local pop = speaker.PlayerScripts.PlayerModule.CameraModule.ZoomController.Popper

    for _, v in pairs(getgc())do
        if type(v) == 'function' and getfenv(v).script == pop then
            for i, v1 in pairs(gc(v))do
                if tonumber(v1) == 0.25 then
                    sc(v, i, 0)
                elseif tonumber(v1) == 0 then
                    sc(v, i, 0.25)
                end
            end
        end
    end
end)
addcmd('maxzoom', {}, function(args, speaker)
    speaker.CameraMaxZoomDistance = args[1]
end)
addcmd('minzoom', {}, function(args, speaker)
    speaker.CameraMinZoomDistance = args[1]
end)
addcmd('camdistance', {}, function(args, speaker)
    local camMax = speaker.CameraMaxZoomDistance
    local camMin = speaker.CameraMinZoomDistance

    if camMax < tonumber(args[1]) then
        camMax = args[1]
    end

    speaker.CameraMaxZoomDistance = args[1]
    speaker.CameraMinZoomDistance = args[1]

    task.wait()

    speaker.CameraMaxZoomDistance = camMax
    speaker.CameraMinZoomDistance = camMin
end)
addcmd('unlockws', {
    'unlockworkspace',
}, function(args, speaker)
    for i, v in pairs(workspace.GetDescendants(workspace))do
        if v.IsA(v, 'BasePart') then
            v.Locked = false
        end
    end
end)
addcmd('lockws', {
    'lockworkspace',
}, function(args, speaker)
    for i, v in pairs(workspace.GetDescendants(workspace))do
        if v.IsA(v, 'BasePart') then
            v.Locked = true
        end
    end
end)
addcmd('delete', {
    'remove',
}, function(args, speaker)
    for i, v in pairs(workspace.GetDescendants(workspace))do
        if v.Name:lower() == getstring(1):lower() then
            v.Destroy(v)
        end
    end

    notify('Item(s) Deleted', 'Deleted ' .. getstring(1))
end)
addcmd('deleteclass', {
    'removeclass',
    'deleteclassname',
    'removeclassname',
    'dc',
}, function(args, speaker)
    for i, v in pairs(workspace.GetDescendants(workspace))do
        if v.ClassName:lower() == getstring(1):lower() then
            v.Destroy(v)
        end
    end

    notify('Item(s) Deleted', 'Deleted items with ClassName ' .. getstring(1))
end)
addcmd('chardelete', {
    'charremove',
    'cd',
}, function(args, speaker)
    for i, v in pairs(speaker.Character:GetDescendants())do
        if v.Name:lower() == getstring(1):lower() then
            v.Destroy(v)
        end
    end

    notify('Item(s) Deleted', 'Deleted ' .. getstring(1))
end)
addcmd('chardeleteclass', {
    'charremoveclass',
    'chardeleteclassname',
    'charremoveclassname',
    'cdc',
}, function(args, speaker)
    for i, v in pairs(speaker.Character:GetDescendants())do
        if v.ClassName:lower() == getstring(1):lower() then
            v.Destroy(v)
        end
    end

    notify('Item(s) Deleted', 'Deleted items with ClassName ' .. getstring(1))
end)
addcmd('deletevelocity', {
    'dv',
    'removevelocity',
    'removeforces',
}, function(args, speaker)
    for i, v in pairs(speaker.Character:GetDescendants())do
        if v.IsA(v, 'BodyVelocity') or v.IsA(v, 'BodyGyro') or v.IsA(v, 'RocketPropulsion') or v.IsA(v, 'BodyThrust') or v.IsA(v, 'BodyAngularVelocity') or v.IsA(v, 'AngularVelocity') or v.IsA(v, 'BodyForce') or v.IsA(v, 'VectorForce') or v.IsA(v, 'LineForce') then
            v.Destroy(v)
        end
    end
end)
addcmd('deleteinvisparts', {
    'deleteinvisibleparts',
    'dip',
}, function(args, speaker)
    for i, v in pairs(workspace.GetDescendants(workspace))do
        if v.IsA(v, 'BasePart') and v.Transparency == 1 and v.CanCollide then
            v.Destroy(v)
        end
    end
end)

local shownParts = {}

addcmd('invisibleparts', {
    'invisparts',
}, function(args, speaker)
    for i, v in pairs(workspace.GetDescendants(workspace))do
        if v.IsA(v, 'BasePart') and v.Transparency == 1 then
            if not table.find(shownParts, v) then
                table.insert(shownParts, v)
            end

            v.Transparency = 0
        end
    end
end)
addcmd('uninvisibleparts', {
    'uninvisparts',
}, function(args, speaker)
    for i, v in pairs(shownParts)do
        v.Transparency = 1
    end

    shownParts = {}
end)
addcmd('btools', {}, function(args, speaker)
    for i = 1, 4 do
        local Tool = Instance.new('HopperBin')

        Tool.BinType = i
        Tool.Name = randomString()
        Tool.Parent = speaker.FindFirstChildWhichIsA(speaker, 'Backpack')
    end
end)
addcmd('f3x', {
    'fex',
}, function(args, speaker)
    __DARKLUA_BUNDLE_MODULES.a()
end)
addcmd('partpath', {
    'partname',
}, function(args, speaker)
    selectPart()
end)
addcmd('antiafk', {
    'antiidle',
}, function(args, speaker)
    if getconnections then
        for _, connection in pairs(getconnections(speaker.Idled))do
            if connection.Disable then
                connection.Disable(connection)
            elseif connection.Disconnect then
                connection.Disconnect(connection)
            end
        end
    else
        speaker.Idled:Connect(function()
            Services.VirtualUser:CaptureController()
            Services.VirtualUser:ClickButton2(Vector2.new())
        end)
    end
    if not (args[1] and tostring(args[1]) == 'nonotify') then
        notify('Anti Idle', 'Anti idle is enabled')
    end
end)
addcmd('datalimit', {}, function(args, speaker)
    local kbps = tonumber(args[1])

    if kbps then
        Services.NetworkClient:SetOutgoingKBPSLimit(kbps)
    end
end)
addcmd('replicationlag', {
    'backtrack',
}, function(args, speaker)
    if tonumber(args[1]) then
        settings():GetService('NetworkSettings').IncomingReplicationLag = args[1]
    end
end)
addcmd('noprompts', {
    'nopurchaseprompts',
}, function(args, speaker)
    COREGUI.PurchasePromptApp.Enabled = false
end)
addcmd('showprompts', {
    'showpurchaseprompts',
}, function(args, speaker)
    COREGUI.PurchasePromptApp.Enabled = true
end)

promptNewRig = function(speaker, rig)
    local humanoid = speaker.Character:FindFirstChildWhichIsA('Humanoid')

    if humanoid then
        AvatarEditorService.PromptSaveAvatar(AvatarEditorService, humanoid.HumanoidDescription, Enum.HumanoidRigType[rig])

        local result = AvatarEditorService.PromptSaveAvatarCompleted:Wait()

        if result == Enum.AvatarPromptResult.Success then
            execCmd('reset')
        end
    end
end

addcmd('promptr6', {}, function(args, speaker)
    promptNewRig(speaker, 'R6')
end)
addcmd('promptr15', {}, function(args, speaker)
    promptNewRig(speaker, 'R15')
end)
addcmd('wallwalk', {
    'walkonwalls',
}, function(args, speaker)
    __DARKLUA_BUNDLE_MODULES.b()
end)
addcmd('age', {}, function(args, speaker)
    local players = getPlayer(args[1], speaker)
    local ages = {}

    for i, v in pairs(players)do
        local p = Players[v]

        table.insert(ages, p.Name .. "'s age is: " .. p.AccountAge)
    end

    notify('Account Age', table.concat(ages, ',\n'))
end)
addcmd('chatage', {}, function(args, speaker)
    local players = getPlayer(args[1], speaker)
    local ages = {}

    for i, v in pairs(players)do
        local p = Players[v]

        table.insert(ages, p.Name .. "'s age is: " .. p.AccountAge)
    end

    local chatString = table.concat(ages, ', ')

    chatMessage(chatString)
end)
addcmd('joindate', {
    'jd',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)
    local dates = {}

    for i, v in pairs(players)do
        local p = Players[v]
        local secondsOld = p.AccountAge * 24 * 60 * 60
        local now = os.time()
        local dateJoined = p.Name .. ' joined: ' .. os.date('%m/%d/%y', now - secondsOld)

        table.insert(dates, dateJoined)
    end

    notify('Join Date (Month/Day/Year)', table.concat(dates, ',\n'))
end)
addcmd('chatjoindate', {
    'cjd',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)
    local dates = {}

    for i, v in pairs(players)do
        local p = Players[v]
        local secondsOld = p.AccountAge * 24 * 60 * 60
        local now = os.time()
        local dateJoined = p.Name .. ' joined: ' .. os.date('%m/%d/%y', now - secondsOld)

        table.insert(dates, dateJoined)
    end

    local chatString = table.concat(dates, ', ')

    chatMessage(chatString)
end)
addcmd('copyname', {
    'copyuser',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        local name = tostring(Players[v].Name)

        toClipboard(name)
    end
end)
addcmd('userid', {
    'id',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        local id = tostring(Players[v].UserId)

        notify('User ID', id)
    end
end)
addcmd('copyplaceid', {
    'placeid',
}, function(args, speaker)
    toClipboard(PlaceId)
end)
addcmd('copygameid', {
    'gameid',
}, function(args, speaker)
    toClipboard(game.GameId)
end)
addcmd('copyid', {
    'copyuserid',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        local id = tostring(Players[v].UserId)

        toClipboard(id)
    end
end)
addcmd('creatorid', {
    'creator',
}, function(args, speaker)
    if game.CreatorType == Enum.CreatorType.User then
        notify('Creator ID', game.CreatorId)
    elseif game.CreatorType == Enum.CreatorType.Group then
        local OwnerID = GroupService.GetGroupInfoAsync(GroupService, game.CreatorId).Owner.Id

        speaker.UserId = OwnerID

        notify('Creator ID', OwnerID)
    end
end)
addcmd('copycreatorid', {
    'copycreator',
}, function(args, speaker)
    if game.CreatorType == Enum.CreatorType.User then
        toClipboard(game.CreatorId)
        notify('Copied ID', 'Copied creator ID to clipboard')
    elseif game.CreatorType == Enum.CreatorType.Group then
        local OwnerID = GroupService.GetGroupInfoAsync(GroupService, game.CreatorId).Owner.Id

        toClipboard(OwnerID)
        notify('Copied ID', 'Copied creator ID to clipboard')
    end
end)
addcmd('setcreatorid', {
    'setcreator',
}, function(args, speaker)
    if game.CreatorType == Enum.CreatorType.User then
        speaker.UserId = game.CreatorId

        notify('Set ID', 'Set UserId to ' .. game.CreatorId)
    elseif game.CreatorType == Enum.CreatorType.Group then
        local OwnerID = GroupService.GetGroupInfoAsync(GroupService, game.CreatorId).Owner.Id

        speaker.UserId = OwnerID

        notify('Set ID', 'Set UserId to ' .. OwnerID)
    end
end)
addcmd('appearanceid', {
    'aid',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        local aid = tostring(Players[v].CharacterAppearanceId)

        notify('Appearance ID', aid)
    end
end)
addcmd('copyappearanceid', {
    'caid',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        local aid = tostring(Players[v].CharacterAppearanceId)

        toClipboard(aid)
    end
end)
addcmd('norender', {}, function(args, speaker)
    RunService.Set3dRenderingEnabled(RunService, false)
end)
addcmd('render', {}, function(args, speaker)
    RunService.Set3dRenderingEnabled(RunService, true)
end)
addcmd('2022materials', {
    'use2022materials',
}, function(args, speaker)
    if sethidden then
        sethidden(MaterialService, 'Use2022Materials', true)
    else
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing sethiddenproperty)]])
    end
end)
addcmd('un2022materials', {
    'unuse2022materials',
}, function(args, speaker)
    if sethidden then
        sethidden(MaterialService, 'Use2022Materials', false)
    else
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing sethiddenproperty)]])
    end
end)
addcmd('goto', {
    'to',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        if Players[v].Character ~= nil then
            if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
                speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

                task.wait(0.1)
            end

            getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(3, 1, 0)
        end
    end

    execCmd('breakvelocity')
end)
addcmd('tweengoto', {
    'tgoto',
    'tto',
    'tweento',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        if Players[v].Character ~= nil then
            if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
                speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

                task.wait(0.1)
            end

            TweenService.Create(TweenService, getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {
                CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(3, 1, 0),
            }):Play()
        end
    end

    execCmd('breakvelocity')
end)
addcmd('vehiclegoto', {
    'vgoto',
    'vtp',
    'vehicletp',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        if Players[v].Character ~= nil then
            local seat = speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart
            local vehicleModel = seat.FindFirstAncestorWhichIsA(seat, 'Model')

            vehicleModel.MoveTo(vehicleModel, getRoot(Players[v].Character).Position)
        end
    end
end)
addcmd('pulsetp', {
    'ptp',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        if Players[v].Character ~= nil then
            local startPos = getRoot(speaker.Character).CFrame
            local seconds = args[2] or 1

            if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
                speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

                task.wait(0.1)
            end

            getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(3, 1, 0)

            task.wait(seconds)

            getRoot(speaker.Character).CFrame = startPos
        end
    end

    execCmd('breakvelocity')
end)

local vnoclipParts = {}

addcmd('vehiclenoclip', {
    'vnoclip',
}, function(args, speaker)
    vnoclipParts = {}

    local seat = speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart
    local vehicleModel = seat.Parent

    repeat
        if vehicleModel.ClassName ~= 'Model' then
            vehicleModel = vehicleModel.Parent
        end
    until vehicleModel.ClassName == 'Model'

    task.wait(0.1)
    execCmd('noclip')

    for i, v in pairs(vehicleModel.GetDescendants(vehicleModel))do
        if v.IsA(v, 'BasePart') and v.CanCollide then
            table.insert(vnoclipParts, v)

            v.CanCollide = false
        end
    end
end)
addcmd('vehicleclip', {
    'vclip',
    'unvnoclip',
    'unvehiclenoclip',
}, function(args, speaker)
    execCmd('clip')

    for i, v in pairs(vnoclipParts)do
        v.CanCollide = true
    end

    vnoclipParts = {}
end)
addcmd('togglevnoclip', {}, function(args, speaker)
    execCmd(Clip and 'vnoclip' or 'vclip')
end)
addcmd('clientbring', {
    'cbring',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        if Players[v].Character ~= nil then
            if Players[v].Character:FindFirstChildOfClass('Humanoid') then
                Players[v].Character:FindFirstChildOfClass('Humanoid').Sit = false
            end

            task.wait()

            getRoot(Players[v].Character).CFrame = getRoot(speaker.Character).CFrame + Vector3.new(3, 1, 0)
        end
    end
end)

local bringT = {}

addcmd('loopbring', {}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        task.spawn(function()
            if Players[v].Name ~= speaker.Name and not FindInTable(bringT, Players[v].Name) then
                table.insert(bringT, Players[v].Name)

                local plrName = Players[v].Name
                local pchar = Players[v].Character
                local distance = 3

                if args[2] and isNumber(args[2]) then
                    distance = args[2]
                end

                local lDelay = 0

                if args[3] and isNumber(args[3]) then
                    lDelay = args[3]
                end

                repeat
                    for i, c in pairs(players)do
                        if Players.FindFirstChild(Players, v) then
                            pchar = Players[v].Character

                            if pchar ~= nil and Players[v].Character ~= nil and getRoot(pchar) and speaker.Character ~= nil and getRoot(speaker.Character) then
                                getRoot(pchar).CFrame = getRoot(speaker.Character).CFrame + Vector3.new(distance, 1, 0)
                            end

                            task.wait(lDelay)
                        else
                            for a, b in pairs(bringT)do
                                if b == plrName then
                                    table.remove(bringT, a)
                                end
                            end
                        end
                    end
                until not FindInTable(bringT, plrName)
            end
        end)
    end
end)
addcmd('unloopbring', {
    'noloopbring',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        task.spawn(function()
            for a, b in pairs(bringT)do
                if b == Players[v].Name then
                    table.remove(bringT, a)
                end
            end
        end)
    end
end)

local walkto = false
local waypointwalkto = false

addcmd('walkto', {
    'follow',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        if Players[v].Character ~= nil then
            if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
                speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

                task.wait(0.1)
            end

            walkto = true

            repeat
                task.wait()
                speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(getRoot(Players[v].Character).Position)
            until Players[v].Character == nil or not getRoot(Players[v].Character) or walkto == false
        end
    end
end)
addcmd('pathfindwalkto', {
    'pathfindfollow',
}, function(args, speaker)
    walkto = false

    task.wait()

    local players = getPlayer(args[1], speaker)
    local hum = Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid')
    local path = PathService.CreatePath(PathService)

    for i, v in pairs(players)do
        if Players[v].Character ~= nil then
            if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
                speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

                task.wait(0.1)
            end

            walkto = true

            repeat
                task.wait()

                local success, response = pcall(function()
                    path.ComputeAsync(path, getRoot(speaker.Character).Position, getRoot(Players[v].Character).Position)

                    local waypoints = path.GetWaypoints(path)
                    local distance

                    for waypointIndex, waypoint in pairs(waypoints)do
                        local waypointPosition = waypoint.Position

                        hum.MoveTo(hum, waypointPosition)

                        repeat
                            distance = (waypointPosition - hum.Parent.PrimaryPart.Position).magnitude

                            task.wait()
                        until distance <= 5
                    end
                end)

                if not success then
                    speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(getRoot(Players[v].Character).Position)
                end
            until Players[v].Character == nil or not getRoot(Players[v].Character) or walkto == false
        end
    end
end)
addcmd('pathfindwalktowaypoint', {
    'pathfindwalktowp',
}, function(args, speaker)
    waypointwalkto = false

    task.wait()

    local WPName = tostring(getstring(1))
    local hum = Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid')
    local path = PathService.CreatePath(PathService)

    if speaker.Character then
        for i, _ in pairs(WayPoints)do
            if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
                if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
                    speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

                    task.wait(0.1)
                end

                local TrueCoords = Vector3.new(WayPoints[i].COORD[1], WayPoints[i].COORD[2], WayPoints[i].COORD[3])

                waypointwalkto = true

                repeat
                    task.wait()

                    local success, response = pcall(function()
                        path.ComputeAsync(path, getRoot(speaker.Character).Position, TrueCoords)

                        local waypoints = path.GetWaypoints(path)
                        local distance

                        for waypointIndex, waypoint in pairs(waypoints)do
                            local waypointPosition = waypoint.Position

                            hum.MoveTo(hum, waypointPosition)

                            repeat
                                distance = (waypointPosition - hum.Parent.PrimaryPart.Position).magnitude

                                task.wait()
                            until distance <= 5
                        end
                    end)

                    if not success then
                        speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(TrueCoords)
                    end
                until not speaker.Character or waypointwalkto == false
            end
        end
        for i, _ in pairs(pWayPoints)do
            if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
                if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
                    speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

                    task.wait(0.1)
                end

                local TrueCoords = pWayPoints[i].COORD[1].Position

                waypointwalkto = true

                repeat
                    task.wait()

                    local success, response = pcall(function()
                        path.ComputeAsync(path, getRoot(speaker.Character).Position, TrueCoords)

                        local waypoints = path.GetWaypoints(path)
                        local distance

                        for waypointIndex, waypoint in pairs(waypoints)do
                            local waypointPosition = waypoint.Position

                            hum.MoveTo(hum, waypointPosition)

                            repeat
                                distance = (waypointPosition - hum.Parent.PrimaryPart.Position).magnitude

                                task.wait()
                            until distance <= 5
                        end
                    end)

                    if not success then
                        speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(TrueCoords)
                    end
                until not speaker.Character or waypointwalkto == false
            end
        end
    end
end)
addcmd('unwalkto', {
    'nowalkto',
    'unfollow',
    'nofollow',
}, function(args, speaker)
    walkto = false
    waypointwalkto = false
end)
addcmd('orbit', {}, function(args, speaker)
    execCmd('unorbit nonotify')

    local target = Players.FindFirstChild(Players, getPlayer(args[1], speaker)[1])
    local root = getRoot(speaker.Character)
    local humanoid = speaker.Character:FindFirstChildWhichIsA('Humanoid')

    if target and target.Character and getRoot(target.Character) and root and humanoid then
        local rotation = 0
        local speed = tonumber(args[2]) or 0.2
        local distance = tonumber(args[3]) or 6

        orbit1 = RunService.Heartbeat:Connect(function()
            pcall(function()
                rotation = rotation + speed
                root.CFrame = CFrame.new(getRoot(target.Character).Position) * CFrame.Angles(0, math.rad(rotation), 0) * CFrame.new(distance, 0, 0)
            end)
        end)
        orbit2 = RunService.RenderStepped:Connect(function()
            pcall(function()
                root.CFrame = CFrame.new(root.Position, getRoot(target.Character).Position)
            end)
        end)
        orbit3 = humanoid.Died:Connect(function()
            execCmd('unorbit')
        end)
        orbit4 = humanoid.Seated:Connect(function(value)
            if value then
                execCmd('unorbit')
            end
        end)

        notify('Orbit', 'Started orbiting ' .. formatUsername(target))
    end
end)
addcmd('unorbit', {}, function(args, speaker)
    if orbit1 then
        orbit1.Disconnect(orbit1)
    end
    if orbit2 then
        orbit2.Disconnect(orbit2)
    end
    if orbit3 then
        orbit3.Disconnect(orbit3)
    end
    if orbit4 then
        orbit4.Disconnect(orbit4)
    end
    if args[1] ~= 'nonotify' then
        notify('Orbit', 'Stopped orbiting player')
    end
end)
addcmd('freeze', {
    'fr',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    if players ~= nil then
        for i, v in pairs(players)do
            task.spawn(function()
                for i, x in next, Players[v].Character:GetDescendants()do
                    if x.IsA(x, 'BasePart') and not x.Anchored then
                        x.Anchored = true
                    end
                end
            end)
        end
    end
end)
addcmd('thaw', {
    'unfreeze',
    'unfr',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    if players ~= nil then
        for i, v in pairs(players)do
            task.spawn(function()
                for i, x in next, Players[v].Character:GetDescendants()do
                    if x.Name ~= floatName and x.IsA(x, 'BasePart') and x.Anchored then
                        x.Anchored = false
                    end
                end
            end)
        end
    end
end)

oofing = false

addcmd('loopoof', {}, function(args, speaker)
    oofing = true

    repeat
        task.wait(0.1)

        for i, v in pairs(Players.GetPlayers(Players))do
            if v.Character ~= nil and v.Character:FindFirstChild'Head' then
                for _, x in pairs(v.Character.Head:GetChildren())do
                    if x.IsA(x, 'Sound') then
                        x.Playing = true
                    end
                end
            end
        end
    until oofing == false
end)
addcmd('unloopoof', {}, function(args, speaker)
    oofing = false
end)

local notifiedRespectFiltering = false

addcmd('muteboombox', {}, function(args, speaker)
    if not notifiedRespectFiltering and SoundService.RespectFilteringEnabled then
        notifiedRespectFiltering = true

        notify('RespectFilteringEnabled', 
[[RespectFilteringEnabled is set to true (the command will still work but may only be clientsided)]])
    end

    local players = getPlayer(args[1], speaker)

    if players ~= nil then
        for i, v in pairs(players)do
            task.spawn(function()
                for i, x in next, Players[v].Character:GetDescendants()do
                    if x.IsA(x, 'Sound') and x.Playing == true then
                        x.Playing = false
                    end
                end
                for i, x in next, Players[v]:FindFirstChildOfClass('Backpack'):GetDescendants()do
                    if x.IsA(x, 'Sound') and x.Playing == true then
                        x.Playing = false
                    end
                end
            end)
        end
    end
end)
addcmd('unmuteboombox', {}, function(args, speaker)
    if not notifiedRespectFiltering and SoundService.RespectFilteringEnabled then
        notifiedRespectFiltering = true

        notify('RespectFilteringEnabled', 
[[RespectFilteringEnabled is set to true (the command will still work but may only be clientsided)]])
    end

    local players = getPlayer(args[1], speaker)

    if players ~= nil then
        for i, v in pairs(players)do
            task.spawn(function()
                for i, x in next, Players[v].Character:GetDescendants()do
                    if x.IsA(x, 'Sound') and x.Playing == false then
                        x.Playing = true
                    end
                end
            end)
        end
    end
end)
addcmd('reset', {}, function(args, speaker)
    local humanoid = speaker.Character and speaker.Character:FindFirstChildWhichIsA('Humanoid')

    if replicatesignal then
        replicatesignal(speaker.Kill)
    elseif humanoid then
        humanoid.ChangeState(humanoid, Enum.HumanoidStateType.Dead)
    else
        speaker.Character:BreakJoints()
    end
end)
addcmd('freezeanims', {}, function(args, speaker)
    local Humanoid = speaker.Character:FindFirstChildOfClass('Humanoid') or speaker.Character:FindFirstChildOfClass('AnimationController')
    local ActiveTracks = Humanoid.GetPlayingAnimationTracks(Humanoid)

    for _, v in pairs(ActiveTracks)do
        v.AdjustSpeed(v, 0)
    end
end)
addcmd('unfreezeanims', {}, function(args, speaker)
    local Humanoid = speaker.Character:FindFirstChildOfClass('Humanoid') or speaker.Character:FindFirstChildOfClass('AnimationController')
    local ActiveTracks = Humanoid.GetPlayingAnimationTracks(Humanoid)

    for _, v in pairs(ActiveTracks)do
        v.AdjustSpeed(v, 1)
    end
end)
addcmd('respawn', {}, function(args, speaker)
    respawn(speaker)
end)
addcmd('refresh', {
    're',
}, function(args, speaker)
    refresh(speaker)
end)
addcmd('god', {}, function(args, speaker)
    permadeath(speaker)

    local Cam = workspace.CurrentCamera
    local Char, Pos = speaker.Character, Cam.CFrame
    local Human = Char and Char.FindFirstChildWhichIsA(Char, 'Humanoid')
    local nHuman = Human.Clone(Human)

    nHuman.Parent = char
    speaker.Character = nil

    nHuman.SetStateEnabled(nHuman, 15, false)
    nHuman.SetStateEnabled(nHuman, 1, false)
    nHuman.SetStateEnabled(nHuman, 0, false)

    nHuman.BreakJointsOnDeath = true

    Human.Destroy(Human)

    speaker.Character = char
    Cam.CameraSubject = nHuman
    Cam.CFrame = task.wait() and pos
    nHuman.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None

    local Script = Char.FindFirstChild(Char, 'Animate')

    if Script then
        Script.Disabled = true

        task.wait()

        Script.Disabled = false
    end

    nHuman.Health = nHuman.MaxHealth
end)

invisRunning = false

addcmd('invisible', {
    'invis',
}, function(args, speaker)
    if invisRunning then
        return
    end

    invisRunning = true

    local Player = speaker

    repeat
        task.wait(0.1)
    until Player.Character

    local Character = Player.Character

    Character.Archivable = true

    local IsInvis = false
    local IsRunning = true
    local InvisibleCharacter = Character.Clone(Character)

    InvisibleCharacter.Parent = Lighting

    local Void = workspace.FallenPartsDestroyHeight

    InvisibleCharacter.Name = ''

    local CF
    local invisFix = RunService.Stepped:Connect(function()
        pcall(function()
            local IsInteger

            if tostring(Void):find'-' then
                IsInteger = true
            else
                IsInteger = false
            end

            local Pos = Player.Character.HumanoidRootPart.Position
            local Pos_String = tostring(Pos)
            local Pos_Seperate = Pos_String.split(Pos_String, ', ')
            local X = tonumber(Pos_Seperate[1])
            local Y = tonumber(Pos_Seperate[2])
            local Z = tonumber(Pos_Seperate[3])

            if IsInteger == true then
                if Y <= Void then
                    respawn()
                end
            elseif IsInteger == false then
                if Y >= Void then
                    respawn()
                end
            end
        end)
    end)

    for i, v in pairs(InvisibleCharacter.GetDescendants(InvisibleCharacter))do
        if v.IsA(v, 'BasePart') then
            if v.Name == 'HumanoidRootPart' then
                v.Transparency = 1
            else
                v.Transparency = 0.5
            end
        end
    end

    respawn = function()
        IsRunning = false

        if IsInvis == true then
            pcall(function()
                Player.Character = Character

                task.wait()

                Character.Parent = workspace

                Character.FindFirstChildWhichIsA(Character, 'Humanoid'):Destroy()

                IsInvis = false
                InvisibleCharacter.Parent = nil
                invisRunning = false
            end)
        elseif IsInvis == false then
            pcall(function()
                Player.Character = Character

                task.wait()

                Character.Parent = workspace

                Character.FindFirstChildWhichIsA(Character, 'Humanoid'):Destroy()
                TurnVisible()
            end)
        end
    end

    local invisDied

    invisDied = InvisibleCharacter.FindFirstChildOfClass(InvisibleCharacter, 'Humanoid').Died:Connect(function(
    )
        respawn()
        invisDied.Disconnect(invisDied)
    end)

    if IsInvis == true then
        return
    end

    IsInvis = true
    CF = workspace.CurrentCamera.CFrame

    local CF_1 = Player.Character.HumanoidRootPart.CFrame

    Character.MoveTo(Character, Vector3.new(0, math.pi * 1000000, 0))

    workspace.CurrentCamera.CameraType = Enum.CameraType.Scriptable

    task.wait(0.2)

    workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
    InvisibleCharacter = InvisibleCharacter
    Character.Parent = Lighting
    InvisibleCharacter.Parent = workspace
    InvisibleCharacter.HumanoidRootPart.CFrame = CF_1
    Player.Character = InvisibleCharacter

    execCmd('fixcam')

    Player.Character.Animate.Disabled = true
    Player.Character.Animate.Disabled = false
    TurnVisible = function()
        if IsInvis == false then
            return
        end

        invisFix.Disconnect(invisFix)
        invisDied.Disconnect(invisDied)

        CF = workspace.CurrentCamera.CFrame
        Character = Character

        local CF_1 = Player.Character.HumanoidRootPart.CFrame

        Character.HumanoidRootPart.CFrame = CF_1

        InvisibleCharacter.Destroy(InvisibleCharacter)

        Player.Character = Character
        Character.Parent = workspace
        IsInvis = false
        Player.Character.Animate.Disabled = true
        Player.Character.Animate.Disabled = false
        invisDied = Character.FindFirstChildOfClass(Character, 'Humanoid').Died:Connect(function(
        )
            respawn()
            invisDied.Disconnect(invisDied)
        end)
        invisRunning = false
    end

    notify('Invisible', 'You now appear invisible to other players')
end)
addcmd('visible', {
    'vis',
    'uninvisible',
}, function(args, speaker)
    TurnVisible()
end)
addcmd('toggleinvis', {}, function(args, speaker)
    execCmd(invisRunning and 'visible' or 'invisible')
end)
addcmd('toolinvisible', {
    'toolinvis',
    'tinvis',
}, function(args, speaker)
    local Char = Players.LocalPlayer.Character
    local touched = false
    local tpdback = false
    local box = Instance.new('Part')

    box.Anchored = true
    box.CanCollide = true
    box.Size = Vector3.new(10, 1, 10)
    box.Position = Vector3.new(0, 10000, 0)
    box.Parent = workspace

    local boxTouched = box.Touched:connect(function(part)
        if (part.Parent.Name == Players.LocalPlayer.Name) then
            if touched == false then
                touched = true

                local function apply()
                    local no = Char.HumanoidRootPart:Clone()

                    task.wait(0.25)
                    Char.HumanoidRootPart:Destroy()

                    no.Parent = Char

                    Char.MoveTo(Char, loc)

                    touched = false
                end

                if Char then
                    apply()
                end
            end
        end
    end)

    repeat
        task.wait()
    until Char

    local cleanUp

    cleanUp = Players.LocalPlayer.CharacterAdded:connect(function(char)
        boxTouched.Disconnect(boxTouched)
        box.Destroy(box)
        cleanUp.Disconnect(cleanUp)
    end)
    loc = Char.HumanoidRootPart.Position

    Char.MoveTo(Char, box.Position + Vector3.new(0, 0.5, 0))
end)
addcmd('strengthen', {}, function(args, speaker)
    for _, child in pairs(speaker.Character:GetDescendants())do
        if child.ClassName == 'Part' then
            if args[1] then
                child.CustomPhysicalProperties = PhysicalProperties.new(args[1], 0.3, 0.5)
            else
                child.CustomPhysicalProperties = PhysicalProperties.new(100, 0.3, 0.5)
            end
        end
    end
end)
addcmd('weaken', {}, function(args, speaker)
    for _, child in pairs(speaker.Character:GetDescendants())do
        if child.ClassName == 'Part' then
            if args[1] then
                child.CustomPhysicalProperties = PhysicalProperties.new(-args[1], 0.3, 0.5)
            else
                child.CustomPhysicalProperties = PhysicalProperties.new(0, 0.3, 0.5)
            end
        end
    end
end)
addcmd('unweaken', {
    'unstrengthen',
}, function(args, speaker)
    for _, child in pairs(speaker.Character:GetDescendants())do
        if child.ClassName == 'Part' then
            child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
        end
    end
end)
addcmd('breakvelocity', {}, function(args, speaker)
    local BeenASecond, V3 = false, Vector3.new(0, 0, 0)

    delay(1, function()
        BeenASecond = true
    end)

    while not BeenASecond do
        for _, v in ipairs(speaker.Character:GetDescendants())do
            if v.IsA(v, 'BasePart') then
                v.Velocity, v.RotVelocity = V3, V3
            end
        end

        task.wait()
    end
end)
addcmd('jpower', {
    'jumppower',
    'jp',
}, function(args, speaker)
    local jpower = args[1] or 50

    if isNumber(jpower) then
        if speaker.Character:FindFirstChildOfClass('Humanoid').UseJumpPower then
            speaker.Character:FindFirstChildOfClass('Humanoid').JumpPower = jpower
        else
            speaker.Character:FindFirstChildOfClass('Humanoid').JumpHeight = jpower
        end
    end
end)
addcmd('maxslopeangle', {
    'msa',
}, function(args, speaker)
    local sangle = args[1] or 89

    if isNumber(sangle) then
        speaker.Character:FindFirstChildWhichIsA('Humanoid').MaxSlopeAngle = sangle
    end
end)
addcmd('gravity', {
    'grav',
}, function(args, speaker)
    local grav = args[1] or 196.2

    if isNumber(grav) then
        workspace.Gravity = grav
    end
end)
addcmd('hipheight', {
    'hheight',
}, function(args, speaker)
    local hipHeight = args[1] or (r15(speaker) and 2.1 or 0)

    if isNumber(hipHeight) then
        speaker.Character:FindFirstChildWhichIsA('Humanoid').HipHeight = hipHeight
    end
end)
addcmd('dance', {}, function(args, speaker)
    pcall(execCmd, 'undance')

    local dances = {
        '27789359',
        '30196114',
        '248263260',
        '45834924',
        '33796059',
        '28488254',
        '52155728',
    }

    if r15(speaker) then
        dances = {
            '3333432454',
            '4555808220',
            '4049037604',
            '4555782893',
            '10214311282',
            '10714010337',
            '10713981723',
            '10714372526',
            '10714076981',
            '10714392151',
            '11444443576',
        }
    end

    local animation = Instance.new('Animation')

    animation.AnimationId = 'rbxassetid://' .. dances[math.random(1, #dances)]
    danceTrack = speaker.Character:FindFirstChildWhichIsA('Humanoid'):LoadAnimation(animation)
    danceTrack.Looped = true

    danceTrack.Play(danceTrack)
end)
addcmd('undance', {
    'nodance',
}, function(args, speaker)
    danceTrack.Stop(danceTrack)
    danceTrack.Destroy(danceTrack)
end)
addcmd('nolimbs', {
    'rlimbs',
}, function(args, speaker)
    if r15(speaker) then
        for i, v in pairs(speaker.Character:GetChildren())do
            if v.IsA(v, 'BasePart') and v.Name == 'RightUpperLeg' or v.Name == 'LeftUpperLeg' or v.Name == 'RightUpperArm' or v.Name == 'LeftUpperArm' then
                v.Destroy(v)
            end
        end
    else
        for i, v in pairs(speaker.Character:GetChildren())do
            if v.IsA(v, 'BasePart') and v.Name == 'Right Leg' or v.Name == 'Left Leg' or v.Name == 'Right Arm' or v.Name == 'Left Arm' then
                v.Destroy(v)
            end
        end
    end
end)
addcmd('noarms', {
    'rarms',
}, function(args, speaker)
    if r15(speaker) then
        for i, v in pairs(speaker.Character:GetChildren())do
            if v.IsA(v, 'BasePart') and v.Name == 'RightUpperArm' or v.Name == 'LeftUpperArm' then
                v.Destroy(v)
            end
        end
    else
        for i, v in pairs(speaker.Character:GetChildren())do
            if v.IsA(v, 'BasePart') and v.Name == 'Right Arm' or v.Name == 'Left Arm' then
                v.Destroy(v)
            end
        end
    end
end)
addcmd('nolegs', {
    'rlegs',
}, function(args, speaker)
    if r15(speaker) then
        for i, v in pairs(speaker.Character:GetChildren())do
            if v.IsA(v, 'BasePart') and v.Name == 'RightUpperLeg' or v.Name == 'LeftUpperLeg' then
                v.Destroy(v)
            end
        end
    else
        for i, v in pairs(speaker.Character:GetChildren())do
            if v.IsA(v, 'BasePart') and v.Name == 'Right Leg' or v.Name == 'Left Leg' then
                v.Destroy(v)
            end
        end
    end
end)
addcmd('sit', {}, function(args, speaker)
    speaker.Character:FindFirstChildWhichIsA('Humanoid').Sit = true
end)
addcmd('lay', {
    'laydown',
}, function(args, speaker)
    local humanoid = speaker.Character:FindFirstChildWhichIsA('Humanoid')

    humanoid.Sit = true

    task.wait(0.1)

    humanoid.RootPart.CFrame = humanoid.RootPart.CFrame * CFrame.Angles(math.pi * 0.5, 0, 0)

    for _, v in ipairs(humanoid.GetPlayingAnimationTracks(humanoid))do
        v.Stop(v)
    end
end)
addcmd('sitwalk', {}, function(args, speaker)
    local anims = speaker.Character.Animate
    local sit = anims.sit:FindFirstChildWhichIsA('Animation').AnimationId

    anims.idle:FindFirstChildWhichIsA('Animation').AnimationId = sit
    anims.walk:FindFirstChildWhichIsA('Animation').AnimationId = sit
    anims.run:FindFirstChildWhichIsA('Animation').AnimationId = sit
    anims.jump:FindFirstChildWhichIsA('Animation').AnimationId = sit
    speaker.Character:FindFirstChildWhichIsA('Humanoid').HipHeight = not r15(speaker) and 
-1.5 or 0.5
end)
addcmd('nosit', {}, function(args, speaker)
    speaker.Character:FindFirstChildWhichIsA('Humanoid'):SetStateEnabled(Enum.HumanoidStateType.Seated, false)
end)
addcmd('unnosit', {}, function(args, speaker)
    speaker.Character:FindFirstChildWhichIsA('Humanoid'):SetStateEnabled(Enum.HumanoidStateType.Seated, true)
end)
addcmd('jump', {}, function(args, speaker)
    speaker.Character:FindFirstChildWhichIsA('Humanoid'):ChangeState(Enum.HumanoidStateType.Jumping)
end)

local infJump

infJumpDebounce = false

addcmd('infjump', {
    'infinitejump',
}, function(args, speaker)
    if infJump then
        infJump.Disconnect(infJump)
    end

    infJumpDebounce = false
    infJump = UserInputService.JumpRequest:Connect(function()
        if not infJumpDebounce then
            infJumpDebounce = true

            speaker.Character:FindFirstChildWhichIsA('Humanoid'):ChangeState(Enum.HumanoidStateType.Jumping)
            task.wait()

            infJumpDebounce = false
        end
    end)
end)
addcmd('uninfjump', {
    'uninfinitejump',
    'noinfjump',
    'noinfinitejump',
}, function(args, speaker)
    if infJump then
        infJump.Disconnect(infJump)
    end

    infJumpDebounce = false
end)

local flyjump

addcmd('flyjump', {}, function(args, speaker)
    if flyjump then
        flyjump.Disconnect(flyjump)
    end

    flyjump = UserInputService.JumpRequest:Connect(function()
        speaker.Character:FindFirstChildWhichIsA('Humanoid'):ChangeState(Enum.HumanoidStateType.Jumping)
    end)
end)
addcmd('unflyjump', {
    'noflyjump',
}, function(args, speaker)
    if flyjump then
        flyjump.Disconnect(flyjump)
    end
end)

local HumanModCons = {}

addcmd('autojump', {
    'ajump',
}, function(args, speaker)
    local Char = speaker.Character
    local Human = Char and Char.FindFirstChildWhichIsA(Char, 'Humanoid')

    local function autoJump()
        if Char and Human then
            local check1 = workspace.FindPartOnRay(workspace, Ray.new(Human.RootPart.Position - Vector3.new(0, 1.5, 0), Human.RootPart.CFrame.lookVector * 3), Human.Parent)
            local check2 = workspace.FindPartOnRay(workspace, Ray.new(Human.RootPart.Position + Vector3.new(0, 1.5, 0), Human.RootPart.CFrame.lookVector * 3), Human.Parent)

            if check1 or check2 then
                Human.Jump = true
            end
        end
    end

    autoJump()

    HumanModCons.ajLoop = (HumanModCons.ajLoop and HumanModCons.ajLoop:Disconnect() and false) or RunService.RenderStepped:Connect(autoJump)
    HumanModCons.ajCA = (HumanModCons.ajCA and HumanModCons.ajCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(
        nChar
    )
        Char, Human = nChar, nChar.WaitForChild(nChar, 'Humanoid')

        autoJump()

        HumanModCons.ajLoop = (HumanModCons.ajLoop and HumanModCons.ajLoop:Disconnect() and false) or RunService.RenderStepped:Connect(autoJump)
    end)
end)
addcmd('unautojump', {
    'noautojump',
    'noajump',
    'unajump',
}, function(args, speaker)
    HumanModCons.ajLoop = (HumanModCons.ajLoop and HumanModCons.ajLoop:Disconnect() and false) or nil
    HumanModCons.ajCA = (HumanModCons.ajCA and HumanModCons.ajCA:Disconnect() and false) or nil
end)
addcmd('edgejump', {
    'ejump',
}, function(args, speaker)
    local Char = speaker.Character
    local Human = Char and Char.FindFirstChildWhichIsA(Char, 'Humanoid')
    local state
    local laststate
    local lastcf

    local function edgejump()
        if Char and Human then
            laststate = state
            state = Human.GetState(Human)

            if laststate ~= state and state == Enum.HumanoidStateType.Freefall and laststate ~= Enum.HumanoidStateType.Jumping then
                Char.HumanoidRootPart.CFrame = lastcf
                Char.HumanoidRootPart.Velocity = Vector3.new(Char.HumanoidRootPart.Velocity.X, Human.JumpPower or Human.JumpHeight, Char.HumanoidRootPart.Velocity.Z)
            end

            lastcf = Char.HumanoidRootPart.CFrame
        end
    end

    edgejump()

    HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or RunService.RenderStepped:Connect(edgejump)
    HumanModCons.ejCA = (HumanModCons.ejCA and HumanModCons.ejCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(
        nChar
    )
        Char, Human = nChar, nChar.WaitForChild(nChar, 'Humanoid')

        edgejump()

        HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or RunService.RenderStepped:Connect(edgejump)
    end)
end)
addcmd('unedgejump', {
    'noedgejump',
    'noejump',
    'unejump',
}, function(args, speaker)
    HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or nil
    HumanModCons.ejCA = (HumanModCons.ejCA and HumanModCons.ejCA:Disconnect() and false) or nil
end)
addcmd('team', {}, function(args, speaker)
    local teamName = getstring(1)
    local team
    local root = speaker.Character and getRoot(speaker.Character)

    for _, v in ipairs(Teams.GetChildren(Teams))do
        if v.Name:lower():match(teamName.lower(teamName)) then
            team = v

            break
        end
    end

    if not team then
        return notify('Invalid Team', teamName .. ' is not a valid team')
    end
    if root and firetouchinterest then
        for _, v in ipairs(workspace.GetDescendants(workspace))do
            if v.IsA(v, 'SpawnLocation') and v.BrickColor == team.TeamColor and v.AllowTeamChangeOnTouch == true then
                firetouchinterest(v, root, 0)
                firetouchinterest(v, root, 1)

                break
            end
        end
    else
        speaker.Team = team
    end
end)
addcmd('nobgui', {
    'unbgui',
    'nobillboardgui',
    'unbillboardgui',
    'noname',
    'rohg',
}, function(args, speaker)
    for i, v in pairs(speaker.Character:GetDescendants())do
        if v.IsA(v, 'BillboardGui') or v.IsA(v, 'SurfaceGui') then
            v.Destroy(v)
        end
    end
end)
addcmd('loopnobgui', {
    'loopunbgui',
    'loopnobillboardgui',
    'loopunbillboardgui',
    'loopnoname',
    'looprohg',
}, function(args, speaker)
    for i, v in pairs(speaker.Character:GetDescendants())do
        if v.IsA(v, 'BillboardGui') or v.IsA(v, 'SurfaceGui') then
            v.Destroy(v)
        end
    end

    local function charPartAdded(part)
        if part.IsA(part, 'BillboardGui') or part.IsA(part, 'SurfaceGui') then
            task.wait()
            part.Destroy(part)
        end
    end

    charPartTrigger = speaker.Character.DescendantAdded:Connect(charPartAdded)
end)
addcmd('unloopnobgui', {
    'unloopunbgui',
    'unloopnobillboardgui',
    'unloopunbillboardgui',
    'unloopnoname',
    'unlooprohg',
}, function(args, speaker)
    if charPartTrigger then
        charPartTrigger.Disconnect(charPartTrigger)
    end
end)
addcmd('spasm', {}, function(args, speaker)
    if not r15(speaker) then
        local pchar = speaker.Character
        local AnimationId = '33796059'

        SpasmAnim = Instance.new('Animation')
        SpasmAnim.AnimationId = 'rbxassetid://' .. AnimationId
        Spasm = pchar.FindFirstChildOfClass(pchar, 'Humanoid'):LoadAnimation(SpasmAnim)

        Spasm.Play(Spasm)
        Spasm.AdjustSpeed(Spasm, 99)
    else
        notify('R6 Required', 'This command requires the r6 rig type')
    end
end)
addcmd('unspasm', {
    'nospasm',
}, function(args, speaker)
    Spasm.Stop(Spasm)
    SpasmAnim.Destroy(SpasmAnim)
end)
addcmd('headthrow', {}, function(args, speaker)
    if not r15(speaker) then
        local AnimationId = '35154961'
        local Anim = Instance.new('Animation')

        Anim.AnimationId = 'rbxassetid://' .. AnimationId

        local k = speaker.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)

        k.Play(k, 0)
        k.AdjustSpeed(k, 1)
    else
        notify('R6 Required', 'This command requires the r6 rig type')
    end
end)

local function anim2track(asset_id)
    local objs = game.GetObjects(game, asset_id)

    for i = 1, #objs do
        if objs[i]:IsA('Animation') then
            return objs[i].AnimationId
        end
    end

    return asset_id
end

addcmd('animation', {
    'anim',
}, function(args, speaker)
    local animid = tostring(args[1])

    if not animid.find(animid, 'rbxassetid://') then
        animid = 'rbxassetid://' .. animid
    end

    animid = anim2track(animid)

    local animation = Instance.new('Animation')

    animation.AnimationId = animid

    local anim = speaker.Character:FindFirstChildWhichIsA('Humanoid'):LoadAnimation(animation)

    anim.Priority = Enum.AnimationPriority.Movement

    anim.Play(anim)

    if args[2] then
        anim.AdjustSpeed(anim, tostring(args[2]))
    end
end)
addcmd('emote', {
    'em',
}, function(args, speaker)
    local animid = tostring(args[1])

    if not animid.find(animid, 'rbxassetid://') then
        animid = 'rbxassetid://' .. animid
    end

    local anim = humanoid.PlayEmoteAndGetAnimTrackById(humanoid, animid)

    if args[2] then
        anim.AdjustSpeed(anim, tostring(args[2]))
    end
end)
addcmd('noanim', {}, function(args, speaker)
    speaker.Character.Animate.Disabled = true
end)
addcmd('reanim', {}, function(args, speaker)
    speaker.Character.Animate.Disabled = false
end)
addcmd('animspeed', {}, function(args, speaker)
    local Char = speaker.Character
    local Hum = Char.FindFirstChildOfClass(Char, 'Humanoid') or Char.FindFirstChildOfClass(Char, 'AnimationController')

    for i, v in next, Hum.GetPlayingAnimationTracks(Hum)do
        v.AdjustSpeed(v, tonumber(args[1] or 1))
    end
end)
addcmd('copyanimation', {
    'copyanim',
    'copyemote',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for _, v in ipairs(players)do
        local char = Players[v].Character

        for _, v1 in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetPlayingAnimationTracks())do
            v1.Stop(v1)
        end
        for _, v1 in pairs(Players[v].Character:FindFirstChildOfClass('Humanoid'):GetPlayingAnimationTracks())do
            if not string.find(v1.Animation.AnimationId, '507768375') then
                local ANIM = speaker.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(v1.Animation)

                ANIM.Play(ANIM, 0.1, 1, v1.Speed)

                ANIM.TimePosition = v1.TimePosition

                task.spawn(function()
                    v1.Stopped:Wait()
                    ANIM.Stop(ANIM)
                    ANIM.Destroy(ANIM)
                end)
            end
        end
    end
end)
addcmd('copyanimationid', {
    'copyanimid',
    'copyemoteid',
}, function(args, speaker)
    local copyAnimId = function(player)
        local found = 'Animations Copied'

        for _, v in pairs(player.Character:FindFirstChildWhichIsA('Humanoid'):GetPlayingAnimationTracks())do
            local animationId = v.Animation.AnimationId
            local assetId = animationId.find(animationId, 'rbxassetid://') and animationId.match(animationId, '%d+')

            if not string.find(animationId, '507768375') and not string.find(animationId, '180435571') then
                if assetId then
                    local success, result = pcall(function()
                        return MarketplaceService.GetProductInfo(MarketplaceService, tonumber(assetId)).Name
                    end)
                    local name = success and result or 'Failed to get name'

                    found = found .. '\n\nName: ' .. name .. '\nAnimation Id: ' .. animationId
                else
                    found = found .. '\n\nAnimation Id: ' .. animationId
                end
            end
        end

        if found ~= 'Animations Copied' then
            toClipboard(found)
        else
            notify('Animations', 'No animations to copy')
        end
    end

    if args[1] then
        copyAnimId(Players[getPlayer(args[1], speaker)[1] ])
    else
        copyAnimId(speaker)
    end
end)
addcmd('stopanimations', {
    'stopanims',
    'stopanim',
}, function(args, speaker)
    local Char = speaker.Character
    local Hum = Char.FindFirstChildOfClass(Char, 'Humanoid') or Char.FindFirstChildOfClass(Char, 'AnimationController')

    for i, v in next, Hum.GetPlayingAnimationTracks(Hum)do
        v.Stop(v)
    end
end)
addcmd('refreshanimations', {
    'refreshanimation',
    'refreshanims',
    'refreshanim',
}, function(args, speaker)
    local Char = speaker.Character or speaker.CharacterAdded:Wait()
    local Human = Char and Char.WaitForChild(Char, 'Humanoid', 15)
    local Animate = Char and Char.WaitForChild(Char, 'Animate', 15)

    if not Human or not Animate then
        return notify('Refresh Animations', 'Failed to get Animate/Humanoid')
    end

    Animate.Disabled = true

    for _, v in ipairs(Human.GetPlayingAnimationTracks(Human))do
        v.Stop(v)
    end

    Animate.Disabled = false
end)
addcmd('allowcustomanim', {
    'allowcustomanimations',
}, function(args, speaker)
    StarterPlayer.AllowCustomAnimations = true

    execCmd('refreshanimations')
end)
addcmd('unallowcustomanim', {
    'unallowcustomanimations',
}, function(args, speaker)
    StarterPlayer.AllowCustomAnimations = false

    execCmd('refreshanimations')
end)
addcmd('loopanimation', {
    'loopanim',
}, function(args, speaker)
    local Char = speaker.Character
    local Human = Char and Char.FindFirstChildWhichIsA(Char, 'Humanoid')

    for _, v in ipairs(Human.GetPlayingAnimationTracks(Human))do
        v.Looped = true
    end
end)
addcmd('tpposition', {
    'tppos',
}, function(args, speaker)
    if #args < 3 then
        return
    end

    local tpX, tpY, tpZ = tonumber((args[1]:gsub(',', ''))), tonumber((args[2]:gsub(',', ''))), tonumber((args[3]:gsub(',', '')))
    local char = speaker.Character

    if char and getRoot(char) then
        getRoot(char).CFrame = CFrame.new(tpX, tpY, tpZ)
    end
end)
addcmd('tweentpposition', {
    'ttppos',
}, function(args, speaker)
    if #args < 3 then
        return
    end

    local tpX, tpY, tpZ = tonumber((args[1]:gsub(',', ''))), tonumber((args[2]:gsub(',', ''))), tonumber((args[3]:gsub(',', '')))
    local char = speaker.Character

    if char and getRoot(char) then
        TweenService.Create(TweenService, getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {
            CFrame = CFrame.new(tpX, tpY, tpZ),
        }):Play()
    end
end)
addcmd('offset', {}, function(args, speaker)
    if #args < 3 then
        return
    end
    if speaker.Character then
        speaker.Character:TranslateBy(Vector3.new(tonumber(args[1]) or 0, tonumber(args[2]) or 0, tonumber(args[3]) or 0))
    end
end)
addcmd('tweenoffset', {
    'toffset',
}, function(args, speaker)
    if #args < 3 then
        return
    end

    local tpX, tpY, tpZ = tonumber(args[1]), tonumber(args[2]), tonumber(args[3])
    local char = speaker.Character

    if char and getRoot(char) then
        TweenService.Create(TweenService, getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {
            CFrame = CFrame.new(tpX, tpY, tpZ),
        }):Play()
    end
end)
addcmd('clickteleport', {}, function(args, speaker)
    if speaker == Players.LocalPlayer then
        notify('Click TP', 'Go to Settings > Keybinds > Add to set up click teleport')
    end
end)
addcmd('mouseteleport', {
    'mousetp',
}, function(args, speaker)
    local root = getRoot(speaker.Character)
    local pos = IYMouse.Hit

    if root and pos then
        root.CFrame = CFrame.new(pos.X, pos.Y + 3, pos.Z, select(4, root.CFrame:components()))
    end
end)
addcmd('tptool', {
    'teleporttool',
}, function(args, speaker)
    local TpTool = Instance.new('Tool')

    TpTool.Name = 'Teleport Tool'
    TpTool.RequiresHandle = false
    TpTool.Parent = speaker.Backpack

    TpTool.Activated:Connect(function()
        local Char = speaker.Character or workspace.FindFirstChild(workspace, speaker.Name)
        local HRP = Char and Char.FindFirstChild(Char, 'HumanoidRootPart')

        if not Char or not HRP then
            return warn('Failed to find HumanoidRootPart')
        end

        HRP.CFrame = CFrame.new(IYMouse.Hit.X, IYMouse.Hit.Y + 3, IYMouse.Hit.Z, select(4, HRP.CFrame:components()))
    end)
end)
addcmd('clickdelete', {}, function(args, speaker)
    if speaker == Players.LocalPlayer then
        notify('Click Delete', 'Go to Settings > Keybinds > Add to set up click delete')
    end
end)
addcmd('getposition', {
    'getpos',
    'notifypos',
    'notifyposition',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        local char = Players[v].Character
        local pos = char and (getRoot(char) or char.FindFirstChildWhichIsA(char, 'BasePart'))

        pos = pos and pos.Position

        if not pos then
            return notify('Getposition Error', 'Missing character')
        end

        local roundedPos = math.round(pos.X) .. ', ' .. math.round(pos.Y) .. ', ' .. math.round(pos.Z)

        notify('Current Position', roundedPos)
    end
end)
addcmd('copyposition', {
    'copypos',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        local char = Players[v].Character
        local pos = char and (getRoot(char) or char.FindFirstChildWhichIsA(char, 'BasePart'))

        pos = pos and pos.Position

        if not pos then
            return notify('Getposition Error', 'Missing character')
        end

        local roundedPos = math.round(pos.X) .. ', ' .. math.round(pos.Y) .. ', ' .. math.round(pos.Z)

        toClipboard(roundedPos)
    end
end)
addcmd('walktopos', {
    'walktoposition',
}, function(args, speaker)
    if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
        speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

        task.wait(0.1)
    end

    speaker.Character:FindFirstChildOfClass('Humanoid').WalkToPoint = Vector3.new(args[1], args[2], args[3])
end)
addcmd('speed', {
    'ws',
    'walkspeed',
}, function(args, speaker)
    if args[2] then
        local speed = args[2] or 16

        if isNumber(speed) then
            speaker.Character:FindFirstChildOfClass('Humanoid').WalkSpeed = speed
        end
    else
        local speed = args[1] or 16

        if isNumber(speed) then
            speaker.Character:FindFirstChildOfClass('Humanoid').WalkSpeed = speed
        end
    end
end)
addcmd('spoofspeed', {
    'spoofws',
    'spoofwalkspeed',
}, function(args, speaker)
    if args[1] and isNumber(args[1]) then
        if hookmetamethod then
            local char = speaker.Character
            local setspeed
            local index

            index = hookmetamethod(game, '__index', function(self, key)
                if not checkcaller() and typeof(self) == 'Instance' and self.IsA(self, 'Humanoid') and (key == 'WalkSpeed' or key == 'walkSpeed') and self.IsDescendantOf(self, char) then
                    return setspeed or args[1]
                end

                return index(self, key)
            end)

            local newindex

            newindex = hookmetamethod(game, '__newindex', function(
                self,
                key,
                value
            )
                if not checkcaller() and typeof(self) == 'Instance' and self.IsA(self, 'Humanoid') and (key == 'WalkSpeed' or key == 'walkSpeed') and self.IsDescendantOf(self, char) then
                    setspeed = tonumber(value)
                end

                return newindex(self, key, value)
            end)
        else
            notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing hookmetamethod)]])
        end
    end
end)
addcmd('loopspeed', {
    'loopws',
}, function(args, speaker)
    local speed = args[1] or 16

    if args[2] then
        speed = args[2] or 16
    end
    if isNumber(speed) then
        local Char = speaker.Character or workspace.FindFirstChild(workspace, speaker.Name)
        local Human = Char and Char.FindFirstChildWhichIsA(Char, 'Humanoid')

        local function WalkSpeedChange()
            if Char and Human then
                Human.WalkSpeed = speed
            end
        end

        WalkSpeedChange()

        HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or Human.GetPropertyChangedSignal(Human, 'WalkSpeed'):Connect(WalkSpeedChange)
        HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(
            nChar
        )
            Char, Human = nChar, nChar.WaitForChild(nChar, 'Humanoid')

            WalkSpeedChange()

            HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or Human.GetPropertyChangedSignal(Human, 'WalkSpeed'):Connect(WalkSpeedChange)
        end)
    end
end)
addcmd('unloopspeed', {
    'unloopws',
}, function(args, speaker)
    HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or nil
    HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or nil
end)
addcmd('spoofjumppower', {
    'spoofjp',
}, function(args, speaker)
    if args[1] and isNumber(args[1]) then
        if hookmetamethod then
            local char = speaker.Character
            local setpower
            local index

            index = hookmetamethod(game, '__index', function(self, key)
                if not checkcaller() and typeof(self) == 'Instance' and self.IsA(self, 'Humanoid') and (key == 'JumpPower' or key == 'jumpPower') and self.IsDescendantOf(self, char) then
                    return setpower or args[1]
                end

                return index(self, key)
            end)

            local newindex

            newindex = hookmetamethod(game, '__newindex', function(
                self,
                key,
                value
            )
                if not checkcaller() and typeof(self) == 'Instance' and self.IsA(self, 'Humanoid') and (key == 'JumpPower' or key == 'jumpPower') and self.IsDescendantOf(self, char) then
                    setpower = tonumber(value)
                end

                return newindex(self, key, value)
            end)
        else
            notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing hookmetamethod)]])
        end
    end
end)
addcmd('loopjumppower', {
    'loopjp',
    'loopjpower',
}, function(args, speaker)
    local jpower = args[1] or 50

    if isNumber(jpower) then
        local Char = speaker.Character or workspace.FindFirstChild(workspace, speaker.Name)
        local Human = Char and Char.FindFirstChildWhichIsA(Char, 'Humanoid')

        local function JumpPowerChange()
            if Char and Human then
                if speaker.Character:FindFirstChildOfClass('Humanoid').UseJumpPower then
                    speaker.Character:FindFirstChildOfClass('Humanoid').JumpPower = jpower
                else
                    speaker.Character:FindFirstChildOfClass('Humanoid').JumpHeight = jpower
                end
            end
        end

        JumpPowerChange()

        HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or Human.GetPropertyChangedSignal(Human, 'JumpPower'):Connect(JumpPowerChange)
        HumanModCons.jpCA = (HumanModCons.jpCA and HumanModCons.jpCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(
            nChar
        )
            Char, Human = nChar, nChar.WaitForChild(nChar, 'Humanoid')

            JumpPowerChange()

            HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or Human.GetPropertyChangedSignal(Human, 'JumpPower'):Connect(JumpPowerChange)
        end)
    end
end)
addcmd('unloopjumppower', {
    'unloopjp',
    'unloopjpower',
}, function(args, speaker)
    local Char = speaker.Character or workspace.FindFirstChild(workspace, speaker.Name)
    local Human = Char and Char.FindFirstChildWhichIsA(Char, 'Humanoid')

    HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or nil
    HumanModCons.jpCA = (HumanModCons.jpCA and HumanModCons.jpCA:Disconnect() and false) or nil

    if Char and Human then
        if speaker.Character:FindFirstChildOfClass('Humanoid').UseJumpPower then
            speaker.Character:FindFirstChildOfClass('Humanoid').JumpPower = 50
        else
            speaker.Character:FindFirstChildOfClass('Humanoid').JumpHeight = 50
        end
    end
end)
addcmd('tools', {
    'gears',
}, function(args, speaker)
    local function copy(instance)
        for i, c in pairs(instance.GetChildren(instance))do
            if c.IsA(c, 'Tool') or c.IsA(c, 'HopperBin') then
                c.Clone(c).Parent = speaker.FindFirstChildOfClass(speaker, 'Backpack')
            end

            copy(c)
        end
    end

    copy(Lighting)

    local function copy(instance)
        for i, c in pairs(instance.GetChildren(instance))do
            if c.IsA(c, 'Tool') or c.IsA(c, 'HopperBin') then
                c.Clone(c).Parent = speaker.FindFirstChildOfClass(speaker, 'Backpack')
            end

            copy(c)
        end
    end

    copy(ReplicatedStorage)
    notify('Tools', 'Copied tools from ReplicatedStorage and Lighting')
end)
addcmd('notools', {
    'rtools',
    'clrtools',
    'removetools',
    'deletetools',
    'dtools',
}, function(args, speaker)
    for i, v in pairs(speaker.FindFirstChildOfClass(speaker, 'Backpack'):GetDescendants())do
        if v.IsA(v, 'Tool') or v.IsA(v, 'HopperBin') then
            v.Destroy(v)
        end
    end
    for i, v in pairs(speaker.Character:GetDescendants())do
        if v.IsA(v, 'Tool') or v.IsA(v, 'HopperBin') then
            v.Destroy(v)
        end
    end
end)
addcmd('deleteselectedtool', {
    'dst',
}, function(args, speaker)
    for i, v in pairs(speaker.Character:GetDescendants())do
        if v.IsA(v, 'Tool') or v.IsA(v, 'HopperBin') then
            v.Destroy(v)
        end
    end
end)
addcmd('console', {}, function(args, speaker)
    StarterGui.SetCore(StarterGui, 'DevConsoleVisible', true)
end)
addcmd('oldconsole', {}, function(args, speaker)
    notify('Loading', 'Hold on a sec')

    local _, str = pcall(function()
        return game.HttpGet(game, 
[[https://raw.githubusercontent.com/infyiff/backup/main/console.lua]], true)
    end)
    local s, e = loadstring(str)

    if typeof(s) ~= 'function' then
        return
    end

    local success, message = pcall(s)

    if (not success) then
        if printconsole then
            printconsole(message)
        elseif printoutput then
            printoutput(message)
        end
    end

    task.wait(1)
    notify('Console', 'Press F9 to open the console')
end)
addcmd('explorer', {
    'dex',
}, function(args, speaker)
    notify('Loading', 'Hold on a sec')
    __DARKLUA_BUNDLE_MODULES.c()
end)
addcmd('olddex', {
    'odex',
}, function(args, speaker)
    notify('Loading old explorer', 'Hold on a sec')

    local getobjects = function(a)
        local Objects = {}

        if a then
            local b = InsertService.LoadLocalAsset(InsertService, a)

            if b then
                table.insert(Objects, b)
            end
        end

        return Objects
    end
    local Dex = getobjects('rbxassetid://10055842438')[1]

    Dex.Parent = PARENT

    local function Load(Obj, Url)
        local function GiveOwnGlobals(Func, Script)
            local Fenv, RealFenv, FenvMt = {}, {
                script = Script,
                getupvalue = function(a, b)
                    return nil
                end,
                getreg = function()
                    return {}
                end,
                getprops = getprops or function(inst)
                    if getproperties then
                        local props = getproperties(inst)

                        if props[1] and gethiddenproperty then
                            local results = {}

                            for _, name in pairs(props)do
                                local success, res = pcall(gethiddenproperty, inst, name)

                                if success then
                                    results[name] = res
                                end
                            end

                            return results
                        end

                        return props
                    end

                    return {}
                end,
            }, {}

            FenvMt.__index = function(a, b)
                return RealFenv[b] == nil and getgenv()[b] or RealFenv[b]
            end
            FenvMt.__newindex = function(a, b, c)
                if RealFenv[b] == nil then
                    getgenv()[b] = c
                else
                    RealFenv[b] = c
                end
            end

            setmetatable(Fenv, FenvMt)
            pcall(setfenv, Func, Fenv)

            return Func
        end
        local function LoadScripts(_, Script)
            if Script.IsA(Script, 'LocalScript') then
                task.spawn(function()
                    GiveOwnGlobals(loadstring(Script.Source, '=' .. Script.GetFullName(Script)), Script)()
                end)
            end

            table.foreach(Script.GetChildren(Script), LoadScripts)
        end

        LoadScripts(nil, Obj)
    end

    Load(Dex)
end)
addcmd('remotespy', {
    'rspy',
    'simplespy',
}, function(args, speaker)
    notify('Loading', 'Hold on a sec')
    __DARKLUA_BUNDLE_MODULES.d()
end)
addcmd('audiologger', {
    'alogger',
}, function(args, speaker)
    notify('Loading', 'Hold on a sec')
    __DARKLUA_BUNDLE_MODULES.e()
end)

local loopgoto

addcmd('loopgoto', {}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        loopgoto = nil

        if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
            speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

            task.wait(0.1)
        end

        loopgoto = Players[v]

        local distance = 3

        if args[2] and isNumber(args[2]) then
            distance = args[2]
        end

        local lDelay = 0

        if args[3] and isNumber(args[3]) then
            lDelay = args[3]
        end

        repeat
            if Players.FindFirstChild(Players, v) then
                if Players[v].Character ~= nil then
                    getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(distance, 1, 0)
                end

                task.wait(lDelay)
            else
                loopgoto = nil
            end
        until loopgoto ~= Players[v]
    end
end)
addcmd('unloopgoto', {
    'noloopgoto',
}, function(args, speaker)
    loopgoto = nil
end)
addcmd('headsit', {}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    if headSit then
        headSit.Disconnect(headSit)
    end

    for i, v in pairs(players)do
        speaker.Character:FindFirstChildOfClass('Humanoid').Sit = true
        headSit = RunService.Heartbeat:Connect(function()
            if Players.FindFirstChild(Players, Players[v].Name) and Players[v].Character ~= nil and getRoot(Players[v].Character) and getRoot(speaker.Character) and speaker.Character:FindFirstChildOfClass('Humanoid').Sit == true then
                getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame * CFrame.Angles(0, math.rad(0), 0) * CFrame.new(0, 1.6, 0.4)
            else
                headSit.Disconnect(headSit)
            end
        end)
    end
end)
addcmd('chat', {
    'say',
}, function(args, speaker)
    local cString = getstring(1)

    chatMessage(cString)
end)

spamming = false
spamspeed = 1

addcmd('spam', {}, function(args, speaker)
    spamming = true

    local spamstring = getstring(1)

    repeat
        task.wait(spamspeed)
        chatMessage(spamstring)
    until spamming == false
end)
addcmd('nospam', {
    'unspam',
}, function(args, speaker)
    spamming = false
end)
addcmd('whisper', {
    'pm',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        task.spawn(function()
            local plrName = Players[v].Name
            local pmstring = getstring(2)

            chatMessage('/w ' .. plrName .. ' ' .. pmstring)
        end)
    end
end)

pmspamming = {}

addcmd('pmspam', {}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        task.spawn(function()
            local plrName = Players[v].Name

            if FindInTable(pmspamming, plrName) then
                return
            end

            table.insert(pmspamming, plrName)

            local pmspamstring = getstring(2)

            repeat
                if Players.FindFirstChild(Players, v) then
                    task.wait(spamspeed)
                    chatMessage('/w ' .. plrName .. ' ' .. pmspamstring)
                else
                    for a, b in pairs(pmspamming)do
                        if b == plrName then
                            table.remove(pmspamming, a)
                        end
                    end
                end
            until not FindInTable(pmspamming, plrName)
        end)
    end
end)
addcmd('nopmspam', {
    'unpmspam',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        task.spawn(function()
            for a, b in pairs(pmspamming)do
                if b == Players[v].Name then
                    table.remove(pmspamming, a)
                end
            end
        end)
    end
end)
addcmd('spamspeed', {}, function(args, speaker)
    local speed = args[1] or 1

    if isNumber(speed) then
        spamspeed = speed
    end
end)
addcmd('bubblechat', {}, function(args, speaker)
    if isLegacyChat then
        ChatService.BubbleChatEnabled = true
    else
        TextChatService.BubbleChatConfiguration.Enabled = true
    end
end)
addcmd('unbubblechat', {
    'nobubblechat',
}, function(args, speaker)
    if isLegacyChat then
        ChatService.BubbleChatEnabled = false
    else
        TextChatService.BubbleChatConfiguration.Enabled = false
    end
end)
addcmd('chatwindow', {}, function(args, speaker)
    TextChatService.ChatWindowConfiguration.Enabled = true
end)
addcmd('unchatwindow', {
    'nochatwindow',
}, function(args, speaker)
    TextChatService.ChatWindowConfiguration.Enabled = false
end)
addcmd('blockhead', {}, function(args, speaker)
    speaker.Character.Head:FindFirstChildOfClass('SpecialMesh'):Destroy()
end)
addcmd('blockhats', {}, function(args, speaker)
    for _, v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories())do
        for i, c in pairs(v.GetDescendants(v))do
            if c.IsA(c, 'SpecialMesh') then
                c.Destroy(c)
            end
        end
    end
end)
addcmd('blocktool', {}, function(args, speaker)
    for _, v in pairs(speaker.Character:GetChildren())do
        if v.IsA(v, 'Tool') or v.IsA(v, 'HopperBin') then
            for i, c in pairs(v.GetDescendants(v))do
                if c.IsA(c, 'SpecialMesh') then
                    c.Destroy(c)
                end
            end
        end
    end
end)
addcmd('creeper', {}, function(args, speaker)
    if r15(speaker) then
        speaker.Character.Head:FindFirstChildOfClass('SpecialMesh'):Destroy()
        speaker.Character.LeftUpperArm:Destroy()
        speaker.Character.RightUpperArm:Destroy()
        speaker.Character:FindFirstChildOfClass('Humanoid'):RemoveAccessories()
    else
        speaker.Character.Head:FindFirstChildOfClass('SpecialMesh'):Destroy()
        speaker.Character['Left Arm']:Destroy()
        speaker.Character['Right Arm']:Destroy()
        speaker.Character:FindFirstChildOfClass('Humanoid'):RemoveAccessories()
    end
end)

getTorso = function(x)
    x = x or Players.LocalPlayer.Character

    return x.FindFirstChild(x, 'Torso') or x.FindFirstChild(x, 'UpperTorso') or x.FindFirstChild(x, 'LowerTorso') or x.FindFirstChild(x, 'HumanoidRootPart')
end

addcmd('bang', {
    'rape',
}, function(args, speaker)
    execCmd('unbang')
    task.wait()

    local humanoid = speaker.Character:FindFirstChildWhichIsA('Humanoid')

    bangAnim = Instance.new('Animation')
    bangAnim.AnimationId = not r15(speaker) and 'rbxassetid://148840371' or 'rbxassetid://5918726674'
    bang = humanoid.LoadAnimation(humanoid, bangAnim)

    bang.Play(bang, 0.1, 1, 1)
    bang.AdjustSpeed(bang, args[2] or 3)

    bangDied = humanoid.Died:Connect(function()
        bang.Stop(bang)
        bangAnim.Destroy(bangAnim)
        bangDied.Disconnect(bangDied)
        bangLoop.Disconnect(bangLoop)
    end)

    if args[1] then
        local players = getPlayer(args[1], speaker)

        for _, v in pairs(players)do
            local bangplr = Players[v].Name
            local bangOffet = CFrame.new(0, 0, 1.1)

            bangLoop = RunService.Stepped:Connect(function()
                pcall(function()
                    local otherRoot = getTorso(Players[bangplr].Character)

                    getRoot(speaker.Character).CFrame = otherRoot.CFrame * bangOffet
                end)
            end)
        end
    end
end)
addcmd('unbang', {
    'unrape',
}, function(args, speaker)
    if bangDied then
        bangDied.Disconnect(bangDied)
        bang.Stop(bang)
        bangAnim.Destroy(bangAnim)
        bangLoop.Disconnect(bangLoop)
    end
end)
addcmd('carpet', {}, function(args, speaker)
    if not r15(speaker) then
        execCmd('uncarpet')
        task.wait()

        local players = getPlayer(args[1], speaker)

        for i, v in pairs(players)do
            carpetAnim = Instance.new('Animation')
            carpetAnim.AnimationId = 'rbxassetid://282574440'
            carpet = speaker.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(carpetAnim)

            carpet.Play(carpet, 0.1, 1, 1)

            local carpetplr = Players[v].Name

            carpetDied = speaker.Character:FindFirstChildOfClass'Humanoid'.Died:Connect(function(
            )
                carpetLoop.Disconnect(carpetLoop)
                carpet.Stop(carpet)
                carpetAnim.Destroy(carpetAnim)
                carpetDied.Disconnect(carpetDied)
            end)
            carpetLoop = RunService.Heartbeat:Connect(function()
                pcall(function()
                    getRoot(Players.LocalPlayer.Character).CFrame = getRoot(Players[carpetplr].Character).CFrame
                end)
            end)
        end
    else
        notify('R6 Required', 'This command requires the r6 rig type')
    end
end)
addcmd('uncarpet', {
    'nocarpet',
}, function(args, speaker)
    if carpetLoop then
        carpetLoop.Disconnect(carpetLoop)
        carpetDied.Disconnect(carpetDied)
        carpet.Stop(carpet)
        carpetAnim.Destroy(carpetAnim)
    end
end)
addcmd('friend', {}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        speaker.RequestFriendship(speaker, Players[v])
    end
end)
addcmd('unfriend', {}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        speaker.RevokeFriendship(speaker, Players[v])
    end
end)
addcmd('bringpart', {}, function(args, speaker)
    for i, v in pairs(workspace.GetDescendants(workspace))do
        if v.Name:lower() == getstring(1):lower() and v.IsA(v, 'BasePart') then
            v.CFrame = getRoot(speaker.Character).CFrame
        end
    end
end)
addcmd('bringpartclass', {
    'bpc',
}, function(args, speaker)
    for i, v in pairs(workspace.GetDescendants(workspace))do
        if v.ClassName:lower() == getstring(1):lower() and v.IsA(v, 'BasePart') then
            v.CFrame = getRoot(speaker.Character).CFrame
        end
    end
end)

gotopartDelay = 0.1

addcmd('gotopart', {
    'topart',
}, function(args, speaker)
    for i, v in pairs(workspace.GetDescendants(workspace))do
        if v.Name:lower() == getstring(1):lower() and v.IsA(v, 'BasePart') then
            if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
                speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

                task.wait(0.1)
            end

            task.wait(gotopartDelay)

            getRoot(speaker.Character).CFrame = v.CFrame
        end
    end
end)
addcmd('tweengotopart', {
    'tgotopart',
    'ttopart',
}, function(args, speaker)
    for i, v in pairs(workspace.GetDescendants(workspace))do
        if v.Name:lower() == getstring(1):lower() and v.IsA(v, 'BasePart') then
            if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
                speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

                task.wait(0.1)
            end

            task.wait(gotopartDelay)
            TweenService.Create(TweenService, getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {
                CFrame = v.CFrame,
            }):Play()
        end
    end
end)
addcmd('gotopartclass', {
    'gpc',
}, function(args, speaker)
    for i, v in pairs(workspace.GetDescendants(workspace))do
        if v.ClassName:lower() == getstring(1):lower() and v.IsA(v, 'BasePart') then
            if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
                speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

                task.wait(0.1)
            end

            task.wait(gotopartDelay)

            getRoot(speaker.Character).CFrame = v.CFrame
        end
    end
end)
addcmd('tweengotopartclass', {
    'tgpc',
}, function(args, speaker)
    for i, v in pairs(workspace.GetDescendants(workspace))do
        if v.ClassName:lower() == getstring(1):lower() and v.IsA(v, 'BasePart') then
            if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
                speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

                task.wait(0.1)
            end

            task.wait(gotopartDelay)
            TweenService.Create(TweenService, getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {
                CFrame = v.CFrame,
            }):Play()
        end
    end
end)
addcmd('gotomodel', {
    'tomodel',
}, function(args, speaker)
    for i, v in pairs(workspace.GetDescendants(workspace))do
        if v.Name:lower() == getstring(1):lower() and v.IsA(v, 'Model') then
            if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
                speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

                task.wait(0.1)
            end

            task.wait(gotopartDelay)

            getRoot(speaker.Character).CFrame = v.GetModelCFrame(v)
        end
    end
end)
addcmd('tweengotomodel', {
    'tgotomodel',
    'ttomodel',
}, function(args, speaker)
    for i, v in pairs(workspace.GetDescendants(workspace))do
        if v.Name:lower() == getstring(1):lower() and v.IsA(v, 'Model') then
            if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
                speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

                task.wait(0.1)
            end

            task.wait(gotopartDelay)
            TweenService.Create(TweenService, getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {
                CFrame = v.GetModelCFrame(v),
            }):Play()
        end
    end
end)
addcmd('gotopartdelay', {}, function(args, speaker)
    local gtpDelay = args[1] or 0.1

    if isNumber(gtpDelay) then
        gotopartDelay = gtpDelay
    end
end)
addcmd('noclickdetectorlimits', {
    'nocdlimits',
    'removecdlimits',
}, function(args, speaker)
    for i, v in ipairs(workspace.GetDescendants(workspace))do
        if v.IsA(v, 'ClickDetector') then
            v.MaxActivationDistance = math.huge
        end
    end
end)
addcmd('fireclickdetectors', {
    'firecd',
    'firecds',
}, function(args, speaker)
    if fireclickdetector then
        if args[1] then
            local name = getstring(1)

            for _, descendant in ipairs(workspace.GetDescendants(workspace))do
                if descendant.IsA(descendant, 'ClickDetector') and descendant.Name == name or descendant.Parent.Name == name then
                    fireclickdetector(descendant)
                end
            end
        else
            for _, descendant in ipairs(workspace.GetDescendants(workspace))do
                if descendant.IsA(descendant, 'ClickDetector') then
                    fireclickdetector(descendant)
                end
            end
        end
    else
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing fireclickdetector)]])
    end
end)
addcmd('noproximitypromptlimits', {
    'nopplimits',
    'removepplimits',
}, function(args, speaker)
    for i, v in pairs(workspace.GetDescendants(workspace))do
        if v.IsA(v, 'ProximityPrompt') then
            v.MaxActivationDistance = math.huge
        end
    end
end)
addcmd('fireproximityprompts', {
    'firepp',
}, function(args, speaker)
    if fireproximityprompt then
        if args[1] then
            local name = getstring(1)

            for _, descendant in ipairs(workspace.GetDescendants(workspace))do
                if descendant.IsA(descendant, 'ProximityPrompt') and descendant.Name == name or descendant.Parent.Name == name then
                    fireproximityprompt(descendant)
                end
            end
        else
            for _, descendant in ipairs(workspace.GetDescendants(workspace))do
                if descendant.IsA(descendant, 'ProximityPrompt') then
                    fireproximityprompt(descendant)
                end
            end
        end
    else
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing fireproximityprompt)]])
    end
end)

local PromptButtonHoldBegan

addcmd('instantproximityprompts', {
    'instantpp',
}, function(args, speaker)
    if fireproximityprompt then
        execCmd('uninstantproximityprompts')
        task.wait(0.1)

        PromptButtonHoldBegan = ProximityPromptService.PromptButtonHoldBegan:Connect(function(
            prompt
        )
            fireproximityprompt(prompt)
        end)
    else
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing fireproximityprompt)]])
    end
end)
addcmd('uninstantproximityprompts', {
    'uninstantpp',
}, function(args, speaker)
    if PromptButtonHoldBegan ~= nil then
        PromptButtonHoldBegan.Disconnect(PromptButtonHoldBegan)

        PromptButtonHoldBegan = nil
    end
end)
addcmd('notifyping', {
    'ping',
}, function(args, speaker)
    notify('Ping', math.round(speaker.GetNetworkPing(speaker) * 1000) .. 'ms')
end)
addcmd('grabtools', {}, function(args, speaker)
    local humanoid = speaker.Character:FindFirstChildWhichIsA('Humanoid')

    for _, child in ipairs(workspace.GetChildren(workspace))do
        if speaker.Character and child.IsA(child, 'BackpackItem') and child.FindFirstChild(child, 'Handle') then
            humanoid.EquipTool(humanoid, child)
        end
    end

    if grabtoolsFunc then
        grabtoolsFunc.Disconnect(grabtoolsFunc)
    end

    grabtoolsFunc = workspace.ChildAdded:Connect(function(child)
        if speaker.Character and child.IsA(child, 'BackpackItem') and child.FindFirstChild(child, 'Handle') then
            humanoid.EquipTool(humanoid, child)
        end
    end)

    notify('Grabtools', 'Picking up any dropped tools')
end)
addcmd('nograbtools', {
    'ungrabtools',
}, function(args, speaker)
    if grabtoolsFunc then
        grabtoolsFunc.Disconnect(grabtoolsFunc)
    end

    notify('Grabtools', 'Grabtools has been disabled')
end)

local specifictoolremoval = {}

addcmd('removespecifictool', {}, function(args, speaker)
    if args[1] and speaker.FindFirstChildOfClass(speaker, 'Backpack') then
        local tool = string.lower(getstring(1))
        local RST = RunService.RenderStepped:Connect(function()
            if speaker.FindFirstChildOfClass(speaker, 'Backpack') then
                for i, v in pairs(speaker.FindFirstChildOfClass(speaker, 'Backpack'):GetChildren())do
                    if v.Name:lower() == tool then
                        v.Remove(v)
                    end
                end
            end
        end)

        specifictoolremoval[tool] = RST
    end
end)
addcmd('unremovespecifictool', {}, function(args, speaker)
    if args[1] then
        local tool = string.lower(getstring(1))

        if specifictoolremoval[tool] ~= nil then
            specifictoolremoval[tool]:Disconnect()

            specifictoolremoval[tool] = nil
        end
    end
end)
addcmd('clearremovespecifictool', {}, function(args, speaker)
    for obj in pairs(specifictoolremoval)do
        specifictoolremoval[obj]:Disconnect()

        specifictoolremoval[obj] = nil
    end
end)
addcmd('light', {}, function(args, speaker)
    local light = Instance.new('PointLight')

    light.Parent = getRoot(speaker.Character)
    light.Range = 30

    if args[1] then
        light.Brightness = args[2]
        light.Range = args[1]
    else
        light.Brightness = 5
    end
end)
addcmd('unlight', {
    'nolight',
}, function(args, speaker)
    for i, v in pairs(speaker.Character:GetDescendants())do
        if v.ClassName == 'PointLight' then
            v.Destroy(v)
        end
    end
end)
addcmd('copytools', {}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        task.spawn(function()
            for i, v in pairs(Players[v]:FindFirstChildOfClass('Backpack'):GetChildren())do
                if v.IsA(v, 'Tool') or v.IsA(v, 'HopperBin') then
                    v.Clone(v).Parent = speaker.FindFirstChildOfClass(speaker, 'Backpack')
                end
            end
        end)
    end
end)
addcmd('naked', {}, function(args, speaker)
    for i, v in pairs(speaker.Character:GetDescendants())do
        if v.IsA(v, 'Clothing') or v.IsA(v, 'ShirtGraphic') then
            v.Destroy(v)
        end
    end
end)
addcmd('noface', {
    'removeface',
}, function(args, speaker)
    for i, v in pairs(speaker.Character:GetDescendants())do
        if v.IsA(v, 'Decal') and v.Name == 'face' then
            v.Destroy(v)
        end
    end
end)
addcmd('spawnpoint', {
    'spawn',
}, function(args, speaker)
    spawnpos = getRoot(speaker.Character).CFrame
    spawnpoint = true
    spDelay = tonumber(args[1]) or 0.1

    notify('Spawn Point', 'Spawn point created at ' .. tostring(spawnpos))
end)
addcmd('nospawnpoint', {
    'nospawn',
    'removespawnpoint',
}, function(args, speaker)
    spawnpoint = false

    notify('Spawn Point', 'Removed spawn point')
end)
addcmd('flashback', {
    'diedtp',
}, function(args, speaker)
    if lastDeath ~= nil then
        if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
            speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false

            task.wait(0.1)
        end

        getRoot(speaker.Character).CFrame = lastDeath
    end
end)
addcmd('hatspin', {
    'spinhats',
}, function(args, speaker)
    execCmd('unhatspin')
    task.wait(0.5)

    for _, v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories())do
        local keep = Instance.new('BodyPosition')

        keep.Name = randomString()
        keep.Parent = v.Handle

        local spin = Instance.new('BodyAngularVelocity')

        spin.Name = randomString()
        spin.Parent = v.Handle

        v.Handle:FindFirstChildOfClass('Weld'):Destroy()

        if args[1] then
            spin.AngularVelocity = Vector3.new(0, args[1], 0)
            spin.MaxTorque = Vector3.new(0, args[1] * 2, 0)
        else
            spin.AngularVelocity = Vector3.new(0, 100, 0)
            spin.MaxTorque = Vector3.new(0, 200, 0)
        end

        keep.P = 30000
        keep.D = 50
        spinhats = RunService.Stepped:Connect(function()
            pcall(function()
                keep.Position = Players.LocalPlayer.Character.Head.Position
            end)
        end)
    end
end)
addcmd('unhatspin', {
    'unspinhats',
}, function(args, speaker)
    if spinhats then
        spinhats.Disconnect(spinhats)
    end

    for _, v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories())do
        v.Parent = workspace

        for i, c in pairs(v.Handle)do
            if c.IsA(c, 'BodyPosition') or c.IsA(c, 'BodyAngularVelocity') then
                c.Destroy(c)
            end
        end

        task.wait()

        v.Parent = speaker.Character
    end
end)
addcmd('clearhats', {
    'cleanhats',
}, function(args, speaker)
    if firetouchinterest then
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local Old = Character.FindFirstChild(Character, 'HumanoidRootPart').CFrame
        local Hats = {}

        for _, child in ipairs(workspace.GetChildren(workspace))do
            if child.IsA(child, 'Accessory') then
                table.insert(Hats, child)
            end
        end
        for _, accessory in ipairs(Character.FindFirstChildOfClass(Character, 'Humanoid'):GetAccessories())do
            accessory.Destroy(accessory)
        end

        for i = 1, #Hats do
            repeat
                RunService.Heartbeat:Wait()
            until Hats[i]

            firetouchinterest(Hats[i].Handle, Character.FindFirstChild(Character, 'HumanoidRootPart'), 0)

            repeat
                RunService.Heartbeat:Wait()
            until Character.FindFirstChildOfClass(Character, 'Accessory')

            Character.FindFirstChildOfClass(Character, 'Accessory'):Destroy()

            repeat
                RunService.Heartbeat:Wait()
            until not Character.FindFirstChildOfClass(Character, 'Accessory')
        end

        execCmd('reset')
        Player.CharacterAdded:Wait()

        for i = 1, 20 do
            RunService.Heartbeat:Wait()

            if Player.Character:FindFirstChild('HumanoidRootPart') then
                Player.Character:FindFirstChild('HumanoidRootPart').CFrame = Old
            end
        end
    else
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing firetouchinterest)]])
    end
end)
addcmd('split', {}, function(args, speaker)
    if r15(speaker) then
        speaker.Character.UpperTorso.Waist:Destroy()
    else
        notify('R15 Required', 'This command requires the r15 rig type')
    end
end)
addcmd('nilchar', {}, function(args, speaker)
    if speaker.Character ~= nil then
        speaker.Character.Parent = nil
    end
end)
addcmd('unnilchar', {
    'nonilchar',
}, function(args, speaker)
    if speaker.Character ~= nil then
        speaker.Character.Parent = workspace
    end
end)
addcmd('noroot', {
    'removeroot',
    'rroot',
}, function(args, speaker)
    if speaker.Character ~= nil then
        local char = Players.LocalPlayer.Character

        char.Parent = nil

        char.HumanoidRootPart:Destroy()

        char.Parent = workspace
    end
end)
addcmd('replaceroot', {
    'replacerootpart',
}, function(args, speaker)
    if speaker.Character ~= nil and speaker.Character:FindFirstChild('HumanoidRootPart') then
        local Char = speaker.Character
        local OldParent = Char.Parent
        local HRP = Char and Char.FindFirstChild(Char, 'HumanoidRootPart')
        local OldPos = HRP.CFrame

        Char.Parent = game

        local HRP1 = HRP.Clone(HRP)

        HRP1.Parent = Char
        HRP = HRP.Destroy(HRP)
        HRP1.CFrame = OldPos
        Char.Parent = OldParent
    end
end)
addcmd('clearcharappearance', {
    'clearchar',
    'clrchar',
}, function(args, speaker)
    speaker.ClearCharacterAppearance(speaker)
end)
addcmd('equiptools', {}, function(args, speaker)
    for i, v in pairs(speaker.FindFirstChildOfClass(speaker, 'Backpack'):GetChildren())do
        if v.IsA(v, 'Tool') or v.IsA(v, 'HopperBin') then
            v.Parent = speaker.Character
        end
    end
end)
addcmd('unequiptools', {}, function(args, speaker)
    speaker.Character:FindFirstChildOfClass('Humanoid'):UnequipTools()
end)

local function GetHandleTools(p)
    p = p or Players.LocalPlayer

    local r = {}

    for _, v in ipairs(p.Character and p.Character:GetChildren() or {})do
        if v.IsA(v, 'BackpackItem') and v.FindFirstChild(v, 'Handle') then
            r[#r + 1] = v
        end
    end
    for _, v in ipairs(p.Backpack:GetChildren())do
        if v.IsA(v, 'BackpackItem') and v.FindFirstChild(v, 'Handle') then
            r[#r + 1] = v
        end
    end

    return r
end

addcmd('dupetools', {
    'clonetools',
}, function(args, speaker)
    local LOOP_NUM = tonumber(args[1]) or 1
    local OrigPos = speaker.Character.HumanoidRootPart.Position
    local Tools, TempPos = {}, Vector3.new(math.random(-2, 32), 32, math.random(
-2, 32))

    for i = 1, LOOP_NUM do
        local Human = speaker.Character:WaitForChild('Humanoid')

        task.wait(0.1, Human.Parent:MoveTo(TempPos))

        Human.RootPart.Anchored = speaker.ClearCharacterAppearance(speaker, task.wait(0.1)) or true

        local t = GetHandleTools(speaker)

        while#t > 0 do
            for _, v in ipairs(t)do
                task.spawn(function()
                    for _ = 1, 25 do
                        v.Parent = speaker.Character
                        v.Handle.Anchored = true
                    end
                    for _ = 1, 5 do
                        v.Parent = workspace
                    end

                    table.insert(Tools, v.Handle)
                end)
            end

            t = GetHandleTools(speaker)
        end

        task.wait(0.1)

        speaker.Character = speaker.Character:Destroy()

        speaker.CharacterAdded:Wait():WaitForChild('Humanoid').Parent:MoveTo(LOOP_NUM == i and OrigPos or TempPos, task.wait(0.1))

        if i == LOOP_NUM or i % 5 == 0 then
            local HRP = speaker.Character.HumanoidRootPart

            if type(firetouchinterest) == 'function' then
                for _, v in ipairs(Tools)do
                    v.Anchored = not firetouchinterest(v, HRP, 1, firetouchinterest(v, HRP, 0)) and false or false
                end
            else
                for _, v in ipairs(Tools)do
                    task.spawn(function()
                        local x = v.CanCollide

                        v.CanCollide = false
                        v.Anchored = false

                        for _ = 1, 10 do
                            v.CFrame = HRP.CFrame

                            task.wait()
                        end

                        v.CanCollide = x
                    end)
                end
            end

            task.wait(0.1)

            Tools = {}
        end

        TempPos = TempPos + Vector3.new(10, math.random(-5, 5), 0)
    end
end)

local RS = RunService.RenderStepped

addcmd('touchinterests', {
    'touchinterest',
    'firetouchinterests',
    'firetouchinterest',
}, function(args, speaker)
    if not firetouchinterest then
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing firetouchinterest)]])

        return
    end

    local root = getRoot(speaker.Character) or speaker.Character:FindFirstChildWhichIsA('BasePart')

    local function touch(x)
        x = x.FindFirstAncestorWhichIsA(x, 'Part')

        if x then
            if firetouchinterest then
                task.spawn(function()
                    firetouchinterest(x, root, 1)
                    task.wait()
                    firetouchinterest(x, root, 0)
                end)
            end

            x.CFrame = root.CFrame
        end
    end

    if args[1] then
        local name = getstring(1)

        for _, descendant in ipairs(workspace.GetDescendants(workspace))do
            if descendant.IsA(descendant, 'TouchTransmitter') and descendant.Name == name or descendant.Parent.Name == name then
                touch(descendant)
            end
        end
    else
        for _, descendant in ipairs(workspace.GetDescendants(workspace))do
            if descendant.IsA(descendant, 'TouchTransmitter') then
                touch(descendant)
            end
        end
    end
end)
addcmd('fullbright', {
    'fb',
    'fullbrightness',
}, function(args, speaker)
    Lighting.Brightness = 2
    Lighting.ClockTime = 14
    Lighting.FogEnd = 100000
    Lighting.GlobalShadows = false
    Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
end)
addcmd('loopfullbright', {
    'loopfb',
}, function(args, speaker)
    if brightLoop then
        brightLoop.Disconnect(brightLoop)
    end

    local function brightFunc()
        Lighting.Brightness = 2
        Lighting.ClockTime = 14
        Lighting.FogEnd = 100000
        Lighting.GlobalShadows = false
        Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
    end

    brightLoop = RunService.RenderStepped:Connect(brightFunc)
end)
addcmd('unloopfullbright', {
    'unloopfb',
}, function(args, speaker)
    if brightLoop then
        brightLoop.Disconnect(brightLoop)
    end
end)
addcmd('ambient', {}, function(args, speaker)
    Lighting.Ambient = Color3.new(args[1], args[2], args[3])
    Lighting.OutdoorAmbient = Color3.new(args[1], args[2], args[3])
end)
addcmd('day', {}, function(args, speaker)
    Lighting.ClockTime = 14
end)
addcmd('night', {}, function(args, speaker)
    Lighting.ClockTime = 0
end)
addcmd('nofog', {}, function(args, speaker)
    Lighting.FogEnd = 100000

    for i, v in pairs(Lighting.GetDescendants(Lighting))do
        if v.IsA(v, 'Atmosphere') then
            v.Destroy(v)
        end
    end
end)
addcmd('brightness', {}, function(args, speaker)
    Lighting.Brightness = args[1]
end)
addcmd('globalshadows', {
    'gshadows',
}, function(args, speaker)
    Lighting.GlobalShadows = true
end)
addcmd('unglobalshadows', {
    'nogshadows',
    'ungshadows',
    'noglobalshadows',
}, function(args, speaker)
    Lighting.GlobalShadows = false
end)

origsettings = {
    abt = Lighting.Ambient,
    oabt = Lighting.OutdoorAmbient,
    brt = Lighting.Brightness,
    time = Lighting.ClockTime,
    fe = Lighting.FogEnd,
    fs = Lighting.FogStart,
    gs = Lighting.GlobalShadows,
}

addcmd('restorelighting', {
    'rlighting',
}, function(args, speaker)
    Lighting.Ambient = origsettings.abt
    Lighting.OutdoorAmbient = origsettings.oabt
    Lighting.Brightness = origsettings.brt
    Lighting.ClockTime = origsettings.time
    Lighting.FogEnd = origsettings.fe
    Lighting.FogStart = origsettings.fs
    Lighting.GlobalShadows = origsettings.gs
end)
addcmd('stun', {
    'platformstand',
}, function(args, speaker)
    speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
end)
addcmd('unstun', {
    'nostun',
    'unplatformstand',
    'noplatformstand',
}, function(args, speaker)
    speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
end)
addcmd('norotate', {
    'noautorotate',
}, function(args, speaker)
    speaker.Character:FindFirstChildOfClass('Humanoid').AutoRotate = false
end)
addcmd('unnorotate', {
    'autorotate',
}, function(args, speaker)
    speaker.Character:FindFirstChildOfClass('Humanoid').AutoRotate = true
end)
addcmd('enablestate', {}, function(args, speaker)
    local x = args[1]

    if not tonumber(x) then
        local x = Enum.HumanoidStateType[args[1] ]
    end

    speaker.Character:FindFirstChildOfClass('Humanoid'):SetStateEnabled(x, true)
end)
addcmd('disablestate', {}, function(args, speaker)
    local x = args[1]

    if not tonumber(x) then
        local x = Enum.HumanoidStateType[args[1] ]
    end

    speaker.Character:FindFirstChildOfClass('Humanoid'):SetStateEnabled(x, false)
end)
addcmd('drophats', {
    'drophat',
}, function(args, speaker)
    if speaker.Character then
        for _, v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories())do
            v.Parent = workspace
        end
    end
end)
addcmd('deletehats', {
    'nohats',
    'rhats',
}, function(args, speaker)
    for i, v in next, speaker.Character:GetDescendants()do
        if v.IsA(v, 'Accessory') then
            for i, p in next, v.GetDescendants(v)do
                if p.IsA(p, 'Weld') then
                    p.Destroy(p)
                end
            end
        end
    end
end)
addcmd('droptools', {
    'droptool',
}, function(args, speaker)
    for i, v in pairs(Players.LocalPlayer.Backpack:GetChildren())do
        if v.IsA(v, 'Tool') then
            v.Parent = Players.LocalPlayer.Character
        end
    end

    task.wait()

    for i, v in pairs(Players.LocalPlayer.Character:GetChildren())do
        if v.IsA(v, 'Tool') then
            v.Parent = workspace
        end
    end
end)
addcmd('droppabletools', {}, function(args, speaker)
    if speaker.Character then
        for _, obj in pairs(speaker.Character:GetChildren())do
            if obj.IsA(obj, 'Tool') then
                obj.CanBeDropped = true
            end
        end
    end
    if speaker.FindFirstChildOfClass(speaker, 'Backpack') then
        for _, obj in pairs(speaker.FindFirstChildOfClass(speaker, 'Backpack'):GetChildren())do
            if obj.IsA(obj, 'Tool') then
                obj.CanBeDropped = true
            end
        end
    end
end)

local currentToolSize = ''
local currentGripPos = ''

addcmd('reach', {}, function(args, speaker)
    execCmd('unreach')
    task.wait()

    for i, v in pairs(speaker.Character:GetDescendants())do
        if v.IsA(v, 'Tool') then
            if args[1] then
                currentToolSize = v.Handle.Size
                currentGripPos = v.GripPos

                local a = Instance.new('SelectionBox')

                a.Name = 'SelectionBoxCreated'
                a.Parent = v.Handle
                a.Adornee = v.Handle
                v.Handle.Massless = true
                v.Handle.Size = Vector3.new(0.5, 0.5, args[1])
                v.GripPos = Vector3.new(0, 0, 0)

                speaker.Character:FindFirstChildOfClass('Humanoid'):UnequipTools()
            else
                currentToolSize = v.Handle.Size
                currentGripPos = v.GripPos

                local a = Instance.new('SelectionBox')

                a.Name = 'SelectionBoxCreated'
                a.Parent = v.Handle
                a.Adornee = v.Handle
                v.Handle.Massless = true
                v.Handle.Size = Vector3.new(0.5, 0.5, 60)
                v.GripPos = Vector3.new(0, 0, 0)

                speaker.Character:FindFirstChildOfClass('Humanoid'):UnequipTools()
            end
        end
    end
end)
addcmd('boxreach', {}, function(args, speaker)
    execCmd('unreach')
    task.wait()

    for i, v in pairs(speaker.Character:GetDescendants())do
        if v.IsA(v, 'Tool') then
            local size = tonumber(args[1]) or 60

            currentToolSize = v.Handle.Size
            currentGripPos = v.GripPos

            local a = Instance.new('SelectionBox')

            a.Name = 'SelectionBoxCreated'
            a.Parent = v.Handle
            a.Adornee = v.Handle
            v.Handle.Massless = true
            v.Handle.Size = Vector3.new(size, size, size)
            v.GripPos = Vector3.new(0, 0, 0)

            speaker.Character:FindFirstChildOfClass('Humanoid'):UnequipTools()
        end
    end
end)
addcmd('unreach', {
    'noreach',
    'unboxreach',
}, function(args, speaker)
    for i, v in pairs(speaker.Character:GetDescendants())do
        if v.IsA(v, 'Tool') then
            v.Handle.Size = currentToolSize
            v.GripPos = currentGripPos

            v.Handle.SelectionBoxCreated:Destroy()
        end
    end
end)
addcmd('grippos', {}, function(args, speaker)
    for i, v in pairs(speaker.Character:GetDescendants())do
        if v.IsA(v, 'Tool') then
            v.Parent = speaker.FindFirstChildOfClass(speaker, 'Backpack')
            v.GripPos = Vector3.new(args[1], args[2], args[3])
            v.Parent = speaker.Character
        end
    end
end)
addcmd('usetools', {}, function(args, speaker)
    local Backpack = speaker.FindFirstChildOfClass(speaker, 'Backpack')
    local amount = tonumber(args[1]) or 1
    local delay_ = tonumber(args[2]) or false

    for _, v in ipairs(Backpack.GetChildren(Backpack))do
        v.Parent = speaker.Character

        task.spawn(function()
            for _ = 1, amount do
                v.Activate(v)

                if delay_ then
                    task.wait(delay_)
                end
            end

            v.Parent = Backpack
        end)
    end
end)
addcmd('logs', {}, function(args, speaker)
    logsEnabled = true
    jLogsEnabled = true
    Toggle.Text = 'Enabled'
    Toggle_2.Text = 'Enabled'

    logs.TweenPosition(logs, UDim2.new(0, 0, 1, -265), 'InOut', 'Quart', 0.3, true, nil)
end)
addcmd('chatlogs', {
    'clogs',
}, function(args, speaker)
    logsEnabled = true
    join.Visible = false
    chat.Visible = true

    table.remove(shade3, table.find(shade3, selectChat))
    table.remove(shade2, table.find(shade2, selectJoin))
    table.insert(shade2, selectChat)
    table.insert(shade3, selectJoin)

    selectJoin.BackgroundColor3 = currentShade3
    selectChat.BackgroundColor3 = currentShade2
    Toggle.Text = 'Enabled'

    logs.TweenPosition(logs, UDim2.new(0, 0, 1, -265), 'InOut', 'Quart', 0.3, true, nil)
end)
addcmd('joinlogs', {
    'jlogs',
}, function(args, speaker)
    jLogsEnabled = true
    chat.Visible = false
    join.Visible = true

    table.remove(shade3, table.find(shade3, selectJoin))
    table.remove(shade2, table.find(shade2, selectChat))
    table.insert(shade2, selectJoin)
    table.insert(shade3, selectChat)

    selectChat.BackgroundColor3 = currentShade3
    selectJoin.BackgroundColor3 = currentShade2
    Toggle_2.Text = 'Enabled'

    logs.TweenPosition(logs, UDim2.new(0, 0, 1, -265), 'InOut', 'Quart', 0.3, true, nil)
end)
addcmd('chatlogswebhook', {
    'logswebhook',
}, function(args, speaker)
    if not httprequest then
        return notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing request)]])
    end

    logsWebhook = args[1] or nil

    updatesaves()
end)
addcmd('antichatlogs', {
    'antichatlogger',
}, function(args, speaker)
    if not isLegacyChat then
        return notify('antichatlogs', 'Game needs the legacy chat')
    end

    local MessagePosted, _ = pcall(function()
        rawset(require(speaker.FindFirstChild(speaker, 'PlayerScripts'):FindFirstChild('ChatScript').ChatMain), 'MessagePosted', {
            fire = function(msg)
                return msg
            end,
            wait = function()
                return
            end,
            connect = function()
                return
            end,
        })
    end)

    notify('antichatlogs', MessagePosted and 'Enabled' or 'Failed to enable antichatlogs')
end)

flinging = false

addcmd('fling', {}, function(args, speaker)
    flinging = false

    for _, child in pairs(speaker.Character:GetDescendants())do
        if child.IsA(child, 'BasePart') then
            child.CustomPhysicalProperties = PhysicalProperties.new(100, 0.3, 0.5)
        end
    end

    execCmd('noclip')
    task.wait(0.1)

    local bambam = Instance.new('BodyAngularVelocity')

    bambam.Name = randomString()
    bambam.Parent = getRoot(speaker.Character)
    bambam.AngularVelocity = Vector3.new(0, 99999, 0)
    bambam.MaxTorque = Vector3.new(0, math.huge, 0)
    bambam.P = math.huge

    local Char = speaker.Character:GetChildren()

    for i, v in next, Char do
        if v.IsA(v, 'BasePart') then
            v.CanCollide = false
            v.Massless = true
            v.Velocity = Vector3.new(0, 0, 0)
        end
    end

    flinging = true

    local function flingDiedF()
        execCmd('unfling')
    end

    flingDied = speaker.Character:FindFirstChildOfClass('Humanoid').Died:Connect(flingDiedF)

    repeat
        bambam.AngularVelocity = Vector3.new(0, 99999, 0)

        task.wait(0.2)

        bambam.AngularVelocity = Vector3.new(0, 0, 0)

        task.wait(0.1)
    until flinging == false
end)
addcmd('unfling', {
    'nofling',
}, function(args, speaker)
    execCmd('clip')

    if flingDied then
        flingDied.Disconnect(flingDied)
    end

    flinging = false

    task.wait(0.1)

    local speakerChar = speaker.Character

    if not speakerChar or not getRoot(speakerChar) then
        return
    end

    for i, v in pairs(getRoot(speakerChar):GetChildren())do
        if v.ClassName == 'BodyAngularVelocity' then
            v.Destroy(v)
        end
    end
    for _, child in pairs(speakerChar.GetDescendants(speakerChar))do
        if child.ClassName == 'Part' or child.ClassName == 'MeshPart' then
            child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
        end
    end
end)
addcmd('togglefling', {}, function(args, speaker)
    if flinging then
        execCmd('unfling')
    else
        execCmd('fling')
    end
end)
addcmd('flyfling', {}, function(args, speaker)
    execCmd('unvehiclefly\\unwalkfling')
    task.wait()

    vehicleflyspeed = tonumber(args[1]) or vehicleflyspeed

    execCmd('vehiclefly\\walkfling')
end)
addcmd('unflyfling', {}, function(args, speaker)
    execCmd('unvehiclefly\\unwalkfling\\breakvelocity')
end)
addcmd('toggleflyfling', {}, function(args, speaker)
    execCmd(flinging and 'unflyfling' or 'flyfling')
end)

walkflinging = false

addcmd('walkfling', {}, function(args, speaker)
    execCmd('unwalkfling')

    local humanoid = speaker.Character:FindFirstChildWhichIsA('Humanoid')

    if humanoid then
        humanoid.Died:Connect(function()
            execCmd('unwalkfling')
        end)
    end

    execCmd('noclip nonotify')

    walkflinging = true

    repeat
        RunService.Heartbeat:Wait()

        local character = speaker.Character
        local root = getRoot(character)
        local movel, vel = 0.1

        while not (character and character.Parent and root and root.Parent) do
            RunService.Heartbeat:Wait()

            character = speaker.Character
            root = getRoot(character)
        end

        vel = root.Velocity
        root.Velocity = vel * 10000 + Vector3.new(0, 10000, 0)

        RunService.RenderStepped:Wait()

        if character and character.Parent and root and root.Parent then
            root.Velocity = vel
        end

        RunService.Stepped:Wait()

        if character and character.Parent and root and root.Parent then
            root.Velocity = vel + Vector3.new(0, movel, 0)
            movel = movel * -1
        end
    until walkflinging == false
end)
addcmd('unwalkfling', {
    'nowalkfling',
}, function(args, speaker)
    walkflinging = false

    execCmd('unnoclip nonotify')
end)
addcmd('togglewalkfling', {}, function(args, speaker)
    execCmd(walkflinging and 'unwalkfling' or 'walkfling')
end)
addcmd('invisfling', {}, function(args, speaker)
    local ch = speaker.Character

    ch.FindFirstChildWhichIsA(ch, 'Humanoid'):SetStateEnabled(Enum.HumanoidStateType.Dead, false)

    local prt = Instance.new('Model')

    prt.Parent = speaker.Character

    local z1 = Instance.new('Part')

    z1.Name = 'Torso'
    z1.CanCollide = false
    z1.Anchored = true

    local z2 = Instance.new('Part')

    z2.Name = 'Head'
    z2.Parent = prt
    z2.Anchored = true
    z2.CanCollide = false

    local z3 = Instance.new('Humanoid')

    z3.Name = 'Humanoid'
    z3.Parent = prt
    z1.Position = Vector3.new(0, 9999, 0)
    speaker.Character = prt

    task.wait(3)

    speaker.Character = ch

    task.wait(3)

    local Hum = Instance.new('Humanoid')

    z2.Clone(z2)

    Hum.Parent = speaker.Character

    local root = getRoot(speaker.Character)

    for i, v in pairs(speaker.Character:GetChildren())do
        if v ~= root and v.Name ~= 'Humanoid' then
            v.Destroy(v)
        end
    end

    root.Transparency = 0
    root.Color = Color3.new(1, 1, 1)

    local invisflingStepped

    invisflingStepped = RunService.Stepped:Connect(function()
        if speaker.Character and getRoot(speaker.Character) then
            getRoot(speaker.Character).CanCollide = false
        else
            invisflingStepped.Disconnect(invisflingStepped)
        end
    end)

    sFLY()

    workspace.CurrentCamera.CameraSubject = root

    local bambam = Instance.new('BodyThrust')

    bambam.Parent = getRoot(speaker.Character)
    bambam.Force = Vector3.new(99999, 999990, 99999)
    bambam.Location = getRoot(speaker.Character).Position
end)
addcmd('antifling', {}, function(args, speaker)
    if antifling then
        antifling.Disconnect(antifling)

        antifling = nil
    end

    antifling = RunService.Stepped:Connect(function()
        for _, player in pairs(Players.GetPlayers(Players))do
            if player ~= speaker and player.Character then
                for _, v in pairs(player.Character:GetDescendants())do
                    if v.IsA(v, 'BasePart') then
                        v.CanCollide = false
                    end
                end
            end
        end
    end)
end)
addcmd('unantifling', {}, function(args, speaker)
    if antifling then
        antifling.Disconnect(antifling)

        antifling = nil
    end
end)
addcmd('toggleantifling', {}, function(args, speaker)
    execCmd(antifling and 'unantifling' or 'antifling')
end)

attach = function(speaker, target)
    if tools(speaker) then
        local char = speaker.Character
        local tchar = target.Character
        local hum = speaker.Character:FindFirstChildOfClass('Humanoid')
        local hrp = getRoot(speaker.Character)
        local hrp2 = getRoot(target.Character)

        hum.Name = '1'

        local newHum = hum.Clone(hum)

        newHum.Parent = char
        newHum.Name = 'Humanoid'

        task.wait()
        hum.Destroy(hum)

        workspace.CurrentCamera.CameraSubject = char
        newHum.DisplayDistanceType = 'None'

        local tool = speaker.FindFirstChildOfClass(speaker, 'Backpack'):FindFirstChildOfClass('Tool') or speaker.Character:FindFirstChildOfClass('Tool')

        tool.Parent = char
        hrp.CFrame = hrp2.CFrame * CFrame.new(0, 0, 0) * CFrame.new(math.random(
-100, 100) / 200, math.random(-100, 100) / 200, math.random(-100, 100) / 200)

        local n = 0

        repeat
            task.wait(0.1)

            n = n + 1
            hrp.CFrame = hrp2.CFrame
        until (tool.Parent ~= char or not hrp or not hrp2 or not hrp.Parent or not hrp2.Parent or n > 250) and n > 2
    else
        notify('Tool Required', 
[[You need to have an item in your inventory to use this command]])
    end
end
kill = function(speaker, target, fast)
    if tools(speaker) then
        if target ~= nil then
            local NormPos = getRoot(speaker.Character).CFrame

            if not fast then
                refresh(speaker)
                task.wait()

                repeat
                    task.wait()
                until speaker.Character ~= nil and getRoot(speaker.Character)

                task.wait(0.3)
            end

            local hrp = getRoot(speaker.Character)

            attach(speaker, target)

            repeat
                task.wait()

                hrp.CFrame = CFrame.new(999999, workspace.FallenPartsDestroyHeight + 5, 999999)
            until not getRoot(target.Character) or not getRoot(speaker.Character)

            speaker.CharacterAdded:Wait():WaitForChild('HumanoidRootPart').CFrame = NormPos
        end
    else
        notify('Tool Required', 
[[You need to have an item in your inventory to use this command]])
    end
end

addcmd('handlekill', {
    'hkill',
}, function(args, speaker)
    if not firetouchinterest then
        return notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing firetouchinterest)]])
    end
    if not speaker.Character then
        return
    end

    local tool = speaker.Character:FindFirstChildWhichIsA('Tool')
    local handle = tool and tool.FindFirstChild(tool, 'Handle')

    if not handle then
        return notify('Handle Kill', 
[[You need to hold a "Tool" that does damage on touch. For example a common Sword tool.]])
    end

    local range = tonumber(args[2]) or math.huge

    if range ~= math.huge then
        notify('Handle Kill', ('Started!\nRadius: %s').format(('Started!\nRadius: %s'), tostring(range):upper()))
    end

    while task.wait() and speaker.Character and tool.Parent and tool.Parent == speaker.Character do
        for _, plr in next, getPlayer(args[1], speaker)do
            plr = Players[plr]

            if plr ~= speaker and plr.Character then
                local hum = plr.Character:FindFirstChildWhichIsA('Humanoid')
                local root = hum and getRoot(plr.Character)

                if root and hum.Health > 0 and hum.GetState(hum) ~= Enum.HumanoidStateType.Dead and speaker.DistanceFromCharacter(speaker, root.Position) <= range then
                    firetouchinterest(handle, root, 1)
                    firetouchinterest(handle, root, 0)
                end
            end
        end
    end

    notify('Handle Kill', 'Stopped!')
end)

local hb = RunService.Heartbeat

addcmd('tpwalk', {
    'teleportwalk',
}, function(args, speaker)
    tpwalking = true

    local chr = speaker.Character
    local hum = chr and chr.FindFirstChildWhichIsA(chr, 'Humanoid')

    while tpwalking and chr and hum and hum.Parent do
        local delta = hb.task.wait(hb)

        if hum.MoveDirection.Magnitude > 0 then
            if args[1] and isNumber(args[1]) then
                chr.TranslateBy(chr, hum.MoveDirection * tonumber(args[1]) * delta * 10)
            else
                chr.TranslateBy(chr, hum.MoveDirection * delta * 10)
            end
        end
    end
end)
addcmd('untpwalk', {
    'unteleportwalk',
}, function(args, speaker)
    tpwalking = false
end)

bring = function(speaker, target, fast)
    if tools(speaker) then
        if target ~= nil then
            local NormPos = getRoot(speaker.Character).CFrame

            if not fast then
                refresh(speaker)
                task.wait()

                repeat
                    task.wait()
                until speaker.Character ~= nil and getRoot(speaker.Character)

                task.wait(0.3)
            end

            local hrp = getRoot(speaker.Character)

            attach(speaker, target)

            repeat
                task.wait()

                hrp.CFrame = NormPos
            until not getRoot(target.Character) or not getRoot(speaker.Character)

            speaker.CharacterAdded:Wait():WaitForChild('HumanoidRootPart').CFrame = NormPos
        end
    else
        notify('Tool Required', 
[[You need to have an item in your inventory to use this command]])
    end
end
teleport = function(speaker, target, target2, fast)
    if tools(speaker) then
        if target ~= nil then
            local NormPos = getRoot(speaker.Character).CFrame

            if not fast then
                refresh(speaker)
                task.wait()

                repeat
                    task.wait()
                until speaker.Character ~= nil and getRoot(speaker.Character)

                task.wait(0.3)
            end

            local hrp = getRoot(speaker.Character)
            local hrp2 = getRoot(target2.Character)

            attach(speaker, target)

            repeat
                task.wait()

                hrp.CFrame = hrp2.CFrame
            until not getRoot(target.Character) or not getRoot(speaker.Character)

            task.wait(1)

            speaker.CharacterAdded:Wait():WaitForChild('HumanoidRootPart').CFrame = NormPos
        end
    else
        notify('Tool Required', 
[[You need to have an item in your inventory to use this command]])
    end
end

addcmd('spin', {}, function(args, speaker)
    local spinSpeed = 20

    if args[1] and isNumber(args[1]) then
        spinSpeed = args[1]
    end

    for i, v in pairs(getRoot(speaker.Character):GetChildren())do
        if v.Name == 'Spinning' then
            v.Destroy(v)
        end
    end

    local Spin = Instance.new('BodyAngularVelocity')

    Spin.Name = 'Spinning'
    Spin.Parent = getRoot(speaker.Character)
    Spin.MaxTorque = Vector3.new(0, math.huge, 0)
    Spin.AngularVelocity = Vector3.new(0, spinSpeed, 0)
end)
addcmd('unspin', {}, function(args, speaker)
    for i, v in pairs(getRoot(speaker.Character):GetChildren())do
        if v.Name == 'Spinning' then
            v.Destroy(v)
        end
    end
end)

xrayEnabled = false
xray = function()
    for _, v in pairs(workspace.GetDescendants(workspace))do
        if v.IsA(v, 'BasePart') and not v.Parent:FindFirstChildWhichIsA('Humanoid') and not v.Parent.Parent:FindFirstChildWhichIsA('Humanoid') then
            v.LocalTransparencyModifier = xrayEnabled and 0.5 or 0
        end
    end
end

addcmd('xray', {}, function(args, speaker)
    xrayEnabled = true

    xray()
end)
addcmd('unxray', {
    'noxray',
}, function(args, speaker)
    xrayEnabled = false

    xray()
end)
addcmd('togglexray', {}, function(args, speaker)
    xrayEnabled = not xrayEnabled

    xray()
end)
addcmd('loopxray', {}, function(args, speaker)
    pcall(function()
        xrayLoop.Disconnect(xrayLoop)
    end)

    xrayLoop = RunService.RenderStepped:Connect(function()
        xrayEnabled = true

        xray()
    end)
end)
addcmd('unloopxray', {}, function(args, speaker)
    pcall(function()
        xrayLoop.Disconnect(xrayLoop)
    end)

    xrayEnabled = false

    xray()
end)

local walltpTouch

addcmd('walltp', {}, function(args, speaker)
    local torso

    if r15(speaker) then
        torso = speaker.Character.UpperTorso
    else
        torso = speaker.Character.Torso
    end

    local function touchedFunc(hit)
        local Root = getRoot(speaker.Character)

        if hit.IsA(hit, 'BasePart') and hit.Position.Y > Root.Position.Y - speaker.Character:FindFirstChildOfClass('Humanoid').HipHeight then
            local hitP = getRoot(hit.Parent)

            if hitP ~= nil then
                Root.CFrame = hit.CFrame * CFrame.new(Root.CFrame.lookVector.X, hitP.Size.Z / 2 + speaker.Character:FindFirstChildOfClass('Humanoid').HipHeight, Root.CFrame.lookVector.Z)
            elseif hitP == nil then
                Root.CFrame = hit.CFrame * CFrame.new(Root.CFrame.lookVector.X, hit.Size.Y / 2 + speaker.Character:FindFirstChildOfClass('Humanoid').HipHeight, Root.CFrame.lookVector.Z)
            end
        end
    end

    walltpTouch = torso.Touched:Connect(touchedFunc)
end)
addcmd('unwalltp', {
    'nowalltp',
}, function(args, speaker)
    if walltpTouch then
        walltpTouch.Disconnect(walltpTouch)
    end
end)

autoclicking = false

addcmd('autoclick', {}, function(args, speaker)
    if mouse1press and mouse1release then
        execCmd('unautoclick')
        task.wait()

        local clickDelay = 0.1
        local releaseDelay = 0.1

        if args[1] and isNumber(args[1]) then
            clickDelay = args[1]
        end
        if args[2] and isNumber(args[2]) then
            releaseDelay = args[2]
        end

        autoclicking = true
        cancelAutoClick = UserInputService.InputBegan:Connect(function(
            input,
            gameProcessedEvent
        )
            if not gameProcessedEvent then
                if (input.KeyCode == Enum.KeyCode.Backspace and UserInputService.IsKeyDown(UserInputService, Enum.KeyCode.Equals)) or (input.KeyCode == Enum.KeyCode.Equals and UserInputService.IsKeyDown(UserInputService, Enum.KeyCode.Backspace)) then
                    autoclicking = false

                    cancelAutoClick.Disconnect(cancelAutoClick)
                end
            end
        end)

        notify('Auto Clicker', 'Press [backspace] and [=] at the same time to stop')

        repeat
            task.wait(clickDelay)
            mouse1press()
            task.wait(releaseDelay)
            mouse1release()
        until autoclicking == false
    else
        notify('Auto Clicker', "Your exploit doesn't have the ability to use the autoclick")
    end
end)
addcmd('unautoclick', {
    'noautoclick',
}, function(args, speaker)
    autoclicking = false

    if cancelAutoClick then
        cancelAutoClick.Disconnect(cancelAutoClick)
    end
end)
addcmd('mousesensitivity', {
    'ms',
}, function(args, speaker)
    UserInputService.MouseDeltaSensitivity = args[1]
end)

local nameBox
local nbSelection

addcmd('hovername', {}, function(args, speaker)
    execCmd('unhovername')
    task.wait()

    nameBox = Instance.new('TextLabel')
    nameBox.Name = randomString()
    nameBox.Parent = ScaledHolder
    nameBox.BackgroundTransparency = 1
    nameBox.Size = UDim2.new(0, 200, 0, 30)
    nameBox.Font = Enum.Font.Code
    nameBox.TextSize = 16
    nameBox.Text = ''
    nameBox.TextColor3 = Color3.new(1, 1, 1)
    nameBox.TextStrokeTransparency = 0
    nameBox.TextXAlignment = Enum.TextXAlignment.Left
    nameBox.ZIndex = 10
    nbSelection = Instance.new('SelectionBox')
    nbSelection.Name = randomString()
    nbSelection.LineThickness = 0.03
    nbSelection.Color3 = Color3.new(1, 1, 1)

    local function updateNameBox()
        local t
        local target = IYMouse.Target

        if target then
            local humanoid = target.Parent:FindFirstChildOfClass('Humanoid') or target.Parent.Parent:FindFirstChildOfClass('Humanoid')

            if humanoid then
                t = humanoid.Parent
            end
        end
        if t ~= nil then
            local x = IYMouse.X
            local y = IYMouse.Y
            local xP
            local yP

            if IYMouse.X > 200 then
                xP = x - 205
                nameBox.TextXAlignment = Enum.TextXAlignment.Right
            else
                xP = x + 25
                nameBox.TextXAlignment = Enum.TextXAlignment.Left
            end

            nameBox.Position = UDim2.new(0, xP, 0, y)
            nameBox.Text = t.Name
            nameBox.Visible = true
            nbSelection.Parent = t
            nbSelection.Adornee = t
        else
            nameBox.Visible = false
            nbSelection.Parent = nil
            nbSelection.Adornee = nil
        end
    end

    nbUpdateFunc = IYMouse.Move:Connect(updateNameBox)
end)
addcmd('unhovername', {
    'nohovername',
}, function(args, speaker)
    if nbUpdateFunc then
        nbUpdateFunc.Disconnect(nbUpdateFunc)
        nameBox.Destroy(nameBox)
        nbSelection.Destroy(nbSelection)
    end
end)
addcmd('headsize', {}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        if Players[v] ~= speaker and Players[v].Character:FindFirstChild('Head') then
            local sizeArg = tonumber(args[2])
            local Size = Vector3.new(sizeArg, sizeArg, sizeArg)
            local Head = Players[v].Character:FindFirstChild('Head')

            if Head.IsA(Head, 'BasePart') then
                Head.CanCollide = false

                if not args[2] or sizeArg == 1 then
                    Head.Size = Vector3.new(2, 1, 1)
                else
                    Head.Size = Size
                end
            end
        end
    end
end)
addcmd('hitbox', {}, function(args, speaker)
    local players = getPlayer(args[1], speaker)
    local transparency = args[3] and tonumber(args[3]) or 0.4

    for i, v in pairs(players)do
        if Players[v] ~= speaker and Players[v].Character:FindFirstChild('HumanoidRootPart') then
            local sizeArg = tonumber(args[2])
            local Size = Vector3.new(sizeArg, sizeArg, sizeArg)
            local Root = Players[v].Character:FindFirstChild('HumanoidRootPart')

            if Root.IsA(Root, 'BasePart') then
                Root.CanCollide = false

                if not args[2] or sizeArg == 1 then
                    Root.Size = Vector3.new(2, 1, 1)
                    Root.Transparency = transparency
                else
                    Root.Size = Size
                    Root.Transparency = transparency
                end
            end
        end
    end
end)
addcmd('stareat', {
    'stare',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        if stareLoop then
            stareLoop.Disconnect(stareLoop)
        end
        if not Players.LocalPlayer.Character:FindFirstChild('HumanoidRootPart') and Players[v].Character:FindFirstChild('HumanoidRootPart') then
            return
        end

        local function stareFunc()
            if Players.LocalPlayer.Character.PrimaryPart and Players.FindFirstChild(Players, v) and Players[v].Character ~= nil and Players[v].Character:FindFirstChild('HumanoidRootPart') then
                local chrPos = Players.LocalPlayer.Character.PrimaryPart.Position
                local tPos = Players[v].Character:FindFirstChild('HumanoidRootPart').Position
                local modTPos = Vector3.new(tPos.X, chrPos.Y, tPos.Z)
                local newCF = CFrame.new(chrPos, modTPos)

                Players.LocalPlayer.Character:SetPrimaryPartCFrame(newCF)
            elseif not Players.FindFirstChild(Players, v) then
                stareLoop.Disconnect(stareLoop)
            end
        end

        stareLoop = RunService.RenderStepped:Connect(stareFunc)
    end
end)
addcmd('unstareat', {
    'unstare',
    'nostare',
    'nostareat',
}, function(args, speaker)
    if stareLoop then
        stareLoop.Disconnect(stareLoop)
    end
end)

RolewatchData = {
    Group = 0,
    Role = '',
    Leave = false,
}
RolewatchConnection = Players.PlayerAdded:Connect(function(player)
    if RolewatchData.Group == 0 then
        return
    end
    if player.IsInGroup(player, RolewatchData.Group) then
        if tostring(player.GetRoleInGroup(player, RolewatchData.Group)):lower() == RolewatchData.Role:lower() then
            if RolewatchData.Leave == true then
                Players.LocalPlayer:Kick('\n\nRolewatch\nPlayer "' .. tostring(player.Name) .. '" has joined with the Role "' .. RolewatchData.Role .. '"\n')
            else
                notify('Rolewatch', 'Player "' .. tostring(player.Name) .. '" has joined with the Role "' .. RolewatchData.Role .. '"')
            end
        end
    end
end)

addcmd('rolewatch', {}, function(args, speaker)
    local groupId = tonumber(args[1] or 0)
    local roleName = args[2] and tostring(getstring(2))

    if groupId and roleName then
        RolewatchData.Group = groupId
        RolewatchData.Role = roleName

        notify('Rolewatch', 'Watching Group ID "' .. tostring(groupId) .. '" for Role "' .. roleName .. '"')
    end
end)
addcmd('rolewatchstop', {}, function(args, speaker)
    RolewatchData.Group = 0
    RolewatchData.Role = ''
    RolewatchData.Leave = false

    notify('Rolewatch', 'Disabled')
end)
addcmd('rolewatchleave', {
    'unrolewatch',
}, function(args, speaker)
    RolewatchData.Leave = not RolewatchData.Leave

    notify('Rolewatch', RolewatchData.Leave and 'Leave has been Enabled' or 'Leave has been Disabled')
end)

staffRoles = {
    'mod',
    'admin',
    'staff',
    'dev',
    'founder',
    'owner',
    'supervis',
    'manager',
    'management',
    'executive',
    'president',
    'chairman',
    'chairwoman',
    'chairperson',
    'director',
}
getStaffRole = function(player)
    local playerRole = player.GetRoleInGroup(player, game.CreatorId)
    local result = {
        Role = playerRole,
        Staff = false,
    }

    if player.IsInGroup(player, 1200769) then
        result.Role = 'Roblox Employee'
        result.Staff = true
    end

    for _, role in pairs(staffRoles)do
        if string.find(string.lower(playerRole), role) then
            result.Staff = true
        end
    end

    return result
end

addcmd('staffwatch', {}, function(args, speaker)
    if staffwatchjoin then
        staffwatchjoin.Disconnect(staffwatchjoin)
    end
    if game.CreatorType == Enum.CreatorType.Group then
        local found = {}

        staffwatchjoin = Players.PlayerAdded:Connect(function(player)
            local result = getStaffRole(player)

            if result.Staff then
                notify('Staffwatch', formatUsername(player) .. ' is a ' .. result.Role)
            end
        end)

        for _, player in pairs(Players.GetPlayers(Players))do
            local result = getStaffRole(player)

            if result.Staff then
                table.insert(found, formatUsername(player) .. ' is a ' .. result.Role)
            end
        end

        if #found > 0 then
            notify('Staffwatch', table.concat(found, ',\n'))
        else
            notify('Staffwatch', 'Enabled')
        end
    else
        notify('Staffwatch', 'Game is not owned by a Group')
    end
end)
addcmd('unstaffwatch', {}, function(args, speaker)
    if staffwatchjoin then
        staffwatchjoin.Disconnect(staffwatchjoin)
    end

    notify('Staffwatch', 'Disabled')
end)
addcmd('removeterrain', {
    'rterrain',
    'noterrain',
}, function(args, speaker)
    workspace.FindFirstChildOfClass(workspace, 'Terrain'):Clear()
end)
addcmd('clearnilinstances', {
    'nonilinstances',
    'cni',
}, function(args, speaker)
    if getnilinstances then
        for i, v in pairs(getnilinstances())do
            v.Destroy(v)
        end
    else
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing getnilinstances)]])
    end
end)
addcmd('destroyheight', {
    'dh',
}, function(args, speaker)
    local dh = args[1] or -500

    if isNumber(dh) then
        workspace.FallenPartsDestroyHeight = dh
    end
end)

OrgDestroyHeight = workspace.FallenPartsDestroyHeight

addcmd('antivoid', {}, function(args, speaker)
    execCmd('unantivoid nonotify')
    task.wait()

    antivoidloop = RunService.Stepped:Connect(function()
        local root = getRoot(speaker.Character)

        if root and root.Position.Y <= OrgDestroyHeight + 25 then
            root.Velocity = root.Velocity + Vector3.new(0, 250, 0)
        end
    end)

    if args[1] ~= 'nonotify' then
        notify('antivoid', 'Enabled')
    end
end)
addcmd('unantivoid', {
    'noantivoid',
}, function(args, speaker)
    pcall(function()
        antivoidloop.Disconnect(antivoidloop)
    end)

    antivoidloop = nil

    if args[1] ~= 'nonotify' then
        notify('antivoid', 'Disabled')
    end
end)

antivoidWasEnabled = false

addcmd('fakeout', {}, function(args, speaker)
    local root = getRoot(speaker.Character)
    local oldpos = root.CFrame

    if antivoidloop then
        execCmd('unantivoid nonotify')

        antivoidWasEnabled = true
    end

    workspace.FallenPartsDestroyHeight = 0 / 0
    root.CFrame = CFrame.new(Vector3.new(0, OrgDestroyHeight - 25, 0))

    task.wait(1)

    root.CFrame = oldpos
    workspace.FallenPartsDestroyHeight = OrgDestroyHeight

    if antivoidWasEnabled then
        execCmd('antivoid nonotify')

        antivoidWasEnabled = false
    end
end)
addcmd('trip', {}, function(args, speaker)
    local humanoid = speaker.Character and speaker.Character:FindFirstChildWhichIsA('Humanoid')
    local root = speaker.Character and getRoot(speaker.Character)

    if humanoid and root then
        humanoid.ChangeState(humanoid, Enum.HumanoidStateType.FallingDown)

        root.Velocity = root.CFrame.LookVector * 30
    end
end)
addcmd('removeads', {
    'adblock',
}, function(args, speaker)
    while task.wait() do
        pcall(function()
            for i, v in pairs(workspace.GetDescendants(workspace))do
                if v.IsA(v, 'PackageLink') then
                    if v.Parent:FindFirstChild('ADpart') then
                        v.Parent:Destroy()
                    end
                    if v.Parent:FindFirstChild('AdGuiAdornee') then
                        v.Parent.Parent:Destroy()
                    end
                end
            end
        end)
    end
end)
addcmd('scare', {
    'spook',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)
    local oldpos

    for _, v in pairs(players)do
        local root = speaker.Character and getRoot(speaker.Character)
        local target = Players[v]
        local targetRoot = target and target.Character and getRoot(target.Character)

        if root and targetRoot and target ~= speaker then
            oldpos = root.CFrame
            root.CFrame = targetRoot.CFrame + targetRoot.CFrame.lookVector * 2
            root.CFrame = CFrame.new(root.Position, targetRoot.Position)

            task.wait(0.5)

            root.CFrame = oldpos
        end
    end
end)
addcmd('alignmentkeys', {}, function(args, speaker)
    alignmentKeys = UserInputService.InputBegan:Connect(function(
        input,
        gameProcessed
    )
        if gameProcessed then
            return
        end
        if input.KeyCode == Enum.KeyCode.Comma then
            workspace.CurrentCamera:PanUnits(-1)
        end
        if input.KeyCode == Enum.KeyCode.Period then
            workspace.CurrentCamera:PanUnits(1)
        end
    end)
    alignmentKeysEmotes = StarterGui.GetCoreGuiEnabled(StarterGui, Enum.CoreGuiType.EmotesMenu)

    StarterGui.SetCoreGuiEnabled(StarterGui, Enum.CoreGuiType.EmotesMenu, false)
end)
addcmd('unalignmentkeys', {
    'noalignmentkeys',
}, function(args, speaker)
    if type(alignmentKeysEmotes) == 'boolean' then
        StarterGui.SetCoreGuiEnabled(StarterGui, Enum.CoreGuiType.EmotesMenu, alignmentKeysEmotes)
    end

    alignmentKeys.Disconnect(alignmentKeys)
end)
addcmd('ctrllock', {}, function(args, speaker)
    local mouseLockController = speaker.PlayerScripts:WaitForChild('PlayerModule'):WaitForChild('CameraModule'):WaitForChild('MouseLockController')
    local boundKeys = mouseLockController.FindFirstChild(mouseLockController, 'BoundKeys')

    if boundKeys then
        boundKeys.Value = 'LeftControl'
    else
        boundKeys = Instance.new('StringValue')
        boundKeys.Name = 'BoundKeys'
        boundKeys.Value = 'LeftControl'
        boundKeys.Parent = mouseLockController
    end
end)
addcmd('unctrllock', {}, function(args, speaker)
    local mouseLockController = speaker.PlayerScripts:WaitForChild('PlayerModule'):WaitForChild('CameraModule'):WaitForChild('MouseLockController')
    local boundKeys = mouseLockController.FindFirstChild(mouseLockController, 'BoundKeys')

    if boundKeys then
        boundKeys.Value = 'LeftShift'
    else
        boundKeys = Instance.new('StringValue')
        boundKeys.Name = 'BoundKeys'
        boundKeys.Value = 'LeftShift'
        boundKeys.Parent = mouseLockController
    end
end)
addcmd('listento', {}, function(args, speaker)
    execCmd('unlistento')

    if not args[1] then
        return
    end

    local player = Players.FindFirstChild(Players, getPlayer(args[1], speaker)[1])
    local root = player and player.Character and getRoot(player.Character)

    if root then
        SoundService.SetListener(SoundService, Enum.ListenerType.ObjectPosition, root)

        listentoChar = player.CharacterAdded:Connect(function()
            repeat
                task.wait()
            until Players[player.Name].Character ~= nil and getRoot(Players[player.Name].Character)

            SoundService.SetListener(SoundService, Enum.ListenerType.ObjectPosition, getRoot(Players[player.Name].Character))
        end)
    end
end)
addcmd('unlistento', {}, function(args, speaker)
    SoundService.SetListener(SoundService, Enum.ListenerType.Camera)
    listentoChar.Disconnect(listentoChar)
end)
addcmd('jerk', {}, function(args, speaker)
    local humanoid = speaker.Character:FindFirstChildWhichIsA('Humanoid')
    local backpack = speaker.FindFirstChildWhichIsA(speaker, 'Backpack')

    if not humanoid or not backpack then
        return
    end

    local tool = Instance.new('Tool')

    tool.Name = 'Jerk Off'
    tool.ToolTip = 
[[in the stripped club. straight up "jorking it" . and by "it" , haha, well. let's justr say. My peanits.]]
    tool.RequiresHandle = false
    tool.Parent = backpack

    local jorkin = false
    local track

    local function stopTomfoolery()
        jorkin = false

        if track then
            track.Stop(track)

            track = nil
        end
    end

    tool.Equipped:Connect(function()
        jorkin = true
    end)
    tool.Unequipped:Connect(stopTomfoolery)
    humanoid.Died:Connect(stopTomfoolery)

    while task.wait() do
        local __DARKLUA_CONTINUE_396 = false

        repeat
            if not jorkin then
                __DARKLUA_CONTINUE_396 = true

                break
            end

            local isR15 = r15(speaker)

            if not track then
                local anim = Instance.new('Animation')

                anim.AnimationId = not isR15 and 'rbxassetid://72042024' or 'rbxassetid://698251653'
                track = humanoid.LoadAnimation(humanoid, anim)
            end

            track.Play(track)
            track.AdjustSpeed(track, isR15 and 0.7 or 0.65)

            track.TimePosition = 0.6

            task.wait(0.1)

            while track and track.TimePosition < (not isR15 and 0.65 or 0.7) do
                task.wait(0.1)
            end

            if track then
                track.Stop(track)

                track = nil
            end

            __DARKLUA_CONTINUE_396 = true
        until true

        if not __DARKLUA_CONTINUE_396 then
            break
        end
    end
end)
addcmd('guiscale', {}, function(args, speaker)
    if args[1] and isNumber(args[1]) then
        local scale = tonumber(args[1])

        if scale % 1 == 0 then
            scale = scale / 100
        end
        if scale == 0.01 then
            scale = 1
        end
        if scale == 0.02 then
            scale = 2
        end
        if scale >= 0.4 and scale <= 2 then
            guiScale = scale
        end
    else
        guiScale = defaultGuiScale
    end

    Scale.Scale = math.max(Holder.AbsoluteSize.X / 1920, guiScale)

    updatesaves()
end)
addcmd('unsuspendchat', {}, function(args, speaker)
    if replicatesignal then
        replicatesignal(TextChatService.UpdateChatTimeout, speaker.UserId, 0, 10)
    else
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing replicatesignal)]])
    end
end)
addcmd('unsuspendvc', {}, function(args, speaker)
    if replicatesignal then
        replicatesignal(VoiceChatService.ClientRetryJoin)

        if typeof(onVoiceModerated) ~= 'RBXScriptConnection' then
            onVoiceModerated = Services.VoiceChatInternal.LocalPlayerModerated:Connect(function(
            )
                task.wait(1)
                replicatesignal(VoiceChatService.ClientRetryJoin)
            end)
        end
    else
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing replicatesignal)]])
    end
end)
addcmd('muteallvcs', {}, function(args, speaker)
    Services.VoiceChatInternal:SubscribePauseAll(true)
end)
addcmd('unmuteallvcs', {}, function(args, speaker)
    Services.VoiceChatInternal:SubscribePauseAll(false)
end)
addcmd('mutevc', {}, function(args, speaker)
    for _, plr in getPlayer(args[1], speaker)do
        local __DARKLUA_CONTINUE_398 = false

        repeat
            if Players[plr] == speaker then
                __DARKLUA_CONTINUE_398 = true

                break
            end

            Services.VoiceChatInternal:SubscribePause(Players[plr].UserId, true)

            __DARKLUA_CONTINUE_398 = true
        until true

        if not __DARKLUA_CONTINUE_398 then
            break
        end
    end
end)
addcmd('unmutevc', {}, function(args, speaker)
    for _, plr in getPlayer(args[1], speaker)do
        local __DARKLUA_CONTINUE_399 = false

        repeat
            if Players[plr] == speaker then
                __DARKLUA_CONTINUE_399 = true

                break
            end

            Services.VoiceChatInternal:SubscribePause(Players[plr].UserId, false)

            __DARKLUA_CONTINUE_399 = true
        until true

        if not __DARKLUA_CONTINUE_399 then
            break
        end
    end
end)
addcmd('permadeath', {}, function(args, speaker)
    if replicatesignal then
        permadeath(speaker)
        notify('Permadeath', 'Enabled')
    else
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing replicatesignal)]])
    end
end)

local freezingua

frozenParts = {}

addcmd('freezeunanchored', {
    'freezeua',
}, function(args, speaker)
    local badnames = {
        'Head',
        'UpperTorso',
        'LowerTorso',
        'RightUpperArm',
        'LeftUpperArm',
        'RightLowerArm',
        'LeftLowerArm',
        'RightHand',
        'LeftHand',
        'RightUpperLeg',
        'LeftUpperLeg',
        'RightLowerLeg',
        'LeftLowerLeg',
        'RightFoot',
        'LeftFoot',
        'Torso',
        'Right Arm',
        'Left Arm',
        'Right Leg',
        'Left Leg',
        'HumanoidRootPart',
    }

    local function FREEZENOOB(v)
        if v.IsA(v, 'BasePart') and v.Anchored == false then
            local BADD = false

            for i = 1, #badnames do
                if v.Name == badnames[i] then
                    BADD = true
                end
            end

            if speaker.Character and v.IsDescendantOf(v, speaker.Character) then
                BADD = true
            end
            if BADD == false then
                for i, c in pairs(v.GetChildren(v))do
                    if c.IsA(c, 'BodyPosition') or c.IsA(c, 'BodyGyro') then
                        c.Destroy(c)
                    end
                end

                local bodypos = Instance.new('BodyPosition')

                bodypos.Parent = v
                bodypos.Position = v.Position
                bodypos.MaxForce = Vector3.new(math.huge, math.huge, math.huge)

                local bodygyro = Instance.new('BodyGyro')

                bodygyro.Parent = v
                bodygyro.CFrame = v.CFrame
                bodygyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)

                if not table.find(frozenParts, v) then
                    table.insert(frozenParts, v)
                end
            end
        end
    end

    for i, v in pairs(workspace.GetDescendants(workspace))do
        FREEZENOOB(v)
    end

    freezingua = workspace.DescendantAdded:Connect(FREEZENOOB)
end)
addcmd('thawunanchored', {
    'thawua',
    'unfreezeunanchored',
    'unfreezeua',
}, function(args, speaker)
    if freezingua then
        freezingua.Disconnect(freezingua)
    end

    for i, v in pairs(frozenParts)do
        for i, c in pairs(v.GetChildren(v))do
            if c.IsA(c, 'BodyPosition') or c.IsA(c, 'BodyGyro') then
                c.Destroy(c)
            end
        end
    end

    frozenParts = {}
end)
addcmd('tpunanchored', {
    'tpua',
}, function(args, speaker)
    local players = getPlayer(args[1], speaker)

    for i, v in pairs(players)do
        local Forces = {}

        for _, part in pairs(workspace.GetDescendants(workspace))do
            if Players[v].Character:FindFirstChild('Head') and part.IsA(part, 'BasePart') and part.Anchored == false and not part.IsDescendantOf(part, speaker.Character) and part.Name == 'Torso' == false and part.Name == 'Head' == false and part.Name == 'Right Arm' == false and part.Name == 'Left Arm' == false and part.Name == 'Right Leg' == false and part.Name == 'Left Leg' == false and part.Name == 'HumanoidRootPart' == false then
                for i, c in pairs(part.GetChildren(part))do
                    if c.IsA(c, 'BodyPosition') or c.IsA(c, 'BodyGyro') then
                        c.Destroy(c)
                    end
                end

                local ForceInstance = Instance.new('BodyPosition')

                ForceInstance.Parent = part
                ForceInstance.MaxForce = Vector3.new(math.huge, math.huge, math.huge)

                table.insert(Forces, ForceInstance)

                if not table.find(frozenParts, part) then
                    table.insert(frozenParts, part)
                end
            end
        end
        for i, c in pairs(Forces)do
            c.Position = Players[v].Character.Head.Position
        end
    end
end)

keycodeMap = {
    ['0'] = 48,
    ['1'] = 49,
    ['2'] = 50,
    ['3'] = 51,
    ['4'] = 52,
    ['5'] = 53,
    ['6'] = 54,
    ['7'] = 55,
    ['8'] = 56,
    ['9'] = 57,
    a = 65,
    b = 66,
    c = 67,
    d = 68,
    e = 69,
    f = 70,
    g = 71,
    h = 72,
    i = 73,
    j = 74,
    k = 75,
    l = 76,
    m = 77,
    n = 78,
    o = 79,
    p = 80,
    q = 81,
    r = 82,
    s = 83,
    t = 84,
    u = 85,
    v = 86,
    w = 87,
    x = 88,
    y = 89,
    z = 90,
    enter = 13,
    shift = 16,
    ctrl = 17,
    alt = 18,
    pause = 19,
    capslock = 20,
    spacebar = 32,
    space = 32,
    pageup = 33,
    pagedown = 34,
    ['end'] = 35,
    home = 36,
    left = 37,
    up = 38,
    right = 39,
    down = 40,
    insert = 45,
    delete = 46,
    f1 = 112,
    f2 = 113,
    f3 = 114,
    f4 = 115,
    f5 = 116,
    f6 = 117,
    f7 = 118,
    f8 = 119,
    f9 = 120,
    f10 = 121,
    f11 = 122,
    f12 = 123,
}
autoKeyPressing = false
cancelAutoKeyPress = nil

addcmd('autokeypress', {
    'keypress',
}, function(args, speaker)
    if keypress and keyrelease and args[1] then
        local code = keycodeMap[args[1]:lower()]

        if not code then
            notify('Auto Key Press', 'Invalid key')

            return
        end

        execCmd('unautokeypress')
        task.wait()

        local clickDelay = 0.1
        local releaseDelay = 0.1

        if args[2] and isNumber(args[2]) then
            clickDelay = args[2]
        end
        if args[3] and isNumber(args[3]) then
            releaseDelay = args[3]
        end

        autoKeyPressing = true
        cancelAutoKeyPress = UserInputService.InputBegan:Connect(function(
            input,
            gameProcessedEvent
        )
            if not gameProcessedEvent then
                if (input.KeyCode == Enum.KeyCode.Backspace and UserInputService.IsKeyDown(UserInputService, Enum.KeyCode.Equals)) or (input.KeyCode == Enum.KeyCode.Equals and UserInputService.IsKeyDown(UserInputService, Enum.KeyCode.Backspace)) then
                    autoKeyPressing = false

                    cancelAutoKeyPress.Disconnect(cancelAutoKeyPress)
                end
            end
        end)

        notify('Auto Key Press', 'Press [backspace] and [=] at the same time to stop')

        repeat
            task.wait(clickDelay)
            keypress(code)
            task.wait(releaseDelay)
            keyrelease(code)
        until autoKeyPressing == false

        if cancelAutoKeyPress then
            cancelAutoKeyPress.Disconnect(cancelAutoKeyPress)
            keyrelease(code)
        end
    else
        notify('Auto Key Press', "Your exploit doesn't have the ability to use auto key press")
    end
end)
addcmd('unautokeypress', {
    'noautokeypress',
    'unkeypress',
    'nokeypress',
}, function(args, speaker)
    autoKeyPressing = false

    if cancelAutoKeyPress then
        cancelAutoKeyPress.Disconnect(cancelAutoKeyPress)
    end
end)
addcmd('addplugin', {
    'plugin',
}, function(args, speaker)
    addPlugin(getstring(1))
end)
addcmd('removeplugin', {
    'deleteplugin',
}, function(args, speaker)
    deletePlugin(getstring(1))
end)
addcmd('reloadplugin', {}, function(args, speaker)
    local pluginName = getstring(1)

    deletePlugin(pluginName)
    task.wait(1)
    addPlugin(pluginName)
end)
addcmd('addallplugins', {
    'loadallplugins',
}, function(args, speaker)
    if not listfiles or not isfolder then
        notify('Incompatible Exploit', 
[[Your exploit does not support this command (missing listfiles/isfolder)]])

        return
    end

    for _, filePath in ipairs(listfiles(''))do
        local fileName = filePath.match(filePath, '([^/\\]+%.iy)$')

        if fileName and fileName.lower(fileName) ~= 'iy_fe.iy' and not isfolder(fileName) and not table.find(PluginsTable, fileName) then
            addPlugin(fileName)
        end
    end
end)
addcmd('removecmd', {
    'deletecmd',
}, function(args, speaker)
    removecmd(args[1])
end)

if IsOnMobile then
    local QuickCapture = Instance.new('TextButton')
    local UICorner = Instance.new('UICorner')

    QuickCapture.Name = randomString()
    QuickCapture.Parent = PARENT
    QuickCapture.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
    QuickCapture.BackgroundTransparency = 0.14
    QuickCapture.Position = UDim2.new(0.489, 0, 0, 0)
    QuickCapture.Size = UDim2.new(0, 32, 0, 33)
    QuickCapture.Font = Enum.Font.SourceSansBold
    QuickCapture.Text = 'IY'
    QuickCapture.TextColor3 = Color3.fromRGB(255, 255, 255)
    QuickCapture.TextSize = 20
    QuickCapture.TextWrapped = true
    QuickCapture.ZIndex = 10
    QuickCapture.Draggable = true
    UICorner.Name = randomString()
    UICorner.CornerRadius = UDim.new(0.5, 0)
    UICorner.Parent = QuickCapture

    QuickCapture.MouseButton1Click:Connect(function()
        Cmdbar.CaptureFocus(Cmdbar)
        maximizeHolder()
    end)
    table.insert(shade1, QuickCapture)
    table.insert(text1, QuickCapture)
end

pcall(function()
    Scale.Scale = math.max(Holder.AbsoluteSize.X / 1920, guiScale)
end)

Scale.Parent = ScaledHolder
ScaledHolder.Size = UDim2.fromScale(1 / Scale.Scale, 1 / Scale.Scale)

Scale.GetPropertyChangedSignal(Scale, 'Scale'):Connect(function()
    ScaledHolder.Size = UDim2.fromScale(1 / Scale.Scale, 1 / Scale.Scale)

    for _, v in ScaledHolder.GetDescendants(ScaledHolder)do
        if v.IsA(v, 'GuiObject') and v.Visible then
            v.Visible = false
            v.Visible = true
        end
    end
end)
updateColors(currentShade1, shade1)
updateColors(currentShade2, shade2)
updateColors(currentShade3, shade3)
updateColors(currentText1, text1)
updateColors(currentText2, text2)
updateColors(currentScroll, scroll)

if PluginsTable ~= nil or PluginsTable ~= {} then
    FindPlugins(PluginsTable)
end

eventEditor.RegisterEvent('OnExecute')
eventEditor.RegisterEvent('OnSpawn', {
    {
        Type = 'Player',
        Name = 'Player Filter ($1)',
    },
})
eventEditor.RegisterEvent('OnDied', {
    {
        Type = 'Player',
        Name = 'Player Filter ($1)',
    },
})
eventEditor.RegisterEvent('OnDamage', {
    {
        Type = 'Player',
        Name = 'Player Filter ($1)',
    },
    {
        Type = 'Number',
        Name = 'Below Health ($2)',
    },
})
eventEditor.RegisterEvent('OnKilled', {
    {
        Type = 'Player',
        Name = 'Victim Player ($1)',
    },
    {
        Type = 'Player',
        Name = 'Killer Player ($2)',
        Default = 1,
    },
})
eventEditor.RegisterEvent('OnJoin', {
    {
        Type = 'Player',
        Name = 'Player Filter ($1)',
        Default = 1,
    },
})
eventEditor.RegisterEvent('OnLeave', {
    {
        Type = 'Player',
        Name = 'Player Filter ($1)',
        Default = 1,
    },
})
eventEditor.RegisterEvent('OnChatted', {
    {
        Type = 'Player',
        Name = 'Player Filter ($1)',
        Default = 1,
    },
    {
        Type = 'String',
        Name = 'Message Filter ($2)',
    },
})

hookCharEvents = function(plr, instant)
    task.spawn(function()
        local char = plr.Character

        if not char then
            return
        end

        local humanoid = char.WaitForChild(char, 'Humanoid', 10)

        if not humanoid then
            return
        end

        local oldHealth = humanoid.Health

        humanoid.HealthChanged:Connect(function(health)
            local change = math.abs(oldHealth - health)

            if oldHealth > health then
                eventEditor.FireEvent('OnDamage', plr.Name, tonumber(health))
            end

            oldHealth = health
        end)
        humanoid.Died:Connect(function()
            eventEditor.FireEvent('OnDied', plr.Name)

            local killedBy = humanoid.FindFirstChild(humanoid, 'creator')

            if killedBy and killedBy.Value and killedBy.Value.Parent then
                eventEditor.FireEvent('OnKilled', plr.Name, killedBy.Name)
            end
        end)
    end)
end

Players.PlayerAdded:Connect(function(plr)
    eventEditor.FireEvent('OnJoin', plr.Name)

    if isLegacyChat then
        plr.Chatted:Connect(function(msg)
            eventEditor.FireEvent('OnChatted', tostring(plr), msg)
        end)
    end

    plr.CharacterAdded:Connect(function()
        eventEditor.FireEvent('OnSpawn', tostring(plr))
        hookCharEvents(plr)
    end)
    JoinLog(plr)

    if isLegacyChat then
        ChatLog(plr)
    end
    if ESPenabled then
        repeat
            task.wait(1)
        until plr.Character and getRoot(plr.Character)

        ESP(plr)
    end
    if CHMSenabled then
        repeat
            task.wait(1)
        until plr.Character and getRoot(plr.Character)

        CHMS(plr)
    end
end)

if not isLegacyChat then
    TextChatService.MessageReceived:Connect(function(message)
        if message.TextSource then
            local player = Players.GetPlayerByUserId(Players, message.TextSource.UserId)

            if not player then
                return
            end
            if logsEnabled == true then
                CreateLabel(player.Name, message.Text)
            end
            if player.UserId == Players.LocalPlayer.UserId then
                do_exec(message.Text, Players.LocalPlayer)
            end

            eventEditor.FireEvent('OnChatted', player.Name, message.Text)
            sendChatWebhook(player, message.Text)
        end
    end)
end

for _, plr in pairs(Players.GetPlayers(Players))do
    pcall(function()
        plr.CharacterAdded:Connect(function()
            eventEditor.FireEvent('OnSpawn', tostring(plr))
            hookCharEvents(plr)
        end)
        hookCharEvents(plr)
    end)
end

if spawnCmds and #spawnCmds > 0 then
    for i, v in pairs(spawnCmds)do
        eventEditor.AddCmd('OnSpawn', {
            v.COMMAND or '',
            {0},
            v.DELAY or 0,
        })
    end

    updatesaves()
end
if loadedEventData then
    eventEditor.LoadData(loadedEventData)
end

eventEditor.Refresh()
eventEditor.FireEvent('OnExecute')

if aliases and #aliases > 0 then
    local cmdMap = {}

    for i, v in pairs(cmds)do
        cmdMap[v.NAME:lower()] = v

        for _, alias in pairs(v.ALIAS)do
            cmdMap[alias.lower(alias)] = v
        end
    end

    for i = 1, #aliases do
        local cmd = string.lower(aliases[i].CMD)
        local alias = string.lower(aliases[i].ALIAS)

        if cmdMap[cmd] then
            customAlias[alias] = cmdMap[cmd]
        end
    end

    refreshaliases()
end

IYMouse.Move:Connect(checkTT)
CaptureService.CaptureBegan:Connect(function()
    PARENT.Enabled = false
end)
CaptureService.CaptureEnded:Connect(function()
    task.delay(0.1, function()
        PARENT.Enabled = true
    end)
end)
task.spawn(function()
    local success, latestVersionInfo = pcall(function()
        local versionJson = game.HttpGet(game, 
[[https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/version]])

        return HttpService.JSONDecode(HttpService, versionJson)
    end)

    if success then
        if currentVersion ~= latestVersionInfo.Version then
            notify('Outdated', 'Get the new version at infyiff.github.io')
        end
        if latestVersionInfo.Announcement and latestVersionInfo.Announcement ~= '' then
            local AnnGUI = Instance.new('Frame')
            local background = Instance.new('Frame')
            local TextBox = Instance.new('TextLabel')
            local shadow = Instance.new('Frame')
            local PopupText = Instance.new('TextLabel')
            local Exit = Instance.new('TextButton')
            local ExitImage = Instance.new('ImageLabel')

            AnnGUI.Name = randomString()
            AnnGUI.Parent = ScaledHolder
            AnnGUI.Active = true
            AnnGUI.BackgroundTransparency = 1
            AnnGUI.Position = UDim2.new(0.5, -180, 0, -500)
            AnnGUI.Size = UDim2.new(0, 360, 0, 20)
            AnnGUI.ZIndex = 10
            background.Name = 'background'
            background.Parent = AnnGUI
            background.Active = true
            background.BackgroundColor3 = currentShade1
            background.BorderSizePixel = 0
            background.Position = UDim2.new(0, 0, 0, 20)
            background.Size = UDim2.new(0, 360, 0, 150)
            background.ZIndex = 10
            TextBox.Parent = background
            TextBox.BackgroundTransparency = 1
            TextBox.Position = UDim2.new(0, 5, 0, 5)
            TextBox.Size = UDim2.new(0, 350, 0, 140)
            TextBox.Font = Enum.Font.SourceSans
            TextBox.TextSize = 18
            TextBox.TextWrapped = true
            TextBox.Text = latestVersionInfo.Announcement
            TextBox.TextColor3 = currentText1
            TextBox.TextXAlignment = Enum.TextXAlignment.Left
            TextBox.TextYAlignment = Enum.TextYAlignment.Top
            TextBox.ZIndex = 10
            shadow.Name = 'shadow'
            shadow.Parent = AnnGUI
            shadow.BackgroundColor3 = currentShade2
            shadow.BorderSizePixel = 0
            shadow.Size = UDim2.new(0, 360, 0, 20)
            shadow.ZIndex = 10
            PopupText.Name = 'PopupText'
            PopupText.Parent = shadow
            PopupText.BackgroundTransparency = 1
            PopupText.Size = UDim2.new(1, 0, 0.95, 0)
            PopupText.ZIndex = 10
            PopupText.Font = Enum.Font.SourceSans
            PopupText.TextSize = 14
            PopupText.Text = 'Server Announcement'
            PopupText.TextColor3 = currentText1
            PopupText.TextWrapped = true
            Exit.Name = 'Exit'
            Exit.Parent = shadow
            Exit.BackgroundTransparency = 1
            Exit.Position = UDim2.new(1, -20, 0, 0)
            Exit.Size = UDim2.new(0, 20, 0, 20)
            Exit.Text = ''
            Exit.ZIndex = 10
            ExitImage.Parent = Exit
            ExitImage.BackgroundColor3 = Color3.new(1, 1, 1)
            ExitImage.BackgroundTransparency = 1
            ExitImage.Position = UDim2.new(0, 5, 0, 5)
            ExitImage.Size = UDim2.new(0, 10, 0, 10)
            ExitImage.Image = getcustomasset('infiniteyield/assets/close.png')
            ExitImage.ZIndex = 10

            task.wait(1)
            AnnGUI.TweenPosition(AnnGUI, UDim2.new(0.5, -180, 0, 150), 'InOut', 'Quart', 0.5, true, nil)
            Exit.MouseButton1Click:Connect(function()
                AnnGUI.TweenPosition(AnnGUI, UDim2.new(0.5, -180, 0, -500), 'InOut', 'Quart', 0.5, true, nil)
                task.wait(0.6)
                AnnGUI.Destroy(AnnGUI)
            end)
        end
    end
end)
task.spawn(function()
    task.wait()
    Credits.TweenPosition(Credits, UDim2.new(0, 0, 0.9, 0), 'Out', 'Quart', 0.2)
    Logo.TweenSizeAndPosition(Logo, UDim2.new(0, 175, 0, 175), UDim2.new(0, 37, 0, 45), 'Out', 'Quart', 0.3)
    task.wait(1)

    local OutInfo = TweenInfo.new(1.6809, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, 0, false, 0)

    TweenService.Create(TweenService, Logo, OutInfo, {ImageTransparency = 1}):Play()
    TweenService.Create(TweenService, IntroBackground, OutInfo, {BackgroundTransparency = 1}):Play()
    Credits.TweenPosition(Credits, UDim2.new(0, 0, 0.9, 30), 'Out', 'Quart', 0.2)
    task.wait(0.3)
    Logo.Destroy(Logo)
    Credits.Destroy(Credits)
    IntroBackground.Destroy(IntroBackground)
    minimizeHolder()
end)
